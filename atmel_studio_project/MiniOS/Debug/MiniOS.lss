
MiniOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b3ec  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b3ec  0040b3ec  0001b3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000e30  20000000  0040b3f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000542c  20000e30  0040c224  00020e30  2**2
                  ALLOC
  4 .stack        00003004  2000625c  00411650  00020e30  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020e30  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020e5a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00030ab3  00000000  00000000  00020eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006f85  00000000  00000000  00051966  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00012875  00000000  00000000  000588eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000015c0  00000000  00000000  0006b160  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001778  00000000  00000000  0006c720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d5bb  00000000  00000000  0006de98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001bbfe  00000000  00000000  0008b453  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005fc46  00000000  00000000  000a7051  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000040c0  00000000  00000000  00106c98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 92 00 20 d5 39 40 00 d1 39 40 00 6f 07 40 00     `.. .9@..9@.o.@.
  400010:	6d 07 40 00 69 07 40 00 6b 07 40 00 00 00 00 00     m.@.i.@.k.@.....
	...
  40002c:	9f 07 40 00 d1 39 40 00 00 00 00 00 5d 07 40 00     ..@..9@.....].@.
  40003c:	63 07 40 00 d1 39 40 00 d1 39 40 00 d1 39 40 00     c.@..9@..9@..9@.
  40004c:	65 09 40 00 d1 39 40 00 d1 39 40 00 d1 39 40 00     e.@..9@..9@..9@.
  40005c:	d1 39 40 00 d1 39 40 00 f9 0e 40 00 00 00 00 00     .9@..9@...@.....
  40006c:	59 31 40 00 6d 31 40 00 81 31 40 00 d1 39 40 00     Y1@.m1@..1@..9@.
  40007c:	35 0f 40 00 00 00 00 00 00 00 00 00 d1 39 40 00     5.@..........9@.
  40008c:	d1 39 40 00 d1 39 40 00 d1 39 40 00 d1 39 40 00     .9@..9@..9@..9@.
  40009c:	d1 39 40 00 d1 39 40 00 d1 39 40 00 d1 39 40 00     .9@..9@..9@..9@.
  4000ac:	d1 39 40 00 d1 39 40 00 d1 39 40 00 d1 39 40 00     .9@..9@..9@..9@.
  4000bc:	d1 39 40 00 d1 39 40 00 d1 39 40 00 d1 39 40 00     .9@..9@..9@..9@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000e30 	.word	0x20000e30
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040b3f4 	.word	0x0040b3f4

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	0040b3f4 	.word	0x0040b3f4
  40012c:	20000e34 	.word	0x20000e34
  400130:	0040b3f4 	.word	0x0040b3f4
  400134:	00000000 	.word	0x00000000

00400138 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400138:	4b03      	ldr	r3, [pc, #12]	; (400148 <rtt_init+0x10>)
  40013a:	681b      	ldr	r3, [r3, #0]
  40013c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400140:	4319      	orrs	r1, r3
  400142:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400144:	2000      	movs	r0, #0
  400146:	4770      	bx	lr
  400148:	20000e4c 	.word	0x20000e4c

0040014c <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  40014c:	b941      	cbnz	r1, 400160 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40014e:	4a09      	ldr	r2, [pc, #36]	; (400174 <rtt_sel_source+0x28>)
  400150:	6813      	ldr	r3, [r2, #0]
  400152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400156:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400158:	6802      	ldr	r2, [r0, #0]
  40015a:	4313      	orrs	r3, r2
  40015c:	6003      	str	r3, [r0, #0]
  40015e:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400160:	4a04      	ldr	r2, [pc, #16]	; (400174 <rtt_sel_source+0x28>)
  400162:	6813      	ldr	r3, [r2, #0]
  400164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400168:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40016a:	6802      	ldr	r2, [r0, #0]
  40016c:	4313      	orrs	r3, r2
  40016e:	6003      	str	r3, [r0, #0]
  400170:	4770      	bx	lr
  400172:	bf00      	nop
  400174:	20000e4c 	.word	0x20000e4c

00400178 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400178:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40017a:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40017e:	4b02      	ldr	r3, [pc, #8]	; (400188 <rtt_disable_interrupt+0x10>)
  400180:	681b      	ldr	r3, [r3, #0]
  400182:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400184:	6001      	str	r1, [r0, #0]
  400186:	4770      	bx	lr
  400188:	20000e4c 	.word	0x20000e4c

0040018c <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  40018c:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  40018e:	6883      	ldr	r3, [r0, #8]
  400190:	429a      	cmp	r2, r3
  400192:	d003      	beq.n	40019c <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400194:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  400196:	6883      	ldr	r3, [r0, #8]
  400198:	4293      	cmp	r3, r2
  40019a:	d1fb      	bne.n	400194 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  40019c:	4618      	mov	r0, r3
  40019e:	4770      	bx	lr

004001a0 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4001a0:	68c0      	ldr	r0, [r0, #12]
}
  4001a2:	4770      	bx	lr

004001a4 <commands_ls>:
#include "minios/system.h"

/*
*
*/
void commands_ls( uint8_t* param, uint32_t num_params ){
  4001a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4001a8:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
	uint8_t line_to_print[ MEM_FAT_MAX_FNAME_LENGTH + strlen("       ") + 9 + strlen( " Bytes" )  + 1 ];  //assuming a file cant have more than 9 digits of size in KB
	uint32_t num_files;
	double size_of_file;
	
	//print file list
	if( ( num_files = hal_nvmem_fat_file_list( file_list, NUM_OF_FILES_TO_READ ) ) > 0 ){
  4001ac:	2114      	movs	r1, #20
  4001ae:	a811      	add	r0, sp, #68	; 0x44
  4001b0:	4b14      	ldr	r3, [pc, #80]	; (400204 <commands_ls+0x60>)
  4001b2:	4798      	blx	r3
  4001b4:	b310      	cbz	r0, 4001fc <commands_ls+0x58>
  4001b6:	ac11      	add	r4, sp, #68	; 0x44
  4001b8:	ebc0 1540 	rsb	r5, r0, r0, lsl #5
  4001bc:	4425      	add	r5, r4
		
		for( uint32_t i=0; i<num_files; i++ ){
			//finds file size
			size_of_file = hal_nvmem_fat_file_size( file_list[i] );
  4001be:	4f12      	ldr	r7, [pc, #72]	; (400208 <commands_ls+0x64>)
  4001c0:	4e12      	ldr	r6, [pc, #72]	; (40020c <commands_ls+0x68>)
			size_of_file /= 1024;
  4001c2:	f04f 0800 	mov.w	r8, #0
  4001c6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 400220 <commands_ls+0x7c>
			size_of_file = hal_nvmem_fat_file_size( file_list[i] );
  4001ca:	4620      	mov	r0, r4
  4001cc:	47b8      	blx	r7
  4001ce:	47b0      	blx	r6
			size_of_file /= 1024;
  4001d0:	4642      	mov	r2, r8
  4001d2:	464b      	mov	r3, r9
  4001d4:	f8df a04c 	ldr.w	sl, [pc, #76]	; 400224 <commands_ls+0x80>
  4001d8:	47d0      	blx	sl
			
			//prepares line to be printed
			sprintf( line_to_print, "%s       %2.1f KB", file_list[i], size_of_file );
  4001da:	e9cd 0100 	strd	r0, r1, [sp]
  4001de:	4622      	mov	r2, r4
  4001e0:	490b      	ldr	r1, [pc, #44]	; (400210 <commands_ls+0x6c>)
  4001e2:	a803      	add	r0, sp, #12
  4001e4:	4b0b      	ldr	r3, [pc, #44]	; (400214 <commands_ls+0x70>)
  4001e6:	4798      	blx	r3
			
			//print
			console_puts( line_to_print );
  4001e8:	a803      	add	r0, sp, #12
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <commands_ls+0x74>)
  4001ec:	4798      	blx	r3
  4001ee:	341f      	adds	r4, #31
		for( uint32_t i=0; i<num_files; i++ ){
  4001f0:	42ac      	cmp	r4, r5
  4001f2:	d1ea      	bne.n	4001ca <commands_ls+0x26>
		}
	}
	else{
		console_puts( "No files found" );
	}
}
  4001f4:	f50d 7d2c 	add.w	sp, sp, #688	; 0x2b0
  4001f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		console_puts( "No files found" );
  4001fc:	4807      	ldr	r0, [pc, #28]	; (40021c <commands_ls+0x78>)
  4001fe:	4b06      	ldr	r3, [pc, #24]	; (400218 <commands_ls+0x74>)
  400200:	4798      	blx	r3
}
  400202:	e7f7      	b.n	4001f4 <commands_ls+0x50>
  400204:	004010d9 	.word	0x004010d9
  400208:	00401045 	.word	0x00401045
  40020c:	00405be5 	.word	0x00405be5
  400210:	0040a6ac 	.word	0x0040a6ac
  400214:	00406531 	.word	0x00406531
  400218:	00400329 	.word	0x00400329
  40021c:	0040a6c0 	.word	0x0040a6c0
  400220:	3f500000 	.word	0x3f500000
  400224:	00405cd1 	.word	0x00405cd1

00400228 <commands_cat>:

/*
*
*/
void commands_cat( uint8_t* param, uint32_t num_params ){
  400228:	b500      	push	{lr}
  40022a:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
	#define MAX_CHARS_IN_FILE	2048 //2Kb for now
	uint8_t buffer[MAX_CHARS_IN_FILE];
	
	//checks param
	if( num_params == 0){
  40022e:	b179      	cbz	r1, 400250 <commands_cat+0x28>
	else if( size > MAX_CHARS_IN_FILE ){
		 println( "Cat: Only files of size 2Kb or less are supported" );
	}*/
	
	//reads
	uint32_t bytes_read =  hal_nvmem_fat_file_read( param, buffer, MAX_CHARS_IN_FILE );
  400230:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400234:	4669      	mov	r1, sp
  400236:	4b08      	ldr	r3, [pc, #32]	; (400258 <commands_cat+0x30>)
  400238:	4798      	blx	r3
	
	//turns buffer into a string
	buffer[bytes_read-1] = '\0';
  40023a:	4468      	add	r0, sp
  40023c:	2300      	movs	r3, #0
  40023e:	f800 3c01 	strb.w	r3, [r0, #-1]
	
	//print
	console_puts( buffer );
  400242:	4668      	mov	r0, sp
  400244:	4b05      	ldr	r3, [pc, #20]	; (40025c <commands_cat+0x34>)
  400246:	4798      	blx	r3
}
  400248:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
  40024c:	f85d fb04 	ldr.w	pc, [sp], #4
		console_puts( "Specify file" );
  400250:	4803      	ldr	r0, [pc, #12]	; (400260 <commands_cat+0x38>)
  400252:	4b02      	ldr	r3, [pc, #8]	; (40025c <commands_cat+0x34>)
  400254:	4798      	blx	r3
  400256:	e7f7      	b.n	400248 <commands_cat+0x20>
  400258:	00401071 	.word	0x00401071
  40025c:	00400329 	.word	0x00400329
  400260:	0040a680 	.word	0x0040a680

00400264 <commands_date>:

/*
*
*/
void commands_date( uint8_t* param, uint32_t num_params  ){
  400264:	b530      	push	{r4, r5, lr}
  400266:	b09f      	sub	sp, #124	; 0x7c
	#define MAX_DATE_LENGTH	26
	tTime t;
	uint8_t* months[] = {	"January", "February", "March", "April", "May",
  400268:	ac0c      	add	r4, sp, #48	; 0x30
  40026a:	4d12      	ldr	r5, [pc, #72]	; (4002b4 <commands_date+0x50>)
  40026c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40026e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400274:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  400278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							"June", "July", "August", "September", "October",
							"November", "December"  };
							
	hal_io_clock_read(&t);
  40027c:	a818      	add	r0, sp, #96	; 0x60
  40027e:	4b0e      	ldr	r3, [pc, #56]	; (4002b8 <commands_date+0x54>)
  400280:	4798      	blx	r3
	
	uint8_t line[MAX_DATE_LENGTH + 1];
	sprintf( line, "%s %d, %d %02d:%02d:%02d", months[t.month-1], t.day, t.year, t.hours, t.minutes, t.seconds );
  400282:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  400284:	aa1e      	add	r2, sp, #120	; 0x78
  400286:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40028a:	f853 2c4c 	ldr.w	r2, [r3, #-76]
  40028e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  400290:	9303      	str	r3, [sp, #12]
  400292:	9b19      	ldr	r3, [sp, #100]	; 0x64
  400294:	9302      	str	r3, [sp, #8]
  400296:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  400298:	9301      	str	r3, [sp, #4]
  40029a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40029c:	9300      	str	r3, [sp, #0]
  40029e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4002a0:	4906      	ldr	r1, [pc, #24]	; (4002bc <commands_date+0x58>)
  4002a2:	a805      	add	r0, sp, #20
  4002a4:	4c06      	ldr	r4, [pc, #24]	; (4002c0 <commands_date+0x5c>)
  4002a6:	47a0      	blx	r4
	
	console_puts( line );
  4002a8:	a805      	add	r0, sp, #20
  4002aa:	4b06      	ldr	r3, [pc, #24]	; (4002c4 <commands_date+0x60>)
  4002ac:	4798      	blx	r3
}
  4002ae:	b01f      	add	sp, #124	; 0x7c
  4002b0:	bd30      	pop	{r4, r5, pc}
  4002b2:	bf00      	nop
  4002b4:	0040a650 	.word	0x0040a650
  4002b8:	00400afd 	.word	0x00400afd
  4002bc:	0040a690 	.word	0x0040a690
  4002c0:	00406531 	.word	0x00406531
  4002c4:	00400329 	.word	0x00400329

004002c8 <commands_sysinfo>:

/*
*
*/
void commands_sysinfo( uint8_t* param, uint32_t num_params  ){
  4002c8:	b510      	push	{r4, lr}
  4002ca:	b084      	sub	sp, #16
	#define MAX_INFO_LENGTH 15
	uint8_t line[MAX_INFO_LENGTH + 1];
	sprintf( line, "%sv%s", SYS_NAME, SYS_VERSION );
  4002cc:	4b05      	ldr	r3, [pc, #20]	; (4002e4 <commands_sysinfo+0x1c>)
  4002ce:	4a06      	ldr	r2, [pc, #24]	; (4002e8 <commands_sysinfo+0x20>)
  4002d0:	4906      	ldr	r1, [pc, #24]	; (4002ec <commands_sysinfo+0x24>)
  4002d2:	4668      	mov	r0, sp
  4002d4:	4c06      	ldr	r4, [pc, #24]	; (4002f0 <commands_sysinfo+0x28>)
  4002d6:	47a0      	blx	r4
	
	console_puts( line );
  4002d8:	4668      	mov	r0, sp
  4002da:	4b06      	ldr	r3, [pc, #24]	; (4002f4 <commands_sysinfo+0x2c>)
  4002dc:	4798      	blx	r3
}
  4002de:	b004      	add	sp, #16
  4002e0:	bd10      	pop	{r4, pc}
  4002e2:	bf00      	nop
  4002e4:	0040a6d0 	.word	0x0040a6d0
  4002e8:	0040a6d4 	.word	0x0040a6d4
  4002ec:	0040a6dc 	.word	0x0040a6dc
  4002f0:	00406531 	.word	0x00406531
  4002f4:	00400329 	.word	0x00400329

004002f8 <print>:
	print(string);
	print(newline);
}

static void print( uint8_t* string ){
	while( *string )
  4002f8:	7801      	ldrb	r1, [r0, #0]
  4002fa:	b151      	cbz	r1, 400312 <print+0x1a>
static void print( uint8_t* string ){
  4002fc:	b570      	push	{r4, r5, r6, lr}
  4002fe:	4604      	mov	r4, r0
		hal_io_serial_putc( SerialA, *string++ );
  400300:	2600      	movs	r6, #0
  400302:	4d04      	ldr	r5, [pc, #16]	; (400314 <print+0x1c>)
  400304:	4630      	mov	r0, r6
  400306:	47a8      	blx	r5
	while( *string )
  400308:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  40030c:	2900      	cmp	r1, #0
  40030e:	d1f9      	bne.n	400304 <print+0xc>
  400310:	bd70      	pop	{r4, r5, r6, pc}
  400312:	4770      	bx	lr
  400314:	00400e55 	.word	0x00400e55

00400318 <console_init>:
	newline = SYS_CONSOLE_NEWLINE;
  400318:	4a01      	ldr	r2, [pc, #4]	; (400320 <console_init+0x8>)
  40031a:	4b02      	ldr	r3, [pc, #8]	; (400324 <console_init+0xc>)
  40031c:	601a      	str	r2, [r3, #0]
  40031e:	4770      	bx	lr
  400320:	0040a7e8 	.word	0x0040a7e8
  400324:	20000e50 	.word	0x20000e50

00400328 <console_puts>:
void console_puts( uint8_t* string ){
  400328:	b510      	push	{r4, lr}
	print(string);
  40032a:	4c03      	ldr	r4, [pc, #12]	; (400338 <console_puts+0x10>)
  40032c:	47a0      	blx	r4
	print(newline);
  40032e:	4b03      	ldr	r3, [pc, #12]	; (40033c <console_puts+0x14>)
  400330:	6818      	ldr	r0, [r3, #0]
  400332:	47a0      	blx	r4
  400334:	bd10      	pop	{r4, pc}
  400336:	bf00      	nop
  400338:	004002f9 	.word	0x004002f9
  40033c:	20000e50 	.word	0x20000e50

00400340 <console_begin>:
* Begins the console
*
* Shows the prompt and waits for user input
*
*/
void console_begin( void ){
  400340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400344:	b0bf      	sub	sp, #252	; 0xfc
	}//end while
}

static void print_welcome_message(void){
	//line1, empty lines
	console_puts( "" );
  400346:	4f5b      	ldr	r7, [pc, #364]	; (4004b4 <console_begin+0x174>)
  400348:	4638      	mov	r0, r7
  40034a:	4c5b      	ldr	r4, [pc, #364]	; (4004b8 <console_begin+0x178>)
  40034c:	47a0      	blx	r4
	
	//line2, welcome
	uint8_t welcome_line[ MAX_LINE_LEN ];
	sprintf( welcome_line, "Welcome to %sv%s", SYS_NAME, SYS_VERSION );
  40034e:	4e5b      	ldr	r6, [pc, #364]	; (4004bc <console_begin+0x17c>)
  400350:	4b5b      	ldr	r3, [pc, #364]	; (4004c0 <console_begin+0x180>)
  400352:	4632      	mov	r2, r6
  400354:	495b      	ldr	r1, [pc, #364]	; (4004c4 <console_begin+0x184>)
  400356:	a80c      	add	r0, sp, #48	; 0x30
  400358:	4d5b      	ldr	r5, [pc, #364]	; (4004c8 <console_begin+0x188>)
  40035a:	47a8      	blx	r5
	console_puts( welcome_line );
  40035c:	a80c      	add	r0, sp, #48	; 0x30
  40035e:	47a0      	blx	r4
	
	//line3, time
	tTime clock;
	hal_io_clock_read( &clock );
  400360:	a806      	add	r0, sp, #24
  400362:	4b5a      	ldr	r3, [pc, #360]	; (4004cc <console_begin+0x18c>)
  400364:	4798      	blx	r3
	sprintf( welcome_line, "%s %d %d,  %d hrs %d mins", day_to_month[clock.month-1], clock.day, clock.year, clock.hours, clock.minutes );
  400366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  400368:	3b01      	subs	r3, #1
  40036a:	4a59      	ldr	r2, [pc, #356]	; (4004d0 <console_begin+0x190>)
  40036c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  400370:	9b07      	ldr	r3, [sp, #28]
  400372:	9302      	str	r3, [sp, #8]
  400374:	9b08      	ldr	r3, [sp, #32]
  400376:	9301      	str	r3, [sp, #4]
  400378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40037a:	9300      	str	r3, [sp, #0]
  40037c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40037e:	4955      	ldr	r1, [pc, #340]	; (4004d4 <console_begin+0x194>)
  400380:	a80c      	add	r0, sp, #48	; 0x30
  400382:	47a8      	blx	r5
	console_puts( welcome_line );
  400384:	a80c      	add	r0, sp, #48	; 0x30
  400386:	47a0      	blx	r4
	
	//line4, empty line
	console_puts( "" );
  400388:	4638      	mov	r0, r7
  40038a:	47a0      	blx	r4
	sprintf( prompt_message, "%s@%s:%s%s ", DUMMY_USER, SYS_NAME, DEFAULT_PATH, CONSOLE_SYMBOL );
  40038c:	4b52      	ldr	r3, [pc, #328]	; (4004d8 <console_begin+0x198>)
  40038e:	9301      	str	r3, [sp, #4]
  400390:	4b52      	ldr	r3, [pc, #328]	; (4004dc <console_begin+0x19c>)
  400392:	9300      	str	r3, [sp, #0]
  400394:	4633      	mov	r3, r6
  400396:	4a52      	ldr	r2, [pc, #328]	; (4004e0 <console_begin+0x1a0>)
  400398:	4952      	ldr	r1, [pc, #328]	; (4004e4 <console_begin+0x1a4>)
  40039a:	a838      	add	r0, sp, #224	; 0xe0
  40039c:	47a8      	blx	r5
		
		if( c != '\n' && c!= '\r')
			hal_io_serial_putc( SerialA, c );	//transmits most chars for visual feedback
		
		//filters non-alphanumeric(UNION)newline(UNION)' '(UNION)'.' characters
		if( is_alpha(c) || is_number(c) || c == '\n' || c == ' ' || c == '.'  ){
  40039e:	f8df b168 	ldr.w	fp, [pc, #360]	; 400508 <console_begin+0x1c8>
			hal_io_serial_putc( SerialA, c );	//transmits most chars for visual feedback
  4003a2:	f8df a168 	ldr.w	sl, [pc, #360]	; 40050c <console_begin+0x1cc>
		c = hal_io_serial_getc(SerialA);
  4003a6:	f04f 0800 	mov.w	r8, #0
  4003aa:	e047      	b.n	40043c <console_begin+0xfc>
		if( is_alpha(c) || is_number(c) || c == '\n' || c == ' ' || c == '.'  ){
  4003ac:	2c0a      	cmp	r4, #10
  4003ae:	d065      	beq.n	40047c <console_begin+0x13c>
  4003b0:	f1a4 0320 	sub.w	r3, r4, #32
  4003b4:	b2db      	uxtb	r3, r3
  4003b6:	2b19      	cmp	r3, #25
  4003b8:	d806      	bhi.n	4003c8 <console_begin+0x88>
  4003ba:	fa2b f303 	lsr.w	r3, fp, r3
  4003be:	f013 0f01 	tst.w	r3, #1
  4003c2:	d001      	beq.n	4003c8 <console_begin+0x88>
			 *buffer++ = c;
  4003c4:	702c      	strb	r4, [r5, #0]
  4003c6:	3501      	adds	r5, #1
		c = hal_io_serial_getc(SerialA);
  4003c8:	4640      	mov	r0, r8
  4003ca:	47b0      	blx	r6
  4003cc:	4604      	mov	r4, r0
		if( c != '\n' && c!= '\r')
  4003ce:	280a      	cmp	r0, #10
  4003d0:	d04e      	beq.n	400470 <console_begin+0x130>
  4003d2:	280d      	cmp	r0, #13
  4003d4:	d0ec      	beq.n	4003b0 <console_begin+0x70>
			hal_io_serial_putc( SerialA, c );	//transmits most chars for visual feedback
  4003d6:	4601      	mov	r1, r0
  4003d8:	4640      	mov	r0, r8
  4003da:	47d0      	blx	sl
	//go to newline
	console_puts("");
}

static bool is_alpha(uint8_t c){
	return ( c >= 'A' && c<='Z' ) || ( c>= 'a' && c<= 'z' );
  4003dc:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
  4003e0:	b2db      	uxtb	r3, r3
  4003e2:	2b19      	cmp	r3, #25
  4003e4:	d9ee      	bls.n	4003c4 <console_begin+0x84>
  4003e6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
		if( is_alpha(c) || is_number(c) || c == '\n' || c == ' ' || c == '.'  ){
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	2b19      	cmp	r3, #25
  4003ee:	d8dd      	bhi.n	4003ac <console_begin+0x6c>
			 *buffer++ = c;
  4003f0:	702c      	strb	r4, [r5, #0]
  4003f2:	3501      	adds	r5, #1
  4003f4:	e7e8      	b.n	4003c8 <console_begin+0x88>
  4003f6:	a91c      	add	r1, sp, #112	; 0x70
	while( *param++ = *line++ );
  4003f8:	f813 2b01 	ldrb.w	r2, [r3], #1
  4003fc:	f801 2b01 	strb.w	r2, [r1], #1
  400400:	2a00      	cmp	r2, #0
  400402:	d1f9      	bne.n	4003f8 <console_begin+0xb8>
	return 1; 
  400404:	2301      	movs	r3, #1
  400406:	9305      	str	r3, [sp, #20]
  400408:	4d37      	ldr	r5, [pc, #220]	; (4004e8 <console_begin+0x1a8>)
	int32_t index = 0;
  40040a:	2700      	movs	r7, #0
	while( strcmp( *all_cmds, SENTINEL_CMD ) != EQUAL ){
  40040c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 400510 <console_begin+0x1d0>
  400410:	4e36      	ldr	r6, [pc, #216]	; (4004ec <console_begin+0x1ac>)
  400412:	f855 4b04 	ldr.w	r4, [r5], #4
  400416:	4649      	mov	r1, r9
  400418:	4620      	mov	r0, r4
  40041a:	47b0      	blx	r6
  40041c:	b1a0      	cbz	r0, 400448 <console_begin+0x108>
		if( strcmp( *all_cmds, cmd ) == EQUAL ){
  40041e:	a922      	add	r1, sp, #136	; 0x88
  400420:	4620      	mov	r0, r4
  400422:	47b0      	blx	r6
  400424:	b108      	cbz	r0, 40042a <console_begin+0xea>
		index++;
  400426:	3701      	adds	r7, #1
  400428:	e7f3      	b.n	400412 <console_begin+0xd2>
		if( cmd_index != INVALID_CMD ){
  40042a:	f1b7 3fff 	cmp.w	r7, #4294967295
  40042e:	d00b      	beq.n	400448 <console_begin+0x108>
			((void(*)(uint8_t*, uint32_t))(cmd_ptrs[cmd_index]))( param, num_params ); 
  400430:	4b2f      	ldr	r3, [pc, #188]	; (4004f0 <console_begin+0x1b0>)
  400432:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
  400436:	9905      	ldr	r1, [sp, #20]
  400438:	a81c      	add	r0, sp, #112	; 0x70
  40043a:	4798      	blx	r3
		print( prompt_message );
  40043c:	a838      	add	r0, sp, #224	; 0xe0
  40043e:	4b2d      	ldr	r3, [pc, #180]	; (4004f4 <console_begin+0x1b4>)
  400440:	4798      	blx	r3
  400442:	ad28      	add	r5, sp, #160	; 0xa0
		c = hal_io_serial_getc(SerialA);
  400444:	4e2c      	ldr	r6, [pc, #176]	; (4004f8 <console_begin+0x1b8>)
  400446:	e7bf      	b.n	4003c8 <console_begin+0x88>
			sched_rval = scheduler_process_create( cmd, cmd, &loader_rval );
  400448:	aa0c      	add	r2, sp, #48	; 0x30
  40044a:	a922      	add	r1, sp, #136	; 0x88
  40044c:	4608      	mov	r0, r1
  40044e:	4b2b      	ldr	r3, [pc, #172]	; (4004fc <console_begin+0x1bc>)
  400450:	4798      	blx	r3
			if( sched_rval == SCHEDULER_PROCESS_CREATE_SUCCESS ){
  400452:	2801      	cmp	r0, #1
  400454:	d007      	beq.n	400466 <console_begin+0x126>
				if( loader_rval == LOADER_NO_APP_FOUND) 		console_puts( "Command not recognized" );
  400456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  400458:	b133      	cbz	r3, 400468 <console_begin+0x128>
				else if( loader_rval == LOADER_APP_TOO_LARGE )	console_puts( "Application is too large" );
  40045a:	2b01      	cmp	r3, #1
  40045c:	d1ee      	bne.n	40043c <console_begin+0xfc>
  40045e:	4828      	ldr	r0, [pc, #160]	; (400500 <console_begin+0x1c0>)
  400460:	4b15      	ldr	r3, [pc, #84]	; (4004b8 <console_begin+0x178>)
  400462:	4798      	blx	r3
  400464:	e7ea      	b.n	40043c <console_begin+0xfc>
  400466:	e7fe      	b.n	400466 <console_begin+0x126>
				if( loader_rval == LOADER_NO_APP_FOUND) 		console_puts( "Command not recognized" );
  400468:	4826      	ldr	r0, [pc, #152]	; (400504 <console_begin+0x1c4>)
  40046a:	4b13      	ldr	r3, [pc, #76]	; (4004b8 <console_begin+0x178>)
  40046c:	4798      	blx	r3
  40046e:	e7e5      	b.n	40043c <console_begin+0xfc>
			 *buffer++ = c;
  400470:	1c6b      	adds	r3, r5, #1
  400472:	7028      	strb	r0, [r5, #0]
	}while( c != '\n' );
  400474:	280a      	cmp	r0, #10
  400476:	d003      	beq.n	400480 <console_begin+0x140>
			 *buffer++ = c;
  400478:	461d      	mov	r5, r3
  40047a:	e7a5      	b.n	4003c8 <console_begin+0x88>
  40047c:	1c6b      	adds	r3, r5, #1
  40047e:	702c      	strb	r4, [r5, #0]
	buffer[-1] = '\0';
  400480:	f803 8c01 	strb.w	r8, [r3, #-1]
	console_puts("");
  400484:	480b      	ldr	r0, [pc, #44]	; (4004b4 <console_begin+0x174>)
  400486:	4b0c      	ldr	r3, [pc, #48]	; (4004b8 <console_begin+0x178>)
  400488:	4798      	blx	r3
  40048a:	aa22      	add	r2, sp, #136	; 0x88
  40048c:	a928      	add	r1, sp, #160	; 0xa0
		c = *cmd++ = *line++;
  40048e:	f811 3b01 	ldrb.w	r3, [r1], #1
  400492:	f802 3b01 	strb.w	r3, [r2], #1
	}while( c != ' ' && c != '\0' );
  400496:	f013 0fdf 	tst.w	r3, #223	; 0xdf
  40049a:	d1f8      	bne.n	40048e <console_begin+0x14e>
	cmd[-1] = '\0';
  40049c:	f802 8c01 	strb.w	r8, [r2, #-1]
  4004a0:	ab28      	add	r3, sp, #160	; 0xa0
		c = *line++;
  4004a2:	f813 2b01 	ldrb.w	r2, [r3], #1
	}while( c != ' ' && c != '\0' );		
  4004a6:	2a20      	cmp	r2, #32
  4004a8:	d0a5      	beq.n	4003f6 <console_begin+0xb6>
  4004aa:	2a00      	cmp	r2, #0
  4004ac:	d1f9      	bne.n	4004a2 <console_begin+0x162>
		return 0; //no parameters found
  4004ae:	f8cd 8014 	str.w	r8, [sp, #20]
  4004b2:	e7a9      	b.n	400408 <console_begin+0xc8>
  4004b4:	0040a9ac 	.word	0x0040a9ac
  4004b8:	00400329 	.word	0x00400329
  4004bc:	0040a6d4 	.word	0x0040a6d4
  4004c0:	0040a6d0 	.word	0x0040a6d0
  4004c4:	0040a760 	.word	0x0040a760
  4004c8:	00406531 	.word	0x00406531
  4004cc:	00400afd 	.word	0x00400afd
  4004d0:	20000020 	.word	0x20000020
  4004d4:	0040a774 	.word	0x0040a774
  4004d8:	0040a7a4 	.word	0x0040a7a4
  4004dc:	0040a7a8 	.word	0x0040a7a8
  4004e0:	0040a790 	.word	0x0040a790
  4004e4:	0040a798 	.word	0x0040a798
  4004e8:	2000000c 	.word	0x2000000c
  4004ec:	00406589 	.word	0x00406589
  4004f0:	0040a750 	.word	0x0040a750
  4004f4:	004002f9 	.word	0x004002f9
  4004f8:	00400e95 	.word	0x00400e95
  4004fc:	00401281 	.word	0x00401281
  400500:	0040a7cc 	.word	0x0040a7cc
  400504:	0040a7b4 	.word	0x0040a7b4
  400508:	03ff4001 	.word	0x03ff4001
  40050c:	00400e55 	.word	0x00400e55
  400510:	0040a7ac 	.word	0x0040a7ac

00400514 <get_error_code>:
*	Error codes are one to one mapped to whatever bit they occupy within the CFSR. For example,
*	DIVBYZERO flag is bit 25 in CFSR, so the code for division by zero is 25
*	See pg 223. in ATSAM4SD32C Documentation
*
*/
static uint32_t get_error_code(void){
  400514:	b508      	push	{r3, lr}
	
	uint32_t fault_status = hal_cpu_get_scb_cfsr();
  400516:	4b09      	ldr	r3, [pc, #36]	; (40053c <get_error_code+0x28>)
  400518:	4798      	blx	r3

	for(int i=0; i<31; i++){
		if( (fault_status & (1<<i)) )
  40051a:	f010 0f01 	tst.w	r0, #1
  40051e:	d109      	bne.n	400534 <get_error_code+0x20>
  400520:	2301      	movs	r3, #1
  400522:	4619      	mov	r1, r3
  400524:	fa01 f203 	lsl.w	r2, r1, r3
  400528:	4202      	tst	r2, r0
  40052a:	d104      	bne.n	400536 <get_error_code+0x22>
	for(int i=0; i<31; i++){
  40052c:	3301      	adds	r3, #1
  40052e:	2b1f      	cmp	r3, #31
  400530:	d1f8      	bne.n	400524 <get_error_code+0x10>
			return i;
	}
}
  400532:	bd08      	pop	{r3, pc}
	for(int i=0; i<31; i++){
  400534:	2300      	movs	r3, #0
			return i;
  400536:	4618      	mov	r0, r3
  400538:	bd08      	pop	{r3, pc}
  40053a:	bf00      	nop
  40053c:	00400799 	.word	0x00400799

00400540 <make_error_msg>:
*	
*	@return the string with the error message 
*/
static uint8_t error_msg[SYS_PANIC_MSG_MAX_LENGTH]; //the panic error message to be printed 

static uint8_t* make_error_msg(uint32_t code){
  400540:	b538      	push	{r3, r4, r5, lr}
  400542:	4602      	mov	r2, r0
*	
*	@return	a pointer to the message
*/
static uint8_t* code_to_msg(uint32_t code){
	
	switch(code){
  400544:	2819      	cmp	r0, #25
  400546:	d82e      	bhi.n	4005a6 <make_error_msg+0x66>
  400548:	e8df f000 	tbb	[pc, r0]
  40054c:	0f2d0d2f 	.word	0x0f2d0d2f
  400550:	132d2d11 	.word	0x132d2d11
  400554:	1b191715 	.word	0x1b191715
  400558:	1f2d2d1d 	.word	0x1f2d2d1d
  40055c:	27252321 	.word	0x27252321
  400560:	2d2d2d2d 	.word	0x2d2d2d2d
  400564:	2b29      	.short	0x2b29
		case 0: return "Instruction Access";
		case 1: return "Data Access";
  400566:	4b15      	ldr	r3, [pc, #84]	; (4005bc <make_error_msg+0x7c>)
  400568:	e020      	b.n	4005ac <make_error_msg+0x6c>
		case 3: return "Mem mgr on Unstacking";
  40056a:	4b15      	ldr	r3, [pc, #84]	; (4005c0 <make_error_msg+0x80>)
  40056c:	e01e      	b.n	4005ac <make_error_msg+0x6c>
		case 4: return "Mem mgr on Stacking";
  40056e:	4b15      	ldr	r3, [pc, #84]	; (4005c4 <make_error_msg+0x84>)
  400570:	e01c      	b.n	4005ac <make_error_msg+0x6c>
		case 7: return "Mem mgr FAR Valid FA Register Valid";
  400572:	4b15      	ldr	r3, [pc, #84]	; (4005c8 <make_error_msg+0x88>)
  400574:	e01a      	b.n	4005ac <make_error_msg+0x6c>
		case 8: return "Instruction Bus";
  400576:	4b15      	ldr	r3, [pc, #84]	; (4005cc <make_error_msg+0x8c>)
  400578:	e018      	b.n	4005ac <make_error_msg+0x6c>
		case 9: return "Precise Data Bus";
  40057a:	4b15      	ldr	r3, [pc, #84]	; (4005d0 <make_error_msg+0x90>)
  40057c:	e016      	b.n	4005ac <make_error_msg+0x6c>
		case 10: return "Imprecise Data Bus";
  40057e:	4b15      	ldr	r3, [pc, #84]	; (4005d4 <make_error_msg+0x94>)
  400580:	e014      	b.n	4005ac <make_error_msg+0x6c>
		case 11: return "Bus Fault On Unstacking";
  400582:	4b15      	ldr	r3, [pc, #84]	; (4005d8 <make_error_msg+0x98>)
  400584:	e012      	b.n	4005ac <make_error_msg+0x6c>
		case 12: return "Bus Fault On Stacking";
  400586:	4b15      	ldr	r3, [pc, #84]	; (4005dc <make_error_msg+0x9c>)
  400588:	e010      	b.n	4005ac <make_error_msg+0x6c>
		case 15: return "Bus Fault AR Valid";
  40058a:	4b15      	ldr	r3, [pc, #84]	; (4005e0 <make_error_msg+0xa0>)
  40058c:	e00e      	b.n	4005ac <make_error_msg+0x6c>
		case 16: return "Undefined Instruction";
  40058e:	4b15      	ldr	r3, [pc, #84]	; (4005e4 <make_error_msg+0xa4>)
  400590:	e00c      	b.n	4005ac <make_error_msg+0x6c>
		case 17: return "Invalid State";
  400592:	4b15      	ldr	r3, [pc, #84]	; (4005e8 <make_error_msg+0xa8>)
  400594:	e00a      	b.n	4005ac <make_error_msg+0x6c>
		case 18: return " Invalid PC Load";
  400596:	4b15      	ldr	r3, [pc, #84]	; (4005ec <make_error_msg+0xac>)
  400598:	e008      	b.n	4005ac <make_error_msg+0x6c>
		case 19: return "No Coprocessor";
  40059a:	4b15      	ldr	r3, [pc, #84]	; (4005f0 <make_error_msg+0xb0>)
  40059c:	e006      	b.n	4005ac <make_error_msg+0x6c>
		case 24: return "Unaligned Access";
  40059e:	4b15      	ldr	r3, [pc, #84]	; (4005f4 <make_error_msg+0xb4>)
  4005a0:	e004      	b.n	4005ac <make_error_msg+0x6c>
		case 25: return "Divide by Zero";
  4005a2:	4b15      	ldr	r3, [pc, #84]	; (4005f8 <make_error_msg+0xb8>)
  4005a4:	e002      	b.n	4005ac <make_error_msg+0x6c>
		default: return "Wrong Error Code";
  4005a6:	4b15      	ldr	r3, [pc, #84]	; (4005fc <make_error_msg+0xbc>)
  4005a8:	e000      	b.n	4005ac <make_error_msg+0x6c>
		case 0: return "Instruction Access";
  4005aa:	4b15      	ldr	r3, [pc, #84]	; (400600 <make_error_msg+0xc0>)
	sprintf(error_msg, "Code %d (%s)", code, code_to_msg(code));
  4005ac:	4c15      	ldr	r4, [pc, #84]	; (400604 <make_error_msg+0xc4>)
  4005ae:	4916      	ldr	r1, [pc, #88]	; (400608 <make_error_msg+0xc8>)
  4005b0:	4620      	mov	r0, r4
  4005b2:	4d16      	ldr	r5, [pc, #88]	; (40060c <make_error_msg+0xcc>)
  4005b4:	47a8      	blx	r5
}
  4005b6:	4620      	mov	r0, r4
  4005b8:	bd38      	pop	{r3, r4, r5, pc}
  4005ba:	bf00      	nop
  4005bc:	0040a844 	.word	0x0040a844
  4005c0:	0040a850 	.word	0x0040a850
  4005c4:	0040a868 	.word	0x0040a868
  4005c8:	0040a87c 	.word	0x0040a87c
  4005cc:	0040a8a0 	.word	0x0040a8a0
  4005d0:	0040a8b0 	.word	0x0040a8b0
  4005d4:	0040a8c4 	.word	0x0040a8c4
  4005d8:	0040a8d8 	.word	0x0040a8d8
  4005dc:	0040a8f0 	.word	0x0040a8f0
  4005e0:	0040a908 	.word	0x0040a908
  4005e4:	0040a91c 	.word	0x0040a91c
  4005e8:	0040a934 	.word	0x0040a934
  4005ec:	0040a944 	.word	0x0040a944
  4005f0:	0040a958 	.word	0x0040a958
  4005f4:	0040a968 	.word	0x0040a968
  4005f8:	0040a97c 	.word	0x0040a97c
  4005fc:	0040a98c 	.word	0x0040a98c
  400600:	0040a830 	.word	0x0040a830
  400604:	20000e54 	.word	0x20000e54
  400608:	0040a9a0 	.word	0x0040a9a0
  40060c:	00406531 	.word	0x00406531

00400610 <faults_system_entry_point>:
static void faults_system_entry_point(void){
  400610:	b508      	push	{r3, lr}
	system_panic( make_error_msg( get_error_code() ) );
  400612:	4b03      	ldr	r3, [pc, #12]	; (400620 <faults_system_entry_point+0x10>)
  400614:	4798      	blx	r3
  400616:	4b03      	ldr	r3, [pc, #12]	; (400624 <faults_system_entry_point+0x14>)
  400618:	4798      	blx	r3
  40061a:	4b03      	ldr	r3, [pc, #12]	; (400628 <faults_system_entry_point+0x18>)
  40061c:	4798      	blx	r3
  40061e:	bd08      	pop	{r3, pc}
  400620:	00400515 	.word	0x00400515
  400624:	00400541 	.word	0x00400541
  400628:	0040148d 	.word	0x0040148d

0040062c <faults_app_entry_point>:
static void faults_app_entry_point(void){
  40062c:	b508      	push	{r3, lr}
	system_panic( make_error_msg( get_error_code() ) );
  40062e:	4b03      	ldr	r3, [pc, #12]	; (40063c <faults_app_entry_point+0x10>)
  400630:	4798      	blx	r3
  400632:	4b03      	ldr	r3, [pc, #12]	; (400640 <faults_app_entry_point+0x14>)
  400634:	4798      	blx	r3
  400636:	4b03      	ldr	r3, [pc, #12]	; (400644 <faults_app_entry_point+0x18>)
  400638:	4798      	blx	r3
  40063a:	bd08      	pop	{r3, pc}
  40063c:	00400515 	.word	0x00400515
  400640:	00400541 	.word	0x00400541
  400644:	0040148d 	.word	0x0040148d

00400648 <faults_init>:
void faults_init(void){
  400648:	b510      	push	{r4, lr}
	uint32_t shcsr = 	hal_cpu_get_scb_shcsr();
  40064a:	4b0a      	ldr	r3, [pc, #40]	; (400674 <faults_init+0x2c>)
  40064c:	4798      	blx	r3
	hal_cpu_set_scb_shcsr( shcsr );
  40064e:	f440 20e0 	orr.w	r0, r0, #458752	; 0x70000
  400652:	4b09      	ldr	r3, [pc, #36]	; (400678 <faults_init+0x30>)
  400654:	4798      	blx	r3
	uint32_t ccr = 	hal_cpu_get_scb_ccr();
  400656:	4b09      	ldr	r3, [pc, #36]	; (40067c <faults_init+0x34>)
  400658:	4798      	blx	r3
	hal_cpu_set_scb_ccr( ccr );
  40065a:	f040 0010 	orr.w	r0, r0, #16
  40065e:	4b08      	ldr	r3, [pc, #32]	; (400680 <faults_init+0x38>)
  400660:	4798      	blx	r3
	hal_cpu_fault_register_callback( FaultApp, faults_app_entry_point );
  400662:	4908      	ldr	r1, [pc, #32]	; (400684 <faults_init+0x3c>)
  400664:	2000      	movs	r0, #0
  400666:	4c08      	ldr	r4, [pc, #32]	; (400688 <faults_init+0x40>)
  400668:	47a0      	blx	r4
	hal_cpu_fault_register_callback( FaultSystem, faults_system_entry_point );
  40066a:	4908      	ldr	r1, [pc, #32]	; (40068c <faults_init+0x44>)
  40066c:	2001      	movs	r0, #1
  40066e:	47a0      	blx	r4
  400670:	bd10      	pop	{r4, pc}
  400672:	bf00      	nop
  400674:	00400787 	.word	0x00400787
  400678:	00400781 	.word	0x00400781
  40067c:	00400793 	.word	0x00400793
  400680:	0040078d 	.word	0x0040078d
  400684:	0040062d 	.word	0x0040062d
  400688:	004006d5 	.word	0x004006d5
  40068c:	00400611 	.word	0x00400611

00400690 <hal_cpu_init>:
*	HAL CPU Init
*
*	Initializes the CPU. This function must be called before 
*	HAL IO Init. That is: hal_cpu_init(); hal_io_init(); 
*/
void hal_cpu_init(void){	
  400690:	b508      	push	{r3, lr}
	sysclk_init();  //initialize clocks
  400692:	4b01      	ldr	r3, [pc, #4]	; (400698 <hal_cpu_init+0x8>)
  400694:	4798      	blx	r3
  400696:	bd08      	pop	{r3, pc}
  400698:	0040296d 	.word	0x0040296d

0040069c <hal_cpu_systimer_start>:
*	@param tick_freq_in_ms the tick frequency in milliseconds
*	@param callback function to be called when a tick occurs
*/
void hal_cpu_systimer_start(uint32_t tick_freq_in_ms, void(*callback)(void)){
	//set callback first
	systick_callback = callback;
  40069c:	4b09      	ldr	r3, [pc, #36]	; (4006c4 <hal_cpu_systimer_start+0x28>)
  40069e:	6019      	str	r1, [r3, #0]
inline static uint32_t ms_to_ticks(uint32_t time_in_ms){ return (sysclk_get_cpu_hz()/1000)*(time_in_ms); }
  4006a0:	4b09      	ldr	r3, [pc, #36]	; (4006c8 <hal_cpu_systimer_start+0x2c>)
  4006a2:	fb03 f000 	mul.w	r0, r3, r0
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  4006a6:	3801      	subs	r0, #1
  4006a8:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  4006ac:	d209      	bcs.n	4006c2 <hal_cpu_systimer_start+0x26>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4006ae:	4b07      	ldr	r3, [pc, #28]	; (4006cc <hal_cpu_systimer_start+0x30>)
  4006b0:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4006b2:	21f0      	movs	r1, #240	; 0xf0
  4006b4:	4a06      	ldr	r2, [pc, #24]	; (4006d0 <hal_cpu_systimer_start+0x34>)
  4006b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4006ba:	2200      	movs	r2, #0
  4006bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4006be:	2207      	movs	r2, #7
  4006c0:	601a      	str	r2, [r3, #0]
  4006c2:	4770      	bx	lr
  4006c4:	200061fc 	.word	0x200061fc
  4006c8:	0001d4c0 	.word	0x0001d4c0
  4006cc:	e000e010 	.word	0xe000e010
  4006d0:	e000ed00 	.word	0xe000ed00

004006d4 <hal_cpu_fault_register_callback>:
*	Registers a generic callback function for CPU Fault Exceptions
*
*	@param callback the function that gets called on fault_type exception
*/
void hal_cpu_fault_register_callback( tFaultOrigin faultOrigin, void(*callback)(void)  ){
		switch(faultOrigin){
  4006d4:	b110      	cbz	r0, 4006dc <hal_cpu_fault_register_callback+0x8>
  4006d6:	2801      	cmp	r0, #1
  4006d8:	d003      	beq.n	4006e2 <hal_cpu_fault_register_callback+0xe>
  4006da:	4770      	bx	lr
			case FaultApp:		fault_app_callback = callback;		break;
  4006dc:	4b02      	ldr	r3, [pc, #8]	; (4006e8 <hal_cpu_fault_register_callback+0x14>)
  4006de:	6019      	str	r1, [r3, #0]
  4006e0:	4770      	bx	lr
			case FaultSystem:	fault_system_callback = callback;	break;
  4006e2:	4b02      	ldr	r3, [pc, #8]	; (4006ec <hal_cpu_fault_register_callback+0x18>)
  4006e4:	6019      	str	r1, [r3, #0]
  4006e6:	4770      	bx	lr
  4006e8:	20006204 	.word	0x20006204
  4006ec:	20006208 	.word	0x20006208

004006f0 <hal_cpu_svc_start>:
*	execution of an SVC instruction
*
*	@param callback the function that gets called on supervisor calls
*/
void hal_cpu_svc_start( void(*callback)(void) ){
	svc_callback = callback; //SVC Handler definition is in hal_cpu_asm.s
  4006f0:	4b01      	ldr	r3, [pc, #4]	; (4006f8 <hal_cpu_svc_start+0x8>)
  4006f2:	6018      	str	r0, [r3, #0]
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop
  4006f8:	2000620c 	.word	0x2000620c

004006fc <hal_cpu_delay>:
*
*	Busy-waiting delay
*
*	@param delay_in_ms delay in milliseconds
*/
void hal_cpu_delay(uint32_t delay_in_ms){
  4006fc:	b538      	push	{r3, r4, r5, lr}
	delay_ms(delay_in_ms);
  4006fe:	b918      	cbnz	r0, 400708 <hal_cpu_delay+0xc>
  400700:	2009      	movs	r0, #9
  400702:	4b0a      	ldr	r3, [pc, #40]	; (40072c <hal_cpu_delay+0x30>)
  400704:	4798      	blx	r3
  400706:	bd38      	pop	{r3, r4, r5, pc}
  400708:	4601      	mov	r1, r0
  40070a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40070e:	2300      	movs	r3, #0
  400710:	f243 64af 	movw	r4, #13999	; 0x36af
  400714:	2500      	movs	r5, #0
  400716:	4806      	ldr	r0, [pc, #24]	; (400730 <hal_cpu_delay+0x34>)
  400718:	fbe0 4501 	umlal	r4, r5, r0, r1
  40071c:	4620      	mov	r0, r4
  40071e:	4629      	mov	r1, r5
  400720:	4c04      	ldr	r4, [pc, #16]	; (400734 <hal_cpu_delay+0x38>)
  400722:	47a0      	blx	r4
  400724:	4b01      	ldr	r3, [pc, #4]	; (40072c <hal_cpu_delay+0x30>)
  400726:	4798      	blx	r3
  400728:	bd38      	pop	{r3, r4, r5, pc}
  40072a:	bf00      	nop
  40072c:	20000001 	.word	0x20000001
  400730:	07270e00 	.word	0x07270e00
  400734:	00406135 	.word	0x00406135

00400738 <hal_cpu_sleep>:
*	instruction
*/
.thumb_func 
.global hal_cpu_sleep
hal_cpu_sleep:
     wfi
  400738:	bf30      	wfi

     bx lr
  40073a:	4770      	bx	lr

0040073c <hal_cpu_return_exception_user_mode>:
*/

.thumb_func 
.global hal_cpu_return_exception_user_mode
hal_cpu_return_exception_user_mode:
	ldr pc, =USER_MODE_EXEC_VALUE
  40073c:	f8df f094 	ldr.w	pc, [pc, #148]	; 4007d4 <hal_cpu_set_psp+0x6>

00400740 <hal_cpu_save_context>:
*
*/
.thumb_func 
.global hal_cpu_save_context
hal_cpu_save_context:
     mrs r0, psp
  400740:	f3ef 8009 	mrs	r0, PSP
	 stmfd r0!, {r4-r11}
  400744:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	 msr psp, r0
  400748:	f380 8809 	msr	PSP, r0

	 bx lr
  40074c:	4770      	bx	lr

0040074e <hal_cpu_restore_context>:
*
*/
.thumb_func 
.global hal_cpu_restore_context
hal_cpu_restore_context:
     mrs r0, psp
  40074e:	f3ef 8009 	mrs	r0, PSP
	 ldmfd r0!, {r4-r11}
  400752:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	 msr psp, r0
  400756:	f380 8809 	msr	PSP, r0

	 bx lr
  40075a:	4770      	bx	lr

0040075c <PendSV_Handler>:
//(no prologue and no epilogue)
//
.thumb_func 
.global PendSV_Handler
PendSV_Handler:
	ldr	r3, =pendsv_callback
  40075c:	4b1e      	ldr	r3, [pc, #120]	; (4007d8 <hal_cpu_set_psp+0xa>)
	ldr r3, [r3]
  40075e:	681b      	ldr	r3, [r3, #0]
	bx	r3
  400760:	4718      	bx	r3

00400762 <SysTick_Handler>:
//(no prologue and no epilogue)
//
.thumb_func 
.global SysTick_Handler
SysTick_Handler:
	ldr	r3, =systick_callback
  400762:	4b1e      	ldr	r3, [pc, #120]	; (4007dc <hal_cpu_set_psp+0xe>)
	ldr r3, [r3]
  400764:	681b      	ldr	r3, [r3, #0]
	bx	r3
  400766:	4718      	bx	r3

00400768 <BusFault_Handler>:
//(no prologue and no epilogue to avoid
// changing the offsets of the stacked frame on SVC interrupt)
.thumb_func 
.global BusFault_Handler
BusFault_Handler:
	b faults_goto_right_callback
  400768:	e002      	b.n	400770 <faults_goto_right_callback>

0040076a <UsageFault_Handler>:
//(no prologue and no epilogue to avoid
// changing the offsets of the stacked frame on SVC interrupt)
.thumb_func 
.global UsageFault_Handler
UsageFault_Handler:
	b faults_goto_right_callback
  40076a:	e001      	b.n	400770 <faults_goto_right_callback>

0040076c <MemManage_Handler>:
//(no prologue and no epilogue to avoid
// changing the offsets of the stacked frame on SVC interrupt)
.thumb_func 
.global MemManage_Handler
MemManage_Handler:
	b faults_goto_right_callback
  40076c:	e000      	b.n	400770 <faults_goto_right_callback>

0040076e <HardFault_Handler>:
//(no prologue and no epilogue to avoid
// changing the offsets of the stacked frame on SVC interrupt)
.thumb_func 
.global HardFault_Handler
HardFault_Handler:
	b faults_goto_right_callback
  40076e:	e7ff      	b.n	400770 <faults_goto_right_callback>

00400770 <faults_goto_right_callback>:
	

faults_goto_right_callback:
// Bit 2 in EXC_RETURN (placed in the LR on exception entry) tells 
// which stack to use on exception return 
	tst lr, 0b100
  400770:	f01e 0f04 	tst.w	lr, #4
	beq faults_else					/* if ( exc_return & 0b0100 ) */
  400774:	d001      	beq.n	40077a <faults_else>
	ldr	r0, =fault_app_callback		/*    temp = app_callback;     */
  400776:	481a      	ldr	r0, [pc, #104]	; (4007e0 <hal_cpu_set_psp+0x12>)
	b faults_end					    /*							   */
  400778:	e000      	b.n	40077c <faults_end>

0040077a <faults_else>:
faults_else:							/* else						   */
	ldr	r0, =fault_system_callback	/*    temp = system_callback;  */					
  40077a:	481a      	ldr	r0, [pc, #104]	; (4007e4 <hal_cpu_set_psp+0x16>)

0040077c <faults_end>:
faults_end:
	ldr r0, [r0]									
  40077c:	6800      	ldr	r0, [r0, #0]
	bx	r0						    /* temp(); */	
  40077e:	4700      	bx	r0

00400780 <hal_cpu_set_scb_shcsr>:
*
*/
.thumb_func 
.global hal_cpu_set_scb_shcsr
hal_cpu_set_scb_shcsr:
     ldr r1, =SCB_SHCSR
  400780:	4919      	ldr	r1, [pc, #100]	; (4007e8 <hal_cpu_set_psp+0x1a>)
	 str r0, [r1]
  400782:	6008      	str	r0, [r1, #0]

     bx lr
  400784:	4770      	bx	lr

00400786 <hal_cpu_get_scb_shcsr>:
*
*/
.thumb_func 
.global hal_cpu_get_scb_shcsr
hal_cpu_get_scb_shcsr:
     ldr r1, =SCB_SHCSR
  400786:	4918      	ldr	r1, [pc, #96]	; (4007e8 <hal_cpu_set_psp+0x1a>)
	 ldr r0, [r1]
  400788:	6808      	ldr	r0, [r1, #0]

     bx lr
  40078a:	4770      	bx	lr

0040078c <hal_cpu_set_scb_ccr>:
*
*/
.thumb_func 
.global hal_cpu_set_scb_ccr
hal_cpu_set_scb_ccr:
     ldr r1, =SCB_CCR
  40078c:	4917      	ldr	r1, [pc, #92]	; (4007ec <hal_cpu_set_psp+0x1e>)
	 str r0, [r1]
  40078e:	6008      	str	r0, [r1, #0]

     bx lr
  400790:	4770      	bx	lr

00400792 <hal_cpu_get_scb_ccr>:
*
*/
.thumb_func 
.global hal_cpu_get_scb_ccr
hal_cpu_get_scb_ccr:
     ldr r1, =SCB_CCR
  400792:	4916      	ldr	r1, [pc, #88]	; (4007ec <hal_cpu_set_psp+0x1e>)
	 ldr r0, [r1]
  400794:	6808      	ldr	r0, [r1, #0]

     bx lr
  400796:	4770      	bx	lr

00400798 <hal_cpu_get_scb_cfsr>:
*	instruction
*/
.thumb_func 
.global hal_cpu_get_scb_cfsr
hal_cpu_get_scb_cfsr:
     ldr r1, =SCB_CFSR
  400798:	4915      	ldr	r1, [pc, #84]	; (4007f0 <hal_cpu_set_psp+0x22>)
	 ldr r0, [r1]
  40079a:	6808      	ldr	r0, [r1, #0]

     bx lr
  40079c:	4770      	bx	lr

0040079e <SVC_Handler>:
//(no prologue and no epilogue to avoid
// changing the offsets of the stacked frame on SVC interrupt)
.thumb_func 
.global SVC_Handler
SVC_Handler:
	ldr	r3, =svc_callback
  40079e:	4b15      	ldr	r3, [pc, #84]	; (4007f4 <hal_cpu_set_psp+0x26>)
	ldr r3, [r3]
  4007a0:	681b      	ldr	r3, [r3, #0]
	bx	r3
  4007a2:	4718      	bx	r3

004007a4 <hal_cpu_get_psp>:
*	Returns the process stack pointer
*/
.thumb_func 
.global hal_cpu_get_psp
hal_cpu_get_psp:
	mrs	r0, psp  //return psp
  4007a4:	f3ef 8009 	mrs	r0, PSP
	bx lr 
  4007a8:	4770      	bx	lr

004007aa <hal_cpu_set_unprivileged>:
*	Set the CPU as unprivileged (when in thread mode)s
*/
.thumb_func 
.global hal_cpu_set_unprivileged
hal_cpu_set_unprivileged:
	mrs r3, control
  4007aa:	f3ef 8314 	mrs	r3, CONTROL
	orr	r3, r3, #1
  4007ae:	f043 0301 	orr.w	r3, r3, #1
	msr control, r3 /* control |= 1 */
  4007b2:	f383 8814 	msr	CONTROL, r3
	isb
  4007b6:	f3bf 8f6f 	isb	sy

	bx lr
  4007ba:	4770      	bx	lr

004007bc <hal_cpu_set_psp_active>:
*	Sets the Process Stack Pointer as active (when in thread mode)
*/
.thumb_func 
.global hal_cpu_set_psp_active
hal_cpu_set_psp_active:
	mrs r3, control
  4007bc:	f3ef 8314 	mrs	r3, CONTROL
	orr	r3, r3, #2
  4007c0:	f043 0302 	orr.w	r3, r3, #2
	msr control, r3 /* control |= 2 */
  4007c4:	f383 8814 	msr	CONTROL, r3
	isb
  4007c8:	f3bf 8f6f 	isb	sy

	bx lr
  4007cc:	4770      	bx	lr

004007ce <hal_cpu_set_psp>:
*	Sets the Process Stack Pointer value
*/
.thumb_func 
.global hal_cpu_set_psp
hal_cpu_set_psp:
     msr psp, r0
  4007ce:	f380 8809 	msr	PSP, r0

     bx lr
  4007d2:	4770      	bx	lr
	ldr pc, =USER_MODE_EXEC_VALUE
  4007d4:	fffffffd 	.word	0xfffffffd
	ldr	r3, =pendsv_callback
  4007d8:	20006200 	.word	0x20006200
	ldr	r3, =systick_callback
  4007dc:	200061fc 	.word	0x200061fc
	ldr	r0, =fault_app_callback		/*    temp = app_callback;     */
  4007e0:	20006204 	.word	0x20006204
	ldr	r0, =fault_system_callback	/*    temp = system_callback;  */					
  4007e4:	20006208 	.word	0x20006208
     ldr r1, =SCB_SHCSR
  4007e8:	e000ed24 	.word	0xe000ed24
     ldr r1, =SCB_CCR
  4007ec:	e000ed14 	.word	0xe000ed14
     ldr r1, =SCB_CFSR
  4007f0:	e000ed28 	.word	0xe000ed28
	ldr	r3, =svc_callback
  4007f4:	2000620c 	.word	0x2000620c

004007f8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  4007f8:	b570      	push	{r4, r5, r6, lr}
  4007fa:	b082      	sub	sp, #8
  4007fc:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4007fe:	ac02      	add	r4, sp, #8
  400800:	2302      	movs	r3, #2
  400802:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400806:	4d09      	ldr	r5, [pc, #36]	; (40082c <ssd1306_write_command+0x34>)
  400808:	4621      	mov	r1, r4
  40080a:	4628      	mov	r0, r5
  40080c:	4b08      	ldr	r3, [pc, #32]	; (400830 <ssd1306_write_command+0x38>)
  40080e:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400810:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400814:	4b07      	ldr	r3, [pc, #28]	; (400834 <ssd1306_write_command+0x3c>)
  400816:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400818:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  40081a:	2056      	movs	r0, #86	; 0x56
  40081c:	4b06      	ldr	r3, [pc, #24]	; (400838 <ssd1306_write_command+0x40>)
  40081e:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400820:	4621      	mov	r1, r4
  400822:	4628      	mov	r0, r5
  400824:	4b05      	ldr	r3, [pc, #20]	; (40083c <ssd1306_write_command+0x44>)
  400826:	4798      	blx	r3
#endif
}
  400828:	b002      	add	sp, #8
  40082a:	bd70      	pop	{r4, r5, r6, pc}
  40082c:	40008000 	.word	0x40008000
  400830:	00402aa5 	.word	0x00402aa5
  400834:	400e1200 	.word	0x400e1200
  400838:	20000001 	.word	0x20000001
  40083c:	00402ad5 	.word	0x00402ad5

00400840 <configure_uart1>:
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
	NVIC_EnableIRQ(USART1_IRQn);
}


void configure_uart1(uint32_t baudrate){
  400840:	b530      	push	{r4, r5, lr}
  400842:	b085      	sub	sp, #20
  400844:	4604      	mov	r4, r0
	pio_configure(PINS_UART1_PIO, PINS_UART1_TYPE, PINS_UART1_MASK, PINS_UART1_ATTR);
  400846:	2300      	movs	r3, #0
  400848:	220c      	movs	r2, #12
  40084a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40084e:	480c      	ldr	r0, [pc, #48]	; (400880 <configure_uart1+0x40>)
  400850:	4d0c      	ldr	r5, [pc, #48]	; (400884 <configure_uart1+0x44>)
  400852:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_UART1);
  400854:	2009      	movs	r0, #9
  400856:	4b0c      	ldr	r3, [pc, #48]	; (400888 <configure_uart1+0x48>)
  400858:	4798      	blx	r3
	
	const sam_uart_opt_t uart1_sett = { sysclk_get_cpu_hz(), baudrate, UART_SERIAL_MODE };
  40085a:	4b0c      	ldr	r3, [pc, #48]	; (40088c <configure_uart1+0x4c>)
  40085c:	9301      	str	r3, [sp, #4]
  40085e:	9402      	str	r4, [sp, #8]
  400860:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400864:	9303      	str	r3, [sp, #12]
	uart_init(UART1,&uart1_sett);
  400866:	4c0a      	ldr	r4, [pc, #40]	; (400890 <configure_uart1+0x50>)
  400868:	a901      	add	r1, sp, #4
  40086a:	4620      	mov	r0, r4
  40086c:	4b09      	ldr	r3, [pc, #36]	; (400894 <configure_uart1+0x54>)
  40086e:	4798      	blx	r3
	uart_enable_tx(UART1);
  400870:	4620      	mov	r0, r4
  400872:	4b09      	ldr	r3, [pc, #36]	; (400898 <configure_uart1+0x58>)
  400874:	4798      	blx	r3
	uart_enable_rx(UART1);
  400876:	4620      	mov	r0, r4
  400878:	4b08      	ldr	r3, [pc, #32]	; (40089c <configure_uart1+0x5c>)
  40087a:	4798      	blx	r3
}
  40087c:	b005      	add	sp, #20
  40087e:	bd30      	pop	{r4, r5, pc}
  400880:	400e1000 	.word	0x400e1000
  400884:	00402e49 	.word	0x00402e49
  400888:	004032c1 	.word	0x004032c1
  40088c:	07270e00 	.word	0x07270e00
  400890:	400e0800 	.word	0x400e0800
  400894:	00403849 	.word	0x00403849
  400898:	0040387f 	.word	0x0040387f
  40089c:	00403885 	.word	0x00403885

004008a0 <configure_usart1>:

void configure_usart1(uint32_t baudrate){
  4008a0:	b530      	push	{r4, r5, lr}
  4008a2:	b087      	sub	sp, #28
  4008a4:	4605      	mov	r5, r0
	pio_configure(PINS_USART1_PIO, PINS_USART1_TYPE, PINS_USART1_MASK, PINS_USART1_ATTR);
  4008a6:	2300      	movs	r3, #0
  4008a8:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  4008ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4008b0:	480f      	ldr	r0, [pc, #60]	; (4008f0 <configure_usart1+0x50>)
  4008b2:	4c10      	ldr	r4, [pc, #64]	; (4008f4 <configure_usart1+0x54>)
  4008b4:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_USART1);
  4008b6:	200f      	movs	r0, #15
  4008b8:	4c0f      	ldr	r4, [pc, #60]	; (4008f8 <configure_usart1+0x58>)
  4008ba:	47a0      	blx	r4

	const sam_usart_opt_t usart_console_settings = {
  4008bc:	2300      	movs	r3, #0
  4008be:	9303      	str	r3, [sp, #12]
  4008c0:	9304      	str	r3, [sp, #16]
  4008c2:	9305      	str	r3, [sp, #20]
  4008c4:	9500      	str	r5, [sp, #0]
  4008c6:	23c0      	movs	r3, #192	; 0xc0
  4008c8:	9301      	str	r3, [sp, #4]
  4008ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4008ce:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4008d0:	200f      	movs	r0, #15
  4008d2:	47a0      	blx	r4
		USART_SERIAL_STOP_BIT,
		US_MR_CHMODE_NORMAL
	};

	sysclk_enable_peripheral_clock(USART_SERIAL_ID);
	usart_init_rs232(USART_SERIAL, &usart_console_settings, sysclk_get_peripheral_hz());
  4008d4:	4c09      	ldr	r4, [pc, #36]	; (4008fc <configure_usart1+0x5c>)
  4008d6:	4a0a      	ldr	r2, [pc, #40]	; (400900 <configure_usart1+0x60>)
  4008d8:	4669      	mov	r1, sp
  4008da:	4620      	mov	r0, r4
  4008dc:	4b09      	ldr	r3, [pc, #36]	; (400904 <configure_usart1+0x64>)
  4008de:	4798      	blx	r3
	usart_enable_tx(USART_SERIAL);
  4008e0:	4620      	mov	r0, r4
  4008e2:	4b09      	ldr	r3, [pc, #36]	; (400908 <configure_usart1+0x68>)
  4008e4:	4798      	blx	r3
	usart_enable_rx(USART_SERIAL);
  4008e6:	4620      	mov	r0, r4
  4008e8:	4b08      	ldr	r3, [pc, #32]	; (40090c <configure_usart1+0x6c>)
  4008ea:	4798      	blx	r3
}
  4008ec:	b007      	add	sp, #28
  4008ee:	bd30      	pop	{r4, r5, pc}
  4008f0:	400e0e00 	.word	0x400e0e00
  4008f4:	00402e49 	.word	0x00402e49
  4008f8:	004032c1 	.word	0x004032c1
  4008fc:	40028000 	.word	0x40028000
  400900:	07270e00 	.word	0x07270e00
  400904:	00403939 	.word	0x00403939
  400908:	0040398d 	.word	0x0040398d
  40090c:	00403993 	.word	0x00403993

00400910 <hal_io_init>:
void hal_io_init(void){
  400910:	b510      	push	{r4, lr}
	board_init();		//initialize board pins
  400912:	4b05      	ldr	r3, [pc, #20]	; (400928 <hal_io_init+0x18>)
  400914:	4798      	blx	r3
  400916:	200b      	movs	r0, #11
  400918:	4c04      	ldr	r4, [pc, #16]	; (40092c <hal_io_init+0x1c>)
  40091a:	47a0      	blx	r4
  40091c:	200c      	movs	r0, #12
  40091e:	47a0      	blx	r4
  400920:	200d      	movs	r0, #13
  400922:	47a0      	blx	r4
  400924:	bd10      	pop	{r4, pc}
  400926:	bf00      	nop
  400928:	00402bf1 	.word	0x00402bf1
  40092c:	004032c1 	.word	0x004032c1

00400930 <hal_io_mtimer_start>:
void hal_io_mtimer_start( uint32_t ms_steps ){
  400930:	b538      	push	{r3, r4, r5, lr}
  400932:	4604      	mov	r4, r0
	rtt_sel_source(RTT, false);
  400934:	4d08      	ldr	r5, [pc, #32]	; (400958 <hal_io_mtimer_start+0x28>)
  400936:	2100      	movs	r1, #0
  400938:	4628      	mov	r0, r5
  40093a:	4b08      	ldr	r3, [pc, #32]	; (40095c <hal_io_mtimer_start+0x2c>)
  40093c:	4798      	blx	r3
	uint32_t steps = ms_steps*33 > RTT_MAX_VAL ? RTT_MAX_VAL : ms_steps*33; 
  40093e:	eb04 1444 	add.w	r4, r4, r4, lsl #5
  400942:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  400946:	bf28      	it	cs
  400948:	f44f 4400 	movcs.w	r4, #32768	; 0x8000
	rtt_init(RTT, steps ); 
  40094c:	b2a1      	uxth	r1, r4
  40094e:	4628      	mov	r0, r5
  400950:	4b03      	ldr	r3, [pc, #12]	; (400960 <hal_io_mtimer_start+0x30>)
  400952:	4798      	blx	r3
  400954:	bd38      	pop	{r3, r4, r5, pc}
  400956:	bf00      	nop
  400958:	400e1430 	.word	0x400e1430
  40095c:	0040014d 	.word	0x0040014d
  400960:	00400139 	.word	0x00400139

00400964 <RTT_Handler>:
void RTT_Handler(void){
  400964:	b508      	push	{r3, lr}
	uint32_t ul_status = rtt_get_status(RTT);
  400966:	4805      	ldr	r0, [pc, #20]	; (40097c <RTT_Handler+0x18>)
  400968:	4b05      	ldr	r3, [pc, #20]	; (400980 <RTT_Handler+0x1c>)
  40096a:	4798      	blx	r3
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC)
  40096c:	f010 0f02 	tst.w	r0, #2
  400970:	d100      	bne.n	400974 <RTT_Handler+0x10>
  400972:	bd08      	pop	{r3, pc}
		(*timer_callback)(); //call registered callback
  400974:	4b03      	ldr	r3, [pc, #12]	; (400984 <RTT_Handler+0x20>)
  400976:	681b      	ldr	r3, [r3, #0]
  400978:	4798      	blx	r3
}
  40097a:	e7fa      	b.n	400972 <RTT_Handler+0xe>
  40097c:	400e1430 	.word	0x400e1430
  400980:	004001a1 	.word	0x004001a1
  400984:	20000e8c 	.word	0x20000e8c

00400988 <hal_io_mtimer_stop>:
void hal_io_mtimer_stop(void){
  400988:	b508      	push	{r3, lr}
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40098a:	4b06      	ldr	r3, [pc, #24]	; (4009a4 <hal_io_mtimer_stop+0x1c>)
  40098c:	2208      	movs	r2, #8
  40098e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400992:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN);
  400996:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40099a:	4803      	ldr	r0, [pc, #12]	; (4009a8 <hal_io_mtimer_stop+0x20>)
  40099c:	4b03      	ldr	r3, [pc, #12]	; (4009ac <hal_io_mtimer_stop+0x24>)
  40099e:	4798      	blx	r3
  4009a0:	bd08      	pop	{r3, pc}
  4009a2:	bf00      	nop
  4009a4:	e000e100 	.word	0xe000e100
  4009a8:	400e1430 	.word	0x400e1430
  4009ac:	00400179 	.word	0x00400179

004009b0 <hal_io_mtimer_read>:
uint32_t hal_io_mtimer_read( void ){
  4009b0:	b508      	push	{r3, lr}
	return rtt_read_timer_value (RTT);
  4009b2:	4802      	ldr	r0, [pc, #8]	; (4009bc <hal_io_mtimer_read+0xc>)
  4009b4:	4b02      	ldr	r3, [pc, #8]	; (4009c0 <hal_io_mtimer_read+0x10>)
  4009b6:	4798      	blx	r3
}
  4009b8:	bd08      	pop	{r3, pc}
  4009ba:	bf00      	nop
  4009bc:	400e1430 	.word	0x400e1430
  4009c0:	0040018d 	.word	0x0040018d

004009c4 <hal_io_led_start>:
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009c4:	4b0f      	ldr	r3, [pc, #60]	; (400a04 <hal_io_led_start+0x40>)
  4009c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4009ca:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4009d4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009da:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  4009de:	f5a2 32f9 	sub.w	r2, r2, #127488	; 0x1f200
  4009e2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4009e6:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009e8:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4009f0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4009fa:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  400a00:	4770      	bx	lr
  400a02:	bf00      	nop
  400a04:	400e1200 	.word	0x400e1200

00400a08 <hal_io_led_write>:
	switch(lednum){
  400a08:	2804      	cmp	r0, #4
  400a0a:	d81b      	bhi.n	400a44 <hal_io_led_write+0x3c>
  400a0c:	e8df f000 	tbb	[pc, r0]
  400a10:	16141203 	.word	0x16141203
  400a14:	18          	.byte	0x18
  400a15:	00          	.byte	0x00
		case Led0: IOLine = IOPORT_CREATE_PIN(PIOC, 23); break;
  400a16:	2257      	movs	r2, #87	; 0x57
	return pin >> 5;
  400a18:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400a1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400a1e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400a22:	025b      	lsls	r3, r3, #9
	if (level) {
  400a24:	b181      	cbz	r1, 400a48 <hal_io_led_write+0x40>
	return 1U << (pin & 0x1F);
  400a26:	f002 021f 	and.w	r2, r2, #31
  400a2a:	2101      	movs	r1, #1
  400a2c:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400a30:	635a      	str	r2, [r3, #52]	; 0x34
  400a32:	4770      	bx	lr
		case Led1: IOLine = IOPORT_CREATE_PIN(PIOC, 20); break;
  400a34:	2254      	movs	r2, #84	; 0x54
  400a36:	e7ef      	b.n	400a18 <hal_io_led_write+0x10>
		case Led2: IOLine = IOPORT_CREATE_PIN(PIOA, 16); break;
  400a38:	2210      	movs	r2, #16
  400a3a:	e7ed      	b.n	400a18 <hal_io_led_write+0x10>
		case Led3: IOLine = IOPORT_CREATE_PIN(PIOC, 22); break;
  400a3c:	2256      	movs	r2, #86	; 0x56
  400a3e:	e7eb      	b.n	400a18 <hal_io_led_write+0x10>
		case Led4: IOLine = IOPORT_CREATE_PIN(PIOC, 19); break;
  400a40:	2253      	movs	r2, #83	; 0x53
  400a42:	e7e9      	b.n	400a18 <hal_io_led_write+0x10>
	uint32_t IOLine = 0;
  400a44:	2200      	movs	r2, #0
  400a46:	e7e7      	b.n	400a18 <hal_io_led_write+0x10>
	return 1U << (pin & 0x1F);
  400a48:	f002 021f 	and.w	r2, r2, #31
  400a4c:	2101      	movs	r1, #1
  400a4e:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a52:	631a      	str	r2, [r3, #48]	; 0x30
  400a54:	4770      	bx	lr

00400a56 <hal_io_led_read>:
	switch(lednum){
  400a56:	2804      	cmp	r0, #4
  400a58:	d81e      	bhi.n	400a98 <hal_io_led_read+0x42>
  400a5a:	e8df f000 	tbb	[pc, r0]
  400a5e:	1503      	.short	0x1503
  400a60:	1917      	.short	0x1917
  400a62:	1b          	.byte	0x1b
  400a63:	00          	.byte	0x00
		case Led0: IOLine = IOPORT_CREATE_PIN(PIOC, 23); break;
  400a64:	2257      	movs	r2, #87	; 0x57
	return pin >> 5;
  400a66:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400a68:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400a6c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400a70:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400a72:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400a74:	f002 021f 	and.w	r2, r2, #31
  400a78:	2301      	movs	r3, #1
  400a7a:	fa03 f202 	lsl.w	r2, r3, r2
	return !ioport_get_pin_level(IOLine); //negated since pin levels and LEDs state are opposite
  400a7e:	420a      	tst	r2, r1
}
  400a80:	bf0c      	ite	eq
  400a82:	4618      	moveq	r0, r3
  400a84:	2000      	movne	r0, #0
  400a86:	4770      	bx	lr
		case Led1: IOLine = IOPORT_CREATE_PIN(PIOC, 20); break;
  400a88:	2254      	movs	r2, #84	; 0x54
  400a8a:	e7ec      	b.n	400a66 <hal_io_led_read+0x10>
		case Led2: IOLine = IOPORT_CREATE_PIN(PIOA, 16); break;
  400a8c:	2210      	movs	r2, #16
  400a8e:	e7ea      	b.n	400a66 <hal_io_led_read+0x10>
		case Led3: IOLine = IOPORT_CREATE_PIN(PIOC, 22); break;
  400a90:	2256      	movs	r2, #86	; 0x56
  400a92:	e7e8      	b.n	400a66 <hal_io_led_read+0x10>
		case Led4: IOLine = IOPORT_CREATE_PIN(PIOC, 19); break;
  400a94:	2253      	movs	r2, #83	; 0x53
  400a96:	e7e6      	b.n	400a66 <hal_io_led_read+0x10>
	uint32_t IOLine = 0;
  400a98:	2200      	movs	r2, #0
  400a9a:	e7e4      	b.n	400a66 <hal_io_led_read+0x10>

00400a9c <hal_io_clock_start>:
void hal_io_clock_start( void ){
  400a9c:	b510      	push	{r4, lr}
	pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400a9e:	2000      	movs	r0, #0
  400aa0:	4b05      	ldr	r3, [pc, #20]	; (400ab8 <hal_io_clock_start+0x1c>)
  400aa2:	4798      	blx	r3
	while (!pmc_osc_is_ready_32kxtal());
  400aa4:	4c05      	ldr	r4, [pc, #20]	; (400abc <hal_io_clock_start+0x20>)
  400aa6:	47a0      	blx	r4
  400aa8:	2800      	cmp	r0, #0
  400aaa:	d0fc      	beq.n	400aa6 <hal_io_clock_start+0xa>
	rtc_set_hour_mode(RTC, 0); //24-hrs mode by default
  400aac:	2100      	movs	r1, #0
  400aae:	4804      	ldr	r0, [pc, #16]	; (400ac0 <hal_io_clock_start+0x24>)
  400ab0:	4b04      	ldr	r3, [pc, #16]	; (400ac4 <hal_io_clock_start+0x28>)
  400ab2:	4798      	blx	r3
  400ab4:	bd10      	pop	{r4, pc}
  400ab6:	bf00      	nop
  400ab8:	004031f9 	.word	0x004031f9
  400abc:	0040321d 	.word	0x0040321d
  400ac0:	400e1460 	.word	0x400e1460
  400ac4:	00403315 	.word	0x00403315

00400ac8 <hal_io_clock_write>:
void hal_io_clock_write( tTime* t ){
  400ac8:	b570      	push	{r4, r5, r6, lr}
  400aca:	b082      	sub	sp, #8
  400acc:	4604      	mov	r4, r0
	rtc_set_date( RTC, t->year, t->month, t->day, 1 );	//not too sure how week works, but if week is
  400ace:	4d08      	ldr	r5, [pc, #32]	; (400af0 <hal_io_clock_write+0x28>)
  400ad0:	2301      	movs	r3, #1
  400ad2:	9300      	str	r3, [sp, #0]
  400ad4:	68c3      	ldr	r3, [r0, #12]
  400ad6:	6902      	ldr	r2, [r0, #16]
  400ad8:	6941      	ldr	r1, [r0, #20]
  400ada:	4628      	mov	r0, r5
  400adc:	4e05      	ldr	r6, [pc, #20]	; (400af4 <hal_io_clock_write+0x2c>)
  400ade:	47b0      	blx	r6
	rtc_set_time( RTC, t->hours, t->minutes, t->seconds );
  400ae0:	6823      	ldr	r3, [r4, #0]
  400ae2:	6862      	ldr	r2, [r4, #4]
  400ae4:	68a1      	ldr	r1, [r4, #8]
  400ae6:	4628      	mov	r0, r5
  400ae8:	4c03      	ldr	r4, [pc, #12]	; (400af8 <hal_io_clock_write+0x30>)
  400aea:	47a0      	blx	r4
}
  400aec:	b002      	add	sp, #8
  400aee:	bd70      	pop	{r4, r5, r6, pc}
  400af0:	400e1460 	.word	0x400e1460
  400af4:	0040348d 	.word	0x0040348d
  400af8:	00403385 	.word	0x00403385

00400afc <hal_io_clock_read>:
void hal_io_clock_read( tTime* t ){
  400afc:	b5f0      	push	{r4, r5, r6, r7, lr}
  400afe:	b085      	sub	sp, #20
  400b00:	4604      	mov	r4, r0
	uint32_t dummy_week = 0;
  400b02:	ad04      	add	r5, sp, #16
  400b04:	2300      	movs	r3, #0
  400b06:	f845 3d04 	str.w	r3, [r5, #-4]!
	rtc_get_time(RTC, &(t->hours), &(t->minutes), &(t->seconds));
  400b0a:	4e0a      	ldr	r6, [pc, #40]	; (400b34 <hal_io_clock_read+0x38>)
  400b0c:	4603      	mov	r3, r0
  400b0e:	1d02      	adds	r2, r0, #4
  400b10:	f100 0108 	add.w	r1, r0, #8
  400b14:	4630      	mov	r0, r6
  400b16:	4f08      	ldr	r7, [pc, #32]	; (400b38 <hal_io_clock_read+0x3c>)
  400b18:	47b8      	blx	r7
	rtc_get_date(RTC, &(t->year), &(t->month), &(t->day), &dummy_week);
  400b1a:	9500      	str	r5, [sp, #0]
  400b1c:	f104 030c 	add.w	r3, r4, #12
  400b20:	f104 0210 	add.w	r2, r4, #16
  400b24:	f104 0114 	add.w	r1, r4, #20
  400b28:	4630      	mov	r0, r6
  400b2a:	4c04      	ldr	r4, [pc, #16]	; (400b3c <hal_io_clock_read+0x40>)
  400b2c:	47a0      	blx	r4
}
  400b2e:	b005      	add	sp, #20
  400b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400b32:	bf00      	nop
  400b34:	400e1460 	.word	0x400e1460
  400b38:	0040332b 	.word	0x0040332b
  400b3c:	00403419 	.word	0x00403419

00400b40 <hal_io_display_start>:
void hal_io_display_start(void){
  400b40:	b508      	push	{r3, lr}
	ssd1306_init();	//on-board OLED
  400b42:	4b01      	ldr	r3, [pc, #4]	; (400b48 <hal_io_display_start+0x8>)
  400b44:	4798      	blx	r3
  400b46:	bd08      	pop	{r3, pc}
  400b48:	00401785 	.word	0x00401785

00400b4c <hal_io_display_putc>:
void hal_io_display_putc( uint8_t character ){
  400b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400b50:	b082      	sub	sp, #8
	char_ptr = font_table[character - 32];
  400b52:	3820      	subs	r0, #32
  400b54:	4b1f      	ldr	r3, [pc, #124]	; (400bd4 <hal_io_display_putc+0x88>)
  400b56:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
	for (i = 1; i <= char_ptr[0]; i++) {
  400b5a:	783b      	ldrb	r3, [r7, #0]
  400b5c:	b303      	cbz	r3, 400ba0 <hal_io_display_putc+0x54>
  400b5e:	2401      	movs	r4, #1
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  400b60:	4e1d      	ldr	r6, [pc, #116]	; (400bd8 <hal_io_display_putc+0x8c>)
  400b62:	f8df 9080 	ldr.w	r9, [pc, #128]	; 400be4 <hal_io_display_putc+0x98>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b66:	f8df 8080 	ldr.w	r8, [pc, #128]	; 400be8 <hal_io_display_putc+0x9c>
		ssd1306_write_data(char_ptr[i]);
  400b6a:	f817 a004 	ldrb.w	sl, [r7, r4]
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400b6e:	ad02      	add	r5, sp, #8
  400b70:	2302      	movs	r3, #2
  400b72:	f845 3d04 	str.w	r3, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400b76:	4629      	mov	r1, r5
  400b78:	4630      	mov	r0, r6
  400b7a:	47c8      	blx	r9
  400b7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400b80:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  400b84:	f8c6 a00c 	str.w	sl, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  400b88:	2056      	movs	r0, #86	; 0x56
  400b8a:	4b14      	ldr	r3, [pc, #80]	; (400bdc <hal_io_display_putc+0x90>)
  400b8c:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400b8e:	4629      	mov	r1, r5
  400b90:	4630      	mov	r0, r6
  400b92:	4b13      	ldr	r3, [pc, #76]	; (400be0 <hal_io_display_putc+0x94>)
  400b94:	4798      	blx	r3
	for (i = 1; i <= char_ptr[0]; i++) {
  400b96:	3401      	adds	r4, #1
  400b98:	b2e4      	uxtb	r4, r4
  400b9a:	783b      	ldrb	r3, [r7, #0]
  400b9c:	42a3      	cmp	r3, r4
  400b9e:	d2e4      	bcs.n	400b6a <hal_io_display_putc+0x1e>
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400ba0:	ac02      	add	r4, sp, #8
  400ba2:	2302      	movs	r3, #2
  400ba4:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400ba8:	4d0b      	ldr	r5, [pc, #44]	; (400bd8 <hal_io_display_putc+0x8c>)
  400baa:	4621      	mov	r1, r4
  400bac:	4628      	mov	r0, r5
  400bae:	4b0d      	ldr	r3, [pc, #52]	; (400be4 <hal_io_display_putc+0x98>)
  400bb0:	4798      	blx	r3
  400bb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400bb6:	4b0c      	ldr	r3, [pc, #48]	; (400be8 <hal_io_display_putc+0x9c>)
  400bb8:	631a      	str	r2, [r3, #48]	; 0x30
  400bba:	2300      	movs	r3, #0
  400bbc:	60eb      	str	r3, [r5, #12]
	delay_us(SSD1306_LATENCY); // At least 3us
  400bbe:	2056      	movs	r0, #86	; 0x56
  400bc0:	4b06      	ldr	r3, [pc, #24]	; (400bdc <hal_io_display_putc+0x90>)
  400bc2:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400bc4:	4621      	mov	r1, r4
  400bc6:	4628      	mov	r0, r5
  400bc8:	4b05      	ldr	r3, [pc, #20]	; (400be0 <hal_io_display_putc+0x94>)
  400bca:	4798      	blx	r3
}
  400bcc:	b002      	add	sp, #8
  400bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400bd2:	bf00      	nop
  400bd4:	200002dc 	.word	0x200002dc
  400bd8:	40008000 	.word	0x40008000
  400bdc:	20000001 	.word	0x20000001
  400be0:	00402ad5 	.word	0x00402ad5
  400be4:	00402aa5 	.word	0x00402aa5
  400be8:	400e1200 	.word	0x400e1200

00400bec <hal_io_display_cls>:
void hal_io_display_cls(void){
  400bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400bf0:	b083      	sub	sp, #12
  400bf2:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400bf6:	f8df b080 	ldr.w	fp, [pc, #128]	; 400c78 <hal_io_display_cls+0x8c>
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  400bfa:	4657      	mov	r7, sl
  400bfc:	f8df 907c 	ldr.w	r9, [pc, #124]	; 400c7c <hal_io_display_cls+0x90>
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400c00:	f00a 0007 	and.w	r0, sl, #7
  400c04:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400c08:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  400c0a:	2010      	movs	r0, #16
  400c0c:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  400c0e:	4638      	mov	r0, r7
  400c10:	47d8      	blx	fp
  400c12:	2680      	movs	r6, #128	; 0x80
	spi_select_device(SSD1306_SPI, &device);
  400c14:	4d14      	ldr	r5, [pc, #80]	; (400c68 <hal_io_display_cls+0x7c>)
  400c16:	f8df 8068 	ldr.w	r8, [pc, #104]	; 400c80 <hal_io_display_cls+0x94>
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400c1a:	ac02      	add	r4, sp, #8
  400c1c:	2302      	movs	r3, #2
  400c1e:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400c22:	4621      	mov	r1, r4
  400c24:	4628      	mov	r0, r5
  400c26:	47c0      	blx	r8
  400c28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400c2c:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  400c30:	60ef      	str	r7, [r5, #12]
	delay_us(SSD1306_LATENCY); // At least 3us
  400c32:	2056      	movs	r0, #86	; 0x56
  400c34:	4b0d      	ldr	r3, [pc, #52]	; (400c6c <hal_io_display_cls+0x80>)
  400c36:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400c38:	4621      	mov	r1, r4
  400c3a:	4628      	mov	r0, r5
  400c3c:	4b0c      	ldr	r3, [pc, #48]	; (400c70 <hal_io_display_cls+0x84>)
  400c3e:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  400c40:	3e01      	subs	r6, #1
  400c42:	d1ea      	bne.n	400c1a <hal_io_display_cls+0x2e>
  400c44:	f10a 0a01 	add.w	sl, sl, #1
	for (page = 0; page < 4; ++page)
  400c48:	f1ba 0f04 	cmp.w	sl, #4
  400c4c:	d1d8      	bne.n	400c00 <hal_io_display_cls+0x14>
	ssd1306_set_page_address( display_curr_line = 0 );
  400c4e:	2500      	movs	r5, #0
  400c50:	4b08      	ldr	r3, [pc, #32]	; (400c74 <hal_io_display_cls+0x88>)
  400c52:	601d      	str	r5, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400c54:	20b0      	movs	r0, #176	; 0xb0
  400c56:	4c08      	ldr	r4, [pc, #32]	; (400c78 <hal_io_display_cls+0x8c>)
  400c58:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  400c5a:	2010      	movs	r0, #16
  400c5c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  400c5e:	4628      	mov	r0, r5
  400c60:	47a0      	blx	r4
}
  400c62:	b003      	add	sp, #12
  400c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400c68:	40008000 	.word	0x40008000
  400c6c:	20000001 	.word	0x20000001
  400c70:	00402ad5 	.word	0x00402ad5
  400c74:	20000e88 	.word	0x20000e88
  400c78:	004007f9 	.word	0x004007f9
  400c7c:	400e1200 	.word	0x400e1200
  400c80:	00402aa5 	.word	0x00402aa5

00400c84 <hal_io_display_gotoxy>:
void hal_io_display_gotoxy( uint32_t x, uint32_t y ){
  400c84:	b538      	push	{r3, r4, r5, lr}
  400c86:	460c      	mov	r4, r1
	ssd1306_set_page_address( display_curr_line = x);
  400c88:	4b08      	ldr	r3, [pc, #32]	; (400cac <hal_io_display_gotoxy+0x28>)
  400c8a:	6018      	str	r0, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400c8c:	f000 0007 	and.w	r0, r0, #7
  400c90:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400c94:	4d06      	ldr	r5, [pc, #24]	; (400cb0 <hal_io_display_gotoxy+0x2c>)
  400c96:	47a8      	blx	r5
	ssd1306_set_column_address(y);
  400c98:	b2e4      	uxtb	r4, r4
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  400c9a:	f3c4 1002 	ubfx	r0, r4, #4, #3
  400c9e:	f040 0010 	orr.w	r0, r0, #16
  400ca2:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  400ca4:	f004 000f 	and.w	r0, r4, #15
  400ca8:	47a8      	blx	r5
  400caa:	bd38      	pop	{r3, r4, r5, pc}
  400cac:	20000e88 	.word	0x20000e88
  400cb0:	004007f9 	.word	0x004007f9

00400cb4 <hal_io_display_numlines>:
}
  400cb4:	2004      	movs	r0, #4
  400cb6:	4770      	bx	lr

00400cb8 <hal_io_display_currline>:
}
  400cb8:	4b01      	ldr	r3, [pc, #4]	; (400cc0 <hal_io_display_currline+0x8>)
  400cba:	6818      	ldr	r0, [r3, #0]
  400cbc:	4770      	bx	lr
  400cbe:	bf00      	nop
  400cc0:	20000e88 	.word	0x20000e88

00400cc4 <hal_io_sensor_start_poll>:
void hal_io_sensor_start_poll( tSensorId sensor_id ){
  400cc4:	b538      	push	{r3, r4, r5, lr}
	switch( sensor_id ){
  400cc6:	b110      	cbz	r0, 400cce <hal_io_sensor_start_poll+0xa>
  400cc8:	2801      	cmp	r0, #1
  400cca:	d01c      	beq.n	400d06 <hal_io_sensor_start_poll+0x42>
  400ccc:	bd38      	pop	{r3, r4, r5, pc}
	gpio_configure_pin(LIGHT_SENSOR_GPIO, LIGHT_SENSOR_FLAGS);
  400cce:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400cd2:	2020      	movs	r0, #32
  400cd4:	4b0d      	ldr	r3, [pc, #52]	; (400d0c <hal_io_sensor_start_poll+0x48>)
  400cd6:	4798      	blx	r3
	pmc_enable_periph_clk(ID_ADC);
  400cd8:	201d      	movs	r0, #29
  400cda:	4b0d      	ldr	r3, [pc, #52]	; (400d10 <hal_io_sensor_start_poll+0x4c>)
  400cdc:	4798      	blx	r3
	adc_init(ADC, sysclk_get_cpu_hz(), 1000000, ADC_MR_STARTUP_SUT0);
  400cde:	4c0d      	ldr	r4, [pc, #52]	; (400d14 <hal_io_sensor_start_poll+0x50>)
  400ce0:	2300      	movs	r3, #0
  400ce2:	4a0d      	ldr	r2, [pc, #52]	; (400d18 <hal_io_sensor_start_poll+0x54>)
  400ce4:	490d      	ldr	r1, [pc, #52]	; (400d1c <hal_io_sensor_start_poll+0x58>)
  400ce6:	4620      	mov	r0, r4
  400ce8:	4d0d      	ldr	r5, [pc, #52]	; (400d20 <hal_io_sensor_start_poll+0x5c>)
  400cea:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_4);		//ADC channel 4
  400cec:	2104      	movs	r1, #4
  400cee:	4620      	mov	r0, r4
  400cf0:	4b0c      	ldr	r3, [pc, #48]	; (400d24 <hal_io_sensor_start_poll+0x60>)
  400cf2:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 1);	
  400cf4:	2201      	movs	r2, #1
  400cf6:	2100      	movs	r1, #0
  400cf8:	4620      	mov	r0, r4
  400cfa:	4b0b      	ldr	r3, [pc, #44]	; (400d28 <hal_io_sensor_start_poll+0x64>)
  400cfc:	4798      	blx	r3
	adc_start(ADC);		
  400cfe:	4620      	mov	r0, r4
  400d00:	4b0a      	ldr	r3, [pc, #40]	; (400d2c <hal_io_sensor_start_poll+0x68>)
  400d02:	4798      	blx	r3
  400d04:	bd38      	pop	{r3, r4, r5, pc}
	at30tse_init();	
  400d06:	4b0a      	ldr	r3, [pc, #40]	; (400d30 <hal_io_sensor_start_poll+0x6c>)
  400d08:	4798      	blx	r3
  400d0a:	bd38      	pop	{r3, r4, r5, pc}
  400d0c:	00402ef9 	.word	0x00402ef9
  400d10:	004032c1 	.word	0x004032c1
  400d14:	40038000 	.word	0x40038000
  400d18:	000f4240 	.word	0x000f4240
  400d1c:	07270e00 	.word	0x07270e00
  400d20:	00402d01 	.word	0x00402d01
  400d24:	00402d49 	.word	0x00402d49
  400d28:	00402d35 	.word	0x00402d35
  400d2c:	00402d43 	.word	0x00402d43
  400d30:	0040183d 	.word	0x0040183d
  400d34:	00000000 	.word	0x00000000

00400d38 <hal_io_sensor_read>:
uint32_t hal_io_sensor_read( tSensorId sensor_id ){
  400d38:	b510      	push	{r4, lr}
  400d3a:	b084      	sub	sp, #16
	switch( sensor_id ){
  400d3c:	b118      	cbz	r0, 400d46 <hal_io_sensor_read+0xe>
  400d3e:	2801      	cmp	r0, #1
  400d40:	d01a      	beq.n	400d78 <hal_io_sensor_read+0x40>
	uint32_t val = 0;
  400d42:	2000      	movs	r0, #0
	return val;
  400d44:	e016      	b.n	400d74 <hal_io_sensor_read+0x3c>
	return adc_get_channel_value(ADC, ADC_CHANNEL_4);
  400d46:	2104      	movs	r1, #4
  400d48:	481b      	ldr	r0, [pc, #108]	; (400db8 <hal_io_sensor_read+0x80>)
  400d4a:	4b1c      	ldr	r3, [pc, #112]	; (400dbc <hal_io_sensor_read+0x84>)
  400d4c:	4798      	blx	r3
			val = 100 - ( val/4095.0 * 100 ); //normalize to 100, 0 being darkest
  400d4e:	4b1c      	ldr	r3, [pc, #112]	; (400dc0 <hal_io_sensor_read+0x88>)
  400d50:	4798      	blx	r3
  400d52:	a317      	add	r3, pc, #92	; (adr r3, 400db0 <hal_io_sensor_read+0x78>)
  400d54:	e9d3 2300 	ldrd	r2, r3, [r3]
  400d58:	4c1a      	ldr	r4, [pc, #104]	; (400dc4 <hal_io_sensor_read+0x8c>)
  400d5a:	47a0      	blx	r4
  400d5c:	2200      	movs	r2, #0
  400d5e:	4b1a      	ldr	r3, [pc, #104]	; (400dc8 <hal_io_sensor_read+0x90>)
  400d60:	4c1a      	ldr	r4, [pc, #104]	; (400dcc <hal_io_sensor_read+0x94>)
  400d62:	47a0      	blx	r4
  400d64:	4602      	mov	r2, r0
  400d66:	460b      	mov	r3, r1
  400d68:	2000      	movs	r0, #0
  400d6a:	4917      	ldr	r1, [pc, #92]	; (400dc8 <hal_io_sensor_read+0x90>)
  400d6c:	4c18      	ldr	r4, [pc, #96]	; (400dd0 <hal_io_sensor_read+0x98>)
  400d6e:	47a0      	blx	r4
  400d70:	4b18      	ldr	r3, [pc, #96]	; (400dd4 <hal_io_sensor_read+0x9c>)
  400d72:	4798      	blx	r3
}
  400d74:	b004      	add	sp, #16
  400d76:	bd10      	pop	{r4, pc}
	volatile double ret_val = 0;
  400d78:	2200      	movs	r2, #0
  400d7a:	2300      	movs	r3, #0
  400d7c:	e9cd 2300 	strd	r2, r3, [sp]
	volatile uint64_t tries = 3;
  400d80:	2203      	movs	r2, #3
  400d82:	2300      	movs	r3, #0
  400d84:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while( at30tse_read_temperature(&ret_val) != TWI_SUCCESS && tries++ <= 3);
  400d88:	4c13      	ldr	r4, [pc, #76]	; (400dd8 <hal_io_sensor_read+0xa0>)
  400d8a:	4668      	mov	r0, sp
  400d8c:	47a0      	blx	r4
  400d8e:	b150      	cbz	r0, 400da6 <hal_io_sensor_read+0x6e>
  400d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400d94:	1c50      	adds	r0, r2, #1
  400d96:	f143 0100 	adc.w	r1, r3, #0
  400d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400d9e:	2b00      	cmp	r3, #0
  400da0:	bf08      	it	eq
  400da2:	2a04      	cmpeq	r2, #4
  400da4:	d3f1      	bcc.n	400d8a <hal_io_sensor_read+0x52>
	return (uint32_t)ret_val; //return truncated temperature
  400da6:	e9dd 0100 	ldrd	r0, r1, [sp]
  400daa:	4b0a      	ldr	r3, [pc, #40]	; (400dd4 <hal_io_sensor_read+0x9c>)
  400dac:	4798      	blx	r3
			break;
  400dae:	e7e1      	b.n	400d74 <hal_io_sensor_read+0x3c>
  400db0:	00000000 	.word	0x00000000
  400db4:	40affe00 	.word	0x40affe00
  400db8:	40038000 	.word	0x40038000
  400dbc:	00402d53 	.word	0x00402d53
  400dc0:	00405be5 	.word	0x00405be5
  400dc4:	00405f25 	.word	0x00405f25
  400dc8:	40590000 	.word	0x40590000
  400dcc:	00405cd1 	.word	0x00405cd1
  400dd0:	00405969 	.word	0x00405969
  400dd4:	004060f5 	.word	0x004060f5
  400dd8:	004018a9 	.word	0x004018a9

00400ddc <hal_io_button_startall_poll>:
void hal_io_button_startall_poll(){
  400ddc:	4770      	bx	lr
	...

00400de0 <hal_io_button_read>:
	switch( button_num ){
  400de0:	2803      	cmp	r0, #3
  400de2:	d81f      	bhi.n	400e24 <hal_io_button_read+0x44>
  400de4:	e8df f000 	tbb	[pc, r0]
  400de8:	17100902 	.word	0x17100902
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400dec:	4b0e      	ldr	r3, [pc, #56]	; (400e28 <hal_io_button_read+0x48>)
  400dee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		case 0: return !ioport_get_pin_level( BUTTON0_PIN );
  400df0:	f080 0004 	eor.w	r0, r0, #4
  400df4:	f3c0 0080 	ubfx	r0, r0, #2, #1
  400df8:	4770      	bx	lr
  400dfa:	4b0b      	ldr	r3, [pc, #44]	; (400e28 <hal_io_button_read+0x48>)
  400dfc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		case 1: return !ioport_get_pin_level( BUTTON1_PIN );
  400dfe:	f080 0001 	eor.w	r0, r0, #1
  400e02:	f000 0001 	and.w	r0, r0, #1
  400e06:	4770      	bx	lr
  400e08:	4b08      	ldr	r3, [pc, #32]	; (400e2c <hal_io_button_read+0x4c>)
  400e0a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		case 2: return !ioport_get_pin_level( BUTTON2_PIN );
  400e0c:	f080 5000 	eor.w	r0, r0, #536870912	; 0x20000000
  400e10:	f3c0 7040 	ubfx	r0, r0, #29, #1
  400e14:	4770      	bx	lr
  400e16:	4b05      	ldr	r3, [pc, #20]	; (400e2c <hal_io_button_read+0x4c>)
  400e18:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		case 3: return !ioport_get_pin_level( BUTTON3_PIN );
  400e1a:	f080 4080 	eor.w	r0, r0, #1073741824	; 0x40000000
  400e1e:	f3c0 7080 	ubfx	r0, r0, #30, #1
  400e22:	4770      	bx	lr
		default: return ButtonUnpressed; //Button does not exist		
  400e24:	2000      	movs	r0, #0
}
  400e26:	4770      	bx	lr
  400e28:	400e0e00 	.word	0x400e0e00
  400e2c:	400e1200 	.word	0x400e1200

00400e30 <hal_io_serial_start_poll>:
void hal_io_serial_start_poll( tSerialId serial_id, uint32_t baudrate ){
  400e30:	b508      	push	{r3, lr}
	switch( serial_id ){
  400e32:	b110      	cbz	r0, 400e3a <hal_io_serial_start_poll+0xa>
  400e34:	2801      	cmp	r0, #1
  400e36:	d004      	beq.n	400e42 <hal_io_serial_start_poll+0x12>
  400e38:	bd08      	pop	{r3, pc}
		case SerialA:	configure_uart1(baudrate);	break;	//SerialA is UART1
  400e3a:	4608      	mov	r0, r1
  400e3c:	4b03      	ldr	r3, [pc, #12]	; (400e4c <hal_io_serial_start_poll+0x1c>)
  400e3e:	4798      	blx	r3
  400e40:	bd08      	pop	{r3, pc}
		case SerialB:	configure_usart1(baudrate);	break;	//SerialB is USART1
  400e42:	4608      	mov	r0, r1
  400e44:	4b02      	ldr	r3, [pc, #8]	; (400e50 <hal_io_serial_start_poll+0x20>)
  400e46:	4798      	blx	r3
  400e48:	bd08      	pop	{r3, pc}
  400e4a:	bf00      	nop
  400e4c:	00400841 	.word	0x00400841
  400e50:	004008a1 	.word	0x004008a1

00400e54 <hal_io_serial_putc>:
void hal_io_serial_putc( tSerialId serial_id, uint8_t c ){
  400e54:	b508      	push	{r3, lr}
	switch( serial_id ){
  400e56:	b110      	cbz	r0, 400e5e <hal_io_serial_putc+0xa>
  400e58:	2801      	cmp	r0, #1
  400e5a:	d009      	beq.n	400e70 <hal_io_serial_putc+0x1c>
  400e5c:	bd08      	pop	{r3, pc}

static void uart1_putc( uint8_t c ){
	while ( !(UART1->UART_SR & UART_SR_TXRDY) ); //wait for Tx to be available
  400e5e:	4a09      	ldr	r2, [pc, #36]	; (400e84 <hal_io_serial_putc+0x30>)
  400e60:	6953      	ldr	r3, [r2, #20]
  400e62:	f013 0f02 	tst.w	r3, #2
  400e66:	d0fb      	beq.n	400e60 <hal_io_serial_putc+0xc>
	uart_write( UART1, c );						 //transmit
  400e68:	4806      	ldr	r0, [pc, #24]	; (400e84 <hal_io_serial_putc+0x30>)
  400e6a:	4b07      	ldr	r3, [pc, #28]	; (400e88 <hal_io_serial_putc+0x34>)
  400e6c:	4798      	blx	r3
  400e6e:	bd08      	pop	{r3, pc}
}

static void usart1_putc( uint8_t c ){
	while( !(USART_SERIAL->US_CSR & US_CSR_TXRDY) ); //wait until TX is ready
  400e70:	4a06      	ldr	r2, [pc, #24]	; (400e8c <hal_io_serial_putc+0x38>)
  400e72:	6953      	ldr	r3, [r2, #20]
  400e74:	f013 0f02 	tst.w	r3, #2
  400e78:	d0fb      	beq.n	400e72 <hal_io_serial_putc+0x1e>
	usart_write( USART_SERIAL, c );					 //write
  400e7a:	4804      	ldr	r0, [pc, #16]	; (400e8c <hal_io_serial_putc+0x38>)
  400e7c:	4b04      	ldr	r3, [pc, #16]	; (400e90 <hal_io_serial_putc+0x3c>)
  400e7e:	4798      	blx	r3
  400e80:	bd08      	pop	{r3, pc}
  400e82:	bf00      	nop
  400e84:	400e0800 	.word	0x400e0800
  400e88:	0040388f 	.word	0x0040388f
  400e8c:	40028000 	.word	0x40028000
  400e90:	0040399d 	.word	0x0040399d

00400e94 <hal_io_serial_getc>:
uint8_t hal_io_serial_getc( tSerialId serial_id ){
  400e94:	b530      	push	{r4, r5, lr}
  400e96:	b083      	sub	sp, #12
	uint8_t buf = 0;
  400e98:	2300      	movs	r3, #0
  400e9a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch( serial_id ){
  400e9e:	b128      	cbz	r0, 400eac <hal_io_serial_getc+0x18>
  400ea0:	2801      	cmp	r0, #1
  400ea2:	d010      	beq.n	400ec6 <hal_io_serial_getc+0x32>
}
  400ea4:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400ea8:	b003      	add	sp, #12
  400eaa:	bd30      	pop	{r4, r5, pc}
}

static void uart1_getc( uint8_t* buf ){
	while( !(uart_get_status(UART1) & UART_SR_RXRDY) ); //wait until a character is ready
  400eac:	4d0c      	ldr	r5, [pc, #48]	; (400ee0 <hal_io_serial_getc+0x4c>)
  400eae:	4c0d      	ldr	r4, [pc, #52]	; (400ee4 <hal_io_serial_getc+0x50>)
  400eb0:	4628      	mov	r0, r5
  400eb2:	47a0      	blx	r4
  400eb4:	f010 0f01 	tst.w	r0, #1
  400eb8:	d0fa      	beq.n	400eb0 <hal_io_serial_getc+0x1c>
	uart_read( UART1, buf );							//read
  400eba:	f10d 0107 	add.w	r1, sp, #7
  400ebe:	4808      	ldr	r0, [pc, #32]	; (400ee0 <hal_io_serial_getc+0x4c>)
  400ec0:	4b09      	ldr	r3, [pc, #36]	; (400ee8 <hal_io_serial_getc+0x54>)
  400ec2:	4798      	blx	r3
  400ec4:	e7ee      	b.n	400ea4 <hal_io_serial_getc+0x10>
}

static void usart1_getc( uint8_t* buf ){
	while( !(usart_get_status(USART1) & US_CSR_RXRDY) ); //wait until a character is available
  400ec6:	4d09      	ldr	r5, [pc, #36]	; (400eec <hal_io_serial_getc+0x58>)
  400ec8:	4c09      	ldr	r4, [pc, #36]	; (400ef0 <hal_io_serial_getc+0x5c>)
  400eca:	4628      	mov	r0, r5
  400ecc:	47a0      	blx	r4
  400ece:	f010 0f01 	tst.w	r0, #1
  400ed2:	d0fa      	beq.n	400eca <hal_io_serial_getc+0x36>
	usart_read(USART1, buf);							 //read
  400ed4:	f10d 0107 	add.w	r1, sp, #7
  400ed8:	4804      	ldr	r0, [pc, #16]	; (400eec <hal_io_serial_getc+0x58>)
  400eda:	4b06      	ldr	r3, [pc, #24]	; (400ef4 <hal_io_serial_getc+0x60>)
  400edc:	4798      	blx	r3
  400ede:	e7e1      	b.n	400ea4 <hal_io_serial_getc+0x10>
  400ee0:	400e0800 	.word	0x400e0800
  400ee4:	0040388b 	.word	0x0040388b
  400ee8:	0040389f 	.word	0x0040389f
  400eec:	40028000 	.word	0x40028000
  400ef0:	00403999 	.word	0x00403999
  400ef4:	004039b1 	.word	0x004039b1

00400ef8 <UART1_Handler>:
}


//UART1 ISR
void UART1_Handler(){
  400ef8:	b500      	push	{lr}
  400efa:	b083      	sub	sp, #12
	uint8_t rx_data;
	uint32_t status = uart_get_status(UART1);
  400efc:	4809      	ldr	r0, [pc, #36]	; (400f24 <UART1_Handler+0x2c>)
  400efe:	4b0a      	ldr	r3, [pc, #40]	; (400f28 <UART1_Handler+0x30>)
  400f00:	4798      	blx	r3
	
	if(status & UART_SR_RXRDY){
  400f02:	f010 0f01 	tst.w	r0, #1
  400f06:	d102      	bne.n	400f0e <UART1_Handler+0x16>
		uart_read(UART1, &rx_data);
		
		//pass to upper layer
		uart1_callback(rx_data);
	}
}
  400f08:	b003      	add	sp, #12
  400f0a:	f85d fb04 	ldr.w	pc, [sp], #4
		uart_read(UART1, &rx_data);
  400f0e:	f10d 0107 	add.w	r1, sp, #7
  400f12:	4804      	ldr	r0, [pc, #16]	; (400f24 <UART1_Handler+0x2c>)
  400f14:	4b05      	ldr	r3, [pc, #20]	; (400f2c <UART1_Handler+0x34>)
  400f16:	4798      	blx	r3
		uart1_callback(rx_data);
  400f18:	4b05      	ldr	r3, [pc, #20]	; (400f30 <UART1_Handler+0x38>)
  400f1a:	681b      	ldr	r3, [r3, #0]
  400f1c:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400f20:	4798      	blx	r3
}
  400f22:	e7f1      	b.n	400f08 <UART1_Handler+0x10>
  400f24:	400e0800 	.word	0x400e0800
  400f28:	0040388b 	.word	0x0040388b
  400f2c:	0040389f 	.word	0x0040389f
  400f30:	20000e90 	.word	0x20000e90

00400f34 <USART1_Handler>:

//USART1 ISR
void USART1_Handler(){
  400f34:	b500      	push	{lr}
  400f36:	b083      	sub	sp, #12
	uint8_t received_byte;
	uint32_t dw_status = usart_get_status(USART1);
  400f38:	4809      	ldr	r0, [pc, #36]	; (400f60 <USART1_Handler+0x2c>)
  400f3a:	4b0a      	ldr	r3, [pc, #40]	; (400f64 <USART1_Handler+0x30>)
  400f3c:	4798      	blx	r3
	
	if (dw_status & US_CSR_RXRDY) {
  400f3e:	f010 0f01 	tst.w	r0, #1
  400f42:	d102      	bne.n	400f4a <USART1_Handler+0x16>
		usart_read(USART1, &received_byte);
		
		//pass to upper layer
		usart1_callback(received_byte);
	}
}
  400f44:	b003      	add	sp, #12
  400f46:	f85d fb04 	ldr.w	pc, [sp], #4
		usart_read(USART1, &received_byte);
  400f4a:	f10d 0107 	add.w	r1, sp, #7
  400f4e:	4804      	ldr	r0, [pc, #16]	; (400f60 <USART1_Handler+0x2c>)
  400f50:	4b05      	ldr	r3, [pc, #20]	; (400f68 <USART1_Handler+0x34>)
  400f52:	4798      	blx	r3
		usart1_callback(received_byte);
  400f54:	4b05      	ldr	r3, [pc, #20]	; (400f6c <USART1_Handler+0x38>)
  400f56:	681b      	ldr	r3, [r3, #0]
  400f58:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400f5c:	4798      	blx	r3
}
  400f5e:	e7f1      	b.n	400f44 <USART1_Handler+0x10>
  400f60:	40028000 	.word	0x40028000
  400f64:	00403999 	.word	0x00403999
  400f68:	004039b1 	.word	0x004039b1
  400f6c:	20000e94 	.word	0x20000e94

00400f70 <hal_memreg_init>:
*
*	Initializes Memory. This function must be called after
*	HAL CPU Init. That is: hal_cpu_init(); hal_mem_init();...
*
*/
void hal_memreg_init(void){
  400f70:	4770      	bx	lr
	...

00400f74 <hal_memreg_read>:
*
*	@param memid	the specified memory region
*	@param memreg	a pointer to the tMemRegion variable to be populated
*/
void hal_memreg_read( tMemRegionId memid, tMemRegion* memreg ){
	if( memreg == 0 ) return; //Error (null ptr)
  400f74:	b1e9      	cbz	r1, 400fb2 <hal_memreg_read+0x3e>
	
	memreg->id = memid;
  400f76:	6008      	str	r0, [r1, #0]
	
	switch( memid ){
  400f78:	2803      	cmp	r0, #3
  400f7a:	d81a      	bhi.n	400fb2 <hal_memreg_read+0x3e>
  400f7c:	e8df f000 	tbb	[pc, r0]
  400f80:	140f0902 	.word	0x140f0902
		case MemRegSystem:
			memreg->base = MEM_REGION_SYS_BASEPTR;
  400f84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400f88:	604a      	str	r2, [r1, #4]
			memreg->size  = MEM_REGION_SYS_SIZE;
  400f8a:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
  400f8e:	608a      	str	r2, [r1, #8]
			break;
  400f90:	4770      	bx	lr
		case MemRegApp:
			memreg->base = MEM_REGION_APP_BASEPTR;
  400f92:	4a08      	ldr	r2, [pc, #32]	; (400fb4 <hal_memreg_read+0x40>)
  400f94:	604a      	str	r2, [r1, #4]
			memreg->size  = MEM_REGION_APP_SIZE;
  400f96:	f644 72fc 	movw	r2, #20476	; 0x4ffc
  400f9a:	608a      	str	r2, [r1, #8]
			break;
  400f9c:	4770      	bx	lr
		case MemRegSystemStack:
			memreg->base = &_estack;				//base = stack's end address
  400f9e:	4a06      	ldr	r2, [pc, #24]	; (400fb8 <hal_memreg_read+0x44>)
  400fa0:	604a      	str	r2, [r1, #4]
			memreg->size = &__stack_size__;			
  400fa2:	4a06      	ldr	r2, [pc, #24]	; (400fbc <hal_memreg_read+0x48>)
  400fa4:	608a      	str	r2, [r1, #8]
			break;
  400fa6:	4770      	bx	lr
		case MemRegUserStack:
			memreg->base = MEM_REGION_STACK_BASEPTR;				//base = stack's end address
  400fa8:	4a05      	ldr	r2, [pc, #20]	; (400fc0 <hal_memreg_read+0x4c>)
  400faa:	604a      	str	r2, [r1, #4]
			memreg->size = MEM_REGION_STACK_SIZE;
  400fac:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  400fb0:	608a      	str	r2, [r1, #8]
  400fb2:	4770      	bx	lr
  400fb4:	20014004 	.word	0x20014004
  400fb8:	20009260 	.word	0x20009260
  400fbc:	00003000 	.word	0x00003000
  400fc0:	20019000 	.word	0x20019000

00400fc4 <hal_nvmem_init>:
*
*	Initializes Non-volatile memory. This function must be called after
*	HAL CPU Init. That is: hal_cpu_init(); hal_nvmem_init();...
*
*/
void hal_nvmem_init(void){
  400fc4:	4770      	bx	lr
	...

00400fc8 <hal_nvmem_start>:
*	@param mem_id id of the memory to be initialized
*
*	@return true if the memory was initialized correctly, false otherwise.
*/
bool hal_nvmem_start( tNVMemId mem_id ){
	switch(mem_id){
  400fc8:	2801      	cmp	r0, #1
  400fca:	d117      	bne.n	400ffc <hal_nvmem_start+0x34>
bool hal_nvmem_start( tNVMemId mem_id ){
  400fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		case NVMemSDCardFAT:				//SD Card + FAT
			sdcard_fat_init = true;
  400fce:	2201      	movs	r2, #1
  400fd0:	4b13      	ldr	r3, [pc, #76]	; (401020 <hal_nvmem_start+0x58>)
  400fd2:	701a      	strb	r2, [r3, #0]
	return f_mount(LUN_ID_SD_MMC_0_MEM, &fs) == FR_OK;
}

static bool sdcard_init( uint32_t num_attempts ){
	//check for SD Card to be inserted
	if( !gpio_pin_is_low(SD_MMC_0_CD_GPIO) ){
  400fd4:	204c      	movs	r0, #76	; 0x4c
  400fd6:	4b13      	ldr	r3, [pc, #76]	; (401024 <hal_nvmem_start+0x5c>)
  400fd8:	4798      	blx	r3
  400fda:	b108      	cbz	r0, 400fe0 <hal_nvmem_start+0x18>
			return sdcard_init(10) && fs_mount();	
  400fdc:	2000      	movs	r0, #0
}
  400fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
	}
	
	//Init SD/MMC Stack
	sd_mmc_init();
  400fe0:	4b11      	ldr	r3, [pc, #68]	; (401028 <hal_nvmem_start+0x60>)
  400fe2:	4798      	blx	r3
  400fe4:	240b      	movs	r4, #11
	
	//Initializes Card
	while (	sd_mmc_check(0) != SD_MMC_OK ){
  400fe6:	4d11      	ldr	r5, [pc, #68]	; (40102c <hal_nvmem_start+0x64>)
		if( num_attempts-- <= 0 ) return false;
		delay_ms(200);
  400fe8:	4f11      	ldr	r7, [pc, #68]	; (401030 <hal_nvmem_start+0x68>)
  400fea:	4e12      	ldr	r6, [pc, #72]	; (401034 <hal_nvmem_start+0x6c>)
	while (	sd_mmc_check(0) != SD_MMC_OK ){
  400fec:	2000      	movs	r0, #0
  400fee:	47a8      	blx	r5
  400ff0:	b130      	cbz	r0, 401000 <hal_nvmem_start+0x38>
		if( num_attempts-- <= 0 ) return false;
  400ff2:	3c01      	subs	r4, #1
  400ff4:	d0f2      	beq.n	400fdc <hal_nvmem_start+0x14>
		delay_ms(200);
  400ff6:	4638      	mov	r0, r7
  400ff8:	47b0      	blx	r6
  400ffa:	e7f7      	b.n	400fec <hal_nvmem_start+0x24>
		case NVMemSDCard:		return false;							//unimplemented (raw access to sd card)
  400ffc:	2000      	movs	r0, #0
  400ffe:	4770      	bx	lr
	memset(&fs, 0, sizeof(FATFS));
  401000:	4c0d      	ldr	r4, [pc, #52]	; (401038 <hal_nvmem_start+0x70>)
  401002:	f44f 720c 	mov.w	r2, #560	; 0x230
  401006:	2100      	movs	r1, #0
  401008:	4620      	mov	r0, r4
  40100a:	4b0c      	ldr	r3, [pc, #48]	; (40103c <hal_nvmem_start+0x74>)
  40100c:	4798      	blx	r3
	return f_mount(LUN_ID_SD_MMC_0_MEM, &fs) == FR_OK;
  40100e:	4621      	mov	r1, r4
  401010:	2000      	movs	r0, #0
  401012:	4b0b      	ldr	r3, [pc, #44]	; (401040 <hal_nvmem_start+0x78>)
  401014:	4798      	blx	r3
			return sdcard_init(10) && fs_mount();	
  401016:	fab0 f080 	clz	r0, r0
  40101a:	0940      	lsrs	r0, r0, #5
  40101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40101e:	bf00      	nop
  401020:	200010c8 	.word	0x200010c8
  401024:	00402edd 	.word	0x00402edd
  401028:	00401b45 	.word	0x00401b45
  40102c:	00401b71 	.word	0x00401b71
  401030:	001a286e 	.word	0x001a286e
  401034:	20000001 	.word	0x20000001
  401038:	20000e98 	.word	0x20000e98
  40103c:	00406495 	.word	0x00406495
  401040:	00405389 	.word	0x00405389

00401044 <hal_nvmem_fat_file_size>:
uint32_t hal_nvmem_fat_file_size( uint8_t* fname ){
  401044:	b508      	push	{r3, lr}
	if( !sdcard_fat_init ) return 0;
  401046:	4b07      	ldr	r3, [pc, #28]	; (401064 <hal_nvmem_fat_file_size+0x20>)
  401048:	781b      	ldrb	r3, [r3, #0]
  40104a:	b90b      	cbnz	r3, 401050 <hal_nvmem_fat_file_size+0xc>
  40104c:	2000      	movs	r0, #0
  40104e:	bd08      	pop	{r3, pc}
	return f_stat( fname, &fno ) == FR_OK ? fno.fsize : 0;
  401050:	4905      	ldr	r1, [pc, #20]	; (401068 <hal_nvmem_fat_file_size+0x24>)
  401052:	4b06      	ldr	r3, [pc, #24]	; (40106c <hal_nvmem_fat_file_size+0x28>)
  401054:	4798      	blx	r3
  401056:	b910      	cbnz	r0, 40105e <hal_nvmem_fat_file_size+0x1a>
  401058:	4b03      	ldr	r3, [pc, #12]	; (401068 <hal_nvmem_fat_file_size+0x24>)
  40105a:	6818      	ldr	r0, [r3, #0]
  40105c:	bd08      	pop	{r3, pc}
  40105e:	2000      	movs	r0, #0
}
  401060:	bd08      	pop	{r3, pc}
  401062:	bf00      	nop
  401064:	200010c8 	.word	0x200010c8
  401068:	20006210 	.word	0x20006210
  40106c:	00405885 	.word	0x00405885

00401070 <hal_nvmem_fat_file_read>:
uint32_t hal_nvmem_fat_file_read( uint8_t* fname, uint8_t* buffer, uint32_t buf_size ){
  401070:	b5f0      	push	{r4, r5, r6, r7, lr}
  401072:	b08d      	sub	sp, #52	; 0x34
	if( !sdcard_fat_init ) return 0;
  401074:	4b14      	ldr	r3, [pc, #80]	; (4010c8 <hal_nvmem_fat_file_read+0x58>)
  401076:	781b      	ldrb	r3, [r3, #0]
  401078:	b91b      	cbnz	r3, 401082 <hal_nvmem_fat_file_read+0x12>
  40107a:	2400      	movs	r4, #0
}
  40107c:	4620      	mov	r0, r4
  40107e:	b00d      	add	sp, #52	; 0x34
  401080:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401082:	460d      	mov	r5, r1
  401084:	4616      	mov	r6, r2
	if( f_open(&fil, fname, FA_OPEN_EXISTING | FA_READ) != FR_OK ){
  401086:	2201      	movs	r2, #1
  401088:	4601      	mov	r1, r0
  40108a:	a803      	add	r0, sp, #12
  40108c:	4b0f      	ldr	r3, [pc, #60]	; (4010cc <hal_nvmem_fat_file_read+0x5c>)
  40108e:	4798      	blx	r3
  401090:	b9b8      	cbnz	r0, 4010c2 <hal_nvmem_fat_file_read+0x52>
	while ( n < buf_size ) {
  401092:	b1a6      	cbz	r6, 4010be <hal_nvmem_fat_file_read+0x4e>
  401094:	2400      	movs	r4, #0
		f_read(&fil, s, 1, &bytes_read);
  401096:	4f0e      	ldr	r7, [pc, #56]	; (4010d0 <hal_nvmem_fat_file_read+0x60>)
  401098:	ab02      	add	r3, sp, #8
  40109a:	2201      	movs	r2, #1
  40109c:	a901      	add	r1, sp, #4
  40109e:	a803      	add	r0, sp, #12
  4010a0:	47b8      	blx	r7
		if ( bytes_read != 1 )
  4010a2:	9b02      	ldr	r3, [sp, #8]
  4010a4:	2b01      	cmp	r3, #1
  4010a6:	d106      	bne.n	4010b6 <hal_nvmem_fat_file_read+0x46>
		*p_buffer++ = s[0];
  4010a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4010ac:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
  4010b0:	3401      	adds	r4, #1
	while ( n < buf_size ) {
  4010b2:	42a6      	cmp	r6, r4
  4010b4:	d1f0      	bne.n	401098 <hal_nvmem_fat_file_read+0x28>
	f_close(&fil);
  4010b6:	a803      	add	r0, sp, #12
  4010b8:	4b06      	ldr	r3, [pc, #24]	; (4010d4 <hal_nvmem_fat_file_read+0x64>)
  4010ba:	4798      	blx	r3
	return n;
  4010bc:	e7de      	b.n	40107c <hal_nvmem_fat_file_read+0xc>
	while ( n < buf_size ) {
  4010be:	4634      	mov	r4, r6
  4010c0:	e7f9      	b.n	4010b6 <hal_nvmem_fat_file_read+0x46>
		return 0; //0 bytes read
  4010c2:	2400      	movs	r4, #0
  4010c4:	e7da      	b.n	40107c <hal_nvmem_fat_file_read+0xc>
  4010c6:	bf00      	nop
  4010c8:	200010c8 	.word	0x200010c8
  4010cc:	004053b1 	.word	0x004053b1
  4010d0:	00405549 	.word	0x00405549
  4010d4:	00405775 	.word	0x00405775

004010d8 <hal_nvmem_fat_file_list>:
uint32_t hal_nvmem_fat_file_list( uint8_t list[][MEM_FAT_MAX_FNAME_LENGTH+1], uint32_t max_num_files ){
  4010d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010dc:	b0d3      	sub	sp, #332	; 0x14c
	if( !sdcard_fat_init ) return 0;
  4010de:	4b20      	ldr	r3, [pc, #128]	; (401160 <hal_nvmem_fat_file_list+0x88>)
  4010e0:	781b      	ldrb	r3, [r3, #0]
  4010e2:	b923      	cbnz	r3, 4010ee <hal_nvmem_fat_file_list+0x16>
  4010e4:	2500      	movs	r5, #0
}
  4010e6:	4628      	mov	r0, r5
  4010e8:	b053      	add	sp, #332	; 0x14c
  4010ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4010ee:	460f      	mov	r7, r1
  4010f0:	4606      	mov	r6, r0
	fno.lfname = c_lfn;
  4010f2:	ab01      	add	r3, sp, #4
  4010f4:	9350      	str	r3, [sp, #320]	; 0x140
	fno.lfsize = sizeof(c_lfn);
  4010f6:	f44f 7380 	mov.w	r3, #256	; 0x100
  4010fa:	9351      	str	r3, [sp, #324]	; 0x144
	if ( f_opendir( &dir, "0:" ) == FR_OK ){
  4010fc:	4919      	ldr	r1, [pc, #100]	; (401164 <hal_nvmem_fat_file_list+0x8c>)
  4010fe:	a841      	add	r0, sp, #260	; 0x104
  401100:	4b19      	ldr	r3, [pc, #100]	; (401168 <hal_nvmem_fat_file_list+0x90>)
  401102:	4798      	blx	r3
  401104:	bb50      	cbnz	r0, 40115c <hal_nvmem_fat_file_list+0x84>
  401106:	2500      	movs	r5, #0
		while( num_files < max_num_files && f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0 ){
  401108:	f8df 8064 	ldr.w	r8, [pc, #100]	; 401170 <hal_nvmem_fat_file_list+0x98>
			strcpy( list[num_files++], strlen(pc_fn) < MEM_FAT_MAX_FNAME_LENGTH ? pc_fn : "file name too large" );
  40110c:	f8df a064 	ldr.w	sl, [pc, #100]	; 401174 <hal_nvmem_fat_file_list+0x9c>
  401110:	f8df 9064 	ldr.w	r9, [pc, #100]	; 401178 <hal_nvmem_fat_file_list+0xa0>
		while( num_files < max_num_files && f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0 ){
  401114:	42bd      	cmp	r5, r7
  401116:	d0e6      	beq.n	4010e6 <hal_nvmem_fat_file_list+0xe>
  401118:	a94a      	add	r1, sp, #296	; 0x128
  40111a:	a841      	add	r0, sp, #260	; 0x104
  40111c:	47c0      	blx	r8
  40111e:	2800      	cmp	r0, #0
  401120:	d1e1      	bne.n	4010e6 <hal_nvmem_fat_file_list+0xe>
  401122:	f89d 3131 	ldrb.w	r3, [sp, #305]	; 0x131
  401126:	2b00      	cmp	r3, #0
  401128:	d0dd      	beq.n	4010e6 <hal_nvmem_fat_file_list+0xe>
			pc_fn = *fno.lfname ? fno.lfname : fno.fname;
  40112a:	9c50      	ldr	r4, [sp, #320]	; 0x140
  40112c:	7823      	ldrb	r3, [r4, #0]
  40112e:	b90b      	cbnz	r3, 401134 <hal_nvmem_fat_file_list+0x5c>
  401130:	f20d 1431 	addw	r4, sp, #305	; 0x131
			if (fno.fattrib & AM_DIR){
  401134:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
  401138:	f013 0f10 	tst.w	r3, #16
  40113c:	d10b      	bne.n	401156 <hal_nvmem_fat_file_list+0x7e>
			strcpy( list[num_files++], strlen(pc_fn) < MEM_FAT_MAX_FNAME_LENGTH ? pc_fn : "file name too large" );
  40113e:	3501      	adds	r5, #1
  401140:	4620      	mov	r0, r4
  401142:	47d0      	blx	sl
  401144:	281d      	cmp	r0, #29
  401146:	bf94      	ite	ls
  401148:	4621      	movls	r1, r4
  40114a:	4649      	movhi	r1, r9
  40114c:	4630      	mov	r0, r6
  40114e:	4b07      	ldr	r3, [pc, #28]	; (40116c <hal_nvmem_fat_file_list+0x94>)
  401150:	4798      	blx	r3
  401152:	361f      	adds	r6, #31
  401154:	e7de      	b.n	401114 <hal_nvmem_fat_file_list+0x3c>
		while( num_files < max_num_files && f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0 ){
  401156:	42bd      	cmp	r5, r7
  401158:	d3de      	bcc.n	401118 <hal_nvmem_fat_file_list+0x40>
  40115a:	e7c4      	b.n	4010e6 <hal_nvmem_fat_file_list+0xe>
	uint32_t num_files = 0; //files in the directory
  40115c:	2500      	movs	r5, #0
  40115e:	e7c2      	b.n	4010e6 <hal_nvmem_fat_file_list+0xe>
  401160:	200010c8 	.word	0x200010c8
  401164:	0040a9c4 	.word	0x0040a9c4
  401168:	0040578d 	.word	0x0040578d
  40116c:	0040685d 	.word	0x0040685d
  401170:	0040580d 	.word	0x0040580d
  401174:	00406941 	.word	0x00406941
  401178:	0040a9b0 	.word	0x0040a9b0

0040117c <loader_init>:

static tMemRegion app_memreg;						//Info to where the binary would be loaded to
static uint8_t binary[SYS_LOADER_BUFFER_MAX_SIZE];	//Binary's temporary buffer,  
static uint32_t app_stack_sz;

void loader_init(void){
  40117c:	b508      	push	{r3, lr}
	//Get App region details
	hal_memreg_read( MemRegApp, &app_memreg );
  40117e:	4902      	ldr	r1, [pc, #8]	; (401188 <loader_init+0xc>)
  401180:	2001      	movs	r0, #1
  401182:	4b02      	ldr	r3, [pc, #8]	; (40118c <loader_init+0x10>)
  401184:	4798      	blx	r3
  401186:	bd08      	pop	{r3, pc}
  401188:	200010cc 	.word	0x200010cc
  40118c:	00400f75 	.word	0x00400f75

00401190 <loader_load_app>:
}

/*
*
*/
uint32_t loader_load_app( uint8_t* app_name, tMemRegion* p_mem_region, uint32_t* p_stack_sz  ){
  401190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401192:	4606      	mov	r6, r0
  401194:	460c      	mov	r4, r1
  401196:	4615      	mov	r5, r2
	
	//validates app file
	uint32_t app_size = hal_nvmem_fat_file_size( app_name );
  401198:	4b13      	ldr	r3, [pc, #76]	; (4011e8 <loader_load_app+0x58>)
  40119a:	4798      	blx	r3
	
	if( app_size == 0 )									
  40119c:	4603      	mov	r3, r0
  40119e:	b118      	cbz	r0, 4011a8 <loader_load_app+0x18>
		return LOADER_NO_APP_FOUND;
	else if ( app_size > SYS_LOADER_BUFFER_MAX_SIZE  || app_size > SYS_APP_MAX_SIZE )	
  4011a0:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
  4011a4:	d902      	bls.n	4011ac <loader_load_app+0x1c>
		return LOADER_APP_TOO_LARGE;
  4011a6:	2301      	movs	r3, #1
	//pass caller a ptr to the loaded mem region and stack size
	*p_mem_region = app_memreg;
	*p_stack_sz = app_stack_sz;
	
	return LOADER_LOAD_SUCCESS;
}
  4011a8:	4618      	mov	r0, r3
  4011aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t bytes_read = hal_nvmem_fat_file_read( app_name, 
  4011ac:	4f0f      	ldr	r7, [pc, #60]	; (4011ec <loader_load_app+0x5c>)
  4011ae:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
  4011b2:	4639      	mov	r1, r7
  4011b4:	4630      	mov	r0, r6
  4011b6:	4b0e      	ldr	r3, [pc, #56]	; (4011f0 <loader_load_app+0x60>)
  4011b8:	4798      	blx	r3
	app_stack_sz = *((uint32_t*)binary);
  4011ba:	683e      	ldr	r6, [r7, #0]
  4011bc:	4b0d      	ldr	r3, [pc, #52]	; (4011f4 <loader_load_app+0x64>)
  4011be:	601e      	str	r6, [r3, #0]
	load_app( app_memreg.base, app_buffer, bytes_read );
  4011c0:	4b0d      	ldr	r3, [pc, #52]	; (4011f8 <loader_load_app+0x68>)
  4011c2:	6859      	ldr	r1, [r3, #4]

static void load_app( uint8_t* mem, uint8_t* binary, uint32_t size ){
	
	for(uint32_t i = 0; i<size; i++)
  4011c4:	b140      	cbz	r0, 4011d8 <loader_load_app+0x48>
  4011c6:	4a0d      	ldr	r2, [pc, #52]	; (4011fc <loader_load_app+0x6c>)
  4011c8:	460b      	mov	r3, r1
  4011ca:	1808      	adds	r0, r1, r0
		mem[i] = binary[i];
  4011cc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4011d0:	f803 1b01 	strb.w	r1, [r3], #1
	for(uint32_t i = 0; i<size; i++)
  4011d4:	4283      	cmp	r3, r0
  4011d6:	d1f9      	bne.n	4011cc <loader_load_app+0x3c>
	*p_mem_region = app_memreg;
  4011d8:	4b07      	ldr	r3, [pc, #28]	; (4011f8 <loader_load_app+0x68>)
  4011da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  4011de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	*p_stack_sz = app_stack_sz;
  4011e2:	602e      	str	r6, [r5, #0]
	return LOADER_LOAD_SUCCESS;
  4011e4:	2302      	movs	r3, #2
  4011e6:	e7df      	b.n	4011a8 <loader_load_app+0x18>
  4011e8:	00401045 	.word	0x00401045
  4011ec:	200010dc 	.word	0x200010dc
  4011f0:	00401071 	.word	0x00401071
  4011f4:	200010d8 	.word	0x200010d8
  4011f8:	200010cc 	.word	0x200010cc
  4011fc:	200010df 	.word	0x200010df

00401200 <tick_callback>:
*	Context switch takes place here.
*/
__attribute__((naked)) static void tick_callback(void){
	
	//save software context
	hal_cpu_save_context();
  401200:	4b0c      	ldr	r3, [pc, #48]	; (401234 <tick_callback+0x34>)
  401202:	4798      	blx	r3
	
	//Is there an active process?
	if( active_proc->state != ProcessStateNull ){
  401204:	4b0c      	ldr	r3, [pc, #48]	; (401238 <tick_callback+0x38>)
  401206:	681c      	ldr	r4, [r3, #0]
  401208:	68a3      	ldr	r3, [r4, #8]
  40120a:	2b02      	cmp	r3, #2
  40120c:	d006      	beq.n	40121c <tick_callback+0x1c>
		//save SP
		active_proc->sp = hal_cpu_get_psp();
  40120e:	4b0b      	ldr	r3, [pc, #44]	; (40123c <tick_callback+0x3c>)
  401210:	4798      	blx	r3
  401212:	6060      	str	r0, [r4, #4]
		
		//place active process in dummy waiting list
		wait_list[0] = active_proc;
  401214:	4b08      	ldr	r3, [pc, #32]	; (401238 <tick_callback+0x38>)
  401216:	681a      	ldr	r2, [r3, #0]
  401218:	4b09      	ldr	r3, [pc, #36]	; (401240 <tick_callback+0x40>)
  40121a:	601a      	str	r2, [r3, #0]
	}
	
	//get next active process from dummy waiting list
	active_proc = wait_list[0];
  40121c:	4b08      	ldr	r3, [pc, #32]	; (401240 <tick_callback+0x40>)
  40121e:	681b      	ldr	r3, [r3, #0]
  401220:	4a05      	ldr	r2, [pc, #20]	; (401238 <tick_callback+0x38>)
  401222:	6013      	str	r3, [r2, #0]
	
	//restore SP
	hal_cpu_set_psp( active_proc->sp );
  401224:	6858      	ldr	r0, [r3, #4]
  401226:	4b07      	ldr	r3, [pc, #28]	; (401244 <tick_callback+0x44>)
  401228:	4798      	blx	r3
	
	//restore software context
	hal_cpu_restore_context();
  40122a:	4b07      	ldr	r3, [pc, #28]	; (401248 <tick_callback+0x48>)
  40122c:	4798      	blx	r3
	
	//give CPU to active process
	hal_cpu_return_exception_user_mode();
  40122e:	4b07      	ldr	r3, [pc, #28]	; (40124c <tick_callback+0x4c>)
  401230:	4798      	blx	r3
  401232:	bf00      	nop
  401234:	00400741 	.word	0x00400741
  401238:	200060dc 	.word	0x200060dc
  40123c:	004007a5 	.word	0x004007a5
  401240:	200060fc 	.word	0x200060fc
  401244:	004007cf 	.word	0x004007cf
  401248:	0040074f 	.word	0x0040074f
  40124c:	0040073d 	.word	0x0040073d

00401250 <scheduler_init>:
void scheduler_init(void){
  401250:	b510      	push	{r4, lr}
	hal_memreg_read( MemRegUserStack, &stack_memreg );
  401252:	4c06      	ldr	r4, [pc, #24]	; (40126c <scheduler_init+0x1c>)
  401254:	4621      	mov	r1, r4
  401256:	2003      	movs	r0, #3
  401258:	4b05      	ldr	r3, [pc, #20]	; (401270 <scheduler_init+0x20>)
  40125a:	4798      	blx	r3
	stack_init( stack_memreg.base );	//stack_init( epstack )
  40125c:	6860      	ldr	r0, [r4, #4]
  40125e:	4b05      	ldr	r3, [pc, #20]	; (401274 <scheduler_init+0x24>)
  401260:	4798      	blx	r3
	active_proc = &null_proc;
  401262:	4a05      	ldr	r2, [pc, #20]	; (401278 <scheduler_init+0x28>)
  401264:	4b05      	ldr	r3, [pc, #20]	; (40127c <scheduler_init+0x2c>)
  401266:	601a      	str	r2, [r3, #0]
  401268:	bd10      	pop	{r4, pc}
  40126a:	bf00      	nop
  40126c:	200060f0 	.word	0x200060f0
  401270:	00400f75 	.word	0x00400f75
  401274:	004016c1 	.word	0x004016c1
  401278:	20000050 	.word	0x20000050
  40127c:	200060dc 	.word	0x200060dc

00401280 <scheduler_process_create>:
/*
*	Scheduler Process Create
*
*	Creates a process from a binary in nvmem. Ticking here begins!
*/
uint32_t scheduler_process_create( uint8_t* binary_file_name, uint8_t* name, uint32_t* loader_rval ){	
  401280:	b530      	push	{r4, r5, lr}
  401282:	b085      	sub	sp, #20
  401284:	460d      	mov	r5, r1
  401286:	4614      	mov	r4, r2
	tMemRegion proc_memregion;
	uint32_t stack_sz;
	
	//Load app binary
	uint32_t rval = loader_load_app( binary_file_name, &proc_memregion, &stack_sz );
  401288:	466a      	mov	r2, sp
  40128a:	a901      	add	r1, sp, #4
  40128c:	4b16      	ldr	r3, [pc, #88]	; (4012e8 <scheduler_process_create+0x68>)
  40128e:	4798      	blx	r3
	if(  rval != LOADER_LOAD_SUCCESS ){
  401290:	2802      	cmp	r0, #2
  401292:	d004      	beq.n	40129e <scheduler_process_create+0x1e>
		*loader_rval = rval;				//populate loader error
  401294:	6020      	str	r0, [r4, #0]
		return SCHEDULER_PROCESS_CREATE_FAILED;
  401296:	2400      	movs	r4, #0
		hal_cpu_set_psp( proc[0].sp );						//or else the first tick fails
		hal_cpu_systimer_start( TICK_FREQ, tick_callback );
	}
	
	return SCHEDULER_PROCESS_CREATE_SUCCESS;	
  401298:	4620      	mov	r0, r4
  40129a:	b005      	add	sp, #20
  40129c:	bd30      	pop	{r4, r5, pc}
	proc[0].name = name;
  40129e:	4c13      	ldr	r4, [pc, #76]	; (4012ec <scheduler_process_create+0x6c>)
  4012a0:	6025      	str	r5, [r4, #0]
	proc[0].state = ProcessStateReady;
  4012a2:	2300      	movs	r3, #0
  4012a4:	60a3      	str	r3, [r4, #8]
	stack_alloc( CONTEXT_SIZE );
  4012a6:	2010      	movs	r0, #16
  4012a8:	4d11      	ldr	r5, [pc, #68]	; (4012f0 <scheduler_process_create+0x70>)
  4012aa:	47a8      	blx	r5
	proc[0].sp = stack_top();                //set SP
  4012ac:	4b11      	ldr	r3, [pc, #68]	; (4012f4 <scheduler_process_create+0x74>)
  4012ae:	4798      	blx	r3
  4012b0:	6060      	str	r0, [r4, #4]
	stack_alloc( stack_sz - CONTEXT_SIZE );  //make space 
  4012b2:	9800      	ldr	r0, [sp, #0]
  4012b4:	3810      	subs	r0, #16
  4012b6:	47a8      	blx	r5
	proc[0].sp[OFFSET_PC] =     ((uint32_t) (proc_memregion.base +1));
  4012b8:	6860      	ldr	r0, [r4, #4]
  4012ba:	9b02      	ldr	r3, [sp, #8]
  4012bc:	3301      	adds	r3, #1
  4012be:	6383      	str	r3, [r0, #56]	; 0x38
	proc[0].sp[OFFSET_APSR] =   ((uint32_t) INITIAL_APSR);
  4012c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4012c4:	63c3      	str	r3, [r0, #60]	; 0x3c
	wait_list[0] = &proc[0];
  4012c6:	4b0c      	ldr	r3, [pc, #48]	; (4012f8 <scheduler_process_create+0x78>)
  4012c8:	601c      	str	r4, [r3, #0]
	proc_count++;
  4012ca:	4b0c      	ldr	r3, [pc, #48]	; (4012fc <scheduler_process_create+0x7c>)
  4012cc:	681c      	ldr	r4, [r3, #0]
  4012ce:	3401      	adds	r4, #1
  4012d0:	601c      	str	r4, [r3, #0]
	if( proc_count == 1 ){
  4012d2:	2c01      	cmp	r4, #1
  4012d4:	d001      	beq.n	4012da <scheduler_process_create+0x5a>
	return SCHEDULER_PROCESS_CREATE_SUCCESS;	
  4012d6:	2401      	movs	r4, #1
  4012d8:	e7de      	b.n	401298 <scheduler_process_create+0x18>
		hal_cpu_set_psp( proc[0].sp );						//or else the first tick fails
  4012da:	4b09      	ldr	r3, [pc, #36]	; (401300 <scheduler_process_create+0x80>)
  4012dc:	4798      	blx	r3
		hal_cpu_systimer_start( TICK_FREQ, tick_callback );
  4012de:	4909      	ldr	r1, [pc, #36]	; (401304 <scheduler_process_create+0x84>)
  4012e0:	2003      	movs	r0, #3
  4012e2:	4b09      	ldr	r3, [pc, #36]	; (401308 <scheduler_process_create+0x88>)
  4012e4:	4798      	blx	r3
  4012e6:	e7d7      	b.n	401298 <scheduler_process_create+0x18>
  4012e8:	00401191 	.word	0x00401191
  4012ec:	200060e0 	.word	0x200060e0
  4012f0:	004016fd 	.word	0x004016fd
  4012f4:	004016d5 	.word	0x004016d5
  4012f8:	200060fc 	.word	0x200060fc
  4012fc:	200060ec 	.word	0x200060ec
  401300:	004007cf 	.word	0x004007cf
  401304:	00401201 	.word	0x00401201
  401308:	0040069d 	.word	0x0040069d

0040130c <syscalls_entry_point>:
*	   2. Based on that extract the right SP (PSP or MSP)
*	   3. The rest is the same...
*
*	There' no reason to make a syscall from the kernel though, so it's all good.
*/
void syscalls_entry_point(void){
  40130c:	b538      	push	{r3, r4, r5, lr}
	
	uint32_t sp = hal_cpu_get_psp();
  40130e:	4b39      	ldr	r3, [pc, #228]	; (4013f4 <syscalls_entry_point+0xe8>)
  401310:	4798      	blx	r3
	
	//extract the number from the read instruction
	svc_number &= 0x00FF;
	
	//get arguments
	void* arg0 = ((uint32_t*)sp)[0];
  401312:	6804      	ldr	r4, [r0, #0]
	void* arg1 = ((uint32_t*)sp)[1];
  401314:	6845      	ldr	r5, [r0, #4]
	uint32_t svc_number = ((uint16_t*) ((uint32_t*)sp)[6])[-1];
  401316:	6983      	ldr	r3, [r0, #24]
	void* arg2 = ((uint32_t*)sp)[2];
	void* arg3 = ((uint32_t*)sp)[3];
	
	//attend syscall
	switch(svc_number){
  401318:	f813 3c02 	ldrb.w	r3, [r3, #-2]
  40131c:	2b1b      	cmp	r3, #27
  40131e:	d867      	bhi.n	4013f0 <syscalls_entry_point+0xe4>
  401320:	e8df f003 	tbb	[pc, r3]
  401324:	1a66150e 	.word	0x1a66150e
  401328:	6622261d 	.word	0x6622261d
  40132c:	66342f2a 	.word	0x66342f2a
  401330:	42463d39 	.word	0x42463d39
  401334:	66524e49 	.word	0x66524e49
  401338:	665d5a56 	.word	0x665d5a56
  40133c:	61666666 	.word	0x61666666
		//LED
		case SVCLedWrite:			hal_io_led_write( (tLedNum)arg0, (tLedState)arg1 );				break;
  401340:	1c29      	adds	r1, r5, #0
  401342:	bf18      	it	ne
  401344:	2101      	movne	r1, #1
  401346:	4620      	mov	r0, r4
  401348:	4b2b      	ldr	r3, [pc, #172]	; (4013f8 <syscalls_entry_point+0xec>)
  40134a:	4798      	blx	r3
  40134c:	bd38      	pop	{r3, r4, r5, pc}
		case SVCLedRead:			*((tLedState*)arg1) = hal_io_led_read( (tLedNum)arg0 );			break;
  40134e:	4620      	mov	r0, r4
  401350:	4b2a      	ldr	r3, [pc, #168]	; (4013fc <syscalls_entry_point+0xf0>)
  401352:	4798      	blx	r3
  401354:	7028      	strb	r0, [r5, #0]
  401356:	bd38      	pop	{r3, r4, r5, pc}
		
		//Button
		//case SVCButtonStartEv:		/* Not supported yet */										break;
		case SVCButtonStartallPoll:	hal_io_button_startall_poll();										break;	
  401358:	4b29      	ldr	r3, [pc, #164]	; (401400 <syscalls_entry_point+0xf4>)
  40135a:	4798      	blx	r3
  40135c:	bd38      	pop	{r3, r4, r5, pc}
		case SVCButtonRead:			*((tButtonState*)arg1) = hal_io_button_read( (tButtonNum)arg0 );	break;	
  40135e:	4620      	mov	r0, r4
  401360:	4b28      	ldr	r3, [pc, #160]	; (401404 <syscalls_entry_point+0xf8>)
  401362:	4798      	blx	r3
  401364:	6028      	str	r0, [r5, #0]
  401366:	bd38      	pop	{r3, r4, r5, pc}
		
		//Clock
		case SVCClockWrite:			hal_io_clock_write( (tTime*)arg0 );								break;
  401368:	4620      	mov	r0, r4
  40136a:	4b27      	ldr	r3, [pc, #156]	; (401408 <syscalls_entry_point+0xfc>)
  40136c:	4798      	blx	r3
  40136e:	bd38      	pop	{r3, r4, r5, pc}
		case SVCClockRead:			hal_io_clock_read( (tTime*)arg0  );								break;
  401370:	4620      	mov	r0, r4
  401372:	4b26      	ldr	r3, [pc, #152]	; (40140c <syscalls_entry_point+0x100>)
  401374:	4798      	blx	r3
  401376:	bd38      	pop	{r3, r4, r5, pc}
		
		//Serial
		//case SVCSerialStartEv:		/*Not supported yet  */										break;
		case SVCSerialStartPoll:	hal_io_serial_start_poll( (tSerialId)arg0, (uint32_t)arg1 );		break;
  401378:	4629      	mov	r1, r5
  40137a:	4620      	mov	r0, r4
  40137c:	4b24      	ldr	r3, [pc, #144]	; (401410 <syscalls_entry_point+0x104>)
  40137e:	4798      	blx	r3
  401380:	bd38      	pop	{r3, r4, r5, pc}
		case SVCSerialPutc:			hal_io_serial_putc( (tSerialId)arg0, (uint8_t)arg1 );				break;
  401382:	b2e9      	uxtb	r1, r5
  401384:	4620      	mov	r0, r4
  401386:	4b23      	ldr	r3, [pc, #140]	; (401414 <syscalls_entry_point+0x108>)
  401388:	4798      	blx	r3
  40138a:	bd38      	pop	{r3, r4, r5, pc}
		case SVCSerialGetc:			*((uint32_t*)arg1) = hal_io_serial_getc( (tSerialId)arg0 );		break;
  40138c:	4620      	mov	r0, r4
  40138e:	4b22      	ldr	r3, [pc, #136]	; (401418 <syscalls_entry_point+0x10c>)
  401390:	4798      	blx	r3
  401392:	6028      	str	r0, [r5, #0]
  401394:	bd38      	pop	{r3, r4, r5, pc}
		
		//Sensor
		//case SVCSensorStartEv:		/* Not supported yet */										break;
		case SVCSensorStartPoll:	hal_io_sensor_start_poll( (tSensorId)arg0 );						break;
  401396:	4620      	mov	r0, r4
  401398:	4b20      	ldr	r3, [pc, #128]	; (40141c <syscalls_entry_point+0x110>)
  40139a:	4798      	blx	r3
  40139c:	bd38      	pop	{r3, r4, r5, pc}
		case SVCSensorRead:			*((uint32_t*)arg1) = hal_io_sensor_read( (tSensorId)arg0 );		break;
  40139e:	4620      	mov	r0, r4
  4013a0:	4b1f      	ldr	r3, [pc, #124]	; (401420 <syscalls_entry_point+0x114>)
  4013a2:	4798      	blx	r3
  4013a4:	6028      	str	r0, [r5, #0]
  4013a6:	bd38      	pop	{r3, r4, r5, pc}
		
		//Display		
		case SVCDisplayPutc:		hal_io_display_putc( (uint8_t)arg0 );								break;
  4013a8:	b2e0      	uxtb	r0, r4
  4013aa:	4b1e      	ldr	r3, [pc, #120]	; (401424 <syscalls_entry_point+0x118>)
  4013ac:	4798      	blx	r3
  4013ae:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayCls:			hal_io_display_cls();												break;
  4013b0:	4b1d      	ldr	r3, [pc, #116]	; (401428 <syscalls_entry_point+0x11c>)
  4013b2:	4798      	blx	r3
  4013b4:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayGotoxy:		hal_io_display_gotoxy( (uint32_t)arg0, (uint32_t)arg1 );			break;
  4013b6:	4629      	mov	r1, r5
  4013b8:	4620      	mov	r0, r4
  4013ba:	4b1c      	ldr	r3, [pc, #112]	; (40142c <syscalls_entry_point+0x120>)
  4013bc:	4798      	blx	r3
  4013be:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayNumLines:	*((uint32_t*)arg0) = hal_io_display_numlines();					break;
  4013c0:	4b1b      	ldr	r3, [pc, #108]	; (401430 <syscalls_entry_point+0x124>)
  4013c2:	4798      	blx	r3
  4013c4:	6020      	str	r0, [r4, #0]
  4013c6:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayCurrLine:	*((uint32_t*)arg0) = hal_io_display_currline();					break;
  4013c8:	4b1a      	ldr	r3, [pc, #104]	; (401434 <syscalls_entry_point+0x128>)
  4013ca:	4798      	blx	r3
  4013cc:	6020      	str	r0, [r4, #0]
  4013ce:	bd38      	pop	{r3, r4, r5, pc}
		
		//Millisecond Timer
		//case SVCMtimerStartEv:	/*Not supported yet*/											break;
		case SVCMtimerStartPoll:	hal_io_mtimer_start( (uint32_t)arg0  );							break;
  4013d0:	4620      	mov	r0, r4
  4013d2:	4b19      	ldr	r3, [pc, #100]	; (401438 <syscalls_entry_point+0x12c>)
  4013d4:	4798      	blx	r3
  4013d6:	bd38      	pop	{r3, r4, r5, pc}
		case SVCMtimerStop:			hal_io_mtimer_stop();											break;
  4013d8:	4b18      	ldr	r3, [pc, #96]	; (40143c <syscalls_entry_point+0x130>)
  4013da:	4798      	blx	r3
  4013dc:	bd38      	pop	{r3, r4, r5, pc}
		case SVCMtimerRead:			*((uint32_t*)arg0) = hal_io_mtimer_read( );						break;
  4013de:	4b18      	ldr	r3, [pc, #96]	; (401440 <syscalls_entry_point+0x134>)
  4013e0:	4798      	blx	r3
  4013e2:	6020      	str	r0, [r4, #0]
  4013e4:	bd38      	pop	{r3, r4, r5, pc}
		   This should be from somewhere in the HAL
		    */
		break;

		//Scheduler	
		case SVCProcessCreate:		scheduler_process_create( (uint8_t*)arg0, (uint8_t*)arg1, (uint32_t*)arg2 );	break;
  4013e6:	6882      	ldr	r2, [r0, #8]
  4013e8:	4629      	mov	r1, r5
  4013ea:	4620      	mov	r0, r4
  4013ec:	4b15      	ldr	r3, [pc, #84]	; (401444 <syscalls_entry_point+0x138>)
  4013ee:	4798      	blx	r3
  4013f0:	bd38      	pop	{r3, r4, r5, pc}
  4013f2:	bf00      	nop
  4013f4:	004007a5 	.word	0x004007a5
  4013f8:	00400a09 	.word	0x00400a09
  4013fc:	00400a57 	.word	0x00400a57
  401400:	00400ddd 	.word	0x00400ddd
  401404:	00400de1 	.word	0x00400de1
  401408:	00400ac9 	.word	0x00400ac9
  40140c:	00400afd 	.word	0x00400afd
  401410:	00400e31 	.word	0x00400e31
  401414:	00400e55 	.word	0x00400e55
  401418:	00400e95 	.word	0x00400e95
  40141c:	00400cc5 	.word	0x00400cc5
  401420:	00400d39 	.word	0x00400d39
  401424:	00400b4d 	.word	0x00400b4d
  401428:	00400bed 	.word	0x00400bed
  40142c:	00400c85 	.word	0x00400c85
  401430:	00400cb5 	.word	0x00400cb5
  401434:	00400cb9 	.word	0x00400cb9
  401438:	00400931 	.word	0x00400931
  40143c:	00400989 	.word	0x00400989
  401440:	004009b1 	.word	0x004009b1
  401444:	00401281 	.word	0x00401281

00401448 <syscalls_init>:
void syscalls_init(void){
  401448:	b508      	push	{r3, lr}
	hal_cpu_svc_start( syscalls_entry_point );
  40144a:	4802      	ldr	r0, [pc, #8]	; (401454 <syscalls_init+0xc>)
  40144c:	4b02      	ldr	r3, [pc, #8]	; (401458 <syscalls_init+0x10>)
  40144e:	4798      	blx	r3
  401450:	bd08      	pop	{r3, pc}
  401452:	bf00      	nop
  401454:	0040130d 	.word	0x0040130d
  401458:	004006f1 	.word	0x004006f1

0040145c <println_display>:
#ifdef SYS_IO_DISPLAY_PRESENT
	hal_io_display_cls();
#endif
}

static void println_display( uint8_t* string ){
  40145c:	b538      	push	{r3, r4, r5, lr}
  40145e:	4604      	mov	r4, r0
	while( *string )
  401460:	7800      	ldrb	r0, [r0, #0]
  401462:	b128      	cbz	r0, 401470 <println_display+0x14>
		hal_io_display_putc( *string++ );
  401464:	4d06      	ldr	r5, [pc, #24]	; (401480 <println_display+0x24>)
  401466:	47a8      	blx	r5
	while( *string )
  401468:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40146c:	2800      	cmp	r0, #0
  40146e:	d1fa      	bne.n	401466 <println_display+0xa>
	//go to newline
	hal_io_display_gotoxy( hal_io_display_currline()+1, 0 );
  401470:	4b04      	ldr	r3, [pc, #16]	; (401484 <println_display+0x28>)
  401472:	4798      	blx	r3
  401474:	2100      	movs	r1, #0
  401476:	3001      	adds	r0, #1
  401478:	4b03      	ldr	r3, [pc, #12]	; (401488 <println_display+0x2c>)
  40147a:	4798      	blx	r3
  40147c:	bd38      	pop	{r3, r4, r5, pc}
  40147e:	bf00      	nop
  401480:	00400b4d 	.word	0x00400b4d
  401484:	00400cb9 	.word	0x00400cb9
  401488:	00400c85 	.word	0x00400c85

0040148c <system_panic>:
void system_panic( const uint8_t* panic_msg ){
  40148c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401490:	4605      	mov	r5, r0
	hal_io_display_cls();
  401492:	4b12      	ldr	r3, [pc, #72]	; (4014dc <system_panic+0x50>)
  401494:	4798      	blx	r3
	println_display( ":( Something went wrong..." );
  401496:	4e12      	ldr	r6, [pc, #72]	; (4014e0 <system_panic+0x54>)
  401498:	4630      	mov	r0, r6
  40149a:	4c12      	ldr	r4, [pc, #72]	; (4014e4 <system_panic+0x58>)
  40149c:	47a0      	blx	r4
	println_display( "" );
  40149e:	4f12      	ldr	r7, [pc, #72]	; (4014e8 <system_panic+0x5c>)
  4014a0:	4638      	mov	r0, r7
  4014a2:	47a0      	blx	r4
	println_display( panic_msg );
  4014a4:	4628      	mov	r0, r5
  4014a6:	47a0      	blx	r4
	console_puts( "" );
  4014a8:	4638      	mov	r0, r7
  4014aa:	4c10      	ldr	r4, [pc, #64]	; (4014ec <system_panic+0x60>)
  4014ac:	47a0      	blx	r4
	console_puts( ":( Something went wrong..." );
  4014ae:	4630      	mov	r0, r6
  4014b0:	47a0      	blx	r4
	console_puts( panic_msg );
  4014b2:	4628      	mov	r0, r5
  4014b4:	47a0      	blx	r4
	bool led_state = false;
  4014b6:	2500      	movs	r5, #0
		hal_io_led_write( i, led_state = !led_state );
  4014b8:	4e0d      	ldr	r6, [pc, #52]	; (4014f0 <system_panic+0x64>)
		hal_cpu_delay(150);
  4014ba:	f04f 0896 	mov.w	r8, #150	; 0x96
  4014be:	4f0d      	ldr	r7, [pc, #52]	; (4014f4 <system_panic+0x68>)
  4014c0:	e001      	b.n	4014c6 <system_panic+0x3a>
  4014c2:	4640      	mov	r0, r8
  4014c4:	47b8      	blx	r7
		for( uint32_t i=0; i<5; i++ )
  4014c6:	2400      	movs	r4, #0
		hal_io_led_write( i, led_state = !led_state );
  4014c8:	f085 0501 	eor.w	r5, r5, #1
  4014cc:	4629      	mov	r1, r5
  4014ce:	4620      	mov	r0, r4
  4014d0:	47b0      	blx	r6
		for( uint32_t i=0; i<5; i++ )
  4014d2:	3401      	adds	r4, #1
  4014d4:	2c05      	cmp	r4, #5
  4014d6:	d1f7      	bne.n	4014c8 <system_panic+0x3c>
  4014d8:	e7f3      	b.n	4014c2 <system_panic+0x36>
  4014da:	bf00      	nop
  4014dc:	00400bed 	.word	0x00400bed
  4014e0:	0040aaec 	.word	0x0040aaec
  4014e4:	0040145d 	.word	0x0040145d
  4014e8:	0040a9ac 	.word	0x0040a9ac
  4014ec:	00400329 	.word	0x00400329
  4014f0:	00400a09 	.word	0x00400a09
  4014f4:	004006fd 	.word	0x004006fd

004014f8 <system_init>:
void system_init(void){
  4014f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4014fc:	b087      	sub	sp, #28
	hal_cpu_init();			
  4014fe:	4b49      	ldr	r3, [pc, #292]	; (401624 <system_init+0x12c>)
  401500:	4798      	blx	r3
	hal_io_init();		
  401502:	4b49      	ldr	r3, [pc, #292]	; (401628 <system_init+0x130>)
  401504:	4798      	blx	r3
	hal_nvmem_init();
  401506:	4b49      	ldr	r3, [pc, #292]	; (40162c <system_init+0x134>)
  401508:	4798      	blx	r3
	hal_memreg_init();
  40150a:	4b49      	ldr	r3, [pc, #292]	; (401630 <system_init+0x138>)
  40150c:	4798      	blx	r3
	console_init();
  40150e:	4b49      	ldr	r3, [pc, #292]	; (401634 <system_init+0x13c>)
  401510:	4798      	blx	r3
	hal_io_serial_start_poll( SerialA, SYS_CONF_SERIAL_A_BAUDRATE );
  401512:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  401516:	2000      	movs	r0, #0
  401518:	4d47      	ldr	r5, [pc, #284]	; (401638 <system_init+0x140>)
  40151a:	47a8      	blx	r5
}

static void show_init_info( uint8_t* string ){
	
#ifdef SYS_INIT_FROM_CONSOLE
	console_puts( string );
  40151c:	4847      	ldr	r0, [pc, #284]	; (40163c <system_init+0x144>)
  40151e:	4c48      	ldr	r4, [pc, #288]	; (401640 <system_init+0x148>)
  401520:	47a0      	blx	r4
  401522:	4848      	ldr	r0, [pc, #288]	; (401644 <system_init+0x14c>)
  401524:	47a0      	blx	r4
	show_init_info( "Starting Display" );		hal_io_display_start();
  401526:	4b48      	ldr	r3, [pc, #288]	; (401648 <system_init+0x150>)
  401528:	4798      	blx	r3
	console_puts( string );
  40152a:	4848      	ldr	r0, [pc, #288]	; (40164c <system_init+0x154>)
  40152c:	47a0      	blx	r4
	show_init_info( "Starting SerialB" );		hal_io_serial_start_poll( SerialB, SYS_CONF_SERIAL_A_BAUDRATE );
  40152e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  401532:	2001      	movs	r0, #1
  401534:	47a8      	blx	r5
	console_puts( string );
  401536:	4846      	ldr	r0, [pc, #280]	; (401650 <system_init+0x158>)
  401538:	47a0      	blx	r4
	show_init_info( "Starting Light Sensor" );	hal_io_sensor_start_poll( SensorLight );
  40153a:	2000      	movs	r0, #0
  40153c:	4d45      	ldr	r5, [pc, #276]	; (401654 <system_init+0x15c>)
  40153e:	47a8      	blx	r5
	console_puts( string );
  401540:	4845      	ldr	r0, [pc, #276]	; (401658 <system_init+0x160>)
  401542:	47a0      	blx	r4
	show_init_info( "Starting Temp Sensor" );	hal_io_sensor_start_poll( SensorTemp );
  401544:	2001      	movs	r0, #1
  401546:	47a8      	blx	r5
	console_puts( string );
  401548:	4844      	ldr	r0, [pc, #272]	; (40165c <system_init+0x164>)
  40154a:	47a0      	blx	r4
	show_init_info( "Starting LEDs" );			hal_io_led_start();
  40154c:	4b44      	ldr	r3, [pc, #272]	; (401660 <system_init+0x168>)
  40154e:	4798      	blx	r3
	console_puts( string );
  401550:	4844      	ldr	r0, [pc, #272]	; (401664 <system_init+0x16c>)
  401552:	47a0      	blx	r4
	show_init_info( "Starting Clock" );			hal_io_clock_start();
  401554:	4b44      	ldr	r3, [pc, #272]	; (401668 <system_init+0x170>)
  401556:	4798      	blx	r3
	tTime time = {
  401558:	466d      	mov	r5, sp
  40155a:	4e44      	ldr	r6, [pc, #272]	; (40166c <system_init+0x174>)
  40155c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  40155e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401560:	e896 0003 	ldmia.w	r6, {r0, r1}
  401564:	e885 0003 	stmia.w	r5, {r0, r1}
	hal_io_clock_write(&time);
  401568:	4668      	mov	r0, sp
  40156a:	4b41      	ldr	r3, [pc, #260]	; (401670 <system_init+0x178>)
  40156c:	4798      	blx	r3
	console_puts( string );
  40156e:	4841      	ldr	r0, [pc, #260]	; (401674 <system_init+0x17c>)
  401570:	47a0      	blx	r4
	if( !hal_nvmem_start( NVMemSDCardFAT ) )
  401572:	2001      	movs	r0, #1
  401574:	4b40      	ldr	r3, [pc, #256]	; (401678 <system_init+0x180>)
  401576:	4798      	blx	r3
  401578:	2800      	cmp	r0, #0
  40157a:	d04f      	beq.n	40161c <system_init+0x124>
	hal_io_led_write(Led0, LedOn);
  40157c:	2101      	movs	r1, #1
  40157e:	2000      	movs	r0, #0
  401580:	4c3e      	ldr	r4, [pc, #248]	; (40167c <system_init+0x184>)
  401582:	47a0      	blx	r4
	hal_io_led_write(Led1, LedOn);
  401584:	2101      	movs	r1, #1
  401586:	4608      	mov	r0, r1
  401588:	47a0      	blx	r4
	hal_io_led_write(Led2, LedOn);
  40158a:	2101      	movs	r1, #1
  40158c:	2002      	movs	r0, #2
  40158e:	47a0      	blx	r4
	hal_io_led_write(Led3, LedOn);
  401590:	2101      	movs	r1, #1
  401592:	2003      	movs	r0, #3
  401594:	47a0      	blx	r4
	hal_io_led_write(Led4, LedOn);
  401596:	2101      	movs	r1, #1
  401598:	2004      	movs	r0, #4
  40159a:	47a0      	blx	r4
	for(uint32_t i=0; i<4; i++){	 //rows
  40159c:	2700      	movs	r7, #0
		hal_io_display_gotoxy(i, 0);
  40159e:	46b9      	mov	r9, r7
  4015a0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4016bc <system_init+0x1c4>
			hal_io_display_putc('#');
  4015a4:	4e36      	ldr	r6, [pc, #216]	; (401680 <system_init+0x188>)
		hal_io_display_gotoxy(i, 0);
  4015a6:	4649      	mov	r1, r9
  4015a8:	4638      	mov	r0, r7
  4015aa:	47c0      	blx	r8
  4015ac:	2414      	movs	r4, #20
			hal_io_display_putc('#');
  4015ae:	2523      	movs	r5, #35	; 0x23
  4015b0:	4628      	mov	r0, r5
  4015b2:	47b0      	blx	r6
		for(uint32_t j=0; j<20; j++) //columns
  4015b4:	3c01      	subs	r4, #1
  4015b6:	d1fb      	bne.n	4015b0 <system_init+0xb8>
	for(uint32_t i=0; i<4; i++){	 //rows
  4015b8:	3701      	adds	r7, #1
  4015ba:	2f04      	cmp	r7, #4
  4015bc:	d1f3      	bne.n	4015a6 <system_init+0xae>
	hal_cpu_delay(50);
  4015be:	2032      	movs	r0, #50	; 0x32
  4015c0:	4b30      	ldr	r3, [pc, #192]	; (401684 <system_init+0x18c>)
  4015c2:	4798      	blx	r3
	hal_io_led_write(Led0, LedOff);
  4015c4:	2100      	movs	r1, #0
  4015c6:	4608      	mov	r0, r1
  4015c8:	4c2c      	ldr	r4, [pc, #176]	; (40167c <system_init+0x184>)
  4015ca:	47a0      	blx	r4
	hal_io_led_write(Led1, LedOff);
  4015cc:	2100      	movs	r1, #0
  4015ce:	2001      	movs	r0, #1
  4015d0:	47a0      	blx	r4
	hal_io_led_write(Led2, LedOff);
  4015d2:	2100      	movs	r1, #0
  4015d4:	2002      	movs	r0, #2
  4015d6:	47a0      	blx	r4
	hal_io_led_write(Led3, LedOff);
  4015d8:	2100      	movs	r1, #0
  4015da:	2003      	movs	r0, #3
  4015dc:	47a0      	blx	r4
	hal_io_led_write(Led4, LedOff);
  4015de:	2100      	movs	r1, #0
  4015e0:	2004      	movs	r0, #4
  4015e2:	47a0      	blx	r4
	hal_io_display_cls();
  4015e4:	4b28      	ldr	r3, [pc, #160]	; (401688 <system_init+0x190>)
  4015e6:	4798      	blx	r3
	console_puts( string );
  4015e8:	4828      	ldr	r0, [pc, #160]	; (40168c <system_init+0x194>)
  4015ea:	4c15      	ldr	r4, [pc, #84]	; (401640 <system_init+0x148>)
  4015ec:	47a0      	blx	r4
	show_init_info( "Initializing Faults" );		faults_init();
  4015ee:	4b28      	ldr	r3, [pc, #160]	; (401690 <system_init+0x198>)
  4015f0:	4798      	blx	r3
	console_puts( string );
  4015f2:	4828      	ldr	r0, [pc, #160]	; (401694 <system_init+0x19c>)
  4015f4:	47a0      	blx	r4
	show_init_info( "Initializing Syscalls" );		syscalls_init();
  4015f6:	4b28      	ldr	r3, [pc, #160]	; (401698 <system_init+0x1a0>)
  4015f8:	4798      	blx	r3
	console_puts( string );
  4015fa:	4828      	ldr	r0, [pc, #160]	; (40169c <system_init+0x1a4>)
  4015fc:	47a0      	blx	r4
	show_init_info( "Initializing Loader" );		loader_init();
  4015fe:	4b28      	ldr	r3, [pc, #160]	; (4016a0 <system_init+0x1a8>)
  401600:	4798      	blx	r3
	console_puts( string );
  401602:	4828      	ldr	r0, [pc, #160]	; (4016a4 <system_init+0x1ac>)
  401604:	47a0      	blx	r4
	show_init_info( "Initializing Scheduler" );		scheduler_init();
  401606:	4b28      	ldr	r3, [pc, #160]	; (4016a8 <system_init+0x1b0>)
  401608:	4798      	blx	r3
	uint32_t ccr = hal_cpu_get_scb_ccr() | (1<< SCB_CCR_STKALIGN_OFFSET);
  40160a:	4b28      	ldr	r3, [pc, #160]	; (4016ac <system_init+0x1b4>)
  40160c:	4798      	blx	r3
	hal_cpu_set_scb_ccr( ccr );
  40160e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
  401612:	4b27      	ldr	r3, [pc, #156]	; (4016b0 <system_init+0x1b8>)
  401614:	4798      	blx	r3
}
  401616:	b007      	add	sp, #28
  401618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		system_panic( "FS failed to mount" );
  40161c:	4825      	ldr	r0, [pc, #148]	; (4016b4 <system_init+0x1bc>)
  40161e:	4b26      	ldr	r3, [pc, #152]	; (4016b8 <system_init+0x1c0>)
  401620:	4798      	blx	r3
  401622:	bf00      	nop
  401624:	00400691 	.word	0x00400691
  401628:	00400911 	.word	0x00400911
  40162c:	00400fc5 	.word	0x00400fc5
  401630:	00400f71 	.word	0x00400f71
  401634:	00400319 	.word	0x00400319
  401638:	00400e31 	.word	0x00400e31
  40163c:	0040a9ac 	.word	0x0040a9ac
  401640:	00400329 	.word	0x00400329
  401644:	0040a9e8 	.word	0x0040a9e8
  401648:	00400b41 	.word	0x00400b41
  40164c:	0040a9fc 	.word	0x0040a9fc
  401650:	0040aa10 	.word	0x0040aa10
  401654:	00400cc5 	.word	0x00400cc5
  401658:	0040aa28 	.word	0x0040aa28
  40165c:	0040aa40 	.word	0x0040aa40
  401660:	004009c5 	.word	0x004009c5
  401664:	0040aa50 	.word	0x0040aa50
  401668:	00400a9d 	.word	0x00400a9d
  40166c:	0040a9d0 	.word	0x0040a9d0
  401670:	00400ac9 	.word	0x00400ac9
  401674:	0040aa60 	.word	0x0040aa60
  401678:	00400fc9 	.word	0x00400fc9
  40167c:	00400a09 	.word	0x00400a09
  401680:	00400b4d 	.word	0x00400b4d
  401684:	004006fd 	.word	0x004006fd
  401688:	00400bed 	.word	0x00400bed
  40168c:	0040aa94 	.word	0x0040aa94
  401690:	00400649 	.word	0x00400649
  401694:	0040aaa8 	.word	0x0040aaa8
  401698:	00401449 	.word	0x00401449
  40169c:	0040aac0 	.word	0x0040aac0
  4016a0:	0040117d 	.word	0x0040117d
  4016a4:	0040aad4 	.word	0x0040aad4
  4016a8:	00401251 	.word	0x00401251
  4016ac:	00400793 	.word	0x00400793
  4016b0:	0040078d 	.word	0x0040078d
  4016b4:	0040aa80 	.word	0x0040aa80
  4016b8:	0040148d 	.word	0x0040148d
  4016bc:	00400c85 	.word	0x00400c85

004016c0 <stack_init>:
	
static uint32_t* stack;
static bool initialized = false;

void stack_init(uint32_t* address){
	stack = address;
  4016c0:	4b02      	ldr	r3, [pc, #8]	; (4016cc <stack_init+0xc>)
  4016c2:	6018      	str	r0, [r3, #0]
	initialized = true;
  4016c4:	2201      	movs	r2, #1
  4016c6:	4b02      	ldr	r3, [pc, #8]	; (4016d0 <stack_init+0x10>)
  4016c8:	701a      	strb	r2, [r3, #0]
  4016ca:	4770      	bx	lr
  4016cc:	20006104 	.word	0x20006104
  4016d0:	20006100 	.word	0x20006100

004016d4 <stack_top>:
}

uint32_t* stack_top(void){
  4016d4:	b508      	push	{r3, lr}
	if( !initialized )
  4016d6:	4b05      	ldr	r3, [pc, #20]	; (4016ec <stack_top+0x18>)
  4016d8:	781b      	ldrb	r3, [r3, #0]
  4016da:	b113      	cbz	r3, 4016e2 <stack_top+0xe>
		system_panic( "Reading uninit stack" );
	
	return stack;
}
  4016dc:	4b04      	ldr	r3, [pc, #16]	; (4016f0 <stack_top+0x1c>)
  4016de:	6818      	ldr	r0, [r3, #0]
  4016e0:	bd08      	pop	{r3, pc}
		system_panic( "Reading uninit stack" );
  4016e2:	4804      	ldr	r0, [pc, #16]	; (4016f4 <stack_top+0x20>)
  4016e4:	4b04      	ldr	r3, [pc, #16]	; (4016f8 <stack_top+0x24>)
  4016e6:	4798      	blx	r3
  4016e8:	e7f8      	b.n	4016dc <stack_top+0x8>
  4016ea:	bf00      	nop
  4016ec:	20006100 	.word	0x20006100
  4016f0:	20006104 	.word	0x20006104
  4016f4:	0040ab24 	.word	0x0040ab24
  4016f8:	0040148d 	.word	0x0040148d

004016fc <stack_alloc>:

void stack_alloc(uint32_t elements){
  4016fc:	b510      	push	{r4, lr}
  4016fe:	4604      	mov	r4, r0
	if( !initialized )
  401700:	4b0a      	ldr	r3, [pc, #40]	; (40172c <stack_alloc+0x30>)
  401702:	781b      	ldrb	r3, [r3, #0]
  401704:	b16b      	cbz	r3, 401722 <stack_alloc+0x26>
	alloc(elements);
	align_to_eight_byte_boundary();
}

static void alloc(uint32_t elements){
	return stack = stack - elements;
  401706:	4b0a      	ldr	r3, [pc, #40]	; (401730 <stack_alloc+0x34>)
  401708:	6818      	ldr	r0, [r3, #0]
  40170a:	eba0 0084 	sub.w	r0, r0, r4, lsl #2


static void align_to_eight_byte_boundary(void){
	uint32_t address = (uint32_t)stack;
	
	while( address % 8 != 0 ){
  40170e:	f010 0f07 	tst.w	r0, #7
  401712:	d003      	beq.n	40171c <stack_alloc+0x20>
		address--;
  401714:	3801      	subs	r0, #1
	while( address % 8 != 0 ){
  401716:	f010 0f07 	tst.w	r0, #7
  40171a:	d1fb      	bne.n	401714 <stack_alloc+0x18>
	}
	
	stack = address;
  40171c:	4b04      	ldr	r3, [pc, #16]	; (401730 <stack_alloc+0x34>)
  40171e:	6018      	str	r0, [r3, #0]
  401720:	bd10      	pop	{r4, pc}
		system_panic( "Allocation on uninit stack" );
  401722:	4804      	ldr	r0, [pc, #16]	; (401734 <stack_alloc+0x38>)
  401724:	4b04      	ldr	r3, [pc, #16]	; (401738 <stack_alloc+0x3c>)
  401726:	4798      	blx	r3
  401728:	e7ed      	b.n	401706 <stack_alloc+0xa>
  40172a:	bf00      	nop
  40172c:	20006100 	.word	0x20006100
  401730:	20006104 	.word	0x20006104
  401734:	0040ab08 	.word	0x0040ab08
  401738:	0040148d 	.word	0x0040148d

0040173c <ssd1306_write_command>:
{
  40173c:	b570      	push	{r4, r5, r6, lr}
  40173e:	b082      	sub	sp, #8
  401740:	4606      	mov	r6, r0
	struct spi_device device = {.id = SSD1306_CS_PIN};
  401742:	ac02      	add	r4, sp, #8
  401744:	2302      	movs	r3, #2
  401746:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40174a:	4d09      	ldr	r5, [pc, #36]	; (401770 <ssd1306_write_command+0x34>)
  40174c:	4621      	mov	r1, r4
  40174e:	4628      	mov	r0, r5
  401750:	4b08      	ldr	r3, [pc, #32]	; (401774 <ssd1306_write_command+0x38>)
  401752:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401754:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401758:	4b07      	ldr	r3, [pc, #28]	; (401778 <ssd1306_write_command+0x3c>)
  40175a:	635a      	str	r2, [r3, #52]	; 0x34
  40175c:	60ee      	str	r6, [r5, #12]
	delay_us(SSD1306_LATENCY); // At least 3us
  40175e:	2056      	movs	r0, #86	; 0x56
  401760:	4b06      	ldr	r3, [pc, #24]	; (40177c <ssd1306_write_command+0x40>)
  401762:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  401764:	4621      	mov	r1, r4
  401766:	4628      	mov	r0, r5
  401768:	4b05      	ldr	r3, [pc, #20]	; (401780 <ssd1306_write_command+0x44>)
  40176a:	4798      	blx	r3
}
  40176c:	b002      	add	sp, #8
  40176e:	bd70      	pop	{r4, r5, r6, pc}
  401770:	40008000 	.word	0x40008000
  401774:	00402aa5 	.word	0x00402aa5
  401778:	400e1200 	.word	0x400e1200
  40177c:	20000001 	.word	0x20000001
  401780:	00402ad5 	.word	0x00402ad5

00401784 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  401784:	b5f0      	push	{r4, r5, r6, r7, lr}
  401786:	b085      	sub	sp, #20
  401788:	4d25      	ldr	r5, [pc, #148]	; (401820 <ssd1306_init+0x9c>)
  40178a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  40178e:	636e      	str	r6, [r5, #52]	; 0x34
	delay_us(SSD1306_LATENCY); // At least 3us
  401790:	2056      	movs	r0, #86	; 0x56
  401792:	4c24      	ldr	r4, [pc, #144]	; (401824 <ssd1306_init+0xa0>)
  401794:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401796:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(SSD1306_LATENCY); // At least 3us
  401798:	2056      	movs	r0, #86	; 0x56
  40179a:	47a0      	blx	r4
	struct spi_device device = {
  40179c:	2702      	movs	r7, #2
  40179e:	ae04      	add	r6, sp, #16
  4017a0:	f846 7d04 	str.w	r7, [r6, #-4]!
	spi_master_init(SSD1306_SPI);
  4017a4:	4c20      	ldr	r4, [pc, #128]	; (401828 <ssd1306_init+0xa4>)
  4017a6:	4620      	mov	r0, r4
  4017a8:	4b20      	ldr	r3, [pc, #128]	; (40182c <ssd1306_init+0xa8>)
  4017aa:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  4017ac:	2500      	movs	r5, #0
  4017ae:	9500      	str	r5, [sp, #0]
  4017b0:	4b1f      	ldr	r3, [pc, #124]	; (401830 <ssd1306_init+0xac>)
  4017b2:	462a      	mov	r2, r5
  4017b4:	4631      	mov	r1, r6
  4017b6:	4620      	mov	r0, r4
  4017b8:	4e1e      	ldr	r6, [pc, #120]	; (401834 <ssd1306_init+0xb0>)
  4017ba:	47b0      	blx	r6
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4017bc:	2301      	movs	r3, #1
  4017be:	6023      	str	r3, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4017c0:	20a8      	movs	r0, #168	; 0xa8
  4017c2:	4c1d      	ldr	r4, [pc, #116]	; (401838 <ssd1306_init+0xb4>)
  4017c4:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4017c6:	201f      	movs	r0, #31
  4017c8:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4017ca:	20d3      	movs	r0, #211	; 0xd3
  4017cc:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4017ce:	4628      	mov	r0, r5
  4017d0:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  4017d2:	2040      	movs	r0, #64	; 0x40
  4017d4:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4017d6:	20a1      	movs	r0, #161	; 0xa1
  4017d8:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4017da:	20c8      	movs	r0, #200	; 0xc8
  4017dc:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4017de:	20da      	movs	r0, #218	; 0xda
  4017e0:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  4017e2:	4638      	mov	r0, r7
  4017e4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4017e6:	2081      	movs	r0, #129	; 0x81
  4017e8:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  4017ea:	208f      	movs	r0, #143	; 0x8f
  4017ec:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  4017ee:	20a4      	movs	r0, #164	; 0xa4
  4017f0:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4017f2:	20a6      	movs	r0, #166	; 0xa6
  4017f4:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4017f6:	20d5      	movs	r0, #213	; 0xd5
  4017f8:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4017fa:	2080      	movs	r0, #128	; 0x80
  4017fc:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4017fe:	208d      	movs	r0, #141	; 0x8d
  401800:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  401802:	2014      	movs	r0, #20
  401804:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  401806:	20db      	movs	r0, #219	; 0xdb
  401808:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  40180a:	2040      	movs	r0, #64	; 0x40
  40180c:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  40180e:	20d9      	movs	r0, #217	; 0xd9
  401810:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  401812:	20f1      	movs	r0, #241	; 0xf1
  401814:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  401816:	20af      	movs	r0, #175	; 0xaf
  401818:	47a0      	blx	r4

	ssd1306_display_on();
}
  40181a:	b005      	add	sp, #20
  40181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40181e:	bf00      	nop
  401820:	400e1200 	.word	0x400e1200
  401824:	20000001 	.word	0x20000001
  401828:	40008000 	.word	0x40008000
  40182c:	004029d1 	.word	0x004029d1
  401830:	004c4b40 	.word	0x004c4b40
  401834:	00402a25 	.word	0x00402a25
  401838:	0040173d 	.word	0x0040173d

0040183c <at30tse_init>:

/**
 * \brief Initialize the TWI instance used for AT30TSE75x.
 */
void at30tse_init(void)
{
  40183c:	b500      	push	{lr}
  40183e:	b085      	sub	sp, #20
	twi_options_t opts = {
  401840:	2300      	movs	r3, #0
  401842:	9303      	str	r3, [sp, #12]
  401844:	4b07      	ldr	r3, [pc, #28]	; (401864 <at30tse_init+0x28>)
  401846:	9301      	str	r3, [sp, #4]
  401848:	f242 7310 	movw	r3, #10000	; 0x2710
  40184c:	9302      	str	r3, [sp, #8]
  40184e:	2013      	movs	r0, #19
  401850:	4b05      	ldr	r3, [pc, #20]	; (401868 <at30tse_init+0x2c>)
  401852:	4798      	blx	r3
	flexcom_enable(BOARD_FLEXCOM_TWI);
	flexcom_set_opmode(BOARD_FLEXCOM_TWI, FLEXCOM_TWI);
#else
	sysclk_enable_peripheral_clock(BOARD_AT30TSE_TWI_ID);
#endif
	twi_master_init(BOARD_AT30TSE_TWI, &opts);
  401854:	a901      	add	r1, sp, #4
  401856:	4805      	ldr	r0, [pc, #20]	; (40186c <at30tse_init+0x30>)
  401858:	4b05      	ldr	r3, [pc, #20]	; (401870 <at30tse_init+0x34>)
  40185a:	4798      	blx	r3

}
  40185c:	b005      	add	sp, #20
  40185e:	f85d fb04 	ldr.w	pc, [sp], #4
  401862:	bf00      	nop
  401864:	07270e00 	.word	0x07270e00
  401868:	004032c1 	.word	0x004032c1
  40186c:	40018000 	.word	0x40018000
  401870:	00403725 	.word	0x00403725

00401874 <at30tse_read_register>:
 *
 * \return TWI_SUCCESS if success, otherwise false
 */
uint8_t at30tse_read_register(uint8_t reg, uint8_t reg_type,
		uint8_t reg_size, uint8_t* buffer)
{
  401874:	b510      	push	{r4, lr}
  401876:	b086      	sub	sp, #24
	twi_packet_t packet = {
  401878:	2400      	movs	r4, #0
  40187a:	9401      	str	r4, [sp, #4]
  40187c:	9405      	str	r4, [sp, #20]
  40187e:	4301      	orrs	r1, r0
  401880:	f88d 1004 	strb.w	r1, [sp, #4]
  401884:	2101      	movs	r1, #1
  401886:	9102      	str	r1, [sp, #8]
  401888:	9303      	str	r3, [sp, #12]
  40188a:	9204      	str	r2, [sp, #16]
  40188c:	234f      	movs	r3, #79	; 0x4f
  40188e:	f88d 3014 	strb.w	r3, [sp, #20]
		.length = reg_size,
		/* Chip addr */
		.chip = AT30TSE_TEMPERATURE_TWI_ADDR
	};

	return twi_master_read(BOARD_AT30TSE_TWI, &packet);
  401892:	a901      	add	r1, sp, #4
  401894:	4802      	ldr	r0, [pc, #8]	; (4018a0 <at30tse_read_register+0x2c>)
  401896:	4b03      	ldr	r3, [pc, #12]	; (4018a4 <at30tse_read_register+0x30>)
  401898:	4798      	blx	r3
}
  40189a:	b2c0      	uxtb	r0, r0
  40189c:	b006      	add	sp, #24
  40189e:	bd10      	pop	{r4, pc}
  4018a0:	40018000 	.word	0x40018000
  4018a4:	00403789 	.word	0x00403789

004018a8 <at30tse_read_temperature>:
 * stored
 *
 * \return TWI_SUCCESS if success, otherwise false
 */
uint8_t at30tse_read_temperature(double *temperature)
{
  4018a8:	b570      	push	{r4, r5, r6, lr}
  4018aa:	b082      	sub	sp, #8
  4018ac:	4604      	mov	r4, r0
	/* Placeholder buffer to put temperature data in. */
	uint8_t buffer[2];
	uint8_t error_code = 0;
	buffer[0] = 0;
  4018ae:	2000      	movs	r0, #0
  4018b0:	f88d 0004 	strb.w	r0, [sp, #4]
	buffer[1] = 0;
  4018b4:	f88d 0005 	strb.w	r0, [sp, #5]

	/* Read the 16-bit temperature register. */
	error_code = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
  4018b8:	ab01      	add	r3, sp, #4
  4018ba:	2202      	movs	r2, #2
  4018bc:	4601      	mov	r1, r0
  4018be:	4d27      	ldr	r5, [pc, #156]	; (40195c <at30tse_read_temperature+0xb4>)
  4018c0:	47a8      	blx	r5
			AT30TSE_NON_VOLATILE_REG, AT30TSE_TEMPERATURE_REG_SIZE, buffer);

	/* Only convert temperature data if read success. */
	if (error_code == TWI_SUCCESS) {
  4018c2:	4605      	mov	r5, r0
  4018c4:	bb10      	cbnz	r0, 40190c <at30tse_read_temperature+0x64>
		uint16_t data = (buffer[0] << 8) | buffer[1];
  4018c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4018ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4018ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4018d2:	b21b      	sxth	r3, r3
  4018d4:	b29a      	uxth	r2, r3
		int8_t sign = 1;

		/* Check if negative and clear sign bit. */
		if (data & (1 << 15)) {
  4018d6:	2b00      	cmp	r3, #0
			sign *= -1;
			data &= ~(1 << 15);
  4018d8:	bfba      	itte	lt
  4018da:	f3c2 020e 	ubfxlt	r2, r2, #0, #15
			sign *= -1;
  4018de:	f04f 30ff 	movlt.w	r0, #4294967295
		int8_t sign = 1;
  4018e2:	2001      	movge	r0, #1
		}

		/* Convert to temperature. */
		switch (resolution) {
  4018e4:	4b1e      	ldr	r3, [pc, #120]	; (401960 <at30tse_read_temperature+0xb8>)
  4018e6:	781b      	ldrb	r3, [r3, #0]
  4018e8:	b2db      	uxtb	r3, r3
  4018ea:	2b03      	cmp	r3, #3
  4018ec:	d80e      	bhi.n	40190c <at30tse_read_temperature+0x64>
  4018ee:	e8df f003 	tbb	[pc, r3]
  4018f2:	1002      	.short	0x1002
  4018f4:	291c      	.short	0x291c
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			*(temperature) = data * sign * 0.5;
  4018f6:	09d2      	lsrs	r2, r2, #7
  4018f8:	fb00 f002 	mul.w	r0, r0, r2
  4018fc:	4b19      	ldr	r3, [pc, #100]	; (401964 <at30tse_read_temperature+0xbc>)
  4018fe:	4798      	blx	r3
  401900:	2200      	movs	r2, #0
  401902:	4b19      	ldr	r3, [pc, #100]	; (401968 <at30tse_read_temperature+0xc0>)
  401904:	4e19      	ldr	r6, [pc, #100]	; (40196c <at30tse_read_temperature+0xc4>)
  401906:	47b0      	blx	r6
  401908:	e9c4 0100 	strd	r0, r1, [r4]
			break;
		}
	}

	return error_code;
}
  40190c:	4628      	mov	r0, r5
  40190e:	b002      	add	sp, #8
  401910:	bd70      	pop	{r4, r5, r6, pc}
			*(temperature) = data * sign * 0.25;
  401912:	0992      	lsrs	r2, r2, #6
  401914:	fb00 f002 	mul.w	r0, r0, r2
  401918:	4b12      	ldr	r3, [pc, #72]	; (401964 <at30tse_read_temperature+0xbc>)
  40191a:	4798      	blx	r3
  40191c:	2200      	movs	r2, #0
  40191e:	4b14      	ldr	r3, [pc, #80]	; (401970 <at30tse_read_temperature+0xc8>)
  401920:	4e12      	ldr	r6, [pc, #72]	; (40196c <at30tse_read_temperature+0xc4>)
  401922:	47b0      	blx	r6
  401924:	e9c4 0100 	strd	r0, r1, [r4]
			break;
  401928:	e7f0      	b.n	40190c <at30tse_read_temperature+0x64>
			*(temperature) = data * sign * 0.125;
  40192a:	0952      	lsrs	r2, r2, #5
  40192c:	fb00 f002 	mul.w	r0, r0, r2
  401930:	4b0c      	ldr	r3, [pc, #48]	; (401964 <at30tse_read_temperature+0xbc>)
  401932:	4798      	blx	r3
  401934:	2200      	movs	r2, #0
  401936:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  40193a:	4e0c      	ldr	r6, [pc, #48]	; (40196c <at30tse_read_temperature+0xc4>)
  40193c:	47b0      	blx	r6
  40193e:	e9c4 0100 	strd	r0, r1, [r4]
			break;
  401942:	e7e3      	b.n	40190c <at30tse_read_temperature+0x64>
			*(temperature) = data * sign * 0.0625;
  401944:	0912      	lsrs	r2, r2, #4
  401946:	fb00 f002 	mul.w	r0, r0, r2
  40194a:	4b06      	ldr	r3, [pc, #24]	; (401964 <at30tse_read_temperature+0xbc>)
  40194c:	4798      	blx	r3
  40194e:	2200      	movs	r2, #0
  401950:	4b08      	ldr	r3, [pc, #32]	; (401974 <at30tse_read_temperature+0xcc>)
  401952:	4e06      	ldr	r6, [pc, #24]	; (40196c <at30tse_read_temperature+0xc4>)
  401954:	47b0      	blx	r6
  401956:	e9c4 0100 	strd	r0, r1, [r4]
			break;
  40195a:	e7d7      	b.n	40190c <at30tse_read_temperature+0x64>
  40195c:	00401875 	.word	0x00401875
  401960:	20006108 	.word	0x20006108
  401964:	00405c05 	.word	0x00405c05
  401968:	3fe00000 	.word	0x3fe00000
  40196c:	00405cd1 	.word	0x00405cd1
  401970:	3fd00000 	.word	0x3fd00000
  401974:	3fb00000 	.word	0x3fb00000

00401978 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  401978:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40197a:	4b07      	ldr	r3, [pc, #28]	; (401998 <sd_mmc_configure_slot+0x20>)
  40197c:	6819      	ldr	r1, [r3, #0]
  40197e:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  401982:	3300      	adds	r3, #0
  401984:	bf18      	it	ne
  401986:	2301      	movne	r3, #1
  401988:	7c4a      	ldrb	r2, [r1, #17]
  40198a:	6809      	ldr	r1, [r1, #0]
  40198c:	4803      	ldr	r0, [pc, #12]	; (40199c <sd_mmc_configure_slot+0x24>)
  40198e:	7800      	ldrb	r0, [r0, #0]
  401990:	4c03      	ldr	r4, [pc, #12]	; (4019a0 <sd_mmc_configure_slot+0x28>)
  401992:	47a0      	blx	r4
  401994:	bd10      	pop	{r4, pc}
  401996:	bf00      	nop
  401998:	2000610c 	.word	0x2000610c
  40199c:	20006115 	.word	0x20006115
  4019a0:	00402585 	.word	0x00402585

004019a4 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4019a4:	b108      	cbz	r0, 4019aa <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4019a6:	2004      	movs	r0, #4
  4019a8:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4019aa:	4b33      	ldr	r3, [pc, #204]	; (401a78 <sd_mmc_select_slot+0xd4>)
  4019ac:	689a      	ldr	r2, [r3, #8]
	return pin >> 5;
  4019ae:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4019b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4019b4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4019b8:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4019ba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4019bc:	f002 021f 	and.w	r2, r2, #31
  4019c0:	2301      	movs	r3, #1
  4019c2:	fa03 f202 	lsl.w	r2, r3, r2
  4019c6:	420a      	tst	r2, r1
  4019c8:	d010      	beq.n	4019ec <sd_mmc_select_slot+0x48>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4019ca:	4b2b      	ldr	r3, [pc, #172]	; (401a78 <sd_mmc_select_slot+0xd4>)
  4019cc:	7b9b      	ldrb	r3, [r3, #14]
  4019ce:	2b01      	cmp	r3, #1
  4019d0:	d004      	beq.n	4019dc <sd_mmc_select_slot+0x38>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4019d2:	2204      	movs	r2, #4
  4019d4:	4b28      	ldr	r3, [pc, #160]	; (401a78 <sd_mmc_select_slot+0xd4>)
  4019d6:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  4019d8:	2002      	movs	r0, #2
  4019da:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  4019dc:	4b27      	ldr	r3, [pc, #156]	; (401a7c <sd_mmc_select_slot+0xd8>)
  4019de:	781b      	ldrb	r3, [r3, #0]
  4019e0:	2b00      	cmp	r3, #0
  4019e2:	d0f6      	beq.n	4019d2 <sd_mmc_select_slot+0x2e>
		SysTick->CTRL = 0;
  4019e4:	2200      	movs	r2, #0
  4019e6:	4b26      	ldr	r3, [pc, #152]	; (401a80 <sd_mmc_select_slot+0xdc>)
  4019e8:	601a      	str	r2, [r3, #0]
  4019ea:	e7f2      	b.n	4019d2 <sd_mmc_select_slot+0x2e>
{
  4019ec:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  4019ee:	4b22      	ldr	r3, [pc, #136]	; (401a78 <sd_mmc_select_slot+0xd4>)
  4019f0:	7b9b      	ldrb	r3, [r3, #14]
  4019f2:	2b04      	cmp	r3, #4
  4019f4:	d005      	beq.n	401a02 <sd_mmc_select_slot+0x5e>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4019f6:	2b01      	cmp	r3, #1
  4019f8:	d019      	beq.n	401a2e <sd_mmc_select_slot+0x8a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  4019fa:	2b03      	cmp	r3, #3
  4019fc:	d12c      	bne.n	401a58 <sd_mmc_select_slot+0xb4>
		return SD_MMC_ERR_UNUSABLE;
  4019fe:	2003      	movs	r0, #3
  401a00:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  401a02:	2201      	movs	r2, #1
  401a04:	4b1c      	ldr	r3, [pc, #112]	; (401a78 <sd_mmc_select_slot+0xd4>)
  401a06:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  401a08:	4b1d      	ldr	r3, [pc, #116]	; (401a80 <sd_mmc_select_slot+0xdc>)
  401a0a:	681b      	ldr	r3, [r3, #0]
  401a0c:	b93b      	cbnz	r3, 401a1e <sd_mmc_select_slot+0x7a>
		sd_mmc_sam_systick_used = true;
  401a0e:	4b1b      	ldr	r3, [pc, #108]	; (401a7c <sd_mmc_select_slot+0xd8>)
  401a10:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  401a12:	4b1b      	ldr	r3, [pc, #108]	; (401a80 <sd_mmc_select_slot+0xdc>)
  401a14:	491b      	ldr	r1, [pc, #108]	; (401a84 <sd_mmc_select_slot+0xe0>)
  401a16:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  401a18:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  401a1a:	2002      	movs	r0, #2
  401a1c:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  401a1e:	2200      	movs	r2, #0
  401a20:	4b16      	ldr	r3, [pc, #88]	; (401a7c <sd_mmc_select_slot+0xd8>)
  401a22:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  401a24:	4818      	ldr	r0, [pc, #96]	; (401a88 <sd_mmc_select_slot+0xe4>)
  401a26:	4b19      	ldr	r3, [pc, #100]	; (401a8c <sd_mmc_select_slot+0xe8>)
  401a28:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  401a2a:	2002      	movs	r0, #2
  401a2c:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  401a2e:	4b13      	ldr	r3, [pc, #76]	; (401a7c <sd_mmc_select_slot+0xd8>)
  401a30:	781b      	ldrb	r3, [r3, #0]
  401a32:	b13b      	cbz	r3, 401a44 <sd_mmc_select_slot+0xa0>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  401a34:	4b12      	ldr	r3, [pc, #72]	; (401a80 <sd_mmc_select_slot+0xdc>)
  401a36:	681b      	ldr	r3, [r3, #0]
  401a38:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401a3c:	d01a      	beq.n	401a74 <sd_mmc_select_slot+0xd0>
		SysTick->CTRL = 0;
  401a3e:	2200      	movs	r2, #0
  401a40:	4b0f      	ldr	r3, [pc, #60]	; (401a80 <sd_mmc_select_slot+0xdc>)
  401a42:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  401a44:	4b0c      	ldr	r3, [pc, #48]	; (401a78 <sd_mmc_select_slot+0xd4>)
  401a46:	2202      	movs	r2, #2
  401a48:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  401a4a:	4a11      	ldr	r2, [pc, #68]	; (401a90 <sd_mmc_select_slot+0xec>)
  401a4c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  401a4e:	2201      	movs	r2, #1
  401a50:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  401a52:	2200      	movs	r2, #0
  401a54:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  401a58:	2200      	movs	r2, #0
  401a5a:	4b0e      	ldr	r3, [pc, #56]	; (401a94 <sd_mmc_select_slot+0xf0>)
  401a5c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  401a5e:	4c06      	ldr	r4, [pc, #24]	; (401a78 <sd_mmc_select_slot+0xd4>)
  401a60:	4b0d      	ldr	r3, [pc, #52]	; (401a98 <sd_mmc_select_slot+0xf4>)
  401a62:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  401a64:	4b0d      	ldr	r3, [pc, #52]	; (401a9c <sd_mmc_select_slot+0xf8>)
  401a66:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  401a68:	7ba0      	ldrb	r0, [r4, #14]
  401a6a:	2802      	cmp	r0, #2
  401a6c:	bf14      	ite	ne
  401a6e:	2000      	movne	r0, #0
  401a70:	2001      	moveq	r0, #1
  401a72:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  401a74:	2002      	movs	r0, #2
  401a76:	bd10      	pop	{r4, pc}
  401a78:	20000458 	.word	0x20000458
  401a7c:	20006114 	.word	0x20006114
  401a80:	e000e010 	.word	0xe000e010
  401a84:	00e4e1c0 	.word	0x00e4e1c0
  401a88:	0082ca25 	.word	0x0082ca25
  401a8c:	20000001 	.word	0x20000001
  401a90:	00061a80 	.word	0x00061a80
  401a94:	20006115 	.word	0x20006115
  401a98:	2000610c 	.word	0x2000610c
  401a9c:	00401979 	.word	0x00401979

00401aa0 <sd_mmc_cmd13>:
{
  401aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401aa4:	4c09      	ldr	r4, [pc, #36]	; (401acc <sd_mmc_cmd13+0x2c>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  401aa6:	2700      	movs	r7, #0
  401aa8:	4e09      	ldr	r6, [pc, #36]	; (401ad0 <sd_mmc_cmd13+0x30>)
			if (!(driver_get_response() & 0xFF)) {
  401aaa:	4d0a      	ldr	r5, [pc, #40]	; (401ad4 <sd_mmc_cmd13+0x34>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  401aac:	4639      	mov	r1, r7
  401aae:	f641 300d 	movw	r0, #6925	; 0x1b0d
  401ab2:	47b0      	blx	r6
  401ab4:	4680      	mov	r8, r0
  401ab6:	b130      	cbz	r0, 401ac6 <sd_mmc_cmd13+0x26>
			if (!(driver_get_response() & 0xFF)) {
  401ab8:	47a8      	blx	r5
  401aba:	b2c0      	uxtb	r0, r0
  401abc:	b118      	cbz	r0, 401ac6 <sd_mmc_cmd13+0x26>
		if (nec_timeout-- == 0) {
  401abe:	3c01      	subs	r4, #1
  401ac0:	d1f4      	bne.n	401aac <sd_mmc_cmd13+0xc>
			return false;
  401ac2:	f04f 0800 	mov.w	r8, #0
}
  401ac6:	4640      	mov	r0, r8
  401ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401acc:	00030d41 	.word	0x00030d41
  401ad0:	004027ad 	.word	0x004027ad
  401ad4:	004027c5 	.word	0x004027c5

00401ad8 <sd_mmc_cmd9_spi>:
{
  401ad8:	b510      	push	{r4, lr}
  401ada:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
  401adc:	4b0d      	ldr	r3, [pc, #52]	; (401b14 <sd_mmc_cmd9_spi+0x3c>)
  401ade:	681b      	ldr	r3, [r3, #0]
  401ae0:	8999      	ldrh	r1, [r3, #12]
  401ae2:	2301      	movs	r3, #1
  401ae4:	9300      	str	r3, [sp, #0]
  401ae6:	2210      	movs	r2, #16
  401ae8:	4091      	lsls	r1, r2
  401aea:	480b      	ldr	r0, [pc, #44]	; (401b18 <sd_mmc_cmd9_spi+0x40>)
  401aec:	4c0b      	ldr	r4, [pc, #44]	; (401b1c <sd_mmc_cmd9_spi+0x44>)
  401aee:	47a0      	blx	r4
  401af0:	4603      	mov	r3, r0
  401af2:	b910      	cbnz	r0, 401afa <sd_mmc_cmd9_spi+0x22>
}
  401af4:	4618      	mov	r0, r3
  401af6:	b002      	add	sp, #8
  401af8:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
  401afa:	4b06      	ldr	r3, [pc, #24]	; (401b14 <sd_mmc_cmd9_spi+0x3c>)
  401afc:	6818      	ldr	r0, [r3, #0]
  401afe:	2101      	movs	r1, #1
  401b00:	3012      	adds	r0, #18
  401b02:	4b07      	ldr	r3, [pc, #28]	; (401b20 <sd_mmc_cmd9_spi+0x48>)
  401b04:	4798      	blx	r3
  401b06:	4603      	mov	r3, r0
  401b08:	2800      	cmp	r0, #0
  401b0a:	d0f3      	beq.n	401af4 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
  401b0c:	4b05      	ldr	r3, [pc, #20]	; (401b24 <sd_mmc_cmd9_spi+0x4c>)
  401b0e:	4798      	blx	r3
  401b10:	4603      	mov	r3, r0
  401b12:	e7ef      	b.n	401af4 <sd_mmc_cmd9_spi+0x1c>
  401b14:	2000610c 	.word	0x2000610c
  401b18:	00081109 	.word	0x00081109
  401b1c:	00402625 	.word	0x00402625
  401b20:	00402845 	.word	0x00402845
  401b24:	004028c1 	.word	0x004028c1

00401b28 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  401b28:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  401b2a:	4b04      	ldr	r3, [pc, #16]	; (401b3c <sd_mmc_deselect_slot+0x14>)
  401b2c:	781b      	ldrb	r3, [r3, #0]
  401b2e:	b103      	cbz	r3, 401b32 <sd_mmc_deselect_slot+0xa>
  401b30:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  401b32:	2000      	movs	r0, #0
  401b34:	4b02      	ldr	r3, [pc, #8]	; (401b40 <sd_mmc_deselect_slot+0x18>)
  401b36:	4798      	blx	r3
	}
}
  401b38:	e7fa      	b.n	401b30 <sd_mmc_deselect_slot+0x8>
  401b3a:	bf00      	nop
  401b3c:	20006115 	.word	0x20006115
  401b40:	004025c5 	.word	0x004025c5

00401b44 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  401b44:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  401b46:	200d      	movs	r0, #13
  401b48:	4b05      	ldr	r3, [pc, #20]	; (401b60 <sd_mmc_init+0x1c>)
  401b4a:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  401b4c:	2204      	movs	r2, #4
  401b4e:	4b05      	ldr	r3, [pc, #20]	; (401b64 <sd_mmc_init+0x20>)
  401b50:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  401b52:	22ff      	movs	r2, #255	; 0xff
  401b54:	4b04      	ldr	r3, [pc, #16]	; (401b68 <sd_mmc_init+0x24>)
  401b56:	701a      	strb	r2, [r3, #0]
	driver_init();
  401b58:	4b04      	ldr	r3, [pc, #16]	; (401b6c <sd_mmc_init+0x28>)
  401b5a:	4798      	blx	r3
  401b5c:	bd08      	pop	{r3, pc}
  401b5e:	bf00      	nop
  401b60:	004032c1 	.word	0x004032c1
  401b64:	20000458 	.word	0x20000458
  401b68:	20006115 	.word	0x20006115
  401b6c:	00402555 	.word	0x00402555

00401b70 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  401b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401b74:	b087      	sub	sp, #28
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  401b76:	4b9a      	ldr	r3, [pc, #616]	; (401de0 <sd_mmc_check+0x270>)
  401b78:	4798      	blx	r3
  401b7a:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  401b7c:	2801      	cmp	r0, #1
  401b7e:	d005      	beq.n	401b8c <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  401b80:	4b98      	ldr	r3, [pc, #608]	; (401de4 <sd_mmc_check+0x274>)
  401b82:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  401b84:	4620      	mov	r0, r4
  401b86:	b007      	add	sp, #28
  401b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
  401b8c:	4b96      	ldr	r3, [pc, #600]	; (401de8 <sd_mmc_check+0x278>)
  401b8e:	681b      	ldr	r3, [r3, #0]
  401b90:	2201      	movs	r2, #1
  401b92:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  401b94:	2500      	movs	r5, #0
  401b96:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  401b98:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  401b9a:	4b94      	ldr	r3, [pc, #592]	; (401dec <sd_mmc_check+0x27c>)
  401b9c:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  401b9e:	4629      	mov	r1, r5
  401ba0:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  401ba4:	4b92      	ldr	r3, [pc, #584]	; (401df0 <sd_mmc_check+0x280>)
  401ba6:	4798      	blx	r3
  401ba8:	b930      	cbnz	r0, 401bb8 <sd_mmc_check+0x48>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  401baa:	4b8f      	ldr	r3, [pc, #572]	; (401de8 <sd_mmc_check+0x278>)
  401bac:	681b      	ldr	r3, [r3, #0]
  401bae:	2403      	movs	r4, #3
  401bb0:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  401bb2:	4b8c      	ldr	r3, [pc, #560]	; (401de4 <sd_mmc_check+0x274>)
  401bb4:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  401bb6:	e7e5      	b.n	401b84 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  401bb8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  401bbc:	f245 5008 	movw	r0, #21768	; 0x5508
  401bc0:	4b8b      	ldr	r3, [pc, #556]	; (401df0 <sd_mmc_check+0x280>)
  401bc2:	4798      	blx	r3
  401bc4:	2800      	cmp	r0, #0
  401bc6:	d129      	bne.n	401c1c <sd_mmc_check+0xac>
	*v2 = 0;
  401bc8:	2700      	movs	r7, #0
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401bca:	4b87      	ldr	r3, [pc, #540]	; (401de8 <sd_mmc_check+0x278>)
  401bcc:	681b      	ldr	r3, [r3, #0]
  401bce:	7bdb      	ldrb	r3, [r3, #15]
  401bd0:	f013 0f01 	tst.w	r3, #1
  401bd4:	f040 81df 	bne.w	401f96 <sd_mmc_check+0x426>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  401bd8:	4b83      	ldr	r3, [pc, #524]	; (401de8 <sd_mmc_check+0x278>)
  401bda:	681b      	ldr	r3, [r3, #0]
  401bdc:	7bdb      	ldrb	r3, [r3, #15]
  401bde:	f003 0309 	and.w	r3, r3, #9
  401be2:	2b01      	cmp	r3, #1
  401be4:	d111      	bne.n	401c0a <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  401be6:	f44f 7100 	mov.w	r1, #512	; 0x200
  401bea:	f241 1010 	movw	r0, #4368	; 0x1110
  401bee:	4b80      	ldr	r3, [pc, #512]	; (401df0 <sd_mmc_check+0x280>)
  401bf0:	4798      	blx	r3
  401bf2:	2800      	cmp	r0, #0
  401bf4:	d0d9      	beq.n	401baa <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401bf6:	4b7c      	ldr	r3, [pc, #496]	; (401de8 <sd_mmc_check+0x278>)
  401bf8:	681b      	ldr	r3, [r3, #0]
  401bfa:	7bdb      	ldrb	r3, [r3, #15]
  401bfc:	f013 0f01 	tst.w	r3, #1
  401c00:	d003      	beq.n	401c0a <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
  401c02:	4b7c      	ldr	r3, [pc, #496]	; (401df4 <sd_mmc_check+0x284>)
  401c04:	4798      	blx	r3
  401c06:	2800      	cmp	r0, #0
  401c08:	d0cf      	beq.n	401baa <sd_mmc_check+0x3a>
	sd_mmc_configure_slot();
  401c0a:	4b7b      	ldr	r3, [pc, #492]	; (401df8 <sd_mmc_check+0x288>)
  401c0c:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  401c0e:	4b76      	ldr	r3, [pc, #472]	; (401de8 <sd_mmc_check+0x278>)
  401c10:	681b      	ldr	r3, [r3, #0]
  401c12:	2200      	movs	r2, #0
  401c14:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  401c16:	4b73      	ldr	r3, [pc, #460]	; (401de4 <sd_mmc_check+0x274>)
  401c18:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  401c1a:	e7b3      	b.n	401b84 <sd_mmc_check+0x14>
	resp = driver_get_response();
  401c1c:	4b77      	ldr	r3, [pc, #476]	; (401dfc <sd_mmc_check+0x28c>)
  401c1e:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  401c20:	f1b0 3fff 	cmp.w	r0, #4294967295
  401c24:	f000 81b5 	beq.w	401f92 <sd_mmc_check+0x422>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  401c28:	f3c0 000b 	ubfx	r0, r0, #0, #12
  401c2c:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  401c30:	d1bb      	bne.n	401baa <sd_mmc_check+0x3a>
	*v2 = 1;
  401c32:	2701      	movs	r7, #1
  401c34:	e7c9      	b.n	401bca <sd_mmc_check+0x5a>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  401c36:	2100      	movs	r1, #0
  401c38:	f240 503a 	movw	r0, #1338	; 0x53a
  401c3c:	4b6c      	ldr	r3, [pc, #432]	; (401df0 <sd_mmc_check+0x280>)
  401c3e:	4798      	blx	r3
  401c40:	b9f0      	cbnz	r0, 401c80 <sd_mmc_check+0x110>
			sd_mmc_card->type = CARD_TYPE_MMC;
  401c42:	4b69      	ldr	r3, [pc, #420]	; (401de8 <sd_mmc_check+0x278>)
  401c44:	681b      	ldr	r3, [r3, #0]
  401c46:	2202      	movs	r2, #2
  401c48:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  401c4a:	2100      	movs	r1, #0
  401c4c:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  401c50:	4b67      	ldr	r3, [pc, #412]	; (401df0 <sd_mmc_check+0x280>)
  401c52:	4798      	blx	r3
  401c54:	2800      	cmp	r0, #0
  401c56:	d0a8      	beq.n	401baa <sd_mmc_check+0x3a>
  401c58:	f641 35ef 	movw	r5, #7151	; 0x1bef
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  401c5c:	f04f 0800 	mov.w	r8, #0
  401c60:	4e63      	ldr	r6, [pc, #396]	; (401df0 <sd_mmc_check+0x280>)
		resp = driver_get_response();
  401c62:	4f66      	ldr	r7, [pc, #408]	; (401dfc <sd_mmc_check+0x28c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  401c64:	4641      	mov	r1, r8
  401c66:	f241 1001 	movw	r0, #4353	; 0x1101
  401c6a:	47b0      	blx	r6
  401c6c:	2800      	cmp	r0, #0
  401c6e:	d09c      	beq.n	401baa <sd_mmc_check+0x3a>
		resp = driver_get_response();
  401c70:	47b8      	blx	r7
		if (!(resp & R1_SPI_IDLE)) {
  401c72:	f010 0f01 	tst.w	r0, #1
  401c76:	f000 8084 	beq.w	401d82 <sd_mmc_check+0x212>
		if (retry-- == 0) {
  401c7a:	3d01      	subs	r5, #1
  401c7c:	d1f2      	bne.n	401c64 <sd_mmc_check+0xf4>
  401c7e:	e794      	b.n	401baa <sd_mmc_check+0x3a>
	if ((driver_get_response() & OCR_CCS) != 0) {
  401c80:	4b5e      	ldr	r3, [pc, #376]	; (401dfc <sd_mmc_check+0x28c>)
  401c82:	4798      	blx	r3
  401c84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  401c88:	d005      	beq.n	401c96 <sd_mmc_check+0x126>
		sd_mmc_card->type |= CARD_TYPE_HC;
  401c8a:	4b57      	ldr	r3, [pc, #348]	; (401de8 <sd_mmc_check+0x278>)
  401c8c:	681a      	ldr	r2, [r3, #0]
  401c8e:	7bd3      	ldrb	r3, [r2, #15]
  401c90:	f043 0308 	orr.w	r3, r3, #8
  401c94:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  401c96:	2100      	movs	r1, #0
  401c98:	f241 103b 	movw	r0, #4411	; 0x113b
  401c9c:	4b54      	ldr	r3, [pc, #336]	; (401df0 <sd_mmc_check+0x280>)
  401c9e:	4798      	blx	r3
  401ca0:	2800      	cmp	r0, #0
  401ca2:	d082      	beq.n	401baa <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401ca4:	4b50      	ldr	r3, [pc, #320]	; (401de8 <sd_mmc_check+0x278>)
  401ca6:	681b      	ldr	r3, [r3, #0]
  401ca8:	7bdb      	ldrb	r3, [r3, #15]
  401caa:	f013 0f01 	tst.w	r3, #1
  401cae:	f000 8190 	beq.w	401fd2 <sd_mmc_check+0x462>
		if (!sd_mmc_cmd9_spi()) {
  401cb2:	4b53      	ldr	r3, [pc, #332]	; (401e00 <sd_mmc_check+0x290>)
  401cb4:	4798      	blx	r3
  401cb6:	2800      	cmp	r0, #0
  401cb8:	f43f af77 	beq.w	401baa <sd_mmc_check+0x3a>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  401cbc:	4b4a      	ldr	r3, [pc, #296]	; (401de8 <sd_mmc_check+0x278>)
  401cbe:	681b      	ldr	r3, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401cc0:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  401cc2:	f002 0007 	and.w	r0, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  401cc6:	494f      	ldr	r1, [pc, #316]	; (401e04 <sd_mmc_check+0x294>)
  401cc8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  401ccc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  401cd0:	fb01 f100 	mul.w	r1, r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  401cd4:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  401cd8:	484b      	ldr	r0, [pc, #300]	; (401e08 <sd_mmc_check+0x298>)
  401cda:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  401cde:	fb02 f201 	mul.w	r2, r2, r1
  401ce2:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  401ce4:	7c9a      	ldrb	r2, [r3, #18]
  401ce6:	0992      	lsrs	r2, r2, #6
  401ce8:	f040 812a 	bne.w	401f40 <sd_mmc_check+0x3d0>
  401cec:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401cee:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401cf0:	7e1a      	ldrb	r2, [r3, #24]
  401cf2:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401cf4:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  401cf8:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401cfc:	7f18      	ldrb	r0, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401cfe:	7ed9      	ldrb	r1, [r3, #27]
  401d00:	0049      	lsls	r1, r1, #1
  401d02:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  401d06:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  401d0a:	3201      	adds	r2, #1
  401d0c:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  401d10:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  401d12:	408a      	lsls	r2, r1
  401d14:	7dd9      	ldrb	r1, [r3, #23]
  401d16:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  401d1a:	408a      	lsls	r2, r1
				/ 1024;
  401d1c:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  401d1e:	605a      	str	r2, [r3, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  401d20:	8999      	ldrh	r1, [r3, #12]
  401d22:	0409      	lsls	r1, r1, #16
  401d24:	f241 1037 	movw	r0, #4407	; 0x1137
  401d28:	4b31      	ldr	r3, [pc, #196]	; (401df0 <sd_mmc_check+0x280>)
  401d2a:	4798      	blx	r3
  401d2c:	2800      	cmp	r0, #0
  401d2e:	f43f af3c 	beq.w	401baa <sd_mmc_check+0x3a>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  401d32:	2301      	movs	r3, #1
  401d34:	9300      	str	r3, [sp, #0]
  401d36:	2208      	movs	r2, #8
  401d38:	2100      	movs	r1, #0
  401d3a:	4834      	ldr	r0, [pc, #208]	; (401e0c <sd_mmc_check+0x29c>)
  401d3c:	4d34      	ldr	r5, [pc, #208]	; (401e10 <sd_mmc_check+0x2a0>)
  401d3e:	47a8      	blx	r5
  401d40:	2800      	cmp	r0, #0
  401d42:	f43f af32 	beq.w	401baa <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(scr, 1)) {
  401d46:	2101      	movs	r1, #1
  401d48:	a804      	add	r0, sp, #16
  401d4a:	4b32      	ldr	r3, [pc, #200]	; (401e14 <sd_mmc_check+0x2a4>)
  401d4c:	4798      	blx	r3
  401d4e:	2800      	cmp	r0, #0
  401d50:	f43f af2b 	beq.w	401baa <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  401d54:	4b30      	ldr	r3, [pc, #192]	; (401e18 <sd_mmc_check+0x2a8>)
  401d56:	4798      	blx	r3
  401d58:	2800      	cmp	r0, #0
  401d5a:	f43f af26 	beq.w	401baa <sd_mmc_check+0x3a>
	switch (SD_SCR_SD_SPEC(scr)) {
  401d5e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401d62:	f003 030f 	and.w	r3, r3, #15
  401d66:	2b01      	cmp	r3, #1
  401d68:	f000 8104 	beq.w	401f74 <sd_mmc_check+0x404>
  401d6c:	2b00      	cmp	r3, #0
  401d6e:	f000 80f4 	beq.w	401f5a <sd_mmc_check+0x3ea>
  401d72:	2b02      	cmp	r3, #2
  401d74:	f000 8103 	beq.w	401f7e <sd_mmc_check+0x40e>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  401d78:	4b1b      	ldr	r3, [pc, #108]	; (401de8 <sd_mmc_check+0x278>)
  401d7a:	681b      	ldr	r3, [r3, #0]
  401d7c:	2210      	movs	r2, #16
  401d7e:	741a      	strb	r2, [r3, #16]
  401d80:	e0ef      	b.n	401f62 <sd_mmc_check+0x3f2>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  401d82:	2100      	movs	r1, #0
  401d84:	f240 503a 	movw	r0, #1338	; 0x53a
  401d88:	4b19      	ldr	r3, [pc, #100]	; (401df0 <sd_mmc_check+0x280>)
  401d8a:	4798      	blx	r3
  401d8c:	2800      	cmp	r0, #0
  401d8e:	f43f af0c 	beq.w	401baa <sd_mmc_check+0x3a>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
  401d92:	4b1a      	ldr	r3, [pc, #104]	; (401dfc <sd_mmc_check+0x28c>)
  401d94:	4798      	blx	r3
  401d96:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  401d9a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  401d9e:	d105      	bne.n	401dac <sd_mmc_check+0x23c>
		sd_mmc_card->type |= CARD_TYPE_HC;
  401da0:	4b11      	ldr	r3, [pc, #68]	; (401de8 <sd_mmc_check+0x278>)
  401da2:	681a      	ldr	r2, [r3, #0]
  401da4:	7bd3      	ldrb	r3, [r2, #15]
  401da6:	f043 0308 	orr.w	r3, r3, #8
  401daa:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  401dac:	2100      	movs	r1, #0
  401dae:	f241 103b 	movw	r0, #4411	; 0x113b
  401db2:	4b0f      	ldr	r3, [pc, #60]	; (401df0 <sd_mmc_check+0x280>)
  401db4:	4798      	blx	r3
  401db6:	2800      	cmp	r0, #0
  401db8:	f43f aef7 	beq.w	401baa <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd9_spi()) {
  401dbc:	4b10      	ldr	r3, [pc, #64]	; (401e00 <sd_mmc_check+0x290>)
  401dbe:	4798      	blx	r3
  401dc0:	2800      	cmp	r0, #0
  401dc2:	f43f aef2 	beq.w	401baa <sd_mmc_check+0x3a>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  401dc6:	4b08      	ldr	r3, [pc, #32]	; (401de8 <sd_mmc_check+0x278>)
  401dc8:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401dca:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  401dcc:	f3c3 0383 	ubfx	r3, r3, #2, #4
  401dd0:	3b01      	subs	r3, #1
  401dd2:	2b03      	cmp	r3, #3
  401dd4:	d822      	bhi.n	401e1c <sd_mmc_check+0x2ac>
  401dd6:	e8df f003 	tbb	[pc, r3]
  401dda:	908d      	.short	0x908d
  401ddc:	9693      	.short	0x9693
  401dde:	bf00      	nop
  401de0:	004019a5 	.word	0x004019a5
  401de4:	00401b29 	.word	0x00401b29
  401de8:	2000610c 	.word	0x2000610c
  401dec:	004025ed 	.word	0x004025ed
  401df0:	004027ad 	.word	0x004027ad
  401df4:	00401aa1 	.word	0x00401aa1
  401df8:	00401979 	.word	0x00401979
  401dfc:	004027c5 	.word	0x004027c5
  401e00:	00401ad9 	.word	0x00401ad9
  401e04:	0040ab7c 	.word	0x0040ab7c
  401e08:	0040ab98 	.word	0x0040ab98
  401e0c:	00081133 	.word	0x00081133
  401e10:	00402625 	.word	0x00402625
  401e14:	00402845 	.word	0x00402845
  401e18:	004028c1 	.word	0x004028c1
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  401e1c:	2312      	movs	r3, #18
  401e1e:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401e20:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  401e22:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  401e26:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  401e2a:	496d      	ldr	r1, [pc, #436]	; (401fe0 <sd_mmc_check+0x470>)
  401e2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  401e30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401e34:	fb03 f301 	mul.w	r3, r3, r1
  401e38:	496a      	ldr	r1, [pc, #424]	; (401fe4 <sd_mmc_check+0x474>)
  401e3a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  401e3e:	fb03 f301 	mul.w	r3, r3, r1
  401e42:	6013      	str	r3, [r2, #0]
  401e44:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401e46:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401e48:	7e13      	ldrb	r3, [r2, #24]
  401e4a:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401e4c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  401e50:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  401e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  401e58:	f640 71ff 	movw	r1, #4095	; 0xfff
  401e5c:	428b      	cmp	r3, r1
  401e5e:	d00f      	beq.n	401e80 <sd_mmc_check+0x310>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401e60:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401e62:	7ed1      	ldrb	r1, [r2, #27]
  401e64:	0049      	lsls	r1, r1, #1
  401e66:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  401e6a:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  401e6c:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  401e70:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  401e72:	408b      	lsls	r3, r1
  401e74:	7dd1      	ldrb	r1, [r2, #23]
  401e76:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  401e7a:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  401e7c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  401e7e:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  401e80:	7c13      	ldrb	r3, [r2, #16]
  401e82:	2b3f      	cmp	r3, #63	; 0x3f
  401e84:	d94b      	bls.n	401f1e <sd_mmc_check+0x3ae>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  401e86:	2100      	movs	r1, #0
  401e88:	9100      	str	r1, [sp, #0]
  401e8a:	2301      	movs	r3, #1
  401e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
  401e90:	4855      	ldr	r0, [pc, #340]	; (401fe8 <sd_mmc_check+0x478>)
  401e92:	4d56      	ldr	r5, [pc, #344]	; (401fec <sd_mmc_check+0x47c>)
  401e94:	47a8      	blx	r5
  401e96:	2800      	cmp	r0, #0
  401e98:	f43f ae87 	beq.w	401baa <sd_mmc_check+0x3a>
  401e9c:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  401e9e:	4e54      	ldr	r6, [pc, #336]	; (401ff0 <sd_mmc_check+0x480>)
  401ea0:	a803      	add	r0, sp, #12
  401ea2:	47b0      	blx	r6
  401ea4:	2800      	cmp	r0, #0
  401ea6:	f43f ae80 	beq.w	401baa <sd_mmc_check+0x3a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  401eaa:	3501      	adds	r5, #1
  401eac:	b2ad      	uxth	r5, r5
  401eae:	2d32      	cmp	r5, #50	; 0x32
  401eb0:	d1f6      	bne.n	401ea0 <sd_mmc_check+0x330>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  401eb2:	4b50      	ldr	r3, [pc, #320]	; (401ff4 <sd_mmc_check+0x484>)
  401eb4:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401eb6:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401eb8:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401eba:	7e1b      	ldrb	r3, [r3, #24]
  401ebc:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401ebe:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  401ec2:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  401ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401eca:	f640 72ff 	movw	r2, #4095	; 0xfff
  401ece:	4293      	cmp	r3, r2
  401ed0:	d10e      	bne.n	401ef0 <sd_mmc_check+0x380>
			if (!driver_read_word(&sec_count)) {
  401ed2:	4e47      	ldr	r6, [pc, #284]	; (401ff0 <sd_mmc_check+0x480>)
  401ed4:	a804      	add	r0, sp, #16
  401ed6:	47b0      	blx	r6
  401ed8:	2800      	cmp	r0, #0
  401eda:	f43f ae66 	beq.w	401baa <sd_mmc_check+0x3a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  401ede:	3501      	adds	r5, #1
  401ee0:	b2ad      	uxth	r5, r5
  401ee2:	2d35      	cmp	r5, #53	; 0x35
  401ee4:	d9f6      	bls.n	401ed4 <sd_mmc_check+0x364>
		sd_mmc_card->capacity = sec_count / 2;
  401ee6:	4b43      	ldr	r3, [pc, #268]	; (401ff4 <sd_mmc_check+0x484>)
  401ee8:	681a      	ldr	r2, [r3, #0]
  401eea:	9b04      	ldr	r3, [sp, #16]
  401eec:	085b      	lsrs	r3, r3, #1
  401eee:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  401ef0:	4e3f      	ldr	r6, [pc, #252]	; (401ff0 <sd_mmc_check+0x480>)
  401ef2:	e012      	b.n	401f1a <sd_mmc_check+0x3aa>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  401ef4:	2314      	movs	r3, #20
  401ef6:	7413      	strb	r3, [r2, #16]
  401ef8:	e792      	b.n	401e20 <sd_mmc_check+0x2b0>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  401efa:	2322      	movs	r3, #34	; 0x22
  401efc:	7413      	strb	r3, [r2, #16]
  401efe:	e78f      	b.n	401e20 <sd_mmc_check+0x2b0>
		sd_mmc_card->version = CARD_VER_MMC_3;
  401f00:	2330      	movs	r3, #48	; 0x30
  401f02:	7413      	strb	r3, [r2, #16]
  401f04:	e78c      	b.n	401e20 <sd_mmc_check+0x2b0>
		sd_mmc_card->version = CARD_VER_MMC_4;
  401f06:	2340      	movs	r3, #64	; 0x40
  401f08:	7413      	strb	r3, [r2, #16]
  401f0a:	e789      	b.n	401e20 <sd_mmc_check+0x2b0>
		if (!driver_read_word(&sec_count)) {
  401f0c:	a804      	add	r0, sp, #16
  401f0e:	47b0      	blx	r6
  401f10:	2800      	cmp	r0, #0
  401f12:	f43f ae4a 	beq.w	401baa <sd_mmc_check+0x3a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  401f16:	3501      	adds	r5, #1
  401f18:	b2ad      	uxth	r5, r5
  401f1a:	2d7f      	cmp	r5, #127	; 0x7f
  401f1c:	d9f6      	bls.n	401f0c <sd_mmc_check+0x39c>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  401f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
  401f22:	f241 1010 	movw	r0, #4368	; 0x1110
  401f26:	4b34      	ldr	r3, [pc, #208]	; (401ff8 <sd_mmc_check+0x488>)
  401f28:	4798      	blx	r3
  401f2a:	2800      	cmp	r0, #0
  401f2c:	f43f ae3d 	beq.w	401baa <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd13()) {
  401f30:	4b32      	ldr	r3, [pc, #200]	; (401ffc <sd_mmc_check+0x48c>)
  401f32:	4798      	blx	r3
  401f34:	2800      	cmp	r0, #0
  401f36:	f43f ae38 	beq.w	401baa <sd_mmc_check+0x3a>
	sd_mmc_configure_slot();
  401f3a:	4b31      	ldr	r3, [pc, #196]	; (402000 <sd_mmc_check+0x490>)
  401f3c:	4798      	blx	r3
  401f3e:	e666      	b.n	401c0e <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401f40:	7ed9      	ldrb	r1, [r3, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401f42:	7e98      	ldrb	r0, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401f44:	7e5a      	ldrb	r2, [r3, #25]
  401f46:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401f48:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  401f4c:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  401f4e:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  401f52:	3201      	adds	r2, #1
  401f54:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  401f56:	605a      	str	r2, [r3, #4]
  401f58:	e6e2      	b.n	401d20 <sd_mmc_check+0x1b0>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  401f5a:	4b26      	ldr	r3, [pc, #152]	; (401ff4 <sd_mmc_check+0x484>)
  401f5c:	681b      	ldr	r3, [r3, #0]
  401f5e:	2210      	movs	r2, #16
  401f60:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  401f62:	4b24      	ldr	r3, [pc, #144]	; (401ff4 <sd_mmc_check+0x484>)
  401f64:	681b      	ldr	r3, [r3, #0]
  401f66:	7bdb      	ldrb	r3, [r3, #15]
  401f68:	f003 0309 	and.w	r3, r3, #9
  401f6c:	2b01      	cmp	r3, #1
  401f6e:	f47f ae42 	bne.w	401bf6 <sd_mmc_check+0x86>
  401f72:	e638      	b.n	401be6 <sd_mmc_check+0x76>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  401f74:	4b1f      	ldr	r3, [pc, #124]	; (401ff4 <sd_mmc_check+0x484>)
  401f76:	681b      	ldr	r3, [r3, #0]
  401f78:	221a      	movs	r2, #26
  401f7a:	741a      	strb	r2, [r3, #16]
  401f7c:	e7f1      	b.n	401f62 <sd_mmc_check+0x3f2>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  401f7e:	f89d 3012 	ldrb.w	r3, [sp, #18]
  401f82:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  401f84:	4b1b      	ldr	r3, [pc, #108]	; (401ff4 <sd_mmc_check+0x484>)
  401f86:	681b      	ldr	r3, [r3, #0]
  401f88:	bf14      	ite	ne
  401f8a:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  401f8c:	2220      	moveq	r2, #32
  401f8e:	741a      	strb	r2, [r3, #16]
  401f90:	e7e7      	b.n	401f62 <sd_mmc_check+0x3f2>
	*v2 = 0;
  401f92:	2700      	movs	r7, #0
  401f94:	e619      	b.n	401bca <sd_mmc_check+0x5a>
  401f96:	07bf      	lsls	r7, r7, #30
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401f98:	f641 35ef 	movw	r5, #7151	; 0x1bef
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  401f9c:	f04f 0800 	mov.w	r8, #0
  401fa0:	4e15      	ldr	r6, [pc, #84]	; (401ff8 <sd_mmc_check+0x488>)
		resp = driver_get_response();
  401fa2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 402004 <sd_mmc_check+0x494>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  401fa6:	4641      	mov	r1, r8
  401fa8:	f241 1037 	movw	r0, #4407	; 0x1137
  401fac:	47b0      	blx	r6
  401fae:	2800      	cmp	r0, #0
  401fb0:	f43f ae47 	beq.w	401c42 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
  401fb4:	4639      	mov	r1, r7
  401fb6:	f241 1029 	movw	r0, #4393	; 0x1129
  401fba:	47b0      	blx	r6
  401fbc:	2800      	cmp	r0, #0
  401fbe:	f43f ae40 	beq.w	401c42 <sd_mmc_check+0xd2>
		resp = driver_get_response();
  401fc2:	47c8      	blx	r9
		if (!(resp & R1_SPI_IDLE)) {
  401fc4:	f010 0f01 	tst.w	r0, #1
  401fc8:	f43f ae35 	beq.w	401c36 <sd_mmc_check+0xc6>
		if (retry-- == 0) {
  401fcc:	3d01      	subs	r5, #1
  401fce:	d1ea      	bne.n	401fa6 <sd_mmc_check+0x436>
  401fd0:	e637      	b.n	401c42 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  401fd2:	f003 0309 	and.w	r3, r3, #9
  401fd6:	2b01      	cmp	r3, #1
  401fd8:	f47f ae17 	bne.w	401c0a <sd_mmc_check+0x9a>
  401fdc:	e603      	b.n	401be6 <sd_mmc_check+0x76>
  401fde:	bf00      	nop
  401fe0:	0040ab7c 	.word	0x0040ab7c
  401fe4:	0040ab3c 	.word	0x0040ab3c
  401fe8:	00081108 	.word	0x00081108
  401fec:	00402625 	.word	0x00402625
  401ff0:	004027d1 	.word	0x004027d1
  401ff4:	2000610c 	.word	0x2000610c
  401ff8:	004027ad 	.word	0x004027ad
  401ffc:	00401aa1 	.word	0x00401aa1
  402000:	00401979 	.word	0x00401979
  402004:	004027c5 	.word	0x004027c5

00402008 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  402008:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  40200a:	4b05      	ldr	r3, [pc, #20]	; (402020 <sd_mmc_get_type+0x18>)
  40200c:	4798      	blx	r3
  40200e:	b108      	cbz	r0, 402014 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  402010:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  402012:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  402014:	4b03      	ldr	r3, [pc, #12]	; (402024 <sd_mmc_get_type+0x1c>)
  402016:	4798      	blx	r3
	return sd_mmc_card->type;
  402018:	4b03      	ldr	r3, [pc, #12]	; (402028 <sd_mmc_get_type+0x20>)
  40201a:	681b      	ldr	r3, [r3, #0]
  40201c:	7bd8      	ldrb	r0, [r3, #15]
  40201e:	bd08      	pop	{r3, pc}
  402020:	004019a5 	.word	0x004019a5
  402024:	00401b29 	.word	0x00401b29
  402028:	2000610c 	.word	0x2000610c

0040202c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  40202c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  40202e:	4b05      	ldr	r3, [pc, #20]	; (402044 <sd_mmc_get_capacity+0x18>)
  402030:	4798      	blx	r3
  402032:	b108      	cbz	r0, 402038 <sd_mmc_get_capacity+0xc>
		return 0;
  402034:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  402036:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  402038:	4b03      	ldr	r3, [pc, #12]	; (402048 <sd_mmc_get_capacity+0x1c>)
  40203a:	4798      	blx	r3
	return sd_mmc_card->capacity;
  40203c:	4b03      	ldr	r3, [pc, #12]	; (40204c <sd_mmc_get_capacity+0x20>)
  40203e:	681b      	ldr	r3, [r3, #0]
  402040:	6858      	ldr	r0, [r3, #4]
  402042:	bd08      	pop	{r3, pc}
  402044:	004019a5 	.word	0x004019a5
  402048:	00401b29 	.word	0x00401b29
  40204c:	2000610c 	.word	0x2000610c

00402050 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  402050:	2000      	movs	r0, #0
  402052:	4770      	bx	lr

00402054 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  402054:	b570      	push	{r4, r5, r6, lr}
  402056:	b082      	sub	sp, #8
  402058:	460e      	mov	r6, r1
  40205a:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40205c:	4b15      	ldr	r3, [pc, #84]	; (4020b4 <sd_mmc_init_read_blocks+0x60>)
  40205e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  402060:	4604      	mov	r4, r0
  402062:	b110      	cbz	r0, 40206a <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  402064:	4620      	mov	r0, r4
  402066:	b002      	add	sp, #8
  402068:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
  40206a:	4b13      	ldr	r3, [pc, #76]	; (4020b8 <sd_mmc_init_read_blocks+0x64>)
  40206c:	4798      	blx	r3
  40206e:	b1c8      	cbz	r0, 4020a4 <sd_mmc_init_read_blocks+0x50>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  402070:	4b12      	ldr	r3, [pc, #72]	; (4020bc <sd_mmc_init_read_blocks+0x68>)
  402072:	4813      	ldr	r0, [pc, #76]	; (4020c0 <sd_mmc_init_read_blocks+0x6c>)
  402074:	2d01      	cmp	r5, #1
  402076:	bf98      	it	ls
  402078:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40207a:	4b12      	ldr	r3, [pc, #72]	; (4020c4 <sd_mmc_init_read_blocks+0x70>)
  40207c:	681b      	ldr	r3, [r3, #0]
  40207e:	7bdb      	ldrb	r3, [r3, #15]
  402080:	f013 0f08 	tst.w	r3, #8
		arg = (start * SD_MMC_BLOCK_SIZE);
  402084:	bf08      	it	eq
  402086:	0276      	lsleq	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  402088:	2301      	movs	r3, #1
  40208a:	9300      	str	r3, [sp, #0]
  40208c:	462b      	mov	r3, r5
  40208e:	f44f 7200 	mov.w	r2, #512	; 0x200
  402092:	4631      	mov	r1, r6
  402094:	4e0c      	ldr	r6, [pc, #48]	; (4020c8 <sd_mmc_init_read_blocks+0x74>)
  402096:	47b0      	blx	r6
  402098:	b140      	cbz	r0, 4020ac <sd_mmc_init_read_blocks+0x58>
	sd_mmc_nb_block_remaining = nb_block;
  40209a:	4b0c      	ldr	r3, [pc, #48]	; (4020cc <sd_mmc_init_read_blocks+0x78>)
  40209c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  40209e:	4b0c      	ldr	r3, [pc, #48]	; (4020d0 <sd_mmc_init_read_blocks+0x7c>)
  4020a0:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  4020a2:	e7df      	b.n	402064 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
  4020a4:	4b0b      	ldr	r3, [pc, #44]	; (4020d4 <sd_mmc_init_read_blocks+0x80>)
  4020a6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4020a8:	2405      	movs	r4, #5
  4020aa:	e7db      	b.n	402064 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
  4020ac:	4b09      	ldr	r3, [pc, #36]	; (4020d4 <sd_mmc_init_read_blocks+0x80>)
  4020ae:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4020b0:	2405      	movs	r4, #5
  4020b2:	e7d7      	b.n	402064 <sd_mmc_init_read_blocks+0x10>
  4020b4:	004019a5 	.word	0x004019a5
  4020b8:	00401aa1 	.word	0x00401aa1
  4020bc:	00081111 	.word	0x00081111
  4020c0:	00101112 	.word	0x00101112
  4020c4:	2000610c 	.word	0x2000610c
  4020c8:	00402625 	.word	0x00402625
  4020cc:	20006110 	.word	0x20006110
  4020d0:	20006112 	.word	0x20006112
  4020d4:	00401b29 	.word	0x00401b29

004020d8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  4020d8:	b510      	push	{r4, lr}
  4020da:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  4020dc:	4b06      	ldr	r3, [pc, #24]	; (4020f8 <sd_mmc_start_read_blocks+0x20>)
  4020de:	4798      	blx	r3
  4020e0:	b920      	cbnz	r0, 4020ec <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  4020e2:	2200      	movs	r2, #0
  4020e4:	4b05      	ldr	r3, [pc, #20]	; (4020fc <sd_mmc_start_read_blocks+0x24>)
  4020e6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  4020e8:	2005      	movs	r0, #5
  4020ea:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  4020ec:	4a03      	ldr	r2, [pc, #12]	; (4020fc <sd_mmc_start_read_blocks+0x24>)
  4020ee:	8813      	ldrh	r3, [r2, #0]
  4020f0:	1b1c      	subs	r4, r3, r4
  4020f2:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  4020f4:	2000      	movs	r0, #0
}
  4020f6:	bd10      	pop	{r4, pc}
  4020f8:	00402845 	.word	0x00402845
  4020fc:	20006110 	.word	0x20006110

00402100 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  402100:	b510      	push	{r4, lr}
  402102:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  402104:	4b13      	ldr	r3, [pc, #76]	; (402154 <sd_mmc_wait_end_of_read_blocks+0x54>)
  402106:	4798      	blx	r3
  402108:	b908      	cbnz	r0, 40210e <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  40210a:	2005      	movs	r0, #5
  40210c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  40210e:	b184      	cbz	r4, 402132 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  402110:	2200      	movs	r2, #0
  402112:	4b11      	ldr	r3, [pc, #68]	; (402158 <sd_mmc_wait_end_of_read_blocks+0x58>)
  402114:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  402116:	4b11      	ldr	r3, [pc, #68]	; (40215c <sd_mmc_wait_end_of_read_blocks+0x5c>)
  402118:	881b      	ldrh	r3, [r3, #0]
  40211a:	2b01      	cmp	r3, #1
  40211c:	d00f      	beq.n	40213e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  40211e:	2100      	movs	r1, #0
  402120:	f243 100c 	movw	r0, #12556	; 0x310c
  402124:	4b0e      	ldr	r3, [pc, #56]	; (402160 <sd_mmc_wait_end_of_read_blocks+0x60>)
  402126:	4798      	blx	r3
  402128:	b168      	cbz	r0, 402146 <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  40212a:	4b0e      	ldr	r3, [pc, #56]	; (402164 <sd_mmc_wait_end_of_read_blocks+0x64>)
  40212c:	4798      	blx	r3
	return SD_MMC_OK;
  40212e:	2000      	movs	r0, #0
  402130:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  402132:	4b09      	ldr	r3, [pc, #36]	; (402158 <sd_mmc_wait_end_of_read_blocks+0x58>)
  402134:	881b      	ldrh	r3, [r3, #0]
  402136:	2b00      	cmp	r3, #0
  402138:	d0ed      	beq.n	402116 <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  40213a:	2000      	movs	r0, #0
}
  40213c:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  40213e:	4b09      	ldr	r3, [pc, #36]	; (402164 <sd_mmc_wait_end_of_read_blocks+0x64>)
  402140:	4798      	blx	r3
		return SD_MMC_OK;
  402142:	2000      	movs	r0, #0
  402144:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  402146:	2100      	movs	r1, #0
  402148:	f243 100c 	movw	r0, #12556	; 0x310c
  40214c:	4b04      	ldr	r3, [pc, #16]	; (402160 <sd_mmc_wait_end_of_read_blocks+0x60>)
  40214e:	4798      	blx	r3
  402150:	e7eb      	b.n	40212a <sd_mmc_wait_end_of_read_blocks+0x2a>
  402152:	bf00      	nop
  402154:	004028c1 	.word	0x004028c1
  402158:	20006110 	.word	0x20006110
  40215c:	20006112 	.word	0x20006112
  402160:	004027ad 	.word	0x004027ad
  402164:	00401b29 	.word	0x00401b29

00402168 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  402168:	b570      	push	{r4, r5, r6, lr}
  40216a:	b082      	sub	sp, #8
  40216c:	460e      	mov	r6, r1
  40216e:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  402170:	4b11      	ldr	r3, [pc, #68]	; (4021b8 <sd_mmc_init_write_blocks+0x50>)
  402172:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  402174:	4604      	mov	r4, r0
  402176:	b9c0      	cbnz	r0, 4021aa <sd_mmc_init_write_blocks+0x42>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  402178:	4b10      	ldr	r3, [pc, #64]	; (4021bc <sd_mmc_init_write_blocks+0x54>)
  40217a:	4811      	ldr	r0, [pc, #68]	; (4021c0 <sd_mmc_init_write_blocks+0x58>)
  40217c:	2d01      	cmp	r5, #1
  40217e:	bf98      	it	ls
  402180:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  402182:	4b10      	ldr	r3, [pc, #64]	; (4021c4 <sd_mmc_init_write_blocks+0x5c>)
  402184:	681b      	ldr	r3, [r3, #0]
  402186:	7bdb      	ldrb	r3, [r3, #15]
  402188:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  40218c:	bf08      	it	eq
  40218e:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  402190:	2301      	movs	r3, #1
  402192:	9300      	str	r3, [sp, #0]
  402194:	462b      	mov	r3, r5
  402196:	f44f 7200 	mov.w	r2, #512	; 0x200
  40219a:	4631      	mov	r1, r6
  40219c:	4e0a      	ldr	r6, [pc, #40]	; (4021c8 <sd_mmc_init_write_blocks+0x60>)
  40219e:	47b0      	blx	r6
  4021a0:	b130      	cbz	r0, 4021b0 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  4021a2:	4b0a      	ldr	r3, [pc, #40]	; (4021cc <sd_mmc_init_write_blocks+0x64>)
  4021a4:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  4021a6:	4b0a      	ldr	r3, [pc, #40]	; (4021d0 <sd_mmc_init_write_blocks+0x68>)
  4021a8:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
  4021aa:	4620      	mov	r0, r4
  4021ac:	b002      	add	sp, #8
  4021ae:	bd70      	pop	{r4, r5, r6, pc}
		sd_mmc_deselect_slot();
  4021b0:	4b08      	ldr	r3, [pc, #32]	; (4021d4 <sd_mmc_init_write_blocks+0x6c>)
  4021b2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4021b4:	2405      	movs	r4, #5
  4021b6:	e7f8      	b.n	4021aa <sd_mmc_init_write_blocks+0x42>
  4021b8:	004019a5 	.word	0x004019a5
  4021bc:	00089118 	.word	0x00089118
  4021c0:	00109119 	.word	0x00109119
  4021c4:	2000610c 	.word	0x2000610c
  4021c8:	00402625 	.word	0x00402625
  4021cc:	20006110 	.word	0x20006110
  4021d0:	20006112 	.word	0x20006112
  4021d4:	00401b29 	.word	0x00401b29

004021d8 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  4021d8:	b510      	push	{r4, lr}
  4021da:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  4021dc:	4b06      	ldr	r3, [pc, #24]	; (4021f8 <sd_mmc_start_write_blocks+0x20>)
  4021de:	4798      	blx	r3
  4021e0:	b920      	cbnz	r0, 4021ec <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  4021e2:	2200      	movs	r2, #0
  4021e4:	4b05      	ldr	r3, [pc, #20]	; (4021fc <sd_mmc_start_write_blocks+0x24>)
  4021e6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  4021e8:	2005      	movs	r0, #5
  4021ea:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  4021ec:	4a03      	ldr	r2, [pc, #12]	; (4021fc <sd_mmc_start_write_blocks+0x24>)
  4021ee:	8813      	ldrh	r3, [r2, #0]
  4021f0:	1b1c      	subs	r4, r3, r4
  4021f2:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  4021f4:	2000      	movs	r0, #0
}
  4021f6:	bd10      	pop	{r4, pc}
  4021f8:	004028c5 	.word	0x004028c5
  4021fc:	20006110 	.word	0x20006110

00402200 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  402200:	b510      	push	{r4, lr}
  402202:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  402204:	4b09      	ldr	r3, [pc, #36]	; (40222c <sd_mmc_wait_end_of_write_blocks+0x2c>)
  402206:	4798      	blx	r3
  402208:	b908      	cbnz	r0, 40220e <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  40220a:	2005      	movs	r0, #5
  40220c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  40220e:	b134      	cbz	r4, 40221e <sd_mmc_wait_end_of_write_blocks+0x1e>
		sd_mmc_nb_block_remaining = 0;
  402210:	2200      	movs	r2, #0
  402212:	4b07      	ldr	r3, [pc, #28]	; (402230 <sd_mmc_wait_end_of_write_blocks+0x30>)
  402214:	801a      	strh	r2, [r3, #0]
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
  402216:	4b07      	ldr	r3, [pc, #28]	; (402234 <sd_mmc_wait_end_of_write_blocks+0x34>)
  402218:	4798      	blx	r3
	return SD_MMC_OK;
  40221a:	2000      	movs	r0, #0
  40221c:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  40221e:	4b04      	ldr	r3, [pc, #16]	; (402230 <sd_mmc_wait_end_of_write_blocks+0x30>)
  402220:	881b      	ldrh	r3, [r3, #0]
  402222:	2b00      	cmp	r3, #0
  402224:	d0f7      	beq.n	402216 <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  402226:	2000      	movs	r0, #0
}
  402228:	bd10      	pop	{r4, pc}
  40222a:	bf00      	nop
  40222c:	00402945 	.word	0x00402945
  402230:	20006110 	.word	0x20006110
  402234:	00401b29 	.word	0x00401b29

00402238 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  402238:	b510      	push	{r4, lr}
  40223a:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  40223c:	4b0f      	ldr	r3, [pc, #60]	; (40227c <sd_mmc_test_unit_ready+0x44>)
  40223e:	4798      	blx	r3
  402240:	2801      	cmp	r0, #1
  402242:	d018      	beq.n	402276 <sd_mmc_test_unit_ready+0x3e>
  402244:	b118      	cbz	r0, 40224e <sd_mmc_test_unit_ready+0x16>
  402246:	2802      	cmp	r0, #2
  402248:	d010      	beq.n	40226c <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  40224a:	2001      	movs	r0, #1
  40224c:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  40224e:	4b0c      	ldr	r3, [pc, #48]	; (402280 <sd_mmc_test_unit_ready+0x48>)
  402250:	5d1b      	ldrb	r3, [r3, r4]
  402252:	b10b      	cbz	r3, 402258 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  402254:	2002      	movs	r0, #2
	}
}
  402256:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  402258:	4620      	mov	r0, r4
  40225a:	4b0a      	ldr	r3, [pc, #40]	; (402284 <sd_mmc_test_unit_ready+0x4c>)
  40225c:	4798      	blx	r3
  40225e:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  402262:	2800      	cmp	r0, #0
  402264:	bf14      	ite	ne
  402266:	2000      	movne	r0, #0
  402268:	2002      	moveq	r0, #2
  40226a:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  40226c:	2200      	movs	r2, #0
  40226e:	4b04      	ldr	r3, [pc, #16]	; (402280 <sd_mmc_test_unit_ready+0x48>)
  402270:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  402272:	2002      	movs	r0, #2
  402274:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  402276:	2003      	movs	r0, #3
  402278:	bd10      	pop	{r4, pc}
  40227a:	bf00      	nop
  40227c:	00401b71 	.word	0x00401b71
  402280:	20006118 	.word	0x20006118
  402284:	00402009 	.word	0x00402009

00402288 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  402288:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  40228a:	2000      	movs	r0, #0
  40228c:	4b01      	ldr	r3, [pc, #4]	; (402294 <sd_mmc_test_unit_ready_0+0xc>)
  40228e:	4798      	blx	r3
}
  402290:	bd08      	pop	{r3, pc}
  402292:	bf00      	nop
  402294:	00402239 	.word	0x00402239

00402298 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  402298:	b538      	push	{r3, r4, r5, lr}
  40229a:	4604      	mov	r4, r0
  40229c:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  40229e:	4b04      	ldr	r3, [pc, #16]	; (4022b0 <sd_mmc_read_capacity+0x18>)
  4022a0:	4798      	blx	r3
  4022a2:	0040      	lsls	r0, r0, #1
  4022a4:	3801      	subs	r0, #1
  4022a6:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  4022a8:	4620      	mov	r0, r4
  4022aa:	4b02      	ldr	r3, [pc, #8]	; (4022b4 <sd_mmc_read_capacity+0x1c>)
  4022ac:	4798      	blx	r3
}
  4022ae:	bd38      	pop	{r3, r4, r5, pc}
  4022b0:	0040202d 	.word	0x0040202d
  4022b4:	00402239 	.word	0x00402239

004022b8 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  4022b8:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  4022ba:	4601      	mov	r1, r0
  4022bc:	2000      	movs	r0, #0
  4022be:	4b01      	ldr	r3, [pc, #4]	; (4022c4 <sd_mmc_read_capacity_0+0xc>)
  4022c0:	4798      	blx	r3
}
  4022c2:	bd08      	pop	{r3, pc}
  4022c4:	00402299 	.word	0x00402299

004022c8 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  4022c8:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  4022ca:	2000      	movs	r0, #0
  4022cc:	4b01      	ldr	r3, [pc, #4]	; (4022d4 <sd_mmc_wr_protect_0+0xc>)
  4022ce:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  4022d0:	bd08      	pop	{r3, pc}
  4022d2:	bf00      	nop
  4022d4:	00402051 	.word	0x00402051

004022d8 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  4022d8:	b510      	push	{r4, lr}
  4022da:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  4022dc:	2201      	movs	r2, #1
  4022de:	4b0a      	ldr	r3, [pc, #40]	; (402308 <sd_mmc_mem_2_ram+0x30>)
  4022e0:	4798      	blx	r3
  4022e2:	b120      	cbz	r0, 4022ee <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  4022e4:	2802      	cmp	r0, #2
  4022e6:	bf0c      	ite	eq
  4022e8:	2002      	moveq	r0, #2
  4022ea:	2001      	movne	r0, #1
  4022ec:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  4022ee:	2101      	movs	r1, #1
  4022f0:	4620      	mov	r0, r4
  4022f2:	4b06      	ldr	r3, [pc, #24]	; (40230c <sd_mmc_mem_2_ram+0x34>)
  4022f4:	4798      	blx	r3
  4022f6:	b108      	cbz	r0, 4022fc <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  4022f8:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  4022fa:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  4022fc:	4b04      	ldr	r3, [pc, #16]	; (402310 <sd_mmc_mem_2_ram+0x38>)
  4022fe:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  402300:	3000      	adds	r0, #0
  402302:	bf18      	it	ne
  402304:	2001      	movne	r0, #1
  402306:	bd10      	pop	{r4, pc}
  402308:	00402055 	.word	0x00402055
  40230c:	004020d9 	.word	0x004020d9
  402310:	00402101 	.word	0x00402101

00402314 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  402314:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  402316:	460a      	mov	r2, r1
  402318:	4601      	mov	r1, r0
  40231a:	2000      	movs	r0, #0
  40231c:	4b01      	ldr	r3, [pc, #4]	; (402324 <sd_mmc_mem_2_ram_0+0x10>)
  40231e:	4798      	blx	r3
}
  402320:	bd08      	pop	{r3, pc}
  402322:	bf00      	nop
  402324:	004022d9 	.word	0x004022d9

00402328 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  402328:	b510      	push	{r4, lr}
  40232a:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  40232c:	2201      	movs	r2, #1
  40232e:	4b0a      	ldr	r3, [pc, #40]	; (402358 <sd_mmc_ram_2_mem+0x30>)
  402330:	4798      	blx	r3
  402332:	b120      	cbz	r0, 40233e <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  402334:	2802      	cmp	r0, #2
  402336:	bf0c      	ite	eq
  402338:	2002      	moveq	r0, #2
  40233a:	2001      	movne	r0, #1
  40233c:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  40233e:	2101      	movs	r1, #1
  402340:	4620      	mov	r0, r4
  402342:	4b06      	ldr	r3, [pc, #24]	; (40235c <sd_mmc_ram_2_mem+0x34>)
  402344:	4798      	blx	r3
  402346:	b108      	cbz	r0, 40234c <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  402348:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  40234a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  40234c:	4b04      	ldr	r3, [pc, #16]	; (402360 <sd_mmc_ram_2_mem+0x38>)
  40234e:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  402350:	3000      	adds	r0, #0
  402352:	bf18      	it	ne
  402354:	2001      	movne	r0, #1
  402356:	bd10      	pop	{r4, pc}
  402358:	00402169 	.word	0x00402169
  40235c:	004021d9 	.word	0x004021d9
  402360:	00402201 	.word	0x00402201

00402364 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  402364:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  402366:	460a      	mov	r2, r1
  402368:	4601      	mov	r1, r0
  40236a:	2000      	movs	r0, #0
  40236c:	4b01      	ldr	r3, [pc, #4]	; (402374 <sd_mmc_ram_2_mem_0+0x10>)
  40236e:	4798      	blx	r3
}
  402370:	bd08      	pop	{r3, pc}
  402372:	bf00      	nop
  402374:	00402329 	.word	0x00402329

00402378 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
  402378:	b500      	push	{lr}
  40237a:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
  40237c:	a902      	add	r1, sp, #8
  40237e:	23ff      	movs	r3, #255	; 0xff
  402380:	f801 3d01 	strb.w	r3, [r1, #-1]!
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
  402384:	2201      	movs	r2, #1
  402386:	480a      	ldr	r0, [pc, #40]	; (4023b0 <sd_mmc_spi_start_write_block+0x38>)
  402388:	4b0a      	ldr	r3, [pc, #40]	; (4023b4 <sd_mmc_spi_start_write_block+0x3c>)
  40238a:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
  40238c:	4b0a      	ldr	r3, [pc, #40]	; (4023b8 <sd_mmc_spi_start_write_block+0x40>)
  40238e:	881b      	ldrh	r3, [r3, #0]
  402390:	2b01      	cmp	r3, #1
		token = SPI_TOKEN_SINGLE_WRITE;
  402392:	bf0c      	ite	eq
  402394:	23fe      	moveq	r3, #254	; 0xfe
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
  402396:	23fc      	movne	r3, #252	; 0xfc
  402398:	f88d 3006 	strb.w	r3, [sp, #6]
	}
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &token, 1);
  40239c:	2201      	movs	r2, #1
  40239e:	f10d 0106 	add.w	r1, sp, #6
  4023a2:	4803      	ldr	r0, [pc, #12]	; (4023b0 <sd_mmc_spi_start_write_block+0x38>)
  4023a4:	4b03      	ldr	r3, [pc, #12]	; (4023b4 <sd_mmc_spi_start_write_block+0x3c>)
  4023a6:	4798      	blx	r3
}
  4023a8:	b003      	add	sp, #12
  4023aa:	f85d fb04 	ldr.w	pc, [sp], #4
  4023ae:	bf00      	nop
  4023b0:	40008000 	.word	0x40008000
  4023b4:	00402af5 	.word	0x00402af5
  4023b8:	2000611e 	.word	0x2000611e

004023bc <sd_mmc_spi_wait_busy>:
{
  4023bc:	b570      	push	{r4, r5, r6, lr}
  4023be:	b082      	sub	sp, #8
	uint8_t line = 0xFF;
  4023c0:	ac02      	add	r4, sp, #8
  4023c2:	23ff      	movs	r3, #255	; 0xff
  4023c4:	f804 3d01 	strb.w	r3, [r4, #-1]!
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  4023c8:	4e0f      	ldr	r6, [pc, #60]	; (402408 <sd_mmc_spi_wait_busy+0x4c>)
  4023ca:	2201      	movs	r2, #1
  4023cc:	4621      	mov	r1, r4
  4023ce:	4630      	mov	r0, r6
  4023d0:	4d0e      	ldr	r5, [pc, #56]	; (40240c <sd_mmc_spi_wait_busy+0x50>)
  4023d2:	47a8      	blx	r5
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  4023d4:	2201      	movs	r2, #1
  4023d6:	4621      	mov	r1, r4
  4023d8:	4630      	mov	r0, r6
  4023da:	47a8      	blx	r5
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  4023dc:	2201      	movs	r2, #1
  4023de:	4621      	mov	r1, r4
  4023e0:	4630      	mov	r0, r6
  4023e2:	47a8      	blx	r5
  4023e4:	4c0a      	ldr	r4, [pc, #40]	; (402410 <sd_mmc_spi_wait_busy+0x54>)
	} while (line != 0xFF);
  4023e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4023ea:	2bff      	cmp	r3, #255	; 0xff
  4023ec:	d008      	beq.n	402400 <sd_mmc_spi_wait_busy+0x44>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  4023ee:	2201      	movs	r2, #1
  4023f0:	f10d 0107 	add.w	r1, sp, #7
  4023f4:	4630      	mov	r0, r6
  4023f6:	47a8      	blx	r5
		if (!(nec_timeout--)) {
  4023f8:	3c01      	subs	r4, #1
  4023fa:	d1f4      	bne.n	4023e6 <sd_mmc_spi_wait_busy+0x2a>
			return false;
  4023fc:	2000      	movs	r0, #0
  4023fe:	e000      	b.n	402402 <sd_mmc_spi_wait_busy+0x46>
	return true;
  402400:	2001      	movs	r0, #1
}
  402402:	b002      	add	sp, #8
  402404:	bd70      	pop	{r4, r5, r6, pc}
  402406:	bf00      	nop
  402408:	40008000 	.word	0x40008000
  40240c:	00402b29 	.word	0x00402b29
  402410:	00030d40 	.word	0x00030d40

00402414 <sd_mmc_spi_stop_multiwrite_block>:
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
  402414:	4b16      	ldr	r3, [pc, #88]	; (402470 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
  402416:	881a      	ldrh	r2, [r3, #0]
  402418:	2a01      	cmp	r2, #1
  40241a:	d027      	beq.n	40246c <sd_mmc_spi_stop_multiwrite_block+0x58>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
  40241c:	4b15      	ldr	r3, [pc, #84]	; (402474 <sd_mmc_spi_stop_multiwrite_block+0x60>)
  40241e:	8819      	ldrh	r1, [r3, #0]
  402420:	4b15      	ldr	r3, [pc, #84]	; (402478 <sd_mmc_spi_stop_multiwrite_block+0x64>)
  402422:	681b      	ldr	r3, [r3, #0]
  402424:	fbb3 f3f1 	udiv	r3, r3, r1
	if (sd_mmc_spi_nb_block >
  402428:	429a      	cmp	r2, r3
  40242a:	d902      	bls.n	402432 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // It is not the End of multi write
  40242c:	2301      	movs	r3, #1
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
  40242e:	4618      	mov	r0, r3
  402430:	4770      	bx	lr
{
  402432:	b570      	push	{r4, r5, r6, lr}
  402434:	b082      	sub	sp, #8
	value = 0xFF;
  402436:	ac02      	add	r4, sp, #8
  402438:	23ff      	movs	r3, #255	; 0xff
  40243a:	f804 3d01 	strb.w	r3, [r4, #-1]!
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
  40243e:	4e0f      	ldr	r6, [pc, #60]	; (40247c <sd_mmc_spi_stop_multiwrite_block+0x68>)
  402440:	2201      	movs	r2, #1
  402442:	4621      	mov	r1, r4
  402444:	4630      	mov	r0, r6
  402446:	4d0e      	ldr	r5, [pc, #56]	; (402480 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
  402448:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
  40244a:	23fd      	movs	r3, #253	; 0xfd
  40244c:	f88d 3007 	strb.w	r3, [sp, #7]
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
  402450:	2201      	movs	r2, #1
  402452:	4621      	mov	r1, r4
  402454:	4630      	mov	r0, r6
  402456:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
  402458:	4b0a      	ldr	r3, [pc, #40]	; (402484 <sd_mmc_spi_stop_multiwrite_block+0x70>)
  40245a:	4798      	blx	r3
  40245c:	4603      	mov	r3, r0
  40245e:	b910      	cbnz	r0, 402466 <sd_mmc_spi_stop_multiwrite_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  402460:	2105      	movs	r1, #5
  402462:	4a09      	ldr	r2, [pc, #36]	; (402488 <sd_mmc_spi_stop_multiwrite_block+0x74>)
  402464:	7011      	strb	r1, [r2, #0]
}
  402466:	4618      	mov	r0, r3
  402468:	b002      	add	sp, #8
  40246a:	bd70      	pop	{r4, r5, r6, pc}
		return true; // Single block write
  40246c:	2301      	movs	r3, #1
  40246e:	e7de      	b.n	40242e <sd_mmc_spi_stop_multiwrite_block+0x1a>
  402470:	2000611e 	.word	0x2000611e
  402474:	2000611a 	.word	0x2000611a
  402478:	20006124 	.word	0x20006124
  40247c:	40008000 	.word	0x40008000
  402480:	00402af5 	.word	0x00402af5
  402484:	004023bd 	.word	0x004023bd
  402488:	2000611c 	.word	0x2000611c

0040248c <sd_mmc_spi_start_read_block>:
{
  40248c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40248e:	b083      	sub	sp, #12
	token = 0;
  402490:	ad02      	add	r5, sp, #8
  402492:	2300      	movs	r3, #0
  402494:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402498:	4c10      	ldr	r4, [pc, #64]	; (4024dc <sd_mmc_spi_start_read_block+0x50>)
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &token, 1);
  40249a:	4f11      	ldr	r7, [pc, #68]	; (4024e0 <sd_mmc_spi_start_read_block+0x54>)
  40249c:	4e11      	ldr	r6, [pc, #68]	; (4024e4 <sd_mmc_spi_start_read_block+0x58>)
  40249e:	2201      	movs	r2, #1
  4024a0:	4629      	mov	r1, r5
  4024a2:	4638      	mov	r0, r7
  4024a4:	47b0      	blx	r6
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
  4024a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4024aa:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  4024ae:	d008      	beq.n	4024c2 <sd_mmc_spi_start_read_block+0x36>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
  4024b0:	2bfe      	cmp	r3, #254	; 0xfe
  4024b2:	d010      	beq.n	4024d6 <sd_mmc_spi_start_read_block+0x4a>
		if (i-- == 0) {
  4024b4:	3c01      	subs	r4, #1
  4024b6:	d1f2      	bne.n	40249e <sd_mmc_spi_start_read_block+0x12>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
  4024b8:	2204      	movs	r2, #4
  4024ba:	4b0b      	ldr	r3, [pc, #44]	; (4024e8 <sd_mmc_spi_start_read_block+0x5c>)
  4024bc:	701a      	strb	r2, [r3, #0]
			return false;
  4024be:	2000      	movs	r0, #0
  4024c0:	e007      	b.n	4024d2 <sd_mmc_spi_start_read_block+0x46>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
  4024c2:	f013 0f07 	tst.w	r3, #7
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
  4024c6:	bf14      	ite	ne
  4024c8:	2207      	movne	r2, #7
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
  4024ca:	220b      	moveq	r2, #11
  4024cc:	4b06      	ldr	r3, [pc, #24]	; (4024e8 <sd_mmc_spi_start_read_block+0x5c>)
  4024ce:	701a      	strb	r2, [r3, #0]
			return false;
  4024d0:	2000      	movs	r0, #0
}
  4024d2:	b003      	add	sp, #12
  4024d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
  4024d6:	2001      	movs	r0, #1
  4024d8:	e7fb      	b.n	4024d2 <sd_mmc_spi_start_read_block+0x46>
  4024da:	bf00      	nop
  4024dc:	0007a120 	.word	0x0007a120
  4024e0:	40008000 	.word	0x40008000
  4024e4:	00402b29 	.word	0x00402b29
  4024e8:	2000611c 	.word	0x2000611c

004024ec <sd_mmc_spi_stop_write_block>:
{
  4024ec:	b510      	push	{r4, lr}
  4024ee:	b082      	sub	sp, #8
	crc = 0xFFFF; /// CRC is disabled in SPI mode
  4024f0:	a902      	add	r1, sp, #8
  4024f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4024f6:	f821 3d04 	strh.w	r3, [r1, #-4]!
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, (uint8_t *)&crc, 2);
  4024fa:	4c12      	ldr	r4, [pc, #72]	; (402544 <sd_mmc_spi_stop_write_block+0x58>)
  4024fc:	2202      	movs	r2, #2
  4024fe:	4620      	mov	r0, r4
  402500:	4b11      	ldr	r3, [pc, #68]	; (402548 <sd_mmc_spi_stop_write_block+0x5c>)
  402502:	4798      	blx	r3
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &resp, 1);
  402504:	2201      	movs	r2, #1
  402506:	f10d 0107 	add.w	r1, sp, #7
  40250a:	4620      	mov	r0, r4
  40250c:	4b0f      	ldr	r3, [pc, #60]	; (40254c <sd_mmc_spi_stop_write_block+0x60>)
  40250e:	4798      	blx	r3
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
  402510:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402514:	f003 0211 	and.w	r2, r3, #17
  402518:	2a01      	cmp	r2, #1
  40251a:	d005      	beq.n	402528 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
  40251c:	2201      	movs	r2, #1
  40251e:	4b0c      	ldr	r3, [pc, #48]	; (402550 <sd_mmc_spi_stop_write_block+0x64>)
  402520:	701a      	strb	r2, [r3, #0]
		return false;
  402522:	2000      	movs	r0, #0
}
  402524:	b002      	add	sp, #8
  402526:	bd10      	pop	{r4, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
  402528:	f003 031e 	and.w	r3, r3, #30
  40252c:	2b04      	cmp	r3, #4
  40252e:	d007      	beq.n	402540 <sd_mmc_spi_stop_write_block+0x54>
  402530:	2b0a      	cmp	r3, #10
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
  402532:	bf0c      	ite	eq
  402534:	2208      	moveq	r2, #8
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
  402536:	220a      	movne	r2, #10
  402538:	4b05      	ldr	r3, [pc, #20]	; (402550 <sd_mmc_spi_stop_write_block+0x64>)
  40253a:	701a      	strb	r2, [r3, #0]
		return false;
  40253c:	2000      	movs	r0, #0
  40253e:	e7f1      	b.n	402524 <sd_mmc_spi_stop_write_block+0x38>
	return true;
  402540:	2001      	movs	r0, #1
  402542:	e7ef      	b.n	402524 <sd_mmc_spi_stop_write_block+0x38>
  402544:	40008000 	.word	0x40008000
  402548:	00402af5 	.word	0x00402af5
  40254c:	00402b29 	.word	0x00402b29
  402550:	2000611c 	.word	0x2000611c

00402554 <sd_mmc_spi_init>:
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  402554:	2200      	movs	r2, #0
  402556:	4b08      	ldr	r3, [pc, #32]	; (402578 <sd_mmc_spi_init+0x24>)
  402558:	701a      	strb	r2, [r3, #0]
	if (p_spi->SPI_SR & SPI_SR_SPIENS) {
  40255a:	4b08      	ldr	r3, [pc, #32]	; (40257c <sd_mmc_spi_init+0x28>)
  40255c:	691b      	ldr	r3, [r3, #16]
	// Initialize SPI interface and enable it
#if defined(SD_MMC_SPI_USES_USART_SPI_SERVICE)
		usart_spi_init(SD_MMC_SPI);
#else
	if (!spi_is_enabled(SD_MMC_SPI)) {
  40255e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402562:	d000      	beq.n	402566 <sd_mmc_spi_init+0x12>
  402564:	4770      	bx	lr
{
  402566:	b510      	push	{r4, lr}
		spi_master_init(SD_MMC_SPI);
  402568:	4c04      	ldr	r4, [pc, #16]	; (40257c <sd_mmc_spi_init+0x28>)
  40256a:	4620      	mov	r0, r4
  40256c:	4b04      	ldr	r3, [pc, #16]	; (402580 <sd_mmc_spi_init+0x2c>)
  40256e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  402570:	2301      	movs	r3, #1
  402572:	6023      	str	r3, [r4, #0]
  402574:	bd10      	pop	{r4, pc}
  402576:	bf00      	nop
  402578:	2000611c 	.word	0x2000611c
  40257c:	40008000 	.word	0x40008000
  402580:	004029d1 	.word	0x004029d1

00402584 <sd_mmc_spi_select_device>:
#endif
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
  402584:	b570      	push	{r4, r5, r6, lr}
  402586:	b082      	sub	sp, #8
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  402588:	2200      	movs	r2, #0
  40258a:	4b09      	ldr	r3, [pc, #36]	; (4025b0 <sd_mmc_spi_select_device+0x2c>)
  40258c:	701a      	strb	r2, [r3, #0]
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif

	sd_mmc_spi_drv_setup_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot],
  40258e:	4c09      	ldr	r4, [pc, #36]	; (4025b4 <sd_mmc_spi_select_device+0x30>)
  402590:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  402594:	4d08      	ldr	r5, [pc, #32]	; (4025b8 <sd_mmc_spi_select_device+0x34>)
  402596:	9200      	str	r2, [sp, #0]
  402598:	460b      	mov	r3, r1
  40259a:	4621      	mov	r1, r4
  40259c:	4628      	mov	r0, r5
  40259e:	4e07      	ldr	r6, [pc, #28]	; (4025bc <sd_mmc_spi_select_device+0x38>)
  4025a0:	47b0      	blx	r6
			SPI_MODE_0, clock, 0);
	sd_mmc_spi_drv_select_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  4025a2:	4621      	mov	r1, r4
  4025a4:	4628      	mov	r0, r5
  4025a6:	4b06      	ldr	r3, [pc, #24]	; (4025c0 <sd_mmc_spi_select_device+0x3c>)
  4025a8:	4798      	blx	r3
}
  4025aa:	b002      	add	sp, #8
  4025ac:	bd70      	pop	{r4, r5, r6, pc}
  4025ae:	bf00      	nop
  4025b0:	2000611c 	.word	0x2000611c
  4025b4:	2000047c 	.word	0x2000047c
  4025b8:	40008000 	.word	0x40008000
  4025bc:	00402a25 	.word	0x00402a25
  4025c0:	00402aa5 	.word	0x00402aa5

004025c4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
  4025c4:	b508      	push	{r3, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4025c6:	2200      	movs	r2, #0
  4025c8:	4b04      	ldr	r3, [pc, #16]	; (4025dc <sd_mmc_spi_deselect_device+0x18>)
  4025ca:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_drv_deselect_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  4025cc:	4904      	ldr	r1, [pc, #16]	; (4025e0 <sd_mmc_spi_deselect_device+0x1c>)
  4025ce:	eb01 0180 	add.w	r1, r1, r0, lsl #2
  4025d2:	4804      	ldr	r0, [pc, #16]	; (4025e4 <sd_mmc_spi_deselect_device+0x20>)
  4025d4:	4b04      	ldr	r3, [pc, #16]	; (4025e8 <sd_mmc_spi_deselect_device+0x24>)
  4025d6:	4798      	blx	r3
  4025d8:	bd08      	pop	{r3, pc}
  4025da:	bf00      	nop
  4025dc:	2000611c 	.word	0x2000611c
  4025e0:	2000047c 	.word	0x2000047c
  4025e4:	40008000 	.word	0x40008000
  4025e8:	00402ad5 	.word	0x00402ad5

004025ec <sd_mmc_spi_send_clock>:
}

void sd_mmc_spi_send_clock(void)
{
  4025ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4025ee:	b083      	sub	sp, #12
	uint8_t i;
	uint8_t dummy = 0xFF;
  4025f0:	ad02      	add	r5, sp, #8
  4025f2:	23ff      	movs	r3, #255	; 0xff
  4025f4:	f805 3d01 	strb.w	r3, [r5, #-1]!

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4025f8:	2200      	movs	r2, #0
  4025fa:	4b07      	ldr	r3, [pc, #28]	; (402618 <sd_mmc_spi_send_clock+0x2c>)
  4025fc:	701a      	strb	r2, [r3, #0]
  4025fe:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
  402600:	4f06      	ldr	r7, [pc, #24]	; (40261c <sd_mmc_spi_send_clock+0x30>)
  402602:	4e07      	ldr	r6, [pc, #28]	; (402620 <sd_mmc_spi_send_clock+0x34>)
  402604:	2201      	movs	r2, #1
  402606:	4629      	mov	r1, r5
  402608:	4638      	mov	r0, r7
  40260a:	47b0      	blx	r6
  40260c:	1e63      	subs	r3, r4, #1
	for (i = 0; i < 10; i++) {
  40260e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  402612:	d1f7      	bne.n	402604 <sd_mmc_spi_send_clock+0x18>
	}
}
  402614:	b003      	add	sp, #12
  402616:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402618:	2000611c 	.word	0x2000611c
  40261c:	40008000 	.word	0x40008000
  402620:	00402af5 	.word	0x00402af5

00402624 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
  402624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402628:	b085      	sub	sp, #20
  40262a:	4604      	mov	r4, r0
  40262c:	4691      	mov	r9, r2
  40262e:	4698      	mov	r8, r3
	uint8_t dummy = 0xFF;
  402630:	23ff      	movs	r3, #255	; 0xff
  402632:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  402636:	2300      	movs	r3, #0
  402638:	4a53      	ldr	r2, [pc, #332]	; (402788 <sd_mmc_spi_adtc_start+0x164>)
  40263a:	7013      	strb	r3, [r2, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
  40263c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  402640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402644:	f88d 2008 	strb.w	r2, [sp, #8]
	cmd_token[1] = arg >> 24;
  402648:	0e0a      	lsrs	r2, r1, #24
  40264a:	f88d 2009 	strb.w	r2, [sp, #9]
	cmd_token[2] = arg >> 16;
  40264e:	0c0a      	lsrs	r2, r1, #16
  402650:	f88d 200a 	strb.w	r2, [sp, #10]
	cmd_token[3] = arg >> 8;
  402654:	0a0a      	lsrs	r2, r1, #8
  402656:	f88d 200b 	strb.w	r2, [sp, #11]
	cmd_token[4] = arg;
  40265a:	f88d 100c 	strb.w	r1, [sp, #12]
  40265e:	af02      	add	r7, sp, #8
		value = *buf++;
  402660:	f04f 0c08 	mov.w	ip, #8
	while (size--) {
  402664:	f10d 0e0d 	add.w	lr, sp, #13
  402668:	e001      	b.n	40266e <sd_mmc_spi_adtc_start+0x4a>
  40266a:	4577      	cmp	r7, lr
  40266c:	d012      	beq.n	402694 <sd_mmc_spi_adtc_start+0x70>
		value = *buf++;
  40266e:	f817 1b01 	ldrb.w	r1, [r7], #1
  402672:	4662      	mov	r2, ip
			crc <<= 1;
  402674:	005b      	lsls	r3, r3, #1
  402676:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
  402678:	ea83 0001 	eor.w	r0, r3, r1
  40267c:	f010 0f80 	tst.w	r0, #128	; 0x80
				crc ^= 0x09;
  402680:	bf18      	it	ne
  402682:	f083 0309 	eorne.w	r3, r3, #9
			value <<= 1;
  402686:	0049      	lsls	r1, r1, #1
  402688:	b2c9      	uxtb	r1, r1
  40268a:	3a01      	subs	r2, #1
		for (i = 0; i < 8; i++) {
  40268c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  402690:	d1f0      	bne.n	402674 <sd_mmc_spi_adtc_start+0x50>
  402692:	e7ea      	b.n	40266a <sd_mmc_spi_adtc_start+0x46>
	crc = (crc << 1) | 1;
  402694:	005b      	lsls	r3, r3, #1
  402696:	f043 0301 	orr.w	r3, r3, #1
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
  40269a:	f88d 300d 	strb.w	r3, [sp, #13]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
  40269e:	4f3b      	ldr	r7, [pc, #236]	; (40278c <sd_mmc_spi_adtc_start+0x168>)
  4026a0:	2201      	movs	r2, #1
  4026a2:	f10d 010f 	add.w	r1, sp, #15
  4026a6:	4638      	mov	r0, r7
  4026a8:	4d39      	ldr	r5, [pc, #228]	; (402790 <sd_mmc_spi_adtc_start+0x16c>)
  4026aa:	47a8      	blx	r5
	// Send command
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, cmd_token, sizeof(cmd_token));
  4026ac:	2206      	movs	r2, #6
  4026ae:	a902      	add	r1, sp, #8
  4026b0:	4638      	mov	r0, r7
  4026b2:	47a8      	blx	r5

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
  4026b4:	a904      	add	r1, sp, #16
  4026b6:	23ff      	movs	r3, #255	; 0xff
  4026b8:	f801 3d09 	strb.w	r3, [r1, #-9]!
	// Ignore first byte because Ncr min. = 8 clock cylces
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1);
  4026bc:	2201      	movs	r2, #1
  4026be:	4638      	mov	r0, r7
  4026c0:	4b34      	ldr	r3, [pc, #208]	; (402794 <sd_mmc_spi_adtc_start+0x170>)
  4026c2:	4798      	blx	r3
  4026c4:	2707      	movs	r7, #7
	ncr_timeout = 7;
	while (1) {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1); // 8 cycles
  4026c6:	4e31      	ldr	r6, [pc, #196]	; (40278c <sd_mmc_spi_adtc_start+0x168>)
  4026c8:	4d32      	ldr	r5, [pc, #200]	; (402794 <sd_mmc_spi_adtc_start+0x170>)
  4026ca:	2201      	movs	r2, #1
  4026cc:	f10d 0107 	add.w	r1, sp, #7
  4026d0:	4630      	mov	r0, r6
  4026d2:	47a8      	blx	r5
		if ((r1 & R1_SPI_ERROR) == 0) {
  4026d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4026d8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4026dc:	d00b      	beq.n	4026f6 <sd_mmc_spi_adtc_start+0xd2>
  4026de:	1e7b      	subs	r3, r7, #1
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
  4026e0:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  4026e4:	d1f1      	bne.n	4026ca <sd_mmc_spi_adtc_start+0xa6>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
  4026e6:	2202      	movs	r2, #2
  4026e8:	4b27      	ldr	r3, [pc, #156]	; (402788 <sd_mmc_spi_adtc_start+0x164>)
  4026ea:	701a      	strb	r2, [r3, #0]
			return false;
  4026ec:	2300      	movs	r3, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
  4026ee:	4618      	mov	r0, r3
  4026f0:	b005      	add	sp, #20
  4026f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_spi_response_32 = r1;
  4026f6:	4a28      	ldr	r2, [pc, #160]	; (402798 <sd_mmc_spi_adtc_start+0x174>)
  4026f8:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
  4026fa:	f013 0f08 	tst.w	r3, #8
  4026fe:	d119      	bne.n	402734 <sd_mmc_spi_adtc_start+0x110>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
  402700:	f013 0f04 	tst.w	r3, #4
  402704:	d11b      	bne.n	40273e <sd_mmc_spi_adtc_start+0x11a>
	if (r1 & ~R1_SPI_IDLE) {
  402706:	f033 0301 	bics.w	r3, r3, #1
  40270a:	d11d      	bne.n	402748 <sd_mmc_spi_adtc_start+0x124>
	if (cmd & SDMMC_RESP_BUSY) {
  40270c:	f414 5f00 	tst.w	r4, #8192	; 0x2000
  402710:	d11f      	bne.n	402752 <sd_mmc_spi_adtc_start+0x12e>
	if (cmd & SDMMC_RESP_8) {
  402712:	f414 7f00 	tst.w	r4, #512	; 0x200
  402716:	d125      	bne.n	402764 <sd_mmc_spi_adtc_start+0x140>
	if (cmd & SDMMC_RESP_32) {
  402718:	f414 6f80 	tst.w	r4, #1024	; 0x400
  40271c:	d12a      	bne.n	402774 <sd_mmc_spi_adtc_start+0x150>
	sd_mmc_spi_block_size = block_size;
  40271e:	4b1f      	ldr	r3, [pc, #124]	; (40279c <sd_mmc_spi_adtc_start+0x178>)
  402720:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_spi_nb_block = nb_block;
  402724:	4b1e      	ldr	r3, [pc, #120]	; (4027a0 <sd_mmc_spi_adtc_start+0x17c>)
  402726:	f8a3 8000 	strh.w	r8, [r3]
	sd_mmc_spi_transfert_pos = 0;
  40272a:	2200      	movs	r2, #0
  40272c:	4b1d      	ldr	r3, [pc, #116]	; (4027a4 <sd_mmc_spi_adtc_start+0x180>)
  40272e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
  402730:	2301      	movs	r3, #1
  402732:	e7dc      	b.n	4026ee <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
  402734:	2206      	movs	r2, #6
  402736:	4b14      	ldr	r3, [pc, #80]	; (402788 <sd_mmc_spi_adtc_start+0x164>)
  402738:	701a      	strb	r2, [r3, #0]
		return false;
  40273a:	2300      	movs	r3, #0
  40273c:	e7d7      	b.n	4026ee <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
  40273e:	2209      	movs	r2, #9
  402740:	4b11      	ldr	r3, [pc, #68]	; (402788 <sd_mmc_spi_adtc_start+0x164>)
  402742:	701a      	strb	r2, [r3, #0]
		return false;
  402744:	2300      	movs	r3, #0
  402746:	e7d2      	b.n	4026ee <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
  402748:	2201      	movs	r2, #1
  40274a:	4b0f      	ldr	r3, [pc, #60]	; (402788 <sd_mmc_spi_adtc_start+0x164>)
  40274c:	701a      	strb	r2, [r3, #0]
		return false;
  40274e:	2300      	movs	r3, #0
  402750:	e7cd      	b.n	4026ee <sd_mmc_spi_adtc_start+0xca>
		if (!sd_mmc_spi_wait_busy()) {
  402752:	4b15      	ldr	r3, [pc, #84]	; (4027a8 <sd_mmc_spi_adtc_start+0x184>)
  402754:	4798      	blx	r3
  402756:	4603      	mov	r3, r0
  402758:	2800      	cmp	r0, #0
  40275a:	d1da      	bne.n	402712 <sd_mmc_spi_adtc_start+0xee>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
  40275c:	2103      	movs	r1, #3
  40275e:	4a0a      	ldr	r2, [pc, #40]	; (402788 <sd_mmc_spi_adtc_start+0x164>)
  402760:	7011      	strb	r1, [r2, #0]
			return false;
  402762:	e7c4      	b.n	4026ee <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_response_32 = 0;
  402764:	490c      	ldr	r1, [pc, #48]	; (402798 <sd_mmc_spi_adtc_start+0x174>)
  402766:	2300      	movs	r3, #0
  402768:	600b      	str	r3, [r1, #0]
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 1);
  40276a:	2201      	movs	r2, #1
  40276c:	4807      	ldr	r0, [pc, #28]	; (40278c <sd_mmc_spi_adtc_start+0x168>)
  40276e:	4b09      	ldr	r3, [pc, #36]	; (402794 <sd_mmc_spi_adtc_start+0x170>)
  402770:	4798      	blx	r3
  402772:	e7d1      	b.n	402718 <sd_mmc_spi_adtc_start+0xf4>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 4);
  402774:	4c08      	ldr	r4, [pc, #32]	; (402798 <sd_mmc_spi_adtc_start+0x174>)
  402776:	2204      	movs	r2, #4
  402778:	4621      	mov	r1, r4
  40277a:	4804      	ldr	r0, [pc, #16]	; (40278c <sd_mmc_spi_adtc_start+0x168>)
  40277c:	4b05      	ldr	r3, [pc, #20]	; (402794 <sd_mmc_spi_adtc_start+0x170>)
  40277e:	4798      	blx	r3
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
  402780:	6823      	ldr	r3, [r4, #0]
  402782:	ba1b      	rev	r3, r3
  402784:	6023      	str	r3, [r4, #0]
  402786:	e7ca      	b.n	40271e <sd_mmc_spi_adtc_start+0xfa>
  402788:	2000611c 	.word	0x2000611c
  40278c:	40008000 	.word	0x40008000
  402790:	00402af5 	.word	0x00402af5
  402794:	00402b29 	.word	0x00402b29
  402798:	20006120 	.word	0x20006120
  40279c:	2000611a 	.word	0x2000611a
  4027a0:	2000611e 	.word	0x2000611e
  4027a4:	20006124 	.word	0x20006124
  4027a8:	004023bd 	.word	0x004023bd

004027ac <sd_mmc_spi_send_cmd>:
{
  4027ac:	b510      	push	{r4, lr}
  4027ae:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
  4027b0:	2200      	movs	r2, #0
  4027b2:	9200      	str	r2, [sp, #0]
  4027b4:	4613      	mov	r3, r2
  4027b6:	4c02      	ldr	r4, [pc, #8]	; (4027c0 <sd_mmc_spi_send_cmd+0x14>)
  4027b8:	47a0      	blx	r4
}
  4027ba:	b002      	add	sp, #8
  4027bc:	bd10      	pop	{r4, pc}
  4027be:	bf00      	nop
  4027c0:	00402625 	.word	0x00402625

004027c4 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
}
  4027c4:	4b01      	ldr	r3, [pc, #4]	; (4027cc <sd_mmc_spi_get_response+0x8>)
  4027c6:	6818      	ldr	r0, [r3, #0]
  4027c8:	4770      	bx	lr
  4027ca:	bf00      	nop
  4027cc:	20006120 	.word	0x20006120

004027d0 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
  4027d0:	b510      	push	{r4, lr}
  4027d2:	b082      	sub	sp, #8
  4027d4:	4604      	mov	r4, r0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4027d6:	2200      	movs	r2, #0
  4027d8:	4b14      	ldr	r3, [pc, #80]	; (40282c <sd_mmc_spi_read_word+0x5c>)
  4027da:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  4027dc:	4b14      	ldr	r3, [pc, #80]	; (402830 <sd_mmc_spi_read_word+0x60>)
  4027de:	881a      	ldrh	r2, [r3, #0]
  4027e0:	4b14      	ldr	r3, [pc, #80]	; (402834 <sd_mmc_spi_read_word+0x64>)
  4027e2:	6819      	ldr	r1, [r3, #0]
  4027e4:	fbb1 f3f2 	udiv	r3, r1, r2
  4027e8:	fb02 1313 	mls	r3, r2, r3, r1
  4027ec:	b91b      	cbnz	r3, 4027f6 <sd_mmc_spi_read_word+0x26>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
  4027ee:	4b12      	ldr	r3, [pc, #72]	; (402838 <sd_mmc_spi_read_word+0x68>)
  4027f0:	4798      	blx	r3
  4027f2:	4603      	mov	r3, r0
  4027f4:	b180      	cbz	r0, 402818 <sd_mmc_spi_read_word+0x48>
			return false;
		}
	}
	// Read data
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*)value, 4);
  4027f6:	2204      	movs	r2, #4
  4027f8:	4621      	mov	r1, r4
  4027fa:	4810      	ldr	r0, [pc, #64]	; (40283c <sd_mmc_spi_read_word+0x6c>)
  4027fc:	4b10      	ldr	r3, [pc, #64]	; (402840 <sd_mmc_spi_read_word+0x70>)
  4027fe:	4798      	blx	r3
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
  402800:	4a0c      	ldr	r2, [pc, #48]	; (402834 <sd_mmc_spi_read_word+0x64>)
  402802:	6813      	ldr	r3, [r2, #0]
  402804:	3304      	adds	r3, #4
  402806:	6013      	str	r3, [r2, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  402808:	4a09      	ldr	r2, [pc, #36]	; (402830 <sd_mmc_spi_read_word+0x60>)
  40280a:	8811      	ldrh	r1, [r2, #0]
  40280c:	fbb3 f2f1 	udiv	r2, r3, r1
  402810:	fb01 3312 	mls	r3, r1, r2, r3
  402814:	b11b      	cbz	r3, 40281e <sd_mmc_spi_read_word+0x4e>
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
  402816:	2301      	movs	r3, #1
}
  402818:	4618      	mov	r0, r3
  40281a:	b002      	add	sp, #8
  40281c:	bd10      	pop	{r4, pc}
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  40281e:	2202      	movs	r2, #2
  402820:	a901      	add	r1, sp, #4
  402822:	4806      	ldr	r0, [pc, #24]	; (40283c <sd_mmc_spi_read_word+0x6c>)
  402824:	4b06      	ldr	r3, [pc, #24]	; (402840 <sd_mmc_spi_read_word+0x70>)
  402826:	4798      	blx	r3
	return true;
  402828:	2301      	movs	r3, #1
  40282a:	e7f5      	b.n	402818 <sd_mmc_spi_read_word+0x48>
  40282c:	2000611c 	.word	0x2000611c
  402830:	2000611a 	.word	0x2000611a
  402834:	20006124 	.word	0x20006124
  402838:	0040248d 	.word	0x0040248d
  40283c:	40008000 	.word	0x40008000
  402840:	00402b29 	.word	0x00402b29

00402844 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
  402844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402848:	b083      	sub	sp, #12
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  40284a:	2200      	movs	r2, #0
  40284c:	4b16      	ldr	r3, [pc, #88]	; (4028a8 <sd_mmc_spi_start_read_blocks+0x64>)
  40284e:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
  402850:	b339      	cbz	r1, 4028a2 <sd_mmc_spi_start_read_blocks+0x5e>
  402852:	1e4c      	subs	r4, r1, #1
  402854:	b2a4      	uxth	r4, r4
  402856:	4681      	mov	r9, r0
  402858:	4615      	mov	r5, r2
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
  40285a:	f8df b05c 	ldr.w	fp, [pc, #92]	; 4028b8 <sd_mmc_spi_start_read_blocks+0x74>
			return false;
		}

		// Read block
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  40285e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4028bc <sd_mmc_spi_start_read_blocks+0x78>
  402862:	4f12      	ldr	r7, [pc, #72]	; (4028ac <sd_mmc_spi_start_read_blocks+0x68>)
		if (!sd_mmc_spi_start_read_block()) {
  402864:	47d8      	blx	fp
  402866:	4682      	mov	sl, r0
  402868:	b1b8      	cbz	r0, 40289a <sd_mmc_spi_start_read_blocks+0x56>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  40286a:	f8b8 2000 	ldrh.w	r2, [r8]
  40286e:	eb09 0105 	add.w	r1, r9, r5
  402872:	4638      	mov	r0, r7
  402874:	4e0e      	ldr	r6, [pc, #56]	; (4028b0 <sd_mmc_spi_start_read_blocks+0x6c>)
  402876:	47b0      	blx	r6
		pos += sd_mmc_spi_block_size;
  402878:	f8b8 1000 	ldrh.w	r1, [r8]
  40287c:	440d      	add	r5, r1
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
  40287e:	4a0d      	ldr	r2, [pc, #52]	; (4028b4 <sd_mmc_spi_start_read_blocks+0x70>)
  402880:	6813      	ldr	r3, [r2, #0]
  402882:	440b      	add	r3, r1
  402884:	6013      	str	r3, [r2, #0]
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  402886:	2202      	movs	r2, #2
  402888:	a901      	add	r1, sp, #4
  40288a:	4638      	mov	r0, r7
  40288c:	47b0      	blx	r6
	while (nb_block--) {
  40288e:	3c01      	subs	r4, #1
  402890:	b2a4      	uxth	r4, r4
  402892:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402896:	429c      	cmp	r4, r3
  402898:	d1e4      	bne.n	402864 <sd_mmc_spi_start_read_blocks+0x20>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
  40289a:	4650      	mov	r0, sl
  40289c:	b003      	add	sp, #12
  40289e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
  4028a2:	f04f 0a01 	mov.w	sl, #1
  4028a6:	e7f8      	b.n	40289a <sd_mmc_spi_start_read_blocks+0x56>
  4028a8:	2000611c 	.word	0x2000611c
  4028ac:	40008000 	.word	0x40008000
  4028b0:	00402b29 	.word	0x00402b29
  4028b4:	20006124 	.word	0x20006124
  4028b8:	0040248d 	.word	0x0040248d
  4028bc:	2000611a 	.word	0x2000611a

004028c0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
  4028c0:	2001      	movs	r0, #1
  4028c2:	4770      	bx	lr

004028c4 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
  4028c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4028c8:	4681      	mov	r9, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4028ca:	2500      	movs	r5, #0
  4028cc:	4b15      	ldr	r3, [pc, #84]	; (402924 <sd_mmc_spi_start_write_blocks+0x60>)
  4028ce:	701d      	strb	r5, [r3, #0]
	pos = 0;
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
  4028d0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 402940 <sd_mmc_spi_start_write_blocks+0x7c>

		// Write block
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &((uint8_t*)src)[pos], sd_mmc_spi_block_size);
  4028d4:	4e14      	ldr	r6, [pc, #80]	; (402928 <sd_mmc_spi_start_write_blocks+0x64>)
  4028d6:	4f15      	ldr	r7, [pc, #84]	; (40292c <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
  4028d8:	e000      	b.n	4028dc <sd_mmc_spi_start_write_blocks+0x18>
{
  4028da:	4621      	mov	r1, r4
	while (nb_block--) {
  4028dc:	1e4c      	subs	r4, r1, #1
  4028de:	b2a4      	uxth	r4, r4
  4028e0:	b1d9      	cbz	r1, 40291a <sd_mmc_spi_start_write_blocks+0x56>
		sd_mmc_spi_start_write_block();
  4028e2:	47c0      	blx	r8
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &((uint8_t*)src)[pos], sd_mmc_spi_block_size);
  4028e4:	8832      	ldrh	r2, [r6, #0]
  4028e6:	eb09 0105 	add.w	r1, r9, r5
  4028ea:	4638      	mov	r0, r7
  4028ec:	4b10      	ldr	r3, [pc, #64]	; (402930 <sd_mmc_spi_start_write_blocks+0x6c>)
  4028ee:	4798      	blx	r3
		pos += sd_mmc_spi_block_size;
  4028f0:	8831      	ldrh	r1, [r6, #0]
  4028f2:	440d      	add	r5, r1
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
  4028f4:	4a0f      	ldr	r2, [pc, #60]	; (402934 <sd_mmc_spi_start_write_blocks+0x70>)
  4028f6:	6813      	ldr	r3, [r2, #0]
  4028f8:	440b      	add	r3, r1
  4028fa:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
  4028fc:	4b0e      	ldr	r3, [pc, #56]	; (402938 <sd_mmc_spi_start_write_blocks+0x74>)
  4028fe:	4798      	blx	r3
  402900:	4603      	mov	r3, r0
  402902:	b158      	cbz	r0, 40291c <sd_mmc_spi_start_write_blocks+0x58>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
  402904:	2c00      	cmp	r4, #0
  402906:	d0e8      	beq.n	4028da <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
  402908:	4b0c      	ldr	r3, [pc, #48]	; (40293c <sd_mmc_spi_start_write_blocks+0x78>)
  40290a:	4798      	blx	r3
  40290c:	4603      	mov	r3, r0
  40290e:	2800      	cmp	r0, #0
  402910:	d1e3      	bne.n	4028da <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  402912:	2105      	movs	r1, #5
  402914:	4a03      	ldr	r2, [pc, #12]	; (402924 <sd_mmc_spi_start_write_blocks+0x60>)
  402916:	7011      	strb	r1, [r2, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
  402918:	e000      	b.n	40291c <sd_mmc_spi_start_write_blocks+0x58>
			}
		}
	}
	return true;
  40291a:	2301      	movs	r3, #1
}
  40291c:	4618      	mov	r0, r3
  40291e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402922:	bf00      	nop
  402924:	2000611c 	.word	0x2000611c
  402928:	2000611a 	.word	0x2000611a
  40292c:	40008000 	.word	0x40008000
  402930:	00402af5 	.word	0x00402af5
  402934:	20006124 	.word	0x20006124
  402938:	004024ed 	.word	0x004024ed
  40293c:	004023bd 	.word	0x004023bd
  402940:	00402379 	.word	0x00402379

00402944 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
  402944:	b508      	push	{r3, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
  402946:	4b06      	ldr	r3, [pc, #24]	; (402960 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
  402948:	4798      	blx	r3
  40294a:	b928      	cbnz	r0, 402958 <sd_mmc_spi_wait_end_of_write_blocks+0x14>
  40294c:	4603      	mov	r3, r0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  40294e:	2105      	movs	r1, #5
  402950:	4a04      	ldr	r2, [pc, #16]	; (402964 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
  402952:	7011      	strb	r1, [r2, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
  402954:	4618      	mov	r0, r3
  402956:	bd08      	pop	{r3, pc}
	return sd_mmc_spi_stop_multiwrite_block();
  402958:	4b03      	ldr	r3, [pc, #12]	; (402968 <sd_mmc_spi_wait_end_of_write_blocks+0x24>)
  40295a:	4798      	blx	r3
  40295c:	4603      	mov	r3, r0
  40295e:	e7f9      	b.n	402954 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
  402960:	004023bd 	.word	0x004023bd
  402964:	2000611c 	.word	0x2000611c
  402968:	00402415 	.word	0x00402415

0040296c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40296c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40296e:	480e      	ldr	r0, [pc, #56]	; (4029a8 <sysclk_init+0x3c>)
  402970:	4b0e      	ldr	r3, [pc, #56]	; (4029ac <sysclk_init+0x40>)
  402972:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402974:	213e      	movs	r1, #62	; 0x3e
  402976:	2000      	movs	r0, #0
  402978:	4b0d      	ldr	r3, [pc, #52]	; (4029b0 <sysclk_init+0x44>)
  40297a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40297c:	4c0d      	ldr	r4, [pc, #52]	; (4029b4 <sysclk_init+0x48>)
  40297e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402980:	2800      	cmp	r0, #0
  402982:	d0fc      	beq.n	40297e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402984:	4b0c      	ldr	r3, [pc, #48]	; (4029b8 <sysclk_init+0x4c>)
  402986:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402988:	4a0c      	ldr	r2, [pc, #48]	; (4029bc <sysclk_init+0x50>)
  40298a:	4b0d      	ldr	r3, [pc, #52]	; (4029c0 <sysclk_init+0x54>)
  40298c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40298e:	4c0d      	ldr	r4, [pc, #52]	; (4029c4 <sysclk_init+0x58>)
  402990:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402992:	2800      	cmp	r0, #0
  402994:	d0fc      	beq.n	402990 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402996:	2010      	movs	r0, #16
  402998:	4b0b      	ldr	r3, [pc, #44]	; (4029c8 <sysclk_init+0x5c>)
  40299a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40299c:	4b0b      	ldr	r3, [pc, #44]	; (4029cc <sysclk_init+0x60>)
  40299e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4029a0:	4801      	ldr	r0, [pc, #4]	; (4029a8 <sysclk_init+0x3c>)
  4029a2:	4b02      	ldr	r3, [pc, #8]	; (4029ac <sysclk_init+0x40>)
  4029a4:	4798      	blx	r3
  4029a6:	bd10      	pop	{r4, pc}
  4029a8:	07270e00 	.word	0x07270e00
  4029ac:	00403b91 	.word	0x00403b91
  4029b0:	0040323d 	.word	0x0040323d
  4029b4:	00403291 	.word	0x00403291
  4029b8:	004032a1 	.word	0x004032a1
  4029bc:	20133f01 	.word	0x20133f01
  4029c0:	400e0400 	.word	0x400e0400
  4029c4:	004032b1 	.word	0x004032b1
  4029c8:	00403195 	.word	0x00403195
  4029cc:	00403a81 	.word	0x00403a81

004029d0 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4029d0:	b510      	push	{r4, lr}
  4029d2:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4029d4:	4b10      	ldr	r3, [pc, #64]	; (402a18 <spi_master_init+0x48>)
  4029d6:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  4029d8:	2380      	movs	r3, #128	; 0x80
  4029da:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4029dc:	6863      	ldr	r3, [r4, #4]
  4029de:	f043 0301 	orr.w	r3, r3, #1
  4029e2:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4029e4:	6863      	ldr	r3, [r4, #4]
  4029e6:	f043 0310 	orr.w	r3, r3, #16
  4029ea:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4029ec:	6863      	ldr	r3, [r4, #4]
  4029ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4029f2:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4029f4:	2100      	movs	r1, #0
  4029f6:	4620      	mov	r0, r4
  4029f8:	4b08      	ldr	r3, [pc, #32]	; (402a1c <spi_master_init+0x4c>)
  4029fa:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4029fc:	6863      	ldr	r3, [r4, #4]
  4029fe:	f023 0302 	bic.w	r3, r3, #2
  402a02:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  402a04:	6863      	ldr	r3, [r4, #4]
  402a06:	f023 0304 	bic.w	r3, r3, #4
  402a0a:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  402a0c:	2100      	movs	r1, #0
  402a0e:	4620      	mov	r0, r4
  402a10:	4b03      	ldr	r3, [pc, #12]	; (402a20 <spi_master_init+0x50>)
  402a12:	4798      	blx	r3
  402a14:	bd10      	pop	{r4, pc}
  402a16:	bf00      	nop
  402a18:	00403545 	.word	0x00403545
  402a1c:	00403555 	.word	0x00403555
  402a20:	0040356b 	.word	0x0040356b

00402a24 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  402a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a28:	4604      	mov	r4, r0
  402a2a:	460d      	mov	r5, r1
  402a2c:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  402a2e:	4915      	ldr	r1, [pc, #84]	; (402a84 <spi_master_setup_device+0x60>)
  402a30:	4618      	mov	r0, r3
  402a32:	4b15      	ldr	r3, [pc, #84]	; (402a88 <spi_master_setup_device+0x64>)
  402a34:	4798      	blx	r3
  402a36:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  402a38:	2300      	movs	r3, #0
  402a3a:	461a      	mov	r2, r3
  402a3c:	6829      	ldr	r1, [r5, #0]
  402a3e:	4620      	mov	r0, r4
  402a40:	f8df 805c 	ldr.w	r8, [pc, #92]	; 402aa0 <spi_master_setup_device+0x7c>
  402a44:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  402a46:	2208      	movs	r2, #8
  402a48:	6829      	ldr	r1, [r5, #0]
  402a4a:	4620      	mov	r0, r4
  402a4c:	4b0f      	ldr	r3, [pc, #60]	; (402a8c <spi_master_setup_device+0x68>)
  402a4e:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  402a50:	b2fa      	uxtb	r2, r7
  402a52:	6829      	ldr	r1, [r5, #0]
  402a54:	4620      	mov	r0, r4
  402a56:	4b0e      	ldr	r3, [pc, #56]	; (402a90 <spi_master_setup_device+0x6c>)
  402a58:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  402a5a:	2208      	movs	r2, #8
  402a5c:	6829      	ldr	r1, [r5, #0]
  402a5e:	4620      	mov	r0, r4
  402a60:	4b0c      	ldr	r3, [pc, #48]	; (402a94 <spi_master_setup_device+0x70>)
  402a62:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  402a64:	0872      	lsrs	r2, r6, #1
  402a66:	6829      	ldr	r1, [r5, #0]
  402a68:	4620      	mov	r0, r4
  402a6a:	4b0b      	ldr	r3, [pc, #44]	; (402a98 <spi_master_setup_device+0x74>)
  402a6c:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  402a6e:	f086 0201 	eor.w	r2, r6, #1
  402a72:	f002 0201 	and.w	r2, r2, #1
  402a76:	6829      	ldr	r1, [r5, #0]
  402a78:	4620      	mov	r0, r4
  402a7a:	4b08      	ldr	r3, [pc, #32]	; (402a9c <spi_master_setup_device+0x78>)
  402a7c:	4798      	blx	r3
  402a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402a82:	bf00      	nop
  402a84:	07270e00 	.word	0x07270e00
  402a88:	00403613 	.word	0x00403613
  402a8c:	004035ff 	.word	0x004035ff
  402a90:	00403629 	.word	0x00403629
  402a94:	004035b9 	.word	0x004035b9
  402a98:	0040357d 	.word	0x0040357d
  402a9c:	0040359b 	.word	0x0040359b
  402aa0:	0040364f 	.word	0x0040364f

00402aa4 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  402aa4:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  402aa6:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  402aa8:	f013 0f04 	tst.w	r3, #4
  402aac:	d006      	beq.n	402abc <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  402aae:	6809      	ldr	r1, [r1, #0]
  402ab0:	290f      	cmp	r1, #15
  402ab2:	d900      	bls.n	402ab6 <spi_select_device+0x12>
  402ab4:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  402ab6:	4b06      	ldr	r3, [pc, #24]	; (402ad0 <spi_select_device+0x2c>)
  402ab8:	4798      	blx	r3
  402aba:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  402abc:	6809      	ldr	r1, [r1, #0]
  402abe:	2903      	cmp	r1, #3
  402ac0:	d8f8      	bhi.n	402ab4 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  402ac2:	2301      	movs	r3, #1
  402ac4:	fa03 f101 	lsl.w	r1, r3, r1
  402ac8:	43c9      	mvns	r1, r1
  402aca:	4b01      	ldr	r3, [pc, #4]	; (402ad0 <spi_select_device+0x2c>)
  402acc:	4798      	blx	r3
		}
	}
}
  402ace:	e7f1      	b.n	402ab4 <spi_select_device+0x10>
  402ad0:	00403555 	.word	0x00403555

00402ad4 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  402ad4:	b510      	push	{r4, lr}
  402ad6:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  402ad8:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  402ada:	f413 7f00 	tst.w	r3, #512	; 0x200
  402ade:	d0fb      	beq.n	402ad8 <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  402ae0:	210f      	movs	r1, #15
  402ae2:	4620      	mov	r0, r4
  402ae4:	4b02      	ldr	r3, [pc, #8]	; (402af0 <spi_deselect_device+0x1c>)
  402ae6:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  402ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  402aec:	6023      	str	r3, [r4, #0]
  402aee:	bd10      	pop	{r4, pc}
  402af0:	00403555 	.word	0x00403555

00402af4 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  402af4:	b11a      	cbz	r2, 402afe <spi_write_packet+0xa>
{
  402af6:	b410      	push	{r4}
  402af8:	460c      	mov	r4, r1
  402afa:	4411      	add	r1, r2
  402afc:	e006      	b.n	402b0c <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  402afe:	2000      	movs	r0, #0
  402b00:	4770      	bx	lr
		val = data[i];
  402b02:	f814 3b01 	ldrb.w	r3, [r4], #1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  402b06:	60c3      	str	r3, [r0, #12]
	while (len) {
  402b08:	42a1      	cmp	r1, r4
  402b0a:	d00b      	beq.n	402b24 <spi_write_packet+0x30>
{
  402b0c:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  402b10:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  402b12:	f012 0f02 	tst.w	r2, #2
  402b16:	d1f4      	bne.n	402b02 <spi_write_packet+0xe>
			if (!timeout--) {
  402b18:	3b01      	subs	r3, #1
  402b1a:	d1f9      	bne.n	402b10 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  402b1c:	f06f 0002 	mvn.w	r0, #2
}
  402b20:	bc10      	pop	{r4}
  402b22:	4770      	bx	lr
	return STATUS_OK;
  402b24:	2000      	movs	r0, #0
  402b26:	e7fb      	b.n	402b20 <spi_write_packet+0x2c>

00402b28 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  402b28:	b13a      	cbz	r2, 402b3a <spi_read_packet+0x12>
{
  402b2a:	b470      	push	{r4, r5, r6}
  402b2c:	4615      	mov	r5, r2
  402b2e:	460c      	mov	r4, r1
  402b30:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  402b32:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  402b34:	f240 2101 	movw	r1, #513	; 0x201
  402b38:	e012      	b.n	402b60 <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  402b3a:	2000      	movs	r0, #0
  402b3c:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  402b3e:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  402b40:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  402b44:	6902      	ldr	r2, [r0, #16]
  402b46:	ea31 0202 	bics.w	r2, r1, r2
  402b4a:	d004      	beq.n	402b56 <spi_read_packet+0x2e>
			if (!timeout--) {
  402b4c:	3b01      	subs	r3, #1
  402b4e:	d1f9      	bne.n	402b44 <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  402b50:	f06f 0002 	mvn.w	r0, #2
  402b54:	e00e      	b.n	402b74 <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  402b56:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  402b58:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  402b5c:	42a5      	cmp	r5, r4
  402b5e:	d00b      	beq.n	402b78 <spi_read_packet+0x50>
{
  402b60:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  402b64:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  402b66:	f012 0f02 	tst.w	r2, #2
  402b6a:	d1e8      	bne.n	402b3e <spi_read_packet+0x16>
			if (!timeout--) {
  402b6c:	3b01      	subs	r3, #1
  402b6e:	d1f9      	bne.n	402b64 <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  402b70:	f06f 0002 	mvn.w	r0, #2
}
  402b74:	bc70      	pop	{r4, r5, r6}
  402b76:	4770      	bx	lr
	return STATUS_OK;
  402b78:	2000      	movs	r0, #0
  402b7a:	e7fb      	b.n	402b74 <spi_read_packet+0x4c>

00402b7c <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  402b7c:	b108      	cbz	r0, 402b82 <mem_test_unit_ready+0x6>
  402b7e:	2001      	movs	r0, #1
  402b80:	4770      	bx	lr
{
  402b82:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  402b84:	4b01      	ldr	r3, [pc, #4]	; (402b8c <mem_test_unit_ready+0x10>)
  402b86:	4798      	blx	r3
  402b88:	bd08      	pop	{r3, pc}
  402b8a:	bf00      	nop
  402b8c:	00402289 	.word	0x00402289

00402b90 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  402b90:	b108      	cbz	r0, 402b96 <mem_read_capacity+0x6>
  402b92:	2001      	movs	r0, #1
  402b94:	4770      	bx	lr
{
  402b96:	b508      	push	{r3, lr}
  402b98:	4608      	mov	r0, r1
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  402b9a:	4b01      	ldr	r3, [pc, #4]	; (402ba0 <mem_read_capacity+0x10>)
  402b9c:	4798      	blx	r3
  402b9e:	bd08      	pop	{r3, pc}
  402ba0:	004022b9 	.word	0x004022b9

00402ba4 <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  402ba4:	fab0 f080 	clz	r0, r0
  402ba8:	0940      	lsrs	r0, r0, #5
  402baa:	4770      	bx	lr

00402bac <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  402bac:	b108      	cbz	r0, 402bb2 <mem_wr_protect+0x6>
  402bae:	2001      	movs	r0, #1
  402bb0:	4770      	bx	lr
{
  402bb2:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  402bb4:	4b01      	ldr	r3, [pc, #4]	; (402bbc <mem_wr_protect+0x10>)
  402bb6:	4798      	blx	r3
  402bb8:	bd08      	pop	{r3, pc}
  402bba:	bf00      	nop
  402bbc:	004022c9 	.word	0x004022c9

00402bc0 <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  402bc0:	b108      	cbz	r0, 402bc6 <memory_2_ram+0x6>
  402bc2:	2001      	movs	r0, #1
  402bc4:	4770      	bx	lr
{
  402bc6:	b508      	push	{r3, lr}
  402bc8:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  402bca:	4611      	mov	r1, r2
  402bcc:	4b01      	ldr	r3, [pc, #4]	; (402bd4 <memory_2_ram+0x14>)
  402bce:	4798      	blx	r3
  402bd0:	bd08      	pop	{r3, pc}
  402bd2:	bf00      	nop
  402bd4:	00402315 	.word	0x00402315

00402bd8 <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  402bd8:	b108      	cbz	r0, 402bde <ram_2_memory+0x6>
  402bda:	2001      	movs	r0, #1
  402bdc:	4770      	bx	lr
{
  402bde:	b508      	push	{r3, lr}
  402be0:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  402be2:	4611      	mov	r1, r2
  402be4:	4b01      	ldr	r3, [pc, #4]	; (402bec <ram_2_memory+0x14>)
  402be6:	4798      	blx	r3
  402be8:	bd08      	pop	{r3, pc}
  402bea:	bf00      	nop
  402bec:	00402365 	.word	0x00402365

00402bf0 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  402bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  402bf2:	4838      	ldr	r0, [pc, #224]	; (402cd4 <board_init+0xe4>)
  402bf4:	4b38      	ldr	r3, [pc, #224]	; (402cd8 <board_init+0xe8>)
  402bf6:	4798      	blx	r3
  402bf8:	200b      	movs	r0, #11
  402bfa:	4c38      	ldr	r4, [pc, #224]	; (402cdc <board_init+0xec>)
  402bfc:	47a0      	blx	r4
  402bfe:	200c      	movs	r0, #12
  402c00:	47a0      	blx	r4
  402c02:	200d      	movs	r0, #13
  402c04:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402c06:	4b36      	ldr	r3, [pc, #216]	; (402ce0 <board_init+0xf0>)
  402c08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  402c0c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402c0e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402c14:	4c33      	ldr	r4, [pc, #204]	; (402ce4 <board_init+0xf4>)
  402c16:	2504      	movs	r5, #4
  402c18:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c1a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  402c1e:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402c20:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402c24:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402c26:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402c28:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402c2c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  402c2e:	f022 0204 	bic.w	r2, r2, #4
  402c32:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402c34:	6f62      	ldr	r2, [r4, #116]	; 0x74
  402c36:	f022 0204 	bic.w	r2, r2, #4
  402c3a:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402c3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402c40:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402c42:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402c48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  402c4c:	6322      	str	r2, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402c4e:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c50:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402c54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402c58:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402c5a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c5c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  402c60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  402c64:	210c      	movs	r1, #12
  402c66:	4820      	ldr	r0, [pc, #128]	; (402ce8 <board_init+0xf8>)
  402c68:	4b20      	ldr	r3, [pc, #128]	; (402cec <board_init+0xfc>)
  402c6a:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  402c6c:	4f20      	ldr	r7, [pc, #128]	; (402cf0 <board_init+0x100>)
  402c6e:	4639      	mov	r1, r7
  402c70:	2003      	movs	r0, #3
  402c72:	4e20      	ldr	r6, [pc, #128]	; (402cf4 <board_init+0x104>)
  402c74:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  402c76:	4639      	mov	r1, r7
  402c78:	4628      	mov	r0, r5
  402c7a:	47b0      	blx	r6
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  402c7c:	4639      	mov	r1, r7
  402c7e:	200c      	movs	r0, #12
  402c80:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  402c82:	4639      	mov	r1, r7
  402c84:	200d      	movs	r0, #13
  402c86:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  402c88:	4639      	mov	r1, r7
  402c8a:	200e      	movs	r0, #14
  402c8c:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  402c8e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402c92:	2009      	movs	r0, #9
  402c94:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  402c96:	4918      	ldr	r1, [pc, #96]	; (402cf8 <board_init+0x108>)
  402c98:	200a      	movs	r0, #10
  402c9a:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  402c9c:	f107 5740 	add.w	r7, r7, #805306368	; 0x30000000
  402ca0:	4639      	mov	r1, r7
  402ca2:	2055      	movs	r0, #85	; 0x55
  402ca4:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  402ca6:	4639      	mov	r1, r7
  402ca8:	205f      	movs	r0, #95	; 0x5f
  402caa:	47b0      	blx	r6
#endif

#ifdef CONF_BOARD_SD_MMC_SPI
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  402cac:	4913      	ldr	r1, [pc, #76]	; (402cfc <board_init+0x10c>)
  402cae:	204c      	movs	r0, #76	; 0x4c
  402cb0:	47b0      	blx	r6
		base->PIO_PUER = mask;
  402cb2:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402cb4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402cb8:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402cba:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402cbc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402cc0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  402cc2:	f023 0304 	bic.w	r3, r3, #4
  402cc6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402cc8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402cca:	f023 0304 	bic.w	r3, r3, #4
  402cce:	6763      	str	r3, [r4, #116]	; 0x74
  402cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cd2:	bf00      	nop
  402cd4:	400e1450 	.word	0x400e1450
  402cd8:	004039c9 	.word	0x004039c9
  402cdc:	004032c1 	.word	0x004032c1
  402ce0:	400e1200 	.word	0x400e1200
  402ce4:	400e0e00 	.word	0x400e0e00
  402ce8:	400e1000 	.word	0x400e1000
  402cec:	00403019 	.word	0x00403019
  402cf0:	08000001 	.word	0x08000001
  402cf4:	00402ef9 	.word	0x00402ef9
  402cf8:	10000001 	.word	0x10000001
  402cfc:	28000001 	.word	0x28000001

00402d00 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  402d00:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  402d02:	2401      	movs	r4, #1
  402d04:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  402d06:	2400      	movs	r4, #0
  402d08:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  402d0a:	f240 2502 	movw	r5, #514	; 0x202
  402d0e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  402d12:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  402d16:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  402d1a:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  402d1c:	0052      	lsls	r2, r2, #1
  402d1e:	fbb1 f2f2 	udiv	r2, r1, r2
  402d22:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  402d24:	0212      	lsls	r2, r2, #8
  402d26:	b292      	uxth	r2, r2
  402d28:	432b      	orrs	r3, r5
  402d2a:	431a      	orrs	r2, r3
  402d2c:	6042      	str	r2, [r0, #4]
	return 0;
}
  402d2e:	4620      	mov	r0, r4
  402d30:	bc30      	pop	{r4, r5}
  402d32:	4770      	bx	lr

00402d34 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  402d34:	6843      	ldr	r3, [r0, #4]
  402d36:	01d2      	lsls	r2, r2, #7
  402d38:	b2d2      	uxtb	r2, r2
  402d3a:	4319      	orrs	r1, r3
  402d3c:	430a      	orrs	r2, r1
  402d3e:	6042      	str	r2, [r0, #4]
  402d40:	4770      	bx	lr

00402d42 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  402d42:	2302      	movs	r3, #2
  402d44:	6003      	str	r3, [r0, #0]
  402d46:	4770      	bx	lr

00402d48 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  402d48:	2301      	movs	r3, #1
  402d4a:	fa03 f101 	lsl.w	r1, r3, r1
  402d4e:	6101      	str	r1, [r0, #16]
  402d50:	4770      	bx	lr

00402d52 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
  402d52:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
  402d54:	bf9a      	itte	ls
  402d56:	3050      	addls	r0, #80	; 0x50
  402d58:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
	uint32_t ul_data = 0;
  402d5c:	2000      	movhi	r0, #0
	}

	return ul_data;
}
  402d5e:	4770      	bx	lr

00402d60 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402d60:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402d62:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402d66:	d039      	beq.n	402ddc <pio_set_peripheral+0x7c>
  402d68:	d813      	bhi.n	402d92 <pio_set_peripheral+0x32>
  402d6a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402d6e:	d025      	beq.n	402dbc <pio_set_peripheral+0x5c>
  402d70:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402d74:	d10a      	bne.n	402d8c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402d76:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402d78:	4313      	orrs	r3, r2
  402d7a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402d7c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402d7e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402d80:	400b      	ands	r3, r1
  402d82:	ea23 0302 	bic.w	r3, r3, r2
  402d86:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402d88:	6042      	str	r2, [r0, #4]
  402d8a:	4770      	bx	lr
	switch (ul_type) {
  402d8c:	2900      	cmp	r1, #0
  402d8e:	d1fb      	bne.n	402d88 <pio_set_peripheral+0x28>
  402d90:	4770      	bx	lr
  402d92:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402d96:	d020      	beq.n	402dda <pio_set_peripheral+0x7a>
  402d98:	d809      	bhi.n	402dae <pio_set_peripheral+0x4e>
  402d9a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402d9e:	d1f3      	bne.n	402d88 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402da0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402da2:	4313      	orrs	r3, r2
  402da4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402da6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402da8:	4313      	orrs	r3, r2
  402daa:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402dac:	e7ec      	b.n	402d88 <pio_set_peripheral+0x28>
	switch (ul_type) {
  402dae:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402db2:	d012      	beq.n	402dda <pio_set_peripheral+0x7a>
  402db4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402db8:	d00f      	beq.n	402dda <pio_set_peripheral+0x7a>
  402dba:	e7e5      	b.n	402d88 <pio_set_peripheral+0x28>
{
  402dbc:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  402dbe:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402dc0:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402dc2:	43d3      	mvns	r3, r2
  402dc4:	4021      	ands	r1, r4
  402dc6:	461c      	mov	r4, r3
  402dc8:	4019      	ands	r1, r3
  402dca:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402dcc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402dce:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402dd0:	400b      	ands	r3, r1
  402dd2:	4023      	ands	r3, r4
  402dd4:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  402dd6:	6042      	str	r2, [r0, #4]
}
  402dd8:	bc10      	pop	{r4}
  402dda:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  402ddc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402dde:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402de0:	400b      	ands	r3, r1
  402de2:	ea23 0302 	bic.w	r3, r3, r2
  402de6:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402de8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402dea:	4313      	orrs	r3, r2
  402dec:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402dee:	e7cb      	b.n	402d88 <pio_set_peripheral+0x28>

00402df0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402df0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402df2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  402df6:	bf14      	ite	ne
  402df8:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402dfa:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402dfc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  402e00:	bf14      	ite	ne
  402e02:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  402e04:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  402e06:	f012 0f02 	tst.w	r2, #2
  402e0a:	d107      	bne.n	402e1c <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  402e0c:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  402e10:	bf18      	it	ne
  402e12:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  402e16:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402e18:	6001      	str	r1, [r0, #0]
  402e1a:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  402e1c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402e20:	e7f9      	b.n	402e16 <pio_set_input+0x26>

00402e22 <pio_set_output>:
{
  402e22:	b410      	push	{r4}
  402e24:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  402e26:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402e28:	b944      	cbnz	r4, 402e3c <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  402e2a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  402e2c:	b143      	cbz	r3, 402e40 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  402e2e:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  402e30:	b942      	cbnz	r2, 402e44 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  402e32:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  402e34:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402e36:	6001      	str	r1, [r0, #0]
}
  402e38:	bc10      	pop	{r4}
  402e3a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  402e3c:	6641      	str	r1, [r0, #100]	; 0x64
  402e3e:	e7f5      	b.n	402e2c <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  402e40:	6541      	str	r1, [r0, #84]	; 0x54
  402e42:	e7f5      	b.n	402e30 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  402e44:	6301      	str	r1, [r0, #48]	; 0x30
  402e46:	e7f5      	b.n	402e34 <pio_set_output+0x12>

00402e48 <pio_configure>:
{
  402e48:	b570      	push	{r4, r5, r6, lr}
  402e4a:	b082      	sub	sp, #8
  402e4c:	4605      	mov	r5, r0
  402e4e:	4616      	mov	r6, r2
  402e50:	461c      	mov	r4, r3
	switch (ul_type) {
  402e52:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402e56:	d014      	beq.n	402e82 <pio_configure+0x3a>
  402e58:	d90a      	bls.n	402e70 <pio_configure+0x28>
  402e5a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402e5e:	d022      	beq.n	402ea6 <pio_configure+0x5e>
  402e60:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402e64:	d01f      	beq.n	402ea6 <pio_configure+0x5e>
  402e66:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402e6a:	d016      	beq.n	402e9a <pio_configure+0x52>
		return 0;
  402e6c:	2000      	movs	r0, #0
  402e6e:	e012      	b.n	402e96 <pio_configure+0x4e>
	switch (ul_type) {
  402e70:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402e74:	d005      	beq.n	402e82 <pio_configure+0x3a>
  402e76:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402e7a:	d002      	beq.n	402e82 <pio_configure+0x3a>
  402e7c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402e80:	d1f4      	bne.n	402e6c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402e82:	4632      	mov	r2, r6
  402e84:	4628      	mov	r0, r5
  402e86:	4b10      	ldr	r3, [pc, #64]	; (402ec8 <pio_configure+0x80>)
  402e88:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402e8a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  402e8e:	bf14      	ite	ne
  402e90:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402e92:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  402e94:	2001      	movs	r0, #1
}
  402e96:	b002      	add	sp, #8
  402e98:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_attribute);
  402e9a:	461a      	mov	r2, r3
  402e9c:	4631      	mov	r1, r6
  402e9e:	4b0b      	ldr	r3, [pc, #44]	; (402ecc <pio_configure+0x84>)
  402ea0:	4798      	blx	r3
	return 1;
  402ea2:	2001      	movs	r0, #1
		break;
  402ea4:	e7f7      	b.n	402e96 <pio_configure+0x4e>
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402ea6:	f004 0301 	and.w	r3, r4, #1
  402eaa:	9300      	str	r3, [sp, #0]
  402eac:	f3c4 0380 	ubfx	r3, r4, #2, #1
  402eb0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402eb4:	bf14      	ite	ne
  402eb6:	2200      	movne	r2, #0
  402eb8:	2201      	moveq	r2, #1
  402eba:	4631      	mov	r1, r6
  402ebc:	4628      	mov	r0, r5
  402ebe:	4c04      	ldr	r4, [pc, #16]	; (402ed0 <pio_configure+0x88>)
  402ec0:	47a0      	blx	r4
	return 1;
  402ec2:	2001      	movs	r0, #1
		break;
  402ec4:	e7e7      	b.n	402e96 <pio_configure+0x4e>
  402ec6:	bf00      	nop
  402ec8:	00402d61 	.word	0x00402d61
  402ecc:	00402df1 	.word	0x00402df1
  402ed0:	00402e23 	.word	0x00402e23

00402ed4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402ed4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402ed6:	4770      	bx	lr

00402ed8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402ed8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402eda:	4770      	bx	lr

00402edc <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402edc:	0943      	lsrs	r3, r0, #5
  402ede:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402ee2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402ee6:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  402ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  402eea:	f000 001f 	and.w	r0, r0, #31
  402eee:	fa23 f000 	lsr.w	r0, r3, r0
}
  402ef2:	f000 0001 	and.w	r0, r0, #1
  402ef6:	4770      	bx	lr

00402ef8 <pio_configure_pin>:
{
  402ef8:	b570      	push	{r4, r5, r6, lr}
  402efa:	b082      	sub	sp, #8
  402efc:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402efe:	0943      	lsrs	r3, r0, #5
  402f00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402f04:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402f08:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  402f0a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  402f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402f12:	d053      	beq.n	402fbc <pio_configure_pin+0xc4>
  402f14:	d80a      	bhi.n	402f2c <pio_configure_pin+0x34>
  402f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402f1a:	d02d      	beq.n	402f78 <pio_configure_pin+0x80>
  402f1c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402f20:	d03b      	beq.n	402f9a <pio_configure_pin+0xa2>
  402f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402f26:	d015      	beq.n	402f54 <pio_configure_pin+0x5c>
		return 0;
  402f28:	2000      	movs	r0, #0
  402f2a:	e023      	b.n	402f74 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  402f2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402f30:	d055      	beq.n	402fde <pio_configure_pin+0xe6>
  402f32:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402f36:	d052      	beq.n	402fde <pio_configure_pin+0xe6>
  402f38:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402f3c:	d1f4      	bne.n	402f28 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402f3e:	f000 011f 	and.w	r1, r0, #31
  402f42:	2601      	movs	r6, #1
  402f44:	462a      	mov	r2, r5
  402f46:	fa06 f101 	lsl.w	r1, r6, r1
  402f4a:	4620      	mov	r0, r4
  402f4c:	4b2f      	ldr	r3, [pc, #188]	; (40300c <pio_configure_pin+0x114>)
  402f4e:	4798      	blx	r3
	return 1;
  402f50:	4630      	mov	r0, r6
		break;
  402f52:	e00f      	b.n	402f74 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402f54:	f000 001f 	and.w	r0, r0, #31
  402f58:	2601      	movs	r6, #1
  402f5a:	4086      	lsls	r6, r0
  402f5c:	4632      	mov	r2, r6
  402f5e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f62:	4620      	mov	r0, r4
  402f64:	4b2a      	ldr	r3, [pc, #168]	; (403010 <pio_configure_pin+0x118>)
  402f66:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402f68:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402f6c:	bf14      	ite	ne
  402f6e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402f70:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  402f72:	2001      	movs	r0, #1
}
  402f74:	b002      	add	sp, #8
  402f76:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402f78:	f000 001f 	and.w	r0, r0, #31
  402f7c:	2601      	movs	r6, #1
  402f7e:	4086      	lsls	r6, r0
  402f80:	4632      	mov	r2, r6
  402f82:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402f86:	4620      	mov	r0, r4
  402f88:	4b21      	ldr	r3, [pc, #132]	; (403010 <pio_configure_pin+0x118>)
  402f8a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402f8c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402f90:	bf14      	ite	ne
  402f92:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402f94:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  402f96:	2001      	movs	r0, #1
  402f98:	e7ec      	b.n	402f74 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402f9a:	f000 001f 	and.w	r0, r0, #31
  402f9e:	2601      	movs	r6, #1
  402fa0:	4086      	lsls	r6, r0
  402fa2:	4632      	mov	r2, r6
  402fa4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402fa8:	4620      	mov	r0, r4
  402faa:	4b19      	ldr	r3, [pc, #100]	; (403010 <pio_configure_pin+0x118>)
  402fac:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402fae:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402fb2:	bf14      	ite	ne
  402fb4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402fb6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  402fb8:	2001      	movs	r0, #1
  402fba:	e7db      	b.n	402f74 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402fbc:	f000 001f 	and.w	r0, r0, #31
  402fc0:	2601      	movs	r6, #1
  402fc2:	4086      	lsls	r6, r0
  402fc4:	4632      	mov	r2, r6
  402fc6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402fca:	4620      	mov	r0, r4
  402fcc:	4b10      	ldr	r3, [pc, #64]	; (403010 <pio_configure_pin+0x118>)
  402fce:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402fd0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402fd4:	bf14      	ite	ne
  402fd6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402fd8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  402fda:	2001      	movs	r0, #1
  402fdc:	e7ca      	b.n	402f74 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402fde:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402fe2:	f000 011f 	and.w	r1, r0, #31
  402fe6:	2601      	movs	r6, #1
  402fe8:	ea05 0306 	and.w	r3, r5, r6
  402fec:	9300      	str	r3, [sp, #0]
  402fee:	f3c5 0380 	ubfx	r3, r5, #2, #1
  402ff2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402ff6:	bf14      	ite	ne
  402ff8:	2200      	movne	r2, #0
  402ffa:	2201      	moveq	r2, #1
  402ffc:	fa06 f101 	lsl.w	r1, r6, r1
  403000:	4620      	mov	r0, r4
  403002:	4c04      	ldr	r4, [pc, #16]	; (403014 <pio_configure_pin+0x11c>)
  403004:	47a0      	blx	r4
	return 1;
  403006:	4630      	mov	r0, r6
		break;
  403008:	e7b4      	b.n	402f74 <pio_configure_pin+0x7c>
  40300a:	bf00      	nop
  40300c:	00402df1 	.word	0x00402df1
  403010:	00402d61 	.word	0x00402d61
  403014:	00402e23 	.word	0x00402e23

00403018 <pio_configure_pin_group>:
{
  403018:	b570      	push	{r4, r5, r6, lr}
  40301a:	b082      	sub	sp, #8
  40301c:	4605      	mov	r5, r0
  40301e:	460e      	mov	r6, r1
  403020:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  403022:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  403026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40302a:	d03d      	beq.n	4030a8 <pio_configure_pin_group+0x90>
  40302c:	d80a      	bhi.n	403044 <pio_configure_pin_group+0x2c>
  40302e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403032:	d021      	beq.n	403078 <pio_configure_pin_group+0x60>
  403034:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403038:	d02a      	beq.n	403090 <pio_configure_pin_group+0x78>
  40303a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40303e:	d00e      	beq.n	40305e <pio_configure_pin_group+0x46>
		return 0;
  403040:	2000      	movs	r0, #0
  403042:	e017      	b.n	403074 <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  403044:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403048:	d03a      	beq.n	4030c0 <pio_configure_pin_group+0xa8>
  40304a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40304e:	d037      	beq.n	4030c0 <pio_configure_pin_group+0xa8>
  403050:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403054:	d1f4      	bne.n	403040 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  403056:	4b23      	ldr	r3, [pc, #140]	; (4030e4 <pio_configure_pin_group+0xcc>)
  403058:	4798      	blx	r3
	return 1;
  40305a:	2001      	movs	r0, #1
		break;
  40305c:	e00a      	b.n	403074 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40305e:	460a      	mov	r2, r1
  403060:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403064:	4b20      	ldr	r3, [pc, #128]	; (4030e8 <pio_configure_pin_group+0xd0>)
  403066:	4798      	blx	r3
	if (ul_pull_up_enable) {
  403068:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40306c:	bf14      	ite	ne
  40306e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  403070:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  403072:	2001      	movs	r0, #1
}
  403074:	b002      	add	sp, #8
  403076:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  403078:	460a      	mov	r2, r1
  40307a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40307e:	4b1a      	ldr	r3, [pc, #104]	; (4030e8 <pio_configure_pin_group+0xd0>)
  403080:	4798      	blx	r3
	if (ul_pull_up_enable) {
  403082:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  403086:	bf14      	ite	ne
  403088:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40308a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40308c:	2001      	movs	r0, #1
  40308e:	e7f1      	b.n	403074 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  403090:	460a      	mov	r2, r1
  403092:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403096:	4b14      	ldr	r3, [pc, #80]	; (4030e8 <pio_configure_pin_group+0xd0>)
  403098:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40309a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40309e:	bf14      	ite	ne
  4030a0:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4030a2:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4030a4:	2001      	movs	r0, #1
  4030a6:	e7e5      	b.n	403074 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4030a8:	460a      	mov	r2, r1
  4030aa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4030ae:	4b0e      	ldr	r3, [pc, #56]	; (4030e8 <pio_configure_pin_group+0xd0>)
  4030b0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4030b2:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4030b6:	bf14      	ite	ne
  4030b8:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4030ba:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4030bc:	2001      	movs	r0, #1
  4030be:	e7d9      	b.n	403074 <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4030c0:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  4030c4:	f004 0301 	and.w	r3, r4, #1
  4030c8:	9300      	str	r3, [sp, #0]
  4030ca:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4030ce:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4030d2:	bf14      	ite	ne
  4030d4:	2200      	movne	r2, #0
  4030d6:	2201      	moveq	r2, #1
  4030d8:	4631      	mov	r1, r6
  4030da:	4628      	mov	r0, r5
  4030dc:	4c03      	ldr	r4, [pc, #12]	; (4030ec <pio_configure_pin_group+0xd4>)
  4030de:	47a0      	blx	r4
	return 1;
  4030e0:	2001      	movs	r0, #1
		break;
  4030e2:	e7c7      	b.n	403074 <pio_configure_pin_group+0x5c>
  4030e4:	00402df1 	.word	0x00402df1
  4030e8:	00402d61 	.word	0x00402d61
  4030ec:	00402e23 	.word	0x00402e23

004030f0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4030f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4030f4:	4681      	mov	r9, r0
  4030f6:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4030f8:	4b12      	ldr	r3, [pc, #72]	; (403144 <pio_handler_process+0x54>)
  4030fa:	4798      	blx	r3
  4030fc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4030fe:	4648      	mov	r0, r9
  403100:	4b11      	ldr	r3, [pc, #68]	; (403148 <pio_handler_process+0x58>)
  403102:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  403104:	4005      	ands	r5, r0
  403106:	d013      	beq.n	403130 <pio_handler_process+0x40>
  403108:	4c10      	ldr	r4, [pc, #64]	; (40314c <pio_handler_process+0x5c>)
  40310a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40310e:	e003      	b.n	403118 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  403110:	42b4      	cmp	r4, r6
  403112:	d00d      	beq.n	403130 <pio_handler_process+0x40>
  403114:	3410      	adds	r4, #16
		while (status != 0) {
  403116:	b15d      	cbz	r5, 403130 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  403118:	6820      	ldr	r0, [r4, #0]
  40311a:	42b8      	cmp	r0, r7
  40311c:	d1f8      	bne.n	403110 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40311e:	6861      	ldr	r1, [r4, #4]
  403120:	4229      	tst	r1, r5
  403122:	d0f5      	beq.n	403110 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403124:	68e3      	ldr	r3, [r4, #12]
  403126:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  403128:	6863      	ldr	r3, [r4, #4]
  40312a:	ea25 0503 	bic.w	r5, r5, r3
  40312e:	e7ef      	b.n	403110 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  403130:	4b07      	ldr	r3, [pc, #28]	; (403150 <pio_handler_process+0x60>)
  403132:	681b      	ldr	r3, [r3, #0]
  403134:	b123      	cbz	r3, 403140 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  403136:	4b07      	ldr	r3, [pc, #28]	; (403154 <pio_handler_process+0x64>)
  403138:	681b      	ldr	r3, [r3, #0]
  40313a:	b10b      	cbz	r3, 403140 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  40313c:	4648      	mov	r0, r9
  40313e:	4798      	blx	r3
  403140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403144:	00402ed5 	.word	0x00402ed5
  403148:	00402ed9 	.word	0x00402ed9
  40314c:	20006128 	.word	0x20006128
  403150:	20006230 	.word	0x20006230
  403154:	20006198 	.word	0x20006198

00403158 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  403158:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40315a:	210b      	movs	r1, #11
  40315c:	4801      	ldr	r0, [pc, #4]	; (403164 <PIOA_Handler+0xc>)
  40315e:	4b02      	ldr	r3, [pc, #8]	; (403168 <PIOA_Handler+0x10>)
  403160:	4798      	blx	r3
  403162:	bd08      	pop	{r3, pc}
  403164:	400e0e00 	.word	0x400e0e00
  403168:	004030f1 	.word	0x004030f1

0040316c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40316c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40316e:	210c      	movs	r1, #12
  403170:	4801      	ldr	r0, [pc, #4]	; (403178 <PIOB_Handler+0xc>)
  403172:	4b02      	ldr	r3, [pc, #8]	; (40317c <PIOB_Handler+0x10>)
  403174:	4798      	blx	r3
  403176:	bd08      	pop	{r3, pc}
  403178:	400e1000 	.word	0x400e1000
  40317c:	004030f1 	.word	0x004030f1

00403180 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  403180:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  403182:	210d      	movs	r1, #13
  403184:	4801      	ldr	r0, [pc, #4]	; (40318c <PIOC_Handler+0xc>)
  403186:	4b02      	ldr	r3, [pc, #8]	; (403190 <PIOC_Handler+0x10>)
  403188:	4798      	blx	r3
  40318a:	bd08      	pop	{r3, pc}
  40318c:	400e1200 	.word	0x400e1200
  403190:	004030f1 	.word	0x004030f1

00403194 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403194:	4a17      	ldr	r2, [pc, #92]	; (4031f4 <pmc_switch_mck_to_pllack+0x60>)
  403196:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40319c:	4318      	orrs	r0, r3
  40319e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4031a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4031a2:	f013 0f08 	tst.w	r3, #8
  4031a6:	d10a      	bne.n	4031be <pmc_switch_mck_to_pllack+0x2a>
  4031a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4031ac:	4911      	ldr	r1, [pc, #68]	; (4031f4 <pmc_switch_mck_to_pllack+0x60>)
  4031ae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4031b0:	f012 0f08 	tst.w	r2, #8
  4031b4:	d103      	bne.n	4031be <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4031b6:	3b01      	subs	r3, #1
  4031b8:	d1f9      	bne.n	4031ae <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4031ba:	2001      	movs	r0, #1
  4031bc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4031be:	4a0d      	ldr	r2, [pc, #52]	; (4031f4 <pmc_switch_mck_to_pllack+0x60>)
  4031c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4031c2:	f023 0303 	bic.w	r3, r3, #3
  4031c6:	f043 0302 	orr.w	r3, r3, #2
  4031ca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4031cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4031ce:	f013 0f08 	tst.w	r3, #8
  4031d2:	d10a      	bne.n	4031ea <pmc_switch_mck_to_pllack+0x56>
  4031d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4031d8:	4906      	ldr	r1, [pc, #24]	; (4031f4 <pmc_switch_mck_to_pllack+0x60>)
  4031da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4031dc:	f012 0f08 	tst.w	r2, #8
  4031e0:	d105      	bne.n	4031ee <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4031e2:	3b01      	subs	r3, #1
  4031e4:	d1f9      	bne.n	4031da <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4031e6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4031e8:	4770      	bx	lr
	return 0;
  4031ea:	2000      	movs	r0, #0
  4031ec:	4770      	bx	lr
  4031ee:	2000      	movs	r0, #0
  4031f0:	4770      	bx	lr
  4031f2:	bf00      	nop
  4031f4:	400e0400 	.word	0x400e0400

004031f8 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4031f8:	2801      	cmp	r0, #1
  4031fa:	d003      	beq.n	403204 <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4031fc:	4a05      	ldr	r2, [pc, #20]	; (403214 <pmc_switch_sclk_to_32kxtal+0x1c>)
  4031fe:	4b06      	ldr	r3, [pc, #24]	; (403218 <pmc_switch_sclk_to_32kxtal+0x20>)
  403200:	601a      	str	r2, [r3, #0]
  403202:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  403204:	4a04      	ldr	r2, [pc, #16]	; (403218 <pmc_switch_sclk_to_32kxtal+0x20>)
  403206:	6893      	ldr	r3, [r2, #8]
  403208:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  40320c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403210:	6093      	str	r3, [r2, #8]
  403212:	e7f3      	b.n	4031fc <pmc_switch_sclk_to_32kxtal+0x4>
  403214:	a5000008 	.word	0xa5000008
  403218:	400e1410 	.word	0x400e1410

0040321c <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40321c:	4b05      	ldr	r3, [pc, #20]	; (403234 <pmc_osc_is_ready_32kxtal+0x18>)
  40321e:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  403220:	f013 0f80 	tst.w	r3, #128	; 0x80
  403224:	bf1d      	ittte	ne
  403226:	4b04      	ldrne	r3, [pc, #16]	; (403238 <pmc_osc_is_ready_32kxtal+0x1c>)
  403228:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  40322a:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  40322e:	2000      	moveq	r0, #0
}
  403230:	4770      	bx	lr
  403232:	bf00      	nop
  403234:	400e1410 	.word	0x400e1410
  403238:	400e0400 	.word	0x400e0400

0040323c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40323c:	b9c8      	cbnz	r0, 403272 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40323e:	4a11      	ldr	r2, [pc, #68]	; (403284 <pmc_switch_mainck_to_xtal+0x48>)
  403240:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  403242:	0209      	lsls	r1, r1, #8
  403244:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  403246:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40324a:	f023 0303 	bic.w	r3, r3, #3
  40324e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403252:	f043 0301 	orr.w	r3, r3, #1
  403256:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403258:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40325a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40325c:	f013 0f01 	tst.w	r3, #1
  403260:	d0fb      	beq.n	40325a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403262:	4a08      	ldr	r2, [pc, #32]	; (403284 <pmc_switch_mainck_to_xtal+0x48>)
  403264:	6a13      	ldr	r3, [r2, #32]
  403266:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40326a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40326e:	6213      	str	r3, [r2, #32]
  403270:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403272:	4904      	ldr	r1, [pc, #16]	; (403284 <pmc_switch_mainck_to_xtal+0x48>)
  403274:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  403276:	4a04      	ldr	r2, [pc, #16]	; (403288 <pmc_switch_mainck_to_xtal+0x4c>)
  403278:	401a      	ands	r2, r3
  40327a:	4b04      	ldr	r3, [pc, #16]	; (40328c <pmc_switch_mainck_to_xtal+0x50>)
  40327c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40327e:	620b      	str	r3, [r1, #32]
  403280:	4770      	bx	lr
  403282:	bf00      	nop
  403284:	400e0400 	.word	0x400e0400
  403288:	fec8fffc 	.word	0xfec8fffc
  40328c:	01370002 	.word	0x01370002

00403290 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  403290:	4b02      	ldr	r3, [pc, #8]	; (40329c <pmc_osc_is_ready_mainck+0xc>)
  403292:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403294:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  403298:	4770      	bx	lr
  40329a:	bf00      	nop
  40329c:	400e0400 	.word	0x400e0400

004032a0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4032a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4032a4:	4b01      	ldr	r3, [pc, #4]	; (4032ac <pmc_disable_pllack+0xc>)
  4032a6:	629a      	str	r2, [r3, #40]	; 0x28
  4032a8:	4770      	bx	lr
  4032aa:	bf00      	nop
  4032ac:	400e0400 	.word	0x400e0400

004032b0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4032b0:	4b02      	ldr	r3, [pc, #8]	; (4032bc <pmc_is_locked_pllack+0xc>)
  4032b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4032b4:	f000 0002 	and.w	r0, r0, #2
  4032b8:	4770      	bx	lr
  4032ba:	bf00      	nop
  4032bc:	400e0400 	.word	0x400e0400

004032c0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4032c0:	2822      	cmp	r0, #34	; 0x22
  4032c2:	d81e      	bhi.n	403302 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4032c4:	281f      	cmp	r0, #31
  4032c6:	d80c      	bhi.n	4032e2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4032c8:	4b11      	ldr	r3, [pc, #68]	; (403310 <pmc_enable_periph_clk+0x50>)
  4032ca:	699a      	ldr	r2, [r3, #24]
  4032cc:	2301      	movs	r3, #1
  4032ce:	4083      	lsls	r3, r0
  4032d0:	4393      	bics	r3, r2
  4032d2:	d018      	beq.n	403306 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4032d4:	2301      	movs	r3, #1
  4032d6:	fa03 f000 	lsl.w	r0, r3, r0
  4032da:	4b0d      	ldr	r3, [pc, #52]	; (403310 <pmc_enable_periph_clk+0x50>)
  4032dc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4032de:	2000      	movs	r0, #0
  4032e0:	4770      	bx	lr
		ul_id -= 32;
  4032e2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4032e4:	4b0a      	ldr	r3, [pc, #40]	; (403310 <pmc_enable_periph_clk+0x50>)
  4032e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4032ea:	2301      	movs	r3, #1
  4032ec:	4083      	lsls	r3, r0
  4032ee:	4393      	bics	r3, r2
  4032f0:	d00b      	beq.n	40330a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4032f2:	2301      	movs	r3, #1
  4032f4:	fa03 f000 	lsl.w	r0, r3, r0
  4032f8:	4b05      	ldr	r3, [pc, #20]	; (403310 <pmc_enable_periph_clk+0x50>)
  4032fa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4032fe:	2000      	movs	r0, #0
  403300:	4770      	bx	lr
		return 1;
  403302:	2001      	movs	r0, #1
  403304:	4770      	bx	lr
	return 0;
  403306:	2000      	movs	r0, #0
  403308:	4770      	bx	lr
  40330a:	2000      	movs	r0, #0
}
  40330c:	4770      	bx	lr
  40330e:	bf00      	nop
  403310:	400e0400 	.word	0x400e0400

00403314 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  403314:	b921      	cbnz	r1, 403320 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  403316:	6843      	ldr	r3, [r0, #4]
  403318:	f023 0301 	bic.w	r3, r3, #1
  40331c:	6043      	str	r3, [r0, #4]
  40331e:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  403320:	6843      	ldr	r3, [r0, #4]
  403322:	f043 0301 	orr.w	r3, r3, #1
  403326:	6043      	str	r3, [r0, #4]
  403328:	4770      	bx	lr

0040332a <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  40332a:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  40332c:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40332e:	6884      	ldr	r4, [r0, #8]
  403330:	42a5      	cmp	r5, r4
  403332:	d003      	beq.n	40333c <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  403334:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  403336:	6884      	ldr	r4, [r0, #8]
  403338:	42ac      	cmp	r4, r5
  40333a:	d1fb      	bne.n	403334 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  40333c:	b161      	cbz	r1, 403358 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40333e:	f3c4 5001 	ubfx	r0, r4, #20, #2
  403342:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  403346:	f3c4 4003 	ubfx	r0, r4, #16, #4
  40334a:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  40334e:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  403352:	bf18      	it	ne
  403354:	300c      	addne	r0, #12
  403356:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  403358:	b142      	cbz	r2, 40336c <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  40335a:	f3c4 3102 	ubfx	r1, r4, #12, #3
  40335e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  403362:	f3c4 2003 	ubfx	r0, r4, #8, #4
  403366:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40336a:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  40336c:	b143      	cbz	r3, 403380 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40336e:	f3c4 1202 	ubfx	r2, r4, #4, #3
  403372:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  403376:	f004 040f 	and.w	r4, r4, #15
  40337a:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40337e:	601c      	str	r4, [r3, #0]
	}
}
  403380:	bc30      	pop	{r4, r5}
  403382:	4770      	bx	lr

00403384 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  403384:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  403386:	6844      	ldr	r4, [r0, #4]
  403388:	f014 0f01 	tst.w	r4, #1
  40338c:	d005      	beq.n	40339a <rtc_set_time+0x16>
		if (ul_hour > 12) {
  40338e:	290c      	cmp	r1, #12
  403390:	d93d      	bls.n	40340e <rtc_set_time+0x8a>
			ul_hour -= 12;
  403392:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  403394:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  403398:	e000      	b.n	40339c <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  40339a:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40339c:	4c1d      	ldr	r4, [pc, #116]	; (403414 <rtc_set_time+0x90>)
  40339e:	fba4 5603 	umull	r5, r6, r4, r3
  4033a2:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4033a4:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4033a8:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4033ac:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4033b0:	fba4 6502 	umull	r6, r5, r4, r2
  4033b4:	08ed      	lsrs	r5, r5, #3
  4033b6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4033ba:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4033be:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  4033c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  4033c6:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4033c8:	fba4 4201 	umull	r4, r2, r4, r1
  4033cc:	08d2      	lsrs	r2, r2, #3
  4033ce:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4033d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4033d6:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4033da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4033de:	6983      	ldr	r3, [r0, #24]
  4033e0:	f013 0f04 	tst.w	r3, #4
  4033e4:	d0fb      	beq.n	4033de <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  4033e6:	6803      	ldr	r3, [r0, #0]
  4033e8:	f043 0301 	orr.w	r3, r3, #1
  4033ec:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4033ee:	6983      	ldr	r3, [r0, #24]
  4033f0:	f013 0f01 	tst.w	r3, #1
  4033f4:	d0fb      	beq.n	4033ee <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4033f6:	2301      	movs	r3, #1
  4033f8:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  4033fa:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  4033fc:	6803      	ldr	r3, [r0, #0]
  4033fe:	f023 0301 	bic.w	r3, r3, #1
  403402:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  403404:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  403406:	f000 0001 	and.w	r0, r0, #1
  40340a:	bcf0      	pop	{r4, r5, r6, r7}
  40340c:	4770      	bx	lr
	uint32_t ul_time = 0;
  40340e:	2700      	movs	r7, #0
  403410:	e7c4      	b.n	40339c <rtc_set_time+0x18>
  403412:	bf00      	nop
  403414:	cccccccd 	.word	0xcccccccd

00403418 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  403418:	b4f0      	push	{r4, r5, r6, r7}
  40341a:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  40341c:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40341e:	68c4      	ldr	r4, [r0, #12]
  403420:	42a5      	cmp	r5, r4
  403422:	d003      	beq.n	40342c <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  403424:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  403426:	68c4      	ldr	r4, [r0, #12]
  403428:	42ac      	cmp	r4, r5
  40342a:	d1fb      	bne.n	403424 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  40342c:	b199      	cbz	r1, 403456 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40342e:	f3c4 3003 	ubfx	r0, r4, #12, #4
  403432:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403436:	f3c4 2703 	ubfx	r7, r4, #8, #4
  40343a:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40343e:	f3c4 1002 	ubfx	r0, r4, #4, #3
  403442:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  403446:	f004 000f 	and.w	r0, r4, #15
  40344a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40344e:	2564      	movs	r5, #100	; 0x64
  403450:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  403454:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  403456:	b142      	cbz	r2, 40346a <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  403458:	f3c4 5000 	ubfx	r0, r4, #20, #1
  40345c:	0081      	lsls	r1, r0, #2
  40345e:	4408      	add	r0, r1
  403460:	f3c4 4103 	ubfx	r1, r4, #16, #4
  403464:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  403468:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  40346a:	b143      	cbz	r3, 40347e <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40346c:	f3c4 7201 	ubfx	r2, r4, #28, #2
  403470:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  403474:	f3c4 6103 	ubfx	r1, r4, #24, #4
  403478:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  40347c:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  40347e:	b116      	cbz	r6, 403486 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  403480:	f3c4 5442 	ubfx	r4, r4, #21, #3
  403484:	6034      	str	r4, [r6, #0]
	}
}
  403486:	bcf0      	pop	{r4, r5, r6, r7}
  403488:	4770      	bx	lr
	...

0040348c <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  40348c:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40348e:	4d2a      	ldr	r5, [pc, #168]	; (403538 <rtc_set_date+0xac>)
  403490:	fba5 4603 	umull	r4, r6, r5, r3
  403494:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  403496:	9c03      	ldr	r4, [sp, #12]
  403498:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40349a:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40349e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4034a2:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4034a6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4034aa:	fba5 6402 	umull	r6, r4, r5, r2
  4034ae:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4034b0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4034b4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4034b8:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4034bc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4034c0:	4b1e      	ldr	r3, [pc, #120]	; (40353c <rtc_set_date+0xb0>)
  4034c2:	fba3 4301 	umull	r4, r3, r3, r1
  4034c6:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4034c8:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4034cc:	4b1c      	ldr	r3, [pc, #112]	; (403540 <rtc_set_date+0xb4>)
  4034ce:	fba3 4301 	umull	r4, r3, r3, r1
  4034d2:	095b      	lsrs	r3, r3, #5
  4034d4:	fba5 6403 	umull	r6, r4, r5, r3
  4034d8:	08e4      	lsrs	r4, r4, #3
  4034da:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4034de:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4034e2:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  4034e4:	fba5 4301 	umull	r4, r3, r5, r1
  4034e8:	08db      	lsrs	r3, r3, #3
  4034ea:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  4034ee:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4034f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  4034f6:	fba5 1503 	umull	r1, r5, r5, r3
  4034fa:	08ed      	lsrs	r5, r5, #3
  4034fc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  403500:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  403504:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  403508:	6983      	ldr	r3, [r0, #24]
  40350a:	f013 0f04 	tst.w	r3, #4
  40350e:	d0fb      	beq.n	403508 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  403510:	6803      	ldr	r3, [r0, #0]
  403512:	f043 0302 	orr.w	r3, r3, #2
  403516:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  403518:	6983      	ldr	r3, [r0, #24]
  40351a:	f013 0f01 	tst.w	r3, #1
  40351e:	d0fb      	beq.n	403518 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  403520:	2301      	movs	r3, #1
  403522:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  403524:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  403526:	6803      	ldr	r3, [r0, #0]
  403528:	f023 0302 	bic.w	r3, r3, #2
  40352c:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40352e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  403530:	f000 0002 	and.w	r0, r0, #2
  403534:	bc70      	pop	{r4, r5, r6}
  403536:	4770      	bx	lr
  403538:	cccccccd 	.word	0xcccccccd
  40353c:	10624dd3 	.word	0x10624dd3
  403540:	51eb851f 	.word	0x51eb851f

00403544 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  403544:	b508      	push	{r3, lr}
  403546:	2015      	movs	r0, #21
  403548:	4b01      	ldr	r3, [pc, #4]	; (403550 <spi_enable_clock+0xc>)
  40354a:	4798      	blx	r3
  40354c:	bd08      	pop	{r3, pc}
  40354e:	bf00      	nop
  403550:	004032c1 	.word	0x004032c1

00403554 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  403554:	6843      	ldr	r3, [r0, #4]
  403556:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40355a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40355c:	6843      	ldr	r3, [r0, #4]
  40355e:	0409      	lsls	r1, r1, #16
  403560:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  403564:	4319      	orrs	r1, r3
  403566:	6041      	str	r1, [r0, #4]
  403568:	4770      	bx	lr

0040356a <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  40356a:	6843      	ldr	r3, [r0, #4]
  40356c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  403570:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  403572:	6843      	ldr	r3, [r0, #4]
  403574:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  403578:	6041      	str	r1, [r0, #4]
  40357a:	4770      	bx	lr

0040357c <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40357c:	b932      	cbnz	r2, 40358c <spi_set_clock_polarity+0x10>
  40357e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  403582:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403584:	f023 0301 	bic.w	r3, r3, #1
  403588:	6303      	str	r3, [r0, #48]	; 0x30
  40358a:	4770      	bx	lr
  40358c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  403590:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403592:	f043 0301 	orr.w	r3, r3, #1
  403596:	6303      	str	r3, [r0, #48]	; 0x30
  403598:	4770      	bx	lr

0040359a <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  40359a:	b932      	cbnz	r2, 4035aa <spi_set_clock_phase+0x10>
  40359c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4035a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4035a2:	f023 0302 	bic.w	r3, r3, #2
  4035a6:	6303      	str	r3, [r0, #48]	; 0x30
  4035a8:	4770      	bx	lr
  4035aa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4035ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4035b0:	f043 0302 	orr.w	r3, r3, #2
  4035b4:	6303      	str	r3, [r0, #48]	; 0x30
  4035b6:	4770      	bx	lr

004035b8 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4035b8:	2a04      	cmp	r2, #4
  4035ba:	d003      	beq.n	4035c4 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4035bc:	b16a      	cbz	r2, 4035da <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4035be:	2a08      	cmp	r2, #8
  4035c0:	d016      	beq.n	4035f0 <spi_configure_cs_behavior+0x38>
  4035c2:	4770      	bx	lr
  4035c4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4035c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4035ca:	f023 0308 	bic.w	r3, r3, #8
  4035ce:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4035d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4035d2:	f043 0304 	orr.w	r3, r3, #4
  4035d6:	6303      	str	r3, [r0, #48]	; 0x30
  4035d8:	4770      	bx	lr
  4035da:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4035de:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4035e0:	f023 0308 	bic.w	r3, r3, #8
  4035e4:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4035e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4035e8:	f023 0304 	bic.w	r3, r3, #4
  4035ec:	6303      	str	r3, [r0, #48]	; 0x30
  4035ee:	4770      	bx	lr
  4035f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4035f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4035f6:	f043 0308 	orr.w	r3, r3, #8
  4035fa:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4035fc:	e7e1      	b.n	4035c2 <spi_configure_cs_behavior+0xa>

004035fe <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4035fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  403602:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  403608:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40360a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40360c:	431a      	orrs	r2, r3
  40360e:	630a      	str	r2, [r1, #48]	; 0x30
  403610:	4770      	bx	lr

00403612 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  403612:	1e43      	subs	r3, r0, #1
  403614:	4419      	add	r1, r3
  403616:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40361a:	1e43      	subs	r3, r0, #1
  40361c:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40361e:	bf94      	ite	ls
  403620:	b200      	sxthls	r0, r0
		return -1;
  403622:	f04f 30ff 	movhi.w	r0, #4294967295
}
  403626:	4770      	bx	lr

00403628 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  403628:	b172      	cbz	r2, 403648 <spi_set_baudrate_div+0x20>
{
  40362a:	b410      	push	{r4}
  40362c:	4614      	mov	r4, r2
  40362e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  403632:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403634:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  403638:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40363a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40363c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  403640:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  403642:	2000      	movs	r0, #0
}
  403644:	bc10      	pop	{r4}
  403646:	4770      	bx	lr
        return -1;
  403648:	f04f 30ff 	mov.w	r0, #4294967295
  40364c:	4770      	bx	lr

0040364e <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  40364e:	b410      	push	{r4}
  403650:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  403654:	6b08      	ldr	r0, [r1, #48]	; 0x30
  403656:	b280      	uxth	r0, r0
  403658:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40365a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40365c:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  403660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403664:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  403666:	bc10      	pop	{r4}
  403668:	4770      	bx	lr
	...

0040366c <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  40366c:	4b2a      	ldr	r3, [pc, #168]	; (403718 <twi_set_speed+0xac>)
  40366e:	4299      	cmp	r1, r3
  403670:	d849      	bhi.n	403706 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  403672:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  403676:	4299      	cmp	r1, r3
  403678:	d92b      	bls.n	4036d2 <twi_set_speed+0x66>
{
  40367a:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40367c:	4c27      	ldr	r4, [pc, #156]	; (40371c <twi_set_speed+0xb0>)
  40367e:	fba4 3402 	umull	r3, r4, r4, r2
  403682:	0ba4      	lsrs	r4, r4, #14
  403684:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  403686:	4b26      	ldr	r3, [pc, #152]	; (403720 <twi_set_speed+0xb4>)
  403688:	440b      	add	r3, r1
  40368a:	009b      	lsls	r3, r3, #2
  40368c:	fbb2 f2f3 	udiv	r2, r2, r3
  403690:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403692:	2cff      	cmp	r4, #255	; 0xff
  403694:	d939      	bls.n	40370a <twi_set_speed+0x9e>
  403696:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  403698:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  40369a:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40369c:	2cff      	cmp	r4, #255	; 0xff
  40369e:	d90d      	bls.n	4036bc <twi_set_speed+0x50>
  4036a0:	2907      	cmp	r1, #7
  4036a2:	d1f9      	bne.n	403698 <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4036a4:	0213      	lsls	r3, r2, #8
  4036a6:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
  4036a8:	0409      	lsls	r1, r1, #16
  4036aa:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4036ae:	430b      	orrs	r3, r1
  4036b0:	b2e4      	uxtb	r4, r4
  4036b2:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
  4036b4:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4036b6:	2000      	movs	r0, #0
}
  4036b8:	bc10      	pop	{r4}
  4036ba:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4036bc:	2aff      	cmp	r2, #255	; 0xff
  4036be:	d9f1      	bls.n	4036a4 <twi_set_speed+0x38>
  4036c0:	2906      	cmp	r1, #6
  4036c2:	d8ef      	bhi.n	4036a4 <twi_set_speed+0x38>
			ckdiv++;
  4036c4:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
  4036c6:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4036c8:	2aff      	cmp	r2, #255	; 0xff
  4036ca:	d9eb      	bls.n	4036a4 <twi_set_speed+0x38>
  4036cc:	2906      	cmp	r1, #6
  4036ce:	d9f9      	bls.n	4036c4 <twi_set_speed+0x58>
  4036d0:	e7e8      	b.n	4036a4 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4036d2:	0049      	lsls	r1, r1, #1
  4036d4:	fbb2 f2f1 	udiv	r2, r2, r1
  4036d8:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4036da:	2aff      	cmp	r2, #255	; 0xff
  4036dc:	d911      	bls.n	403702 <twi_set_speed+0x96>
  4036de:	2300      	movs	r3, #0
			ckdiv++;
  4036e0:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
  4036e2:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4036e4:	2aff      	cmp	r2, #255	; 0xff
  4036e6:	d901      	bls.n	4036ec <twi_set_speed+0x80>
  4036e8:	2b07      	cmp	r3, #7
  4036ea:	d1f9      	bne.n	4036e0 <twi_set_speed+0x74>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4036ec:	0211      	lsls	r1, r2, #8
  4036ee:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
  4036f0:	041b      	lsls	r3, r3, #16
  4036f2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4036f6:	430b      	orrs	r3, r1
  4036f8:	b2d2      	uxtb	r2, r2
  4036fa:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  4036fc:	6102      	str	r2, [r0, #16]
	return PASS;
  4036fe:	2000      	movs	r0, #0
  403700:	4770      	bx	lr
	uint32_t ckdiv = 0;
  403702:	2300      	movs	r3, #0
  403704:	e7f2      	b.n	4036ec <twi_set_speed+0x80>
		return FAIL;
  403706:	2001      	movs	r0, #1
  403708:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40370a:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
  40370c:	bf88      	it	hi
  40370e:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403710:	d8d8      	bhi.n	4036c4 <twi_set_speed+0x58>
	uint32_t ckdiv = 0;
  403712:	2100      	movs	r1, #0
  403714:	e7c6      	b.n	4036a4 <twi_set_speed+0x38>
  403716:	bf00      	nop
  403718:	00061a80 	.word	0x00061a80
  40371c:	057619f1 	.word	0x057619f1
  403720:	3ffd1200 	.word	0x3ffd1200

00403724 <twi_master_init>:
{
  403724:	b538      	push	{r3, r4, r5, lr}
  403726:	4604      	mov	r4, r0
  403728:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
  40372a:	f04f 33ff 	mov.w	r3, #4294967295
  40372e:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
  403730:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  403732:	2380      	movs	r3, #128	; 0x80
  403734:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  403736:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
  403738:	2308      	movs	r3, #8
  40373a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  40373c:	2320      	movs	r3, #32
  40373e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
  403740:	2304      	movs	r3, #4
  403742:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  403744:	680a      	ldr	r2, [r1, #0]
  403746:	6849      	ldr	r1, [r1, #4]
  403748:	4b05      	ldr	r3, [pc, #20]	; (403760 <twi_master_init+0x3c>)
  40374a:	4798      	blx	r3
  40374c:	2801      	cmp	r0, #1
  40374e:	bf14      	ite	ne
  403750:	2000      	movne	r0, #0
  403752:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
  403754:	7a6b      	ldrb	r3, [r5, #9]
  403756:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  403758:	bf04      	itt	eq
  40375a:	2340      	moveq	r3, #64	; 0x40
  40375c:	6023      	streq	r3, [r4, #0]
}
  40375e:	bd38      	pop	{r3, r4, r5, pc}
  403760:	0040366d 	.word	0x0040366d

00403764 <twi_mk_addr>:
	if (len == 0)
  403764:	460a      	mov	r2, r1
  403766:	b159      	cbz	r1, 403780 <twi_mk_addr+0x1c>
	val = addr[0];
  403768:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  40376a:	2901      	cmp	r1, #1
		val |= addr[1];
  40376c:	bfc4      	itt	gt
  40376e:	7841      	ldrbgt	r1, [r0, #1]
  403770:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
  403774:	2a02      	cmp	r2, #2
  403776:	dd04      	ble.n	403782 <twi_mk_addr+0x1e>
		val |= addr[2];
  403778:	7882      	ldrb	r2, [r0, #2]
  40377a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  40377e:	e000      	b.n	403782 <twi_mk_addr+0x1e>
		return 0;
  403780:	2300      	movs	r3, #0
}
  403782:	4618      	mov	r0, r3
  403784:	4770      	bx	lr
	...

00403788 <twi_master_read>:
{
  403788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cnt = p_packet->length;
  40378a:	68cc      	ldr	r4, [r1, #12]
	if (cnt == 0) {
  40378c:	2c00      	cmp	r4, #0
  40378e:	d04f      	beq.n	403830 <twi_master_read+0xa8>
  403790:	460b      	mov	r3, r1
  403792:	4605      	mov	r5, r0
	uint8_t *buffer = p_packet->buffer;
  403794:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  403796:	2000      	movs	r0, #0
  403798:	6068      	str	r0, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  40379a:	684a      	ldr	r2, [r1, #4]
  40379c:	0212      	lsls	r2, r2, #8
  40379e:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4037a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4037a6:	7c09      	ldrb	r1, [r1, #16]
  4037a8:	0409      	lsls	r1, r1, #16
  4037aa:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
  4037ae:	430a      	orrs	r2, r1
  4037b0:	606a      	str	r2, [r5, #4]
	p_twi->TWI_IADR = 0;
  4037b2:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4037b4:	6859      	ldr	r1, [r3, #4]
  4037b6:	4618      	mov	r0, r3
  4037b8:	4b22      	ldr	r3, [pc, #136]	; (403844 <twi_master_read+0xbc>)
  4037ba:	4798      	blx	r3
  4037bc:	60e8      	str	r0, [r5, #12]
	if (cnt == 1) {
  4037be:	2c01      	cmp	r4, #1
  4037c0:	d00f      	beq.n	4037e2 <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START;
  4037c2:	2301      	movs	r3, #1
  4037c4:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  4037c6:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
  4037c8:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  4037ca:	f413 7f80 	tst.w	r3, #256	; 0x100
  4037ce:	d136      	bne.n	40383e <twi_master_read+0xb6>
  4037d0:	f247 512f 	movw	r1, #29999	; 0x752f
		timeout = TWI_TIMEOUT;
  4037d4:	f247 5730 	movw	r7, #30000	; 0x7530
		if (!(status & TWI_SR_RXRDY)) {
  4037d8:	f04f 0e01 	mov.w	lr, #1
			p_twi->TWI_CR = TWI_CR_STOP;
  4037dc:	f04f 0c02 	mov.w	ip, #2
  4037e0:	e019      	b.n	403816 <twi_master_read+0x8e>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  4037e2:	2303      	movs	r3, #3
  4037e4:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  4037e6:	2001      	movs	r0, #1
  4037e8:	e7ee      	b.n	4037c8 <twi_master_read+0x40>
		if (!(status & TWI_SR_RXRDY)) {
  4037ea:	460a      	mov	r2, r1
  4037ec:	4670      	mov	r0, lr
  4037ee:	e00c      	b.n	40380a <twi_master_read+0x82>
		if (cnt == 1  && !stop_sent) {
  4037f0:	b908      	cbnz	r0, 4037f6 <twi_master_read+0x6e>
			p_twi->TWI_CR = TWI_CR_STOP;
  4037f2:	f8c5 c000 	str.w	ip, [r5]
		if (!(status & TWI_SR_RXRDY)) {
  4037f6:	f013 0f02 	tst.w	r3, #2
  4037fa:	d0f6      	beq.n	4037ea <twi_master_read+0x62>
  4037fc:	4670      	mov	r0, lr
		*buffer++ = p_twi->TWI_RHR;
  4037fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403800:	7033      	strb	r3, [r6, #0]
		cnt--;
  403802:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
  403804:	3601      	adds	r6, #1
		timeout = TWI_TIMEOUT;
  403806:	463a      	mov	r2, r7
	while (cnt > 0) {
  403808:	b164      	cbz	r4, 403824 <twi_master_read+0x9c>
		status = p_twi->TWI_SR;
  40380a:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  40380c:	f413 7f80 	tst.w	r3, #256	; 0x100
  403810:	d111      	bne.n	403836 <twi_master_read+0xae>
		if (!timeout--) {
  403812:	1e51      	subs	r1, r2, #1
  403814:	b18a      	cbz	r2, 40383a <twi_master_read+0xb2>
		if (cnt == 1  && !stop_sent) {
  403816:	2c01      	cmp	r4, #1
  403818:	d0ea      	beq.n	4037f0 <twi_master_read+0x68>
		if (!(status & TWI_SR_RXRDY)) {
  40381a:	f013 0f02 	tst.w	r3, #2
  40381e:	d1ee      	bne.n	4037fe <twi_master_read+0x76>
  403820:	460a      	mov	r2, r1
  403822:	e7f1      	b.n	403808 <twi_master_read+0x80>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  403824:	6a2b      	ldr	r3, [r5, #32]
  403826:	f013 0f01 	tst.w	r3, #1
  40382a:	d0fb      	beq.n	403824 <twi_master_read+0x9c>
	p_twi->TWI_SR;
  40382c:	6a2b      	ldr	r3, [r5, #32]
	return TWI_SUCCESS;
  40382e:	e000      	b.n	403832 <twi_master_read+0xaa>
		return TWI_INVALID_ARGUMENT;
  403830:	2401      	movs	r4, #1
}
  403832:	4620      	mov	r0, r4
  403834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
  403836:	2405      	movs	r4, #5
  403838:	e7fb      	b.n	403832 <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
  40383a:	2409      	movs	r4, #9
  40383c:	e7f9      	b.n	403832 <twi_master_read+0xaa>
			return TWI_RECEIVE_NACK;
  40383e:	2405      	movs	r4, #5
  403840:	e7f7      	b.n	403832 <twi_master_read+0xaa>
  403842:	bf00      	nop
  403844:	00403765 	.word	0x00403765

00403848 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  403848:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40384a:	23ac      	movs	r3, #172	; 0xac
  40384c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40384e:	680b      	ldr	r3, [r1, #0]
  403850:	684a      	ldr	r2, [r1, #4]
  403852:	fbb3 f3f2 	udiv	r3, r3, r2
  403856:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  403858:	1e5c      	subs	r4, r3, #1
  40385a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40385e:	4294      	cmp	r4, r2
  403860:	d80b      	bhi.n	40387a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  403862:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  403864:	688b      	ldr	r3, [r1, #8]
  403866:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  403868:	f240 2302 	movw	r3, #514	; 0x202
  40386c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  403870:	2350      	movs	r3, #80	; 0x50
  403872:	6003      	str	r3, [r0, #0]

	return 0;
  403874:	2000      	movs	r0, #0
}
  403876:	bc10      	pop	{r4}
  403878:	4770      	bx	lr
		return 1;
  40387a:	2001      	movs	r0, #1
  40387c:	e7fb      	b.n	403876 <uart_init+0x2e>

0040387e <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  40387e:	2340      	movs	r3, #64	; 0x40
  403880:	6003      	str	r3, [r0, #0]
  403882:	4770      	bx	lr

00403884 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  403884:	2310      	movs	r3, #16
  403886:	6003      	str	r3, [r0, #0]
  403888:	4770      	bx	lr

0040388a <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  40388a:	6940      	ldr	r0, [r0, #20]
}
  40388c:	4770      	bx	lr

0040388e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40388e:	6943      	ldr	r3, [r0, #20]
  403890:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  403894:	bf1a      	itte	ne
  403896:	61c1      	strne	r1, [r0, #28]
	return 0;
  403898:	2000      	movne	r0, #0
		return 1;
  40389a:	2001      	moveq	r0, #1
}
  40389c:	4770      	bx	lr

0040389e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40389e:	6943      	ldr	r3, [r0, #20]
  4038a0:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4038a4:	bf1d      	ittte	ne
  4038a6:	6983      	ldrne	r3, [r0, #24]
  4038a8:	700b      	strbne	r3, [r1, #0]
	return 0;
  4038aa:	2000      	movne	r0, #0
		return 1;
  4038ac:	2001      	moveq	r0, #1
}
  4038ae:	4770      	bx	lr

004038b0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4038b0:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4038b2:	010b      	lsls	r3, r1, #4
  4038b4:	4293      	cmp	r3, r2
  4038b6:	d914      	bls.n	4038e2 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4038b8:	00c9      	lsls	r1, r1, #3
  4038ba:	084b      	lsrs	r3, r1, #1
  4038bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4038c0:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4038c4:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4038c6:	1e5c      	subs	r4, r3, #1
  4038c8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4038cc:	428c      	cmp	r4, r1
  4038ce:	d901      	bls.n	4038d4 <usart_set_async_baudrate+0x24>
		return 1;
  4038d0:	2001      	movs	r0, #1
  4038d2:	e017      	b.n	403904 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4038d4:	6841      	ldr	r1, [r0, #4]
  4038d6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4038da:	6041      	str	r1, [r0, #4]
  4038dc:	e00c      	b.n	4038f8 <usart_set_async_baudrate+0x48>
		return 1;
  4038de:	2001      	movs	r0, #1
  4038e0:	e010      	b.n	403904 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4038e2:	0859      	lsrs	r1, r3, #1
  4038e4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4038e8:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4038ec:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4038ee:	1e5c      	subs	r4, r3, #1
  4038f0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4038f4:	428c      	cmp	r4, r1
  4038f6:	d8f2      	bhi.n	4038de <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4038f8:	0412      	lsls	r2, r2, #16
  4038fa:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4038fe:	431a      	orrs	r2, r3
  403900:	6202      	str	r2, [r0, #32]

	return 0;
  403902:	2000      	movs	r0, #0
}
  403904:	bc10      	pop	{r4}
  403906:	4770      	bx	lr

00403908 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403908:	4b0a      	ldr	r3, [pc, #40]	; (403934 <usart_reset+0x2c>)
  40390a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40390e:	2300      	movs	r3, #0
  403910:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  403912:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403914:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  403916:	2388      	movs	r3, #136	; 0x88
  403918:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40391a:	2324      	movs	r3, #36	; 0x24
  40391c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40391e:	f44f 7380 	mov.w	r3, #256	; 0x100
  403922:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  403924:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  403928:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
  40392a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40392e:	6003      	str	r3, [r0, #0]
  403930:	4770      	bx	lr
  403932:	bf00      	nop
  403934:	55534100 	.word	0x55534100

00403938 <usart_init_rs232>:
{
  403938:	b570      	push	{r4, r5, r6, lr}
  40393a:	4605      	mov	r5, r0
  40393c:	460c      	mov	r4, r1
  40393e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  403940:	4b0f      	ldr	r3, [pc, #60]	; (403980 <usart_init_rs232+0x48>)
  403942:	4798      	blx	r3
	ul_reg_val = 0;
  403944:	2200      	movs	r2, #0
  403946:	4b0f      	ldr	r3, [pc, #60]	; (403984 <usart_init_rs232+0x4c>)
  403948:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40394a:	b1a4      	cbz	r4, 403976 <usart_init_rs232+0x3e>
  40394c:	4632      	mov	r2, r6
  40394e:	6821      	ldr	r1, [r4, #0]
  403950:	4628      	mov	r0, r5
  403952:	4b0d      	ldr	r3, [pc, #52]	; (403988 <usart_init_rs232+0x50>)
  403954:	4798      	blx	r3
  403956:	4602      	mov	r2, r0
  403958:	b978      	cbnz	r0, 40397a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40395a:	6863      	ldr	r3, [r4, #4]
  40395c:	68a1      	ldr	r1, [r4, #8]
  40395e:	430b      	orrs	r3, r1
  403960:	6921      	ldr	r1, [r4, #16]
  403962:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403964:	68e1      	ldr	r1, [r4, #12]
  403966:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403968:	4906      	ldr	r1, [pc, #24]	; (403984 <usart_init_rs232+0x4c>)
  40396a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  40396c:	6869      	ldr	r1, [r5, #4]
  40396e:	430b      	orrs	r3, r1
  403970:	606b      	str	r3, [r5, #4]
}
  403972:	4610      	mov	r0, r2
  403974:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  403976:	2201      	movs	r2, #1
  403978:	e7fb      	b.n	403972 <usart_init_rs232+0x3a>
  40397a:	2201      	movs	r2, #1
  40397c:	e7f9      	b.n	403972 <usart_init_rs232+0x3a>
  40397e:	bf00      	nop
  403980:	00403909 	.word	0x00403909
  403984:	2000619c 	.word	0x2000619c
  403988:	004038b1 	.word	0x004038b1

0040398c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  40398c:	2340      	movs	r3, #64	; 0x40
  40398e:	6003      	str	r3, [r0, #0]
  403990:	4770      	bx	lr

00403992 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  403992:	2310      	movs	r3, #16
  403994:	6003      	str	r3, [r0, #0]
  403996:	4770      	bx	lr

00403998 <usart_get_status>:
	return p_usart->US_CSR;
  403998:	6940      	ldr	r0, [r0, #20]
}
  40399a:	4770      	bx	lr

0040399c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40399c:	6943      	ldr	r3, [r0, #20]
  40399e:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
  4039a2:	bf1d      	ittte	ne
  4039a4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4039a8:	61c1      	strne	r1, [r0, #28]
	return 0;
  4039aa:	2000      	movne	r0, #0
		return 1;
  4039ac:	2001      	moveq	r0, #1
}
  4039ae:	4770      	bx	lr

004039b0 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4039b0:	6943      	ldr	r3, [r0, #20]
  4039b2:	f013 0f01 	tst.w	r3, #1
  4039b6:	d005      	beq.n	4039c4 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4039b8:	6983      	ldr	r3, [r0, #24]
  4039ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4039be:	600b      	str	r3, [r1, #0]
	return 0;
  4039c0:	2000      	movs	r0, #0
  4039c2:	4770      	bx	lr
		return 1;
  4039c4:	2001      	movs	r0, #1
}
  4039c6:	4770      	bx	lr

004039c8 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4039c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4039cc:	6043      	str	r3, [r0, #4]
  4039ce:	4770      	bx	lr

004039d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4039d0:	e7fe      	b.n	4039d0 <Dummy_Handler>
	...

004039d4 <Reset_Handler>:
{
  4039d4:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  4039d6:	4b21      	ldr	r3, [pc, #132]	; (403a5c <Reset_Handler+0x88>)
  4039d8:	4a21      	ldr	r2, [pc, #132]	; (403a60 <Reset_Handler+0x8c>)
  4039da:	429a      	cmp	r2, r3
  4039dc:	d928      	bls.n	403a30 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  4039de:	4b21      	ldr	r3, [pc, #132]	; (403a64 <Reset_Handler+0x90>)
  4039e0:	4a1e      	ldr	r2, [pc, #120]	; (403a5c <Reset_Handler+0x88>)
  4039e2:	429a      	cmp	r2, r3
  4039e4:	d20c      	bcs.n	403a00 <Reset_Handler+0x2c>
  4039e6:	3b01      	subs	r3, #1
  4039e8:	1a9b      	subs	r3, r3, r2
  4039ea:	f023 0303 	bic.w	r3, r3, #3
  4039ee:	3304      	adds	r3, #4
  4039f0:	4413      	add	r3, r2
  4039f2:	491b      	ldr	r1, [pc, #108]	; (403a60 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  4039f4:	f851 0b04 	ldr.w	r0, [r1], #4
  4039f8:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4039fc:	429a      	cmp	r2, r3
  4039fe:	d1f9      	bne.n	4039f4 <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  403a00:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  403a02:	4b19      	ldr	r3, [pc, #100]	; (403a68 <Reset_Handler+0x94>)
  403a04:	4a19      	ldr	r2, [pc, #100]	; (403a6c <Reset_Handler+0x98>)
  403a06:	429a      	cmp	r2, r3
  403a08:	d20a      	bcs.n	403a20 <Reset_Handler+0x4c>
  403a0a:	3b01      	subs	r3, #1
  403a0c:	1a9b      	subs	r3, r3, r2
  403a0e:	f023 0303 	bic.w	r3, r3, #3
  403a12:	3304      	adds	r3, #4
  403a14:	4413      	add	r3, r2
		*pDest++ = 0;
  403a16:	2100      	movs	r1, #0
  403a18:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  403a1c:	429a      	cmp	r2, r3
  403a1e:	d1fb      	bne.n	403a18 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  403a20:	4b13      	ldr	r3, [pc, #76]	; (403a70 <Reset_Handler+0x9c>)
  403a22:	4a14      	ldr	r2, [pc, #80]	; (403a74 <Reset_Handler+0xa0>)
  403a24:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  403a26:	4b14      	ldr	r3, [pc, #80]	; (403a78 <Reset_Handler+0xa4>)
  403a28:	4798      	blx	r3
	main();
  403a2a:	4b14      	ldr	r3, [pc, #80]	; (403a7c <Reset_Handler+0xa8>)
  403a2c:	4798      	blx	r3
  403a2e:	e7fe      	b.n	403a2e <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  403a30:	4b0a      	ldr	r3, [pc, #40]	; (403a5c <Reset_Handler+0x88>)
  403a32:	4a0b      	ldr	r2, [pc, #44]	; (403a60 <Reset_Handler+0x8c>)
  403a34:	429a      	cmp	r2, r3
  403a36:	d2e3      	bcs.n	403a00 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  403a38:	4b0a      	ldr	r3, [pc, #40]	; (403a64 <Reset_Handler+0x90>)
  403a3a:	4808      	ldr	r0, [pc, #32]	; (403a5c <Reset_Handler+0x88>)
  403a3c:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  403a3e:	4611      	mov	r1, r2
  403a40:	3a04      	subs	r2, #4
  403a42:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  403a44:	2800      	cmp	r0, #0
  403a46:	d0db      	beq.n	403a00 <Reset_Handler+0x2c>
  403a48:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  403a4c:	f852 0904 	ldr.w	r0, [r2], #-4
  403a50:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  403a54:	42ca      	cmn	r2, r1
  403a56:	d1f9      	bne.n	403a4c <Reset_Handler+0x78>
  403a58:	e7d2      	b.n	403a00 <Reset_Handler+0x2c>
  403a5a:	bf00      	nop
  403a5c:	20000000 	.word	0x20000000
  403a60:	0040b3f4 	.word	0x0040b3f4
  403a64:	20000e30 	.word	0x20000e30
  403a68:	2000625c 	.word	0x2000625c
  403a6c:	20000e30 	.word	0x20000e30
  403a70:	e000ed00 	.word	0xe000ed00
  403a74:	00400000 	.word	0x00400000
  403a78:	00406445 	.word	0x00406445
  403a7c:	0040594d 	.word	0x0040594d

00403a80 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  403a80:	4b3c      	ldr	r3, [pc, #240]	; (403b74 <SystemCoreClockUpdate+0xf4>)
  403a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403a84:	f003 0303 	and.w	r3, r3, #3
  403a88:	2b03      	cmp	r3, #3
  403a8a:	d80e      	bhi.n	403aaa <SystemCoreClockUpdate+0x2a>
  403a8c:	e8df f003 	tbb	[pc, r3]
  403a90:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  403a94:	4b38      	ldr	r3, [pc, #224]	; (403b78 <SystemCoreClockUpdate+0xf8>)
  403a96:	695b      	ldr	r3, [r3, #20]
  403a98:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403a9c:	bf14      	ite	ne
  403a9e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403aa2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403aa6:	4b35      	ldr	r3, [pc, #212]	; (403b7c <SystemCoreClockUpdate+0xfc>)
  403aa8:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  403aaa:	4b32      	ldr	r3, [pc, #200]	; (403b74 <SystemCoreClockUpdate+0xf4>)
  403aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403ab2:	2b70      	cmp	r3, #112	; 0x70
  403ab4:	d055      	beq.n	403b62 <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403ab6:	4b2f      	ldr	r3, [pc, #188]	; (403b74 <SystemCoreClockUpdate+0xf4>)
  403ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  403aba:	4930      	ldr	r1, [pc, #192]	; (403b7c <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403abc:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  403ac0:	680b      	ldr	r3, [r1, #0]
  403ac2:	40d3      	lsrs	r3, r2
  403ac4:	600b      	str	r3, [r1, #0]
  403ac6:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403ac8:	4b2a      	ldr	r3, [pc, #168]	; (403b74 <SystemCoreClockUpdate+0xf4>)
  403aca:	6a1b      	ldr	r3, [r3, #32]
  403acc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403ad0:	d003      	beq.n	403ada <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  403ad2:	4a2b      	ldr	r2, [pc, #172]	; (403b80 <SystemCoreClockUpdate+0x100>)
  403ad4:	4b29      	ldr	r3, [pc, #164]	; (403b7c <SystemCoreClockUpdate+0xfc>)
  403ad6:	601a      	str	r2, [r3, #0]
  403ad8:	e7e7      	b.n	403aaa <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403ada:	4a2a      	ldr	r2, [pc, #168]	; (403b84 <SystemCoreClockUpdate+0x104>)
  403adc:	4b27      	ldr	r3, [pc, #156]	; (403b7c <SystemCoreClockUpdate+0xfc>)
  403ade:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403ae0:	4b24      	ldr	r3, [pc, #144]	; (403b74 <SystemCoreClockUpdate+0xf4>)
  403ae2:	6a1b      	ldr	r3, [r3, #32]
  403ae4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403ae8:	2b10      	cmp	r3, #16
  403aea:	d005      	beq.n	403af8 <SystemCoreClockUpdate+0x78>
  403aec:	2b20      	cmp	r3, #32
  403aee:	d1dc      	bne.n	403aaa <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403af0:	4a23      	ldr	r2, [pc, #140]	; (403b80 <SystemCoreClockUpdate+0x100>)
  403af2:	4b22      	ldr	r3, [pc, #136]	; (403b7c <SystemCoreClockUpdate+0xfc>)
  403af4:	601a      	str	r2, [r3, #0]
			break;
  403af6:	e7d8      	b.n	403aaa <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403af8:	4a23      	ldr	r2, [pc, #140]	; (403b88 <SystemCoreClockUpdate+0x108>)
  403afa:	4b20      	ldr	r3, [pc, #128]	; (403b7c <SystemCoreClockUpdate+0xfc>)
  403afc:	601a      	str	r2, [r3, #0]
			break;
  403afe:	e7d4      	b.n	403aaa <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403b00:	4b1c      	ldr	r3, [pc, #112]	; (403b74 <SystemCoreClockUpdate+0xf4>)
  403b02:	6a1b      	ldr	r3, [r3, #32]
  403b04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403b08:	d018      	beq.n	403b3c <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  403b0a:	4a1d      	ldr	r2, [pc, #116]	; (403b80 <SystemCoreClockUpdate+0x100>)
  403b0c:	4b1b      	ldr	r3, [pc, #108]	; (403b7c <SystemCoreClockUpdate+0xfc>)
  403b0e:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  403b10:	4b18      	ldr	r3, [pc, #96]	; (403b74 <SystemCoreClockUpdate+0xf4>)
  403b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403b14:	f003 0303 	and.w	r3, r3, #3
  403b18:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403b1a:	4a16      	ldr	r2, [pc, #88]	; (403b74 <SystemCoreClockUpdate+0xf4>)
  403b1c:	bf07      	ittee	eq
  403b1e:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  403b20:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  403b22:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403b24:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  403b26:	4815      	ldr	r0, [pc, #84]	; (403b7c <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  403b28:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  403b2c:	6803      	ldr	r3, [r0, #0]
  403b2e:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  403b32:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403b34:	fbb3 f3f2 	udiv	r3, r3, r2
  403b38:	6003      	str	r3, [r0, #0]
  403b3a:	e7b6      	b.n	403aaa <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403b3c:	4a11      	ldr	r2, [pc, #68]	; (403b84 <SystemCoreClockUpdate+0x104>)
  403b3e:	4b0f      	ldr	r3, [pc, #60]	; (403b7c <SystemCoreClockUpdate+0xfc>)
  403b40:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403b42:	4b0c      	ldr	r3, [pc, #48]	; (403b74 <SystemCoreClockUpdate+0xf4>)
  403b44:	6a1b      	ldr	r3, [r3, #32]
  403b46:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403b4a:	2b10      	cmp	r3, #16
  403b4c:	d005      	beq.n	403b5a <SystemCoreClockUpdate+0xda>
  403b4e:	2b20      	cmp	r3, #32
  403b50:	d1de      	bne.n	403b10 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403b52:	4a0b      	ldr	r2, [pc, #44]	; (403b80 <SystemCoreClockUpdate+0x100>)
  403b54:	4b09      	ldr	r3, [pc, #36]	; (403b7c <SystemCoreClockUpdate+0xfc>)
  403b56:	601a      	str	r2, [r3, #0]
					break;
  403b58:	e7da      	b.n	403b10 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403b5a:	4a0b      	ldr	r2, [pc, #44]	; (403b88 <SystemCoreClockUpdate+0x108>)
  403b5c:	4b07      	ldr	r3, [pc, #28]	; (403b7c <SystemCoreClockUpdate+0xfc>)
  403b5e:	601a      	str	r2, [r3, #0]
					break;
  403b60:	e7d6      	b.n	403b10 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  403b62:	4a06      	ldr	r2, [pc, #24]	; (403b7c <SystemCoreClockUpdate+0xfc>)
  403b64:	6813      	ldr	r3, [r2, #0]
  403b66:	4909      	ldr	r1, [pc, #36]	; (403b8c <SystemCoreClockUpdate+0x10c>)
  403b68:	fba1 1303 	umull	r1, r3, r1, r3
  403b6c:	085b      	lsrs	r3, r3, #1
  403b6e:	6013      	str	r3, [r2, #0]
  403b70:	4770      	bx	lr
  403b72:	bf00      	nop
  403b74:	400e0400 	.word	0x400e0400
  403b78:	400e1410 	.word	0x400e1410
  403b7c:	20000480 	.word	0x20000480
  403b80:	00b71b00 	.word	0x00b71b00
  403b84:	003d0900 	.word	0x003d0900
  403b88:	007a1200 	.word	0x007a1200
  403b8c:	aaaaaaab 	.word	0xaaaaaaab

00403b90 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403b90:	4b1a      	ldr	r3, [pc, #104]	; (403bfc <system_init_flash+0x6c>)
  403b92:	4298      	cmp	r0, r3
  403b94:	d914      	bls.n	403bc0 <system_init_flash+0x30>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  403b96:	4b1a      	ldr	r3, [pc, #104]	; (403c00 <system_init_flash+0x70>)
  403b98:	4298      	cmp	r0, r3
  403b9a:	d919      	bls.n	403bd0 <system_init_flash+0x40>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  403b9c:	4b19      	ldr	r3, [pc, #100]	; (403c04 <system_init_flash+0x74>)
  403b9e:	4298      	cmp	r0, r3
  403ba0:	d91d      	bls.n	403bde <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  403ba2:	4b19      	ldr	r3, [pc, #100]	; (403c08 <system_init_flash+0x78>)
  403ba4:	4298      	cmp	r0, r3
  403ba6:	d921      	bls.n	403bec <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  403ba8:	4b18      	ldr	r3, [pc, #96]	; (403c0c <system_init_flash+0x7c>)
  403baa:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403bac:	bf94      	ite	ls
  403bae:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403bb2:	4b17      	ldrhi	r3, [pc, #92]	; (403c10 <system_init_flash+0x80>)
  403bb4:	4a17      	ldr	r2, [pc, #92]	; (403c14 <system_init_flash+0x84>)
  403bb6:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403bb8:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403bbc:	6013      	str	r3, [r2, #0]
  403bbe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403bc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  403bc4:	4a13      	ldr	r2, [pc, #76]	; (403c14 <system_init_flash+0x84>)
  403bc6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403bc8:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403bcc:	6013      	str	r3, [r2, #0]
  403bce:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403bd0:	4b11      	ldr	r3, [pc, #68]	; (403c18 <system_init_flash+0x88>)
  403bd2:	4a10      	ldr	r2, [pc, #64]	; (403c14 <system_init_flash+0x84>)
  403bd4:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403bd6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403bda:	6013      	str	r3, [r2, #0]
  403bdc:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403bde:	4b0f      	ldr	r3, [pc, #60]	; (403c1c <system_init_flash+0x8c>)
  403be0:	4a0c      	ldr	r2, [pc, #48]	; (403c14 <system_init_flash+0x84>)
  403be2:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403be4:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403be8:	6013      	str	r3, [r2, #0]
  403bea:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403bec:	4b0c      	ldr	r3, [pc, #48]	; (403c20 <system_init_flash+0x90>)
  403bee:	4a09      	ldr	r2, [pc, #36]	; (403c14 <system_init_flash+0x84>)
  403bf0:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403bf2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403bf6:	6013      	str	r3, [r2, #0]
  403bf8:	4770      	bx	lr
  403bfa:	bf00      	nop
  403bfc:	01312cff 	.word	0x01312cff
  403c00:	026259ff 	.word	0x026259ff
  403c04:	039386ff 	.word	0x039386ff
  403c08:	04c4b3ff 	.word	0x04c4b3ff
  403c0c:	05f5e0ff 	.word	0x05f5e0ff
  403c10:	04000500 	.word	0x04000500
  403c14:	400e0a00 	.word	0x400e0a00
  403c18:	04000100 	.word	0x04000100
  403c1c:	04000200 	.word	0x04000200
  403c20:	04000300 	.word	0x04000300

00403c24 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403c24:	4b0a      	ldr	r3, [pc, #40]	; (403c50 <_sbrk+0x2c>)
  403c26:	681b      	ldr	r3, [r3, #0]
  403c28:	b153      	cbz	r3, 403c40 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  403c2a:	4b09      	ldr	r3, [pc, #36]	; (403c50 <_sbrk+0x2c>)
  403c2c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403c2e:	181a      	adds	r2, r3, r0
  403c30:	4908      	ldr	r1, [pc, #32]	; (403c54 <_sbrk+0x30>)
  403c32:	4291      	cmp	r1, r2
  403c34:	db08      	blt.n	403c48 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  403c36:	4610      	mov	r0, r2
  403c38:	4a05      	ldr	r2, [pc, #20]	; (403c50 <_sbrk+0x2c>)
  403c3a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403c3c:	4618      	mov	r0, r3
  403c3e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403c40:	4a05      	ldr	r2, [pc, #20]	; (403c58 <_sbrk+0x34>)
  403c42:	4b03      	ldr	r3, [pc, #12]	; (403c50 <_sbrk+0x2c>)
  403c44:	601a      	str	r2, [r3, #0]
  403c46:	e7f0      	b.n	403c2a <_sbrk+0x6>
		return (caddr_t) -1;	
  403c48:	f04f 30ff 	mov.w	r0, #4294967295
}
  403c4c:	4770      	bx	lr
  403c4e:	bf00      	nop
  403c50:	200061a0 	.word	0x200061a0
  403c54:	20013ffc 	.word	0x20013ffc
  403c58:	20009260 	.word	0x20009260

00403c5c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  403c5c:	b510      	push	{r4, lr}
  403c5e:	4604      	mov	r4, r0
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  403c60:	2100      	movs	r1, #0
  403c62:	480f      	ldr	r0, [pc, #60]	; (403ca0 <disk_initialize+0x44>)
  403c64:	4b0f      	ldr	r3, [pc, #60]	; (403ca4 <disk_initialize+0x48>)
  403c66:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  403c68:	2c01      	cmp	r4, #1
  403c6a:	d901      	bls.n	403c70 <disk_initialize+0x14>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  403c6c:	2001      	movs	r0, #1
  403c6e:	bd10      	pop	{r4, pc}
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  403c70:	4620      	mov	r0, r4
  403c72:	4b0d      	ldr	r3, [pc, #52]	; (403ca8 <disk_initialize+0x4c>)
  403c74:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  403c76:	2803      	cmp	r0, #3
  403c78:	d106      	bne.n	403c88 <disk_initialize+0x2c>
		mem_status = mem_test_unit_ready(drv);
  403c7a:	4620      	mov	r0, r4
  403c7c:	4b0a      	ldr	r3, [pc, #40]	; (403ca8 <disk_initialize+0x4c>)
  403c7e:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  403c80:	2803      	cmp	r0, #3
  403c82:	d101      	bne.n	403c88 <disk_initialize+0x2c>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  403c84:	2001      	movs	r0, #1
  403c86:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  403c88:	b938      	cbnz	r0, 403c9a <disk_initialize+0x3e>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  403c8a:	4620      	mov	r0, r4
  403c8c:	4b07      	ldr	r3, [pc, #28]	; (403cac <disk_initialize+0x50>)
  403c8e:	4798      	blx	r3
  403c90:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  403c92:	bf14      	ite	ne
  403c94:	2004      	movne	r0, #4
  403c96:	2000      	moveq	r0, #0
  403c98:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  403c9a:	2001      	movs	r0, #1
}
  403c9c:	bd10      	pop	{r4, pc}
  403c9e:	bf00      	nop
  403ca0:	400e1460 	.word	0x400e1460
  403ca4:	00403315 	.word	0x00403315
  403ca8:	00402b7d 	.word	0x00402b7d
  403cac:	00402bad 	.word	0x00402bad

00403cb0 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  403cb0:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  403cb2:	4b05      	ldr	r3, [pc, #20]	; (403cc8 <disk_status+0x18>)
  403cb4:	4798      	blx	r3
  403cb6:	b120      	cbz	r0, 403cc2 <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  403cb8:	2802      	cmp	r0, #2
  403cba:	bf0c      	ite	eq
  403cbc:	2003      	moveq	r0, #3
  403cbe:	2001      	movne	r0, #1
  403cc0:	bd08      	pop	{r3, pc}
		return 0;
  403cc2:	2000      	movs	r0, #0
	}
}
  403cc4:	bd08      	pop	{r3, pc}
  403cc6:	bf00      	nop
  403cc8:	00402b7d 	.word	0x00402b7d

00403ccc <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  403ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403cd0:	b083      	sub	sp, #12
  403cd2:	4680      	mov	r8, r0
  403cd4:	460d      	mov	r5, r1
  403cd6:	4614      	mov	r4, r2
  403cd8:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  403cda:	4b15      	ldr	r3, [pc, #84]	; (403d30 <disk_read+0x64>)
  403cdc:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  403cde:	b918      	cbnz	r0, 403ce8 <disk_read+0x1c>
		return RES_ERROR;
  403ce0:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  403ce2:	b003      	add	sp, #12
  403ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ce8:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  403cea:	a901      	add	r1, sp, #4
  403cec:	4640      	mov	r0, r8
  403cee:	4b11      	ldr	r3, [pc, #68]	; (403d34 <disk_read+0x68>)
  403cf0:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  403cf2:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  403cf4:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  403cf8:	9b01      	ldr	r3, [sp, #4]
  403cfa:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  403cfe:	429a      	cmp	r2, r3
  403d00:	d901      	bls.n	403d06 <disk_read+0x3a>
		return RES_PARERR;
  403d02:	2004      	movs	r0, #4
  403d04:	e7ed      	b.n	403ce2 <disk_read+0x16>
	for (i = 0; i < count; i++) {
  403d06:	46ba      	mov	sl, r7
  403d08:	b177      	cbz	r7, 403d28 <disk_read+0x5c>
  403d0a:	0276      	lsls	r6, r6, #9
  403d0c:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  403d0e:	f8df b028 	ldr.w	fp, [pc, #40]	; 403d38 <disk_read+0x6c>
  403d12:	462a      	mov	r2, r5
  403d14:	4621      	mov	r1, r4
  403d16:	4640      	mov	r0, r8
  403d18:	47d8      	blx	fp
  403d1a:	b938      	cbnz	r0, 403d2c <disk_read+0x60>
	for (i = 0; i < count; i++) {
  403d1c:	3701      	adds	r7, #1
  403d1e:	444c      	add	r4, r9
  403d20:	4435      	add	r5, r6
  403d22:	4557      	cmp	r7, sl
  403d24:	d1f5      	bne.n	403d12 <disk_read+0x46>
  403d26:	e7dc      	b.n	403ce2 <disk_read+0x16>
	return RES_OK;
  403d28:	2000      	movs	r0, #0
  403d2a:	e7da      	b.n	403ce2 <disk_read+0x16>
			return RES_ERROR;
  403d2c:	2001      	movs	r0, #1
  403d2e:	e7d8      	b.n	403ce2 <disk_read+0x16>
  403d30:	00402ba5 	.word	0x00402ba5
  403d34:	00402b91 	.word	0x00402b91
  403d38:	00402bc1 	.word	0x00402bc1

00403d3c <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  403d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d40:	b083      	sub	sp, #12
  403d42:	4680      	mov	r8, r0
  403d44:	460d      	mov	r5, r1
  403d46:	4614      	mov	r4, r2
  403d48:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  403d4a:	4b15      	ldr	r3, [pc, #84]	; (403da0 <disk_write+0x64>)
  403d4c:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  403d4e:	b918      	cbnz	r0, 403d58 <disk_write+0x1c>
		return RES_ERROR;
  403d50:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  403d52:	b003      	add	sp, #12
  403d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d58:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  403d5a:	a901      	add	r1, sp, #4
  403d5c:	4640      	mov	r0, r8
  403d5e:	4b11      	ldr	r3, [pc, #68]	; (403da4 <disk_write+0x68>)
  403d60:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  403d62:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  403d64:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  403d68:	9b01      	ldr	r3, [sp, #4]
  403d6a:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  403d6e:	429a      	cmp	r2, r3
  403d70:	d901      	bls.n	403d76 <disk_write+0x3a>
		return RES_PARERR;
  403d72:	2004      	movs	r0, #4
  403d74:	e7ed      	b.n	403d52 <disk_write+0x16>
	for (i = 0; i < count; i++) {
  403d76:	46ba      	mov	sl, r7
  403d78:	b177      	cbz	r7, 403d98 <disk_write+0x5c>
  403d7a:	0276      	lsls	r6, r6, #9
  403d7c:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  403d7e:	f8df b028 	ldr.w	fp, [pc, #40]	; 403da8 <disk_write+0x6c>
  403d82:	462a      	mov	r2, r5
  403d84:	4621      	mov	r1, r4
  403d86:	4640      	mov	r0, r8
  403d88:	47d8      	blx	fp
  403d8a:	b938      	cbnz	r0, 403d9c <disk_write+0x60>
	for (i = 0; i < count; i++) {
  403d8c:	3701      	adds	r7, #1
  403d8e:	444c      	add	r4, r9
  403d90:	4435      	add	r5, r6
  403d92:	4557      	cmp	r7, sl
  403d94:	d1f5      	bne.n	403d82 <disk_write+0x46>
  403d96:	e7dc      	b.n	403d52 <disk_write+0x16>
	return RES_OK;
  403d98:	2000      	movs	r0, #0
  403d9a:	e7da      	b.n	403d52 <disk_write+0x16>
			return RES_ERROR;
  403d9c:	2001      	movs	r0, #1
  403d9e:	e7d8      	b.n	403d52 <disk_write+0x16>
  403da0:	00402ba5 	.word	0x00402ba5
  403da4:	00402b91 	.word	0x00402b91
  403da8:	00402bd9 	.word	0x00402bd9

00403dac <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  403dac:	b510      	push	{r4, lr}
  403dae:	b082      	sub	sp, #8
  403db0:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  403db2:	2903      	cmp	r1, #3
  403db4:	d827      	bhi.n	403e06 <disk_ioctl+0x5a>
  403db6:	e8df f001 	tbb	[pc, r1]
  403dba:	071f      	.short	0x071f
  403dbc:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  403dbe:	2301      	movs	r3, #1
  403dc0:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  403dc2:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  403dc4:	b002      	add	sp, #8
  403dc6:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  403dc8:	a901      	add	r1, sp, #4
  403dca:	4b11      	ldr	r3, [pc, #68]	; (403e10 <disk_ioctl+0x64>)
  403dcc:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  403dce:	9b01      	ldr	r3, [sp, #4]
  403dd0:	3301      	adds	r3, #1
  403dd2:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  403dd4:	2000      	movs	r0, #0
	break;
  403dd6:	e7f5      	b.n	403dc4 <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  403dd8:	4b0e      	ldr	r3, [pc, #56]	; (403e14 <disk_ioctl+0x68>)
  403dda:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  403ddc:	2808      	cmp	r0, #8
  403dde:	d814      	bhi.n	403e0a <disk_ioctl+0x5e>
  403de0:	f44f 738b 	mov.w	r3, #278	; 0x116
  403de4:	fa23 f000 	lsr.w	r0, r3, r0
  403de8:	f010 0f01 	tst.w	r0, #1
  403dec:	d101      	bne.n	403df2 <disk_ioctl+0x46>
			return RES_ERROR;
  403dee:	2001      	movs	r0, #1
  403df0:	e7e8      	b.n	403dc4 <disk_ioctl+0x18>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  403df2:	2000      	movs	r0, #0
  403df4:	7020      	strb	r0, [r4, #0]
	break;
  403df6:	e7e5      	b.n	403dc4 <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  403df8:	4b07      	ldr	r3, [pc, #28]	; (403e18 <disk_ioctl+0x6c>)
  403dfa:	4798      	blx	r3
  403dfc:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  403dfe:	bf0c      	ite	eq
  403e00:	2000      	moveq	r0, #0
  403e02:	2003      	movne	r0, #3
  403e04:	e7de      	b.n	403dc4 <disk_ioctl+0x18>
		res = RES_PARERR;
  403e06:	2004      	movs	r0, #4
  403e08:	e7dc      	b.n	403dc4 <disk_ioctl+0x18>
			return RES_ERROR;
  403e0a:	2001      	movs	r0, #1
  403e0c:	e7da      	b.n	403dc4 <disk_ioctl+0x18>
  403e0e:	bf00      	nop
  403e10:	00402b91 	.word	0x00402b91
  403e14:	00402ba5 	.word	0x00402ba5
  403e18:	00402b7d 	.word	0x00402b7d

00403e1c <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  403e1c:	b530      	push	{r4, r5, lr}
  403e1e:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  403e20:	4c11      	ldr	r4, [pc, #68]	; (403e68 <get_fattime+0x4c>)
  403e22:	ab07      	add	r3, sp, #28
  403e24:	aa08      	add	r2, sp, #32
  403e26:	a909      	add	r1, sp, #36	; 0x24
  403e28:	4620      	mov	r0, r4
  403e2a:	4d10      	ldr	r5, [pc, #64]	; (403e6c <get_fattime+0x50>)
  403e2c:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  403e2e:	ab03      	add	r3, sp, #12
  403e30:	9300      	str	r3, [sp, #0]
  403e32:	ab04      	add	r3, sp, #16
  403e34:	aa05      	add	r2, sp, #20
  403e36:	a906      	add	r1, sp, #24
  403e38:	4620      	mov	r0, r4
  403e3a:	4c0d      	ldr	r4, [pc, #52]	; (403e70 <get_fattime+0x54>)
  403e3c:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  403e3e:	9b04      	ldr	r3, [sp, #16]
  403e40:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  403e42:	9805      	ldr	r0, [sp, #20]
  403e44:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  403e48:	9809      	ldr	r0, [sp, #36]	; 0x24
  403e4a:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  403e4e:	9808      	ldr	r0, [sp, #32]
  403e50:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  403e54:	9807      	ldr	r0, [sp, #28]
  403e56:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  403e5a:	9806      	ldr	r0, [sp, #24]
  403e5c:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  403e60:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  403e64:	b00b      	add	sp, #44	; 0x2c
  403e66:	bd30      	pop	{r4, r5, pc}
  403e68:	400e1460 	.word	0x400e1460
  403e6c:	0040332b 	.word	0x0040332b
  403e70:	00403419 	.word	0x00403419

00403e74 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  403e74:	b13a      	cbz	r2, 403e86 <mem_cpy+0x12>
  403e76:	3801      	subs	r0, #1
  403e78:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  403e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
  403e7e:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  403e82:	4291      	cmp	r1, r2
  403e84:	d1f9      	bne.n	403e7a <mem_cpy+0x6>
  403e86:	4770      	bx	lr

00403e88 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  403e88:	b122      	cbz	r2, 403e94 <mem_set+0xc>
  403e8a:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  403e8c:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
  403e90:	4282      	cmp	r2, r0
  403e92:	d1fb      	bne.n	403e8c <mem_set+0x4>
  403e94:	4770      	bx	lr

00403e96 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  403e96:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  403e98:	6983      	ldr	r3, [r0, #24]
  403e9a:	3b02      	subs	r3, #2
  403e9c:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
  403e9e:	bf3d      	ittte	cc
  403ea0:	7883      	ldrbcc	r3, [r0, #2]
  403ea2:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
  403ea4:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  403ea8:	2000      	movcs	r0, #0
}
  403eaa:	4770      	bx	lr

00403eac <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  403eac:	4602      	mov	r2, r0
  403eae:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  403eb2:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  403eb4:	01c3      	lsls	r3, r0, #7
  403eb6:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  403eba:	f812 0b01 	ldrb.w	r0, [r2], #1
  403ebe:	fa50 f383 	uxtab	r3, r0, r3
  403ec2:	b2d8      	uxtb	r0, r3
  403ec4:	428a      	cmp	r2, r1
  403ec6:	d1f5      	bne.n	403eb4 <sum_sfn+0x8>
	return sum;
}
  403ec8:	4770      	bx	lr
	...

00403ecc <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  403ecc:	b198      	cbz	r0, 403ef6 <validate+0x2a>
{
  403ece:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  403ed0:	7802      	ldrb	r2, [r0, #0]
  403ed2:	b90a      	cbnz	r2, 403ed8 <validate+0xc>
		return FR_INVALID_OBJECT;
  403ed4:	2009      	movs	r0, #9
  403ed6:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  403ed8:	88c2      	ldrh	r2, [r0, #6]
  403eda:	428a      	cmp	r2, r1
  403edc:	d001      	beq.n	403ee2 <validate+0x16>
		return FR_INVALID_OBJECT;
  403ede:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  403ee0:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  403ee2:	7840      	ldrb	r0, [r0, #1]
  403ee4:	4b05      	ldr	r3, [pc, #20]	; (403efc <validate+0x30>)
  403ee6:	4798      	blx	r3
  403ee8:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  403eec:	2800      	cmp	r0, #0
  403eee:	bf14      	ite	ne
  403ef0:	2003      	movne	r0, #3
  403ef2:	2000      	moveq	r0, #0
  403ef4:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  403ef6:	2009      	movs	r0, #9
  403ef8:	4770      	bx	lr
  403efa:	bf00      	nop
  403efc:	00403cb1 	.word	0x00403cb1

00403f00 <check_fs>:
{
  403f00:	b538      	push	{r3, r4, r5, lr}
  403f02:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  403f04:	2301      	movs	r3, #1
  403f06:	460a      	mov	r2, r1
  403f08:	f100 0130 	add.w	r1, r0, #48	; 0x30
  403f0c:	7840      	ldrb	r0, [r0, #1]
  403f0e:	4d1d      	ldr	r5, [pc, #116]	; (403f84 <check_fs+0x84>)
  403f10:	47a8      	blx	r5
  403f12:	b108      	cbz	r0, 403f18 <check_fs+0x18>
		return 3;
  403f14:	2003      	movs	r0, #3
  403f16:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  403f18:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  403f1c:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  403f20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403f24:	b21b      	sxth	r3, r3
  403f26:	4a18      	ldr	r2, [pc, #96]	; (403f88 <check_fs+0x88>)
  403f28:	4293      	cmp	r3, r2
  403f2a:	d001      	beq.n	403f30 <check_fs+0x30>
		return 2;
  403f2c:	2002      	movs	r0, #2
  403f2e:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  403f30:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  403f34:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  403f38:	041b      	lsls	r3, r3, #16
  403f3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  403f3e:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  403f42:	4313      	orrs	r3, r2
  403f44:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  403f48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403f4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  403f50:	4a0e      	ldr	r2, [pc, #56]	; (403f8c <check_fs+0x8c>)
  403f52:	4293      	cmp	r3, r2
  403f54:	d013      	beq.n	403f7e <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  403f56:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  403f5a:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  403f5e:	0400      	lsls	r0, r0, #16
  403f60:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  403f64:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  403f68:	4318      	orrs	r0, r3
  403f6a:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  403f6e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  403f72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  403f76:	1a80      	subs	r0, r0, r2
  403f78:	bf18      	it	ne
  403f7a:	2001      	movne	r0, #1
  403f7c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  403f7e:	2000      	movs	r0, #0
}
  403f80:	bd38      	pop	{r3, r4, r5, pc}
  403f82:	bf00      	nop
  403f84:	00403ccd 	.word	0x00403ccd
  403f88:	ffffaa55 	.word	0xffffaa55
  403f8c:	00544146 	.word	0x00544146

00403f90 <chk_mounted>:
{
  403f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  403f92:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  403f94:	781c      	ldrb	r4, [r3, #0]
  403f96:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  403f98:	2c09      	cmp	r4, #9
  403f9a:	d80a      	bhi.n	403fb2 <chk_mounted+0x22>
  403f9c:	785d      	ldrb	r5, [r3, #1]
  403f9e:	2d3a      	cmp	r5, #58	; 0x3a
  403fa0:	d001      	beq.n	403fa6 <chk_mounted+0x16>
  403fa2:	2400      	movs	r4, #0
  403fa4:	e006      	b.n	403fb4 <chk_mounted+0x24>
		p += 2; *path = p;				/* Return pointer to the path name */
  403fa6:	3302      	adds	r3, #2
  403fa8:	6003      	str	r3, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  403faa:	2c07      	cmp	r4, #7
  403fac:	d902      	bls.n	403fb4 <chk_mounted+0x24>
		return FR_INVALID_DRIVE;
  403fae:	200b      	movs	r0, #11
  403fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403fb2:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  403fb4:	4bad      	ldr	r3, [pc, #692]	; (40426c <chk_mounted+0x2dc>)
  403fb6:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  403fba:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  403fbc:	2d00      	cmp	r5, #0
  403fbe:	f000 813d 	beq.w	40423c <chk_mounted+0x2ac>
  403fc2:	4616      	mov	r6, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  403fc4:	782b      	ldrb	r3, [r5, #0]
  403fc6:	b17b      	cbz	r3, 403fe8 <chk_mounted+0x58>
		stat = disk_status(fs->drv);
  403fc8:	7868      	ldrb	r0, [r5, #1]
  403fca:	4ba9      	ldr	r3, [pc, #676]	; (404270 <chk_mounted+0x2e0>)
  403fcc:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  403fce:	f010 0f01 	tst.w	r0, #1
  403fd2:	d109      	bne.n	403fe8 <chk_mounted+0x58>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  403fd4:	2e00      	cmp	r6, #0
  403fd6:	f000 8133 	beq.w	404240 <chk_mounted+0x2b0>
  403fda:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  403fde:	2800      	cmp	r0, #0
  403fe0:	bf0c      	ite	eq
  403fe2:	2000      	moveq	r0, #0
  403fe4:	200a      	movne	r0, #10
  403fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  403fe8:	2300      	movs	r3, #0
  403fea:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  403fec:	b2e0      	uxtb	r0, r4
  403fee:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  403ff0:	4ba0      	ldr	r3, [pc, #640]	; (404274 <chk_mounted+0x2e4>)
  403ff2:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  403ff4:	f010 0f01 	tst.w	r0, #1
  403ff8:	d001      	beq.n	403ffe <chk_mounted+0x6e>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  403ffa:	2003      	movs	r0, #3
  403ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  403ffe:	b126      	cbz	r6, 40400a <chk_mounted+0x7a>
  404000:	f010 0f04 	tst.w	r0, #4
  404004:	d001      	beq.n	40400a <chk_mounted+0x7a>
		return FR_WRITE_PROTECTED;
  404006:	200a      	movs	r0, #10
  404008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  40400a:	2100      	movs	r1, #0
  40400c:	4628      	mov	r0, r5
  40400e:	4b9a      	ldr	r3, [pc, #616]	; (404278 <chk_mounted+0x2e8>)
  404010:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  404012:	2801      	cmp	r0, #1
  404014:	d006      	beq.n	404024 <chk_mounted+0x94>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  404016:	2400      	movs	r4, #0
	if (fmt == 3) return FR_DISK_ERR;
  404018:	2803      	cmp	r0, #3
  40401a:	f000 8113 	beq.w	404244 <chk_mounted+0x2b4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  40401e:	b1c8      	cbz	r0, 404054 <chk_mounted+0xc4>
  404020:	200d      	movs	r0, #13
  404022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  404024:	f895 31f2 	ldrb.w	r3, [r5, #498]	; 0x1f2
  404028:	b90b      	cbnz	r3, 40402e <chk_mounted+0x9e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  40402a:	200d      	movs	r0, #13
  40402c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  40402e:	f895 31f9 	ldrb.w	r3, [r5, #505]	; 0x1f9
  404032:	f895 41f8 	ldrb.w	r4, [r5, #504]	; 0x1f8
  404036:	0424      	lsls	r4, r4, #16
  404038:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  40403c:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
  404040:	431c      	orrs	r4, r3
  404042:	f895 31f7 	ldrb.w	r3, [r5, #503]	; 0x1f7
  404046:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  40404a:	4621      	mov	r1, r4
  40404c:	4628      	mov	r0, r5
  40404e:	4b8a      	ldr	r3, [pc, #552]	; (404278 <chk_mounted+0x2e8>)
  404050:	4798      	blx	r3
  404052:	e7e1      	b.n	404018 <chk_mounted+0x88>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  404054:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  404058:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  40405c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404060:	b21b      	sxth	r3, r3
  404062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404066:	d001      	beq.n	40406c <chk_mounted+0xdc>
		return FR_NO_FILESYSTEM;
  404068:	200d      	movs	r0, #13
  40406a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  40406c:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
  404070:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  404074:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  404078:	d10d      	bne.n	404096 <chk_mounted+0x106>
  40407a:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
  40407e:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
  404082:	0412      	lsls	r2, r2, #16
  404084:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  404088:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
  40408c:	431a      	orrs	r2, r3
  40408e:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
  404092:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  404096:	61ea      	str	r2, [r5, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  404098:	f895 e040 	ldrb.w	lr, [r5, #64]	; 0x40
  40409c:	f885 e003 	strb.w	lr, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  4040a0:	f10e 33ff 	add.w	r3, lr, #4294967295
  4040a4:	b2db      	uxtb	r3, r3
  4040a6:	2b01      	cmp	r3, #1
  4040a8:	d901      	bls.n	4040ae <chk_mounted+0x11e>
  4040aa:	200d      	movs	r0, #13
  4040ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  4040ae:	f895 603d 	ldrb.w	r6, [r5, #61]	; 0x3d
  4040b2:	70ae      	strb	r6, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  4040b4:	2e00      	cmp	r6, #0
  4040b6:	f000 80c7 	beq.w	404248 <chk_mounted+0x2b8>
  4040ba:	1e73      	subs	r3, r6, #1
  4040bc:	4233      	tst	r3, r6
  4040be:	d001      	beq.n	4040c4 <chk_mounted+0x134>
  4040c0:	200d      	movs	r0, #13
  4040c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  4040c4:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
  4040c8:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
  4040cc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  4040d0:	8129      	strh	r1, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  4040d2:	f011 0f0f 	tst.w	r1, #15
  4040d6:	f040 80b9 	bne.w	40424c <chk_mounted+0x2bc>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  4040da:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
  4040de:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  4040e2:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  4040e6:	d10d      	bne.n	404104 <chk_mounted+0x174>
  4040e8:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
  4040ec:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
  4040f0:	041b      	lsls	r3, r3, #16
  4040f2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  4040f6:	f895 0050 	ldrb.w	r0, [r5, #80]	; 0x50
  4040fa:	4303      	orrs	r3, r0
  4040fc:	f895 0051 	ldrb.w	r0, [r5, #81]	; 0x51
  404100:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  404104:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
  404108:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  40410c:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  404110:	f000 809e 	beq.w	404250 <chk_mounted+0x2c0>
	fasize *= b;										/* Number of sectors for FAT area */
  404114:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  404118:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  40411c:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  40411e:	4283      	cmp	r3, r0
  404120:	f0c0 8098 	bcc.w	404254 <chk_mounted+0x2c4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  404124:	1a1b      	subs	r3, r3, r0
  404126:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  40412a:	2b00      	cmp	r3, #0
  40412c:	f000 8094 	beq.w	404258 <chk_mounted+0x2c8>
	fmt = FS_FAT12;
  404130:	f640 76f5 	movw	r6, #4085	; 0xff5
  404134:	42b3      	cmp	r3, r6
  404136:	bf8c      	ite	hi
  404138:	2602      	movhi	r6, #2
  40413a:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  40413c:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  404140:	4563      	cmp	r3, ip
  404142:	f200 80a3 	bhi.w	40428c <chk_mounted+0x2fc>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  404146:	3302      	adds	r3, #2
  404148:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  40414a:	4420      	add	r0, r4
  40414c:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  40414e:	443c      	add	r4, r7
  404150:	622c      	str	r4, [r5, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  404152:	2900      	cmp	r1, #0
  404154:	f000 8088 	beq.w	404268 <chk_mounted+0x2d8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  404158:	4474      	add	r4, lr
  40415a:	626c      	str	r4, [r5, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  40415c:	2e02      	cmp	r6, #2
  40415e:	bf0f      	iteee	eq
  404160:	005b      	lsleq	r3, r3, #1
  404162:	eb03 0143 	addne.w	r1, r3, r3, lsl #1
  404166:	f003 0301 	andne.w	r3, r3, #1
  40416a:	eb03 0351 	addne.w	r3, r3, r1, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  40416e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  404172:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  404176:	d375      	bcc.n	404264 <chk_mounted+0x2d4>
	fs->free_clust = 0xFFFFFFFF;
  404178:	f04f 33ff 	mov.w	r3, #4294967295
  40417c:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  40417e:	2300      	movs	r3, #0
  404180:	60eb      	str	r3, [r5, #12]
  404182:	e04a      	b.n	40421a <chk_mounted+0x28a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  404184:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
  404188:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
  40418c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  404190:	b21b      	sxth	r3, r3
  404192:	4a3a      	ldr	r2, [pc, #232]	; (40427c <chk_mounted+0x2ec>)
  404194:	4293      	cmp	r3, r2
  404196:	d14b      	bne.n	404230 <chk_mounted+0x2a0>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  404198:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  40419c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  4041a0:	041b      	lsls	r3, r3, #16
  4041a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4041a6:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
  4041aa:	4313      	orrs	r3, r2
  4041ac:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  4041b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  4041b4:	4a32      	ldr	r2, [pc, #200]	; (404280 <chk_mounted+0x2f0>)
  4041b6:	4293      	cmp	r3, r2
  4041b8:	d13c      	bne.n	404234 <chk_mounted+0x2a4>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  4041ba:	f895 2217 	ldrb.w	r2, [r5, #535]	; 0x217
  4041be:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  4041c2:	041b      	lsls	r3, r3, #16
  4041c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4041c8:	f895 2214 	ldrb.w	r2, [r5, #532]	; 0x214
  4041cc:	4313      	orrs	r3, r2
  4041ce:	f895 2215 	ldrb.w	r2, [r5, #533]	; 0x215
  4041d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  4041d6:	4a2b      	ldr	r2, [pc, #172]	; (404284 <chk_mounted+0x2f4>)
  4041d8:	4293      	cmp	r3, r2
  4041da:	d12d      	bne.n	404238 <chk_mounted+0x2a8>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4041dc:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  4041e0:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  4041e4:	041b      	lsls	r3, r3, #16
  4041e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4041ea:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
  4041ee:	4313      	orrs	r3, r2
  4041f0:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  4041f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4041f8:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4041fa:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  4041fe:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  404202:	041b      	lsls	r3, r3, #16
  404204:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404208:	f895 2218 	ldrb.w	r2, [r5, #536]	; 0x218
  40420c:	4313      	orrs	r3, r2
  40420e:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  404212:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404216:	612b      	str	r3, [r5, #16]
  404218:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  40421a:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  40421c:	4a1a      	ldr	r2, [pc, #104]	; (404288 <chk_mounted+0x2f8>)
  40421e:	8813      	ldrh	r3, [r2, #0]
  404220:	3301      	adds	r3, #1
  404222:	b29b      	uxth	r3, r3
  404224:	8013      	strh	r3, [r2, #0]
  404226:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  404228:	2000      	movs	r0, #0
  40422a:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  40422c:	7128      	strb	r0, [r5, #4]
	return FR_OK;
  40422e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404230:	2603      	movs	r6, #3
  404232:	e7f2      	b.n	40421a <chk_mounted+0x28a>
  404234:	2603      	movs	r6, #3
  404236:	e7f0      	b.n	40421a <chk_mounted+0x28a>
  404238:	2603      	movs	r6, #3
  40423a:	e7ee      	b.n	40421a <chk_mounted+0x28a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  40423c:	200c      	movs	r0, #12
  40423e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  404240:	2000      	movs	r0, #0
  404242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  404244:	2001      	movs	r0, #1
  404246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  404248:	200d      	movs	r0, #13
  40424a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  40424c:	200d      	movs	r0, #13
  40424e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  404250:	200d      	movs	r0, #13
  404252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  404254:	200d      	movs	r0, #13
  404256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  404258:	200d      	movs	r0, #13
  40425a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  40425c:	200d      	movs	r0, #13
  40425e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  404260:	200d      	movs	r0, #13
  404262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  404264:	200d      	movs	r0, #13
  404266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  404268:	200d      	movs	r0, #13
  40426a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40426c:	200061a4 	.word	0x200061a4
  404270:	00403cb1 	.word	0x00403cb1
  404274:	00403c5d 	.word	0x00403c5d
  404278:	00403f01 	.word	0x00403f01
  40427c:	ffffaa55 	.word	0xffffaa55
  404280:	41615252 	.word	0x41615252
  404284:	61417272 	.word	0x61417272
  404288:	200061c4 	.word	0x200061c4
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  40428c:	3302      	adds	r3, #2
  40428e:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  404290:	4420      	add	r0, r4
  404292:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  404294:	4427      	add	r7, r4
  404296:	622f      	str	r7, [r5, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  404298:	2900      	cmp	r1, #0
  40429a:	d1e1      	bne.n	404260 <chk_mounted+0x2d0>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  40429c:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
  4042a0:	f895 105e 	ldrb.w	r1, [r5, #94]	; 0x5e
  4042a4:	0409      	lsls	r1, r1, #16
  4042a6:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  4042aa:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
  4042ae:	4301      	orrs	r1, r0
  4042b0:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
  4042b4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  4042b8:	6269      	str	r1, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  4042ba:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  4042bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  4042c0:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  4042c4:	d3ca      	bcc.n	40425c <chk_mounted+0x2cc>
	fs->free_clust = 0xFFFFFFFF;
  4042c6:	f04f 33ff 	mov.w	r3, #4294967295
  4042ca:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  4042cc:	2300      	movs	r3, #0
  4042ce:	60eb      	str	r3, [r5, #12]
	 	fs->fsi_flag = 0;
  4042d0:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  4042d2:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
  4042d6:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
  4042da:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  4042de:	4422      	add	r2, r4
  4042e0:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  4042e2:	2301      	movs	r3, #1
  4042e4:	f105 0130 	add.w	r1, r5, #48	; 0x30
  4042e8:	7868      	ldrb	r0, [r5, #1]
  4042ea:	4c03      	ldr	r4, [pc, #12]	; (4042f8 <chk_mounted+0x368>)
  4042ec:	47a0      	blx	r4
  4042ee:	2800      	cmp	r0, #0
  4042f0:	f43f af48 	beq.w	404184 <chk_mounted+0x1f4>
  4042f4:	2603      	movs	r6, #3
  4042f6:	e790      	b.n	40421a <chk_mounted+0x28a>
  4042f8:	00403ccd 	.word	0x00403ccd

004042fc <get_fileinfo>:
{
  4042fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	p = fno->fname;
  404300:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
  404304:	6903      	ldr	r3, [r0, #16]
  404306:	2b00      	cmp	r3, #0
  404308:	d05e      	beq.n	4043c8 <get_fileinfo+0xcc>
		dir = dj->dir;
  40430a:	6944      	ldr	r4, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
  40430c:	f894 e00c 	ldrb.w	lr, [r4, #12]
			c = dir[i];
  404310:	7823      	ldrb	r3, [r4, #0]
			if (c == ' ') break;
  404312:	2b20      	cmp	r3, #32
  404314:	d01d      	beq.n	404352 <get_fileinfo+0x56>
  404316:	4625      	mov	r5, r4
  404318:	f101 0711 	add.w	r7, r1, #17
			if (c == NDDE) c = (TCHAR)DDE;
  40431c:	f04f 08e5 	mov.w	r8, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  404320:	f00e 0c08 	and.w	ip, lr, #8
  404324:	e008      	b.n	404338 <get_fileinfo+0x3c>
			if (c == NDDE) c = (TCHAR)DDE;
  404326:	4643      	mov	r3, r8
			*p++ = c;
  404328:	f802 3b01 	strb.w	r3, [r2], #1
		for (i = 0; i < 8; i++) {	/* Copy name body */
  40432c:	42ba      	cmp	r2, r7
  40432e:	d010      	beq.n	404352 <get_fileinfo+0x56>
			c = dir[i];
  404330:	f815 3f01 	ldrb.w	r3, [r5, #1]!
			if (c == ' ') break;
  404334:	2b20      	cmp	r3, #32
  404336:	d00c      	beq.n	404352 <get_fileinfo+0x56>
			if (c == NDDE) c = (TCHAR)DDE;
  404338:	2b05      	cmp	r3, #5
  40433a:	d0f4      	beq.n	404326 <get_fileinfo+0x2a>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  40433c:	f1bc 0f00 	cmp.w	ip, #0
  404340:	d0f2      	beq.n	404328 <get_fileinfo+0x2c>
  404342:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
  404346:	b2f6      	uxtb	r6, r6
  404348:	2e19      	cmp	r6, #25
  40434a:	d8ed      	bhi.n	404328 <get_fileinfo+0x2c>
  40434c:	3320      	adds	r3, #32
  40434e:	b2db      	uxtb	r3, r3
  404350:	e7ea      	b.n	404328 <get_fileinfo+0x2c>
		if (dir[8] != ' ') {		/* Copy name extension */
  404352:	7a23      	ldrb	r3, [r4, #8]
  404354:	2b20      	cmp	r3, #32
  404356:	d020      	beq.n	40439a <get_fileinfo+0x9e>
			*p++ = '.';
  404358:	1c55      	adds	r5, r2, #1
  40435a:	232e      	movs	r3, #46	; 0x2e
  40435c:	7013      	strb	r3, [r2, #0]
				c = dir[i];
  40435e:	7a23      	ldrb	r3, [r4, #8]
				if (c == ' ') break;
  404360:	2b20      	cmp	r3, #32
  404362:	d019      	beq.n	404398 <get_fileinfo+0x9c>
  404364:	f104 0708 	add.w	r7, r4, #8
  404368:	f102 0c04 	add.w	ip, r2, #4
  40436c:	462a      	mov	r2, r5
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  40436e:	f00e 0510 	and.w	r5, lr, #16
  404372:	e007      	b.n	404384 <get_fileinfo+0x88>
				*p++ = c;
  404374:	f802 3b01 	strb.w	r3, [r2], #1
			for (i = 8; i < 11; i++) {
  404378:	4562      	cmp	r2, ip
  40437a:	d00e      	beq.n	40439a <get_fileinfo+0x9e>
				c = dir[i];
  40437c:	f817 3f01 	ldrb.w	r3, [r7, #1]!
				if (c == ' ') break;
  404380:	2b20      	cmp	r3, #32
  404382:	d00a      	beq.n	40439a <get_fileinfo+0x9e>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  404384:	2d00      	cmp	r5, #0
  404386:	d0f5      	beq.n	404374 <get_fileinfo+0x78>
  404388:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
  40438c:	b2f6      	uxtb	r6, r6
  40438e:	2e19      	cmp	r6, #25
  404390:	bf9c      	itt	ls
  404392:	3320      	addls	r3, #32
  404394:	b2db      	uxtbls	r3, r3
  404396:	e7ed      	b.n	404374 <get_fileinfo+0x78>
			*p++ = '.';
  404398:	462a      	mov	r2, r5
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
  40439a:	7ae3      	ldrb	r3, [r4, #11]
  40439c:	720b      	strb	r3, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
  40439e:	7fe5      	ldrb	r5, [r4, #31]
  4043a0:	7fa3      	ldrb	r3, [r4, #30]
  4043a2:	041b      	lsls	r3, r3, #16
  4043a4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4043a8:	7f25      	ldrb	r5, [r4, #28]
  4043aa:	432b      	orrs	r3, r5
  4043ac:	7f65      	ldrb	r5, [r4, #29]
  4043ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  4043b2:	600b      	str	r3, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
  4043b4:	7e65      	ldrb	r5, [r4, #25]
  4043b6:	7e23      	ldrb	r3, [r4, #24]
  4043b8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  4043bc:	808b      	strh	r3, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
  4043be:	7de5      	ldrb	r5, [r4, #23]
  4043c0:	7da3      	ldrb	r3, [r4, #22]
  4043c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  4043c6:	80cb      	strh	r3, [r1, #6]
	*p = 0;		/* Terminate SFN str by a \0 */
  4043c8:	2300      	movs	r3, #0
  4043ca:	7013      	strb	r3, [r2, #0]
	if (fno->lfname && fno->lfsize) {
  4043cc:	698f      	ldr	r7, [r1, #24]
  4043ce:	b32f      	cbz	r7, 40441c <get_fileinfo+0x120>
  4043d0:	69cb      	ldr	r3, [r1, #28]
  4043d2:	b31b      	cbz	r3, 40441c <get_fileinfo+0x120>
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
  4043d4:	6903      	ldr	r3, [r0, #16]
  4043d6:	b1f3      	cbz	r3, 404416 <get_fileinfo+0x11a>
  4043d8:	8c02      	ldrh	r2, [r0, #32]
  4043da:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4043de:	429a      	cmp	r2, r3
  4043e0:	d01e      	beq.n	404420 <get_fileinfo+0x124>
			lfn = dj->lfn;
  4043e2:	f8d0 801c 	ldr.w	r8, [r0, #28]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  4043e6:	f8b8 0000 	ldrh.w	r0, [r8]
  4043ea:	b1d8      	cbz	r0, 404424 <get_fileinfo+0x128>
  4043ec:	460d      	mov	r5, r1
  4043ee:	1e7e      	subs	r6, r7, #1
  4043f0:	2400      	movs	r4, #0
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
  4043f2:	46a2      	mov	sl, r4
  4043f4:	f8df 9038 	ldr.w	r9, [pc, #56]	; 404430 <get_fileinfo+0x134>
  4043f8:	4651      	mov	r1, sl
  4043fa:	47c8      	blx	r9
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  4043fc:	b1a0      	cbz	r0, 404428 <get_fileinfo+0x12c>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  4043fe:	69eb      	ldr	r3, [r5, #28]
  404400:	3b01      	subs	r3, #1
  404402:	42a3      	cmp	r3, r4
  404404:	d912      	bls.n	40442c <get_fileinfo+0x130>
				tp[i++] = (TCHAR)w;
  404406:	3401      	adds	r4, #1
  404408:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  40440c:	f838 0014 	ldrh.w	r0, [r8, r4, lsl #1]
  404410:	2800      	cmp	r0, #0
  404412:	d1f1      	bne.n	4043f8 <get_fileinfo+0xfc>
  404414:	e000      	b.n	404418 <get_fileinfo+0x11c>
		i = 0;
  404416:	2400      	movs	r4, #0
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
  404418:	2300      	movs	r3, #0
  40441a:	553b      	strb	r3, [r7, r4]
  40441c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = 0;
  404420:	2400      	movs	r4, #0
  404422:	e7f9      	b.n	404418 <get_fileinfo+0x11c>
  404424:	2400      	movs	r4, #0
  404426:	e7f7      	b.n	404418 <get_fileinfo+0x11c>
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  404428:	2400      	movs	r4, #0
  40442a:	e7f5      	b.n	404418 <get_fileinfo+0x11c>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  40442c:	2400      	movs	r4, #0
  40442e:	e7f3      	b.n	404418 <get_fileinfo+0x11c>
  404430:	004058d9 	.word	0x004058d9

00404434 <move_window>:
{
  404434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  404438:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  40443a:	428f      	cmp	r7, r1
  40443c:	d035      	beq.n	4044aa <move_window+0x76>
  40443e:	460e      	mov	r6, r1
  404440:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  404442:	7903      	ldrb	r3, [r0, #4]
  404444:	b91b      	cbnz	r3, 40444e <move_window+0x1a>
		if (sector) {
  404446:	bb2e      	cbnz	r6, 404494 <move_window+0x60>
	return FR_OK;
  404448:	2000      	movs	r0, #0
  40444a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  40444e:	f100 0830 	add.w	r8, r0, #48	; 0x30
  404452:	2301      	movs	r3, #1
  404454:	463a      	mov	r2, r7
  404456:	4641      	mov	r1, r8
  404458:	7840      	ldrb	r0, [r0, #1]
  40445a:	4d18      	ldr	r5, [pc, #96]	; (4044bc <move_window+0x88>)
  40445c:	47a8      	blx	r5
  40445e:	bb38      	cbnz	r0, 4044b0 <move_window+0x7c>
			fs->wflag = 0;
  404460:	2300      	movs	r3, #0
  404462:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  404464:	6a23      	ldr	r3, [r4, #32]
  404466:	69e2      	ldr	r2, [r4, #28]
  404468:	4413      	add	r3, r2
  40446a:	429f      	cmp	r7, r3
  40446c:	d2eb      	bcs.n	404446 <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40446e:	78e5      	ldrb	r5, [r4, #3]
  404470:	2d01      	cmp	r5, #1
  404472:	d9e8      	bls.n	404446 <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  404474:	f04f 0a01 	mov.w	sl, #1
  404478:	f8df 9040 	ldr.w	r9, [pc, #64]	; 4044bc <move_window+0x88>
					wsect += fs->fsize;
  40447c:	69e3      	ldr	r3, [r4, #28]
  40447e:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  404480:	4653      	mov	r3, sl
  404482:	463a      	mov	r2, r7
  404484:	4641      	mov	r1, r8
  404486:	7860      	ldrb	r0, [r4, #1]
  404488:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40448a:	3d01      	subs	r5, #1
  40448c:	b2ed      	uxtb	r5, r5
  40448e:	2d01      	cmp	r5, #1
  404490:	d1f4      	bne.n	40447c <move_window+0x48>
  404492:	e7d8      	b.n	404446 <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  404494:	2301      	movs	r3, #1
  404496:	4632      	mov	r2, r6
  404498:	f104 0130 	add.w	r1, r4, #48	; 0x30
  40449c:	7860      	ldrb	r0, [r4, #1]
  40449e:	4d08      	ldr	r5, [pc, #32]	; (4044c0 <move_window+0x8c>)
  4044a0:	47a8      	blx	r5
  4044a2:	b940      	cbnz	r0, 4044b6 <move_window+0x82>
			fs->winsect = sector;
  4044a4:	62e6      	str	r6, [r4, #44]	; 0x2c
  4044a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  4044aa:	2000      	movs	r0, #0
  4044ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  4044b0:	2001      	movs	r0, #1
  4044b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  4044b6:	2001      	movs	r0, #1
}
  4044b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4044bc:	00403d3d 	.word	0x00403d3d
  4044c0:	00403ccd 	.word	0x00403ccd

004044c4 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4044c4:	2901      	cmp	r1, #1
  4044c6:	d96a      	bls.n	40459e <get_fat+0xda>
{
  4044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4044ca:	6983      	ldr	r3, [r0, #24]
  4044cc:	4299      	cmp	r1, r3
  4044ce:	d268      	bcs.n	4045a2 <get_fat+0xde>
  4044d0:	460c      	mov	r4, r1
  4044d2:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  4044d4:	7803      	ldrb	r3, [r0, #0]
  4044d6:	2b02      	cmp	r3, #2
  4044d8:	d02f      	beq.n	40453a <get_fat+0x76>
  4044da:	2b03      	cmp	r3, #3
  4044dc:	d041      	beq.n	404562 <get_fat+0x9e>
  4044de:	2b01      	cmp	r3, #1
  4044e0:	d002      	beq.n	4044e8 <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4044e2:	f04f 30ff 	mov.w	r0, #4294967295
  4044e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  4044e8:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  4044ec:	6a01      	ldr	r1, [r0, #32]
  4044ee:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  4044f2:	4b2d      	ldr	r3, [pc, #180]	; (4045a8 <get_fat+0xe4>)
  4044f4:	4798      	blx	r3
  4044f6:	b110      	cbz	r0, 4044fe <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4044f8:	f04f 30ff 	mov.w	r0, #4294967295
  4044fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  4044fe:	f3c7 0308 	ubfx	r3, r7, #0, #9
  404502:	4433      	add	r3, r6
  404504:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  404508:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40450a:	6a31      	ldr	r1, [r6, #32]
  40450c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  404510:	4630      	mov	r0, r6
  404512:	4b25      	ldr	r3, [pc, #148]	; (4045a8 <get_fat+0xe4>)
  404514:	4798      	blx	r3
  404516:	b110      	cbz	r0, 40451e <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  404518:	f04f 30ff 	mov.w	r0, #4294967295
  40451c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  40451e:	f3c7 0708 	ubfx	r7, r7, #0, #9
  404522:	19f0      	adds	r0, r6, r7
  404524:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  404528:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  40452c:	f014 0f01 	tst.w	r4, #1
  404530:	bf14      	ite	ne
  404532:	0900      	lsrne	r0, r0, #4
  404534:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  404538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  40453a:	6a01      	ldr	r1, [r0, #32]
  40453c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  404540:	4b19      	ldr	r3, [pc, #100]	; (4045a8 <get_fat+0xe4>)
  404542:	4798      	blx	r3
  404544:	b110      	cbz	r0, 40454c <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  404546:	f04f 30ff 	mov.w	r0, #4294967295
  40454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  40454c:	0060      	lsls	r0, r4, #1
  40454e:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  404552:	4430      	add	r0, r6
  404554:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  404558:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  40455c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  404560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  404562:	6a01      	ldr	r1, [r0, #32]
  404564:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  404568:	4b0f      	ldr	r3, [pc, #60]	; (4045a8 <get_fat+0xe4>)
  40456a:	4798      	blx	r3
  40456c:	b110      	cbz	r0, 404574 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40456e:	f04f 30ff 	mov.w	r0, #4294967295
}
  404572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  404574:	00a0      	lsls	r0, r4, #2
  404576:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  40457a:	f100 0230 	add.w	r2, r0, #48	; 0x30
  40457e:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  404580:	78d1      	ldrb	r1, [r2, #3]
  404582:	7893      	ldrb	r3, [r2, #2]
  404584:	041b      	lsls	r3, r3, #16
  404586:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  40458a:	4430      	add	r0, r6
  40458c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  404590:	4318      	orrs	r0, r3
  404592:	7853      	ldrb	r3, [r2, #1]
  404594:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  404598:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  40459c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  40459e:	2001      	movs	r0, #1
  4045a0:	4770      	bx	lr
  4045a2:	2001      	movs	r0, #1
  4045a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4045a6:	bf00      	nop
  4045a8:	00404435 	.word	0x00404435

004045ac <dir_sdi>:
{
  4045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4045ae:	4605      	mov	r5, r0
  4045b0:	460c      	mov	r4, r1
	dj->index = idx;
  4045b2:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  4045b4:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  4045b6:	2901      	cmp	r1, #1
  4045b8:	d03d      	beq.n	404636 <dir_sdi+0x8a>
  4045ba:	6803      	ldr	r3, [r0, #0]
  4045bc:	699a      	ldr	r2, [r3, #24]
  4045be:	4291      	cmp	r1, r2
  4045c0:	d301      	bcc.n	4045c6 <dir_sdi+0x1a>
		return FR_INT_ERR;
  4045c2:	2002      	movs	r0, #2
  4045c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  4045c6:	b961      	cbnz	r1, 4045e2 <dir_sdi+0x36>
  4045c8:	781a      	ldrb	r2, [r3, #0]
  4045ca:	2a03      	cmp	r2, #3
  4045cc:	d006      	beq.n	4045dc <dir_sdi+0x30>
		dj->clust = clst;
  4045ce:	2200      	movs	r2, #0
  4045d0:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  4045d2:	891a      	ldrh	r2, [r3, #8]
  4045d4:	42a2      	cmp	r2, r4
  4045d6:	d821      	bhi.n	40461c <dir_sdi+0x70>
			return FR_INT_ERR;
  4045d8:	2002      	movs	r0, #2
  4045da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  4045dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  4045de:	2900      	cmp	r1, #0
  4045e0:	d0f5      	beq.n	4045ce <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  4045e2:	789e      	ldrb	r6, [r3, #2]
  4045e4:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  4045e6:	42b4      	cmp	r4, r6
  4045e8:	d310      	bcc.n	40460c <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  4045ea:	4f17      	ldr	r7, [pc, #92]	; (404648 <dir_sdi+0x9c>)
  4045ec:	6828      	ldr	r0, [r5, #0]
  4045ee:	47b8      	blx	r7
  4045f0:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  4045f2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4045f6:	d020      	beq.n	40463a <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  4045f8:	2801      	cmp	r0, #1
  4045fa:	d920      	bls.n	40463e <dir_sdi+0x92>
  4045fc:	682b      	ldr	r3, [r5, #0]
  4045fe:	699b      	ldr	r3, [r3, #24]
  404600:	4298      	cmp	r0, r3
  404602:	d21e      	bcs.n	404642 <dir_sdi+0x96>
			idx -= ic;
  404604:	1ba4      	subs	r4, r4, r6
  404606:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  404608:	42a6      	cmp	r6, r4
  40460a:	d9ef      	bls.n	4045ec <dir_sdi+0x40>
		dj->clust = clst;
  40460c:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40460e:	6828      	ldr	r0, [r5, #0]
  404610:	4b0e      	ldr	r3, [pc, #56]	; (40464c <dir_sdi+0xa0>)
  404612:	4798      	blx	r3
  404614:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  404618:	6128      	str	r0, [r5, #16]
  40461a:	e003      	b.n	404624 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40461e:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  404622:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  404624:	682b      	ldr	r3, [r5, #0]
  404626:	3330      	adds	r3, #48	; 0x30
  404628:	f004 040f 	and.w	r4, r4, #15
  40462c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  404630:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  404632:	2000      	movs	r0, #0
  404634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  404636:	2002      	movs	r0, #2
  404638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  40463a:	2001      	movs	r0, #1
  40463c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  40463e:	2002      	movs	r0, #2
  404640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404642:	2002      	movs	r0, #2
}
  404644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404646:	bf00      	nop
  404648:	004044c5 	.word	0x004044c5
  40464c:	00403e97 	.word	0x00403e97

00404650 <put_fat>:
{
  404650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  404654:	2901      	cmp	r1, #1
  404656:	f240 808f 	bls.w	404778 <put_fat+0x128>
  40465a:	6983      	ldr	r3, [r0, #24]
  40465c:	4299      	cmp	r1, r3
  40465e:	d301      	bcc.n	404664 <put_fat+0x14>
		res = FR_INT_ERR;
  404660:	2702      	movs	r7, #2
	return res;
  404662:	e08a      	b.n	40477a <put_fat+0x12a>
  404664:	4615      	mov	r5, r2
  404666:	460c      	mov	r4, r1
  404668:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  40466a:	7803      	ldrb	r3, [r0, #0]
  40466c:	2b02      	cmp	r3, #2
  40466e:	d04e      	beq.n	40470e <put_fat+0xbe>
  404670:	2b03      	cmp	r3, #3
  404672:	d05f      	beq.n	404734 <put_fat+0xe4>
  404674:	2b01      	cmp	r3, #1
  404676:	d003      	beq.n	404680 <put_fat+0x30>
			res = FR_INT_ERR;
  404678:	2702      	movs	r7, #2
		fs->wflag = 1;
  40467a:	2301      	movs	r3, #1
  40467c:	7133      	strb	r3, [r6, #4]
  40467e:	e07c      	b.n	40477a <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  404680:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  404684:	6a01      	ldr	r1, [r0, #32]
  404686:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  40468a:	4b3d      	ldr	r3, [pc, #244]	; (404780 <put_fat+0x130>)
  40468c:	4798      	blx	r3
			if (res != FR_OK) break;
  40468e:	4607      	mov	r7, r0
  404690:	2800      	cmp	r0, #0
  404692:	d1f2      	bne.n	40467a <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  404694:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  404698:	f014 0f01 	tst.w	r4, #1
  40469c:	d01c      	beq.n	4046d8 <put_fat+0x88>
  40469e:	4433      	add	r3, r6
  4046a0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  4046a4:	f002 020f 	and.w	r2, r2, #15
  4046a8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  4046ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  4046b0:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  4046b4:	2301      	movs	r3, #1
  4046b6:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4046b8:	6a31      	ldr	r1, [r6, #32]
  4046ba:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4046be:	4630      	mov	r0, r6
  4046c0:	4b2f      	ldr	r3, [pc, #188]	; (404780 <put_fat+0x130>)
  4046c2:	4798      	blx	r3
			if (res != FR_OK) break;
  4046c4:	2800      	cmp	r0, #0
  4046c6:	d153      	bne.n	404770 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  4046c8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  4046cc:	f3c5 1207 	ubfx	r2, r5, #4, #8
  4046d0:	44b0      	add	r8, r6
  4046d2:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  4046d6:	e7d0      	b.n	40467a <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4046d8:	4433      	add	r3, r6
  4046da:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  4046de:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  4046e2:	2301      	movs	r3, #1
  4046e4:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4046e6:	6a31      	ldr	r1, [r6, #32]
  4046e8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4046ec:	4630      	mov	r0, r6
  4046ee:	4b24      	ldr	r3, [pc, #144]	; (404780 <put_fat+0x130>)
  4046f0:	4798      	blx	r3
			if (res != FR_OK) break;
  4046f2:	2800      	cmp	r0, #0
  4046f4:	d13e      	bne.n	404774 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  4046f6:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  4046fa:	eb06 0308 	add.w	r3, r6, r8
  4046fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  404702:	f023 030f 	bic.w	r3, r3, #15
  404706:	f3c5 2203 	ubfx	r2, r5, #8, #4
  40470a:	431a      	orrs	r2, r3
  40470c:	e7e0      	b.n	4046d0 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  40470e:	6a01      	ldr	r1, [r0, #32]
  404710:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  404714:	4b1a      	ldr	r3, [pc, #104]	; (404780 <put_fat+0x130>)
  404716:	4798      	blx	r3
			if (res != FR_OK) break;
  404718:	4607      	mov	r7, r0
  40471a:	2800      	cmp	r0, #0
  40471c:	d1ad      	bne.n	40467a <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  40471e:	0063      	lsls	r3, r4, #1
  404720:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  404724:	4433      	add	r3, r6
  404726:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  40472a:	f3c5 2207 	ubfx	r2, r5, #8, #8
  40472e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  404732:	e7a2      	b.n	40467a <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  404734:	6a01      	ldr	r1, [r0, #32]
  404736:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  40473a:	4b11      	ldr	r3, [pc, #68]	; (404780 <put_fat+0x130>)
  40473c:	4798      	blx	r3
			if (res != FR_OK) break;
  40473e:	4607      	mov	r7, r0
  404740:	2800      	cmp	r0, #0
  404742:	d19a      	bne.n	40467a <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  404744:	00a1      	lsls	r1, r4, #2
  404746:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  40474a:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40474e:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  404750:	78da      	ldrb	r2, [r3, #3]
  404752:	0612      	lsls	r2, r2, #24
  404754:	4431      	add	r1, r6
  404756:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  40475a:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  40475c:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  404760:	f3c2 2107 	ubfx	r1, r2, #8, #8
  404764:	7059      	strb	r1, [r3, #1]
  404766:	0c11      	lsrs	r1, r2, #16
  404768:	7099      	strb	r1, [r3, #2]
  40476a:	0e12      	lsrs	r2, r2, #24
  40476c:	70da      	strb	r2, [r3, #3]
			break;
  40476e:	e784      	b.n	40467a <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  404770:	4607      	mov	r7, r0
  404772:	e782      	b.n	40467a <put_fat+0x2a>
  404774:	4607      	mov	r7, r0
  404776:	e780      	b.n	40467a <put_fat+0x2a>
		res = FR_INT_ERR;
  404778:	2702      	movs	r7, #2
}
  40477a:	4638      	mov	r0, r7
  40477c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404780:	00404435 	.word	0x00404435

00404784 <create_chain>:
{
  404784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404788:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  40478a:	4688      	mov	r8, r1
  40478c:	b941      	cbnz	r1, 4047a0 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  40478e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  404790:	b186      	cbz	r6, 4047b4 <create_chain+0x30>
  404792:	6983      	ldr	r3, [r0, #24]
  404794:	429e      	cmp	r6, r3
  404796:	bf28      	it	cs
  404798:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  40479a:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  40479c:	4f27      	ldr	r7, [pc, #156]	; (40483c <create_chain+0xb8>)
  40479e:	e017      	b.n	4047d0 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  4047a0:	4b26      	ldr	r3, [pc, #152]	; (40483c <create_chain+0xb8>)
  4047a2:	4798      	blx	r3
  4047a4:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  4047a6:	2801      	cmp	r0, #1
  4047a8:	d93e      	bls.n	404828 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  4047aa:	69aa      	ldr	r2, [r5, #24]
  4047ac:	4290      	cmp	r0, r2
  4047ae:	d340      	bcc.n	404832 <create_chain+0xae>
		scl = clst;
  4047b0:	4646      	mov	r6, r8
  4047b2:	e7f2      	b.n	40479a <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4047b4:	2601      	movs	r6, #1
  4047b6:	e7f0      	b.n	40479a <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4047b8:	4621      	mov	r1, r4
  4047ba:	4628      	mov	r0, r5
  4047bc:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  4047be:	4603      	mov	r3, r0
  4047c0:	b170      	cbz	r0, 4047e0 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  4047c2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4047c6:	d034      	beq.n	404832 <create_chain+0xae>
  4047c8:	2801      	cmp	r0, #1
  4047ca:	d032      	beq.n	404832 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  4047cc:	42b4      	cmp	r4, r6
  4047ce:	d02f      	beq.n	404830 <create_chain+0xac>
		ncl++;							/* Next cluster */
  4047d0:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  4047d2:	69ab      	ldr	r3, [r5, #24]
  4047d4:	429c      	cmp	r4, r3
  4047d6:	d3ef      	bcc.n	4047b8 <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  4047d8:	2e01      	cmp	r6, #1
  4047da:	d927      	bls.n	40482c <create_chain+0xa8>
			ncl = 2;
  4047dc:	2402      	movs	r4, #2
  4047de:	e7eb      	b.n	4047b8 <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  4047e0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  4047e4:	4621      	mov	r1, r4
  4047e6:	4628      	mov	r0, r5
  4047e8:	4b15      	ldr	r3, [pc, #84]	; (404840 <create_chain+0xbc>)
  4047ea:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  4047ec:	4603      	mov	r3, r0
  4047ee:	b9a8      	cbnz	r0, 40481c <create_chain+0x98>
  4047f0:	f1b8 0f00 	cmp.w	r8, #0
  4047f4:	d10a      	bne.n	40480c <create_chain+0x88>
		fs->last_clust = ncl;			/* Update FSINFO */
  4047f6:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  4047f8:	692b      	ldr	r3, [r5, #16]
  4047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4047fe:	d01b      	beq.n	404838 <create_chain+0xb4>
			fs->free_clust--;
  404800:	3b01      	subs	r3, #1
  404802:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  404804:	2301      	movs	r3, #1
  404806:	716b      	strb	r3, [r5, #5]
  404808:	4623      	mov	r3, r4
  40480a:	e012      	b.n	404832 <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  40480c:	4622      	mov	r2, r4
  40480e:	4641      	mov	r1, r8
  404810:	4628      	mov	r0, r5
  404812:	4b0b      	ldr	r3, [pc, #44]	; (404840 <create_chain+0xbc>)
  404814:	4798      	blx	r3
	if (res == FR_OK) {
  404816:	4603      	mov	r3, r0
  404818:	2800      	cmp	r0, #0
  40481a:	d0ec      	beq.n	4047f6 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  40481c:	2b01      	cmp	r3, #1
  40481e:	bf0c      	ite	eq
  404820:	f04f 33ff 	moveq.w	r3, #4294967295
  404824:	2301      	movne	r3, #1
  404826:	e004      	b.n	404832 <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  404828:	2301      	movs	r3, #1
  40482a:	e002      	b.n	404832 <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  40482c:	2300      	movs	r3, #0
  40482e:	e000      	b.n	404832 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  404830:	2300      	movs	r3, #0
}
  404832:	4618      	mov	r0, r3
  404834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404838:	4623      	mov	r3, r4
  40483a:	e7fa      	b.n	404832 <create_chain+0xae>
  40483c:	004044c5 	.word	0x004044c5
  404840:	00404651 	.word	0x00404651

00404844 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  404844:	2901      	cmp	r1, #1
  404846:	d92e      	bls.n	4048a6 <remove_chain+0x62>
{
  404848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40484c:	4604      	mov	r4, r0
  40484e:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  404850:	6983      	ldr	r3, [r0, #24]
  404852:	4299      	cmp	r1, r3
  404854:	d303      	bcc.n	40485e <remove_chain+0x1a>
		res = FR_INT_ERR;
  404856:	2202      	movs	r2, #2
}
  404858:	4610      	mov	r0, r2
  40485a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40485e:	4f16      	ldr	r7, [pc, #88]	; (4048b8 <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  404860:	f04f 0900 	mov.w	r9, #0
  404864:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4048bc <remove_chain+0x78>
  404868:	e003      	b.n	404872 <remove_chain+0x2e>
  40486a:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  40486c:	69a3      	ldr	r3, [r4, #24]
  40486e:	42ab      	cmp	r3, r5
  404870:	d9f2      	bls.n	404858 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  404872:	4631      	mov	r1, r6
  404874:	4620      	mov	r0, r4
  404876:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  404878:	4605      	mov	r5, r0
  40487a:	b1b8      	cbz	r0, 4048ac <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  40487c:	2801      	cmp	r0, #1
  40487e:	d017      	beq.n	4048b0 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  404880:	f1b0 3fff 	cmp.w	r0, #4294967295
  404884:	d016      	beq.n	4048b4 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  404886:	464a      	mov	r2, r9
  404888:	4631      	mov	r1, r6
  40488a:	4620      	mov	r0, r4
  40488c:	47c0      	blx	r8
			if (res != FR_OK) break;
  40488e:	4602      	mov	r2, r0
  404890:	2800      	cmp	r0, #0
  404892:	d1e1      	bne.n	404858 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  404894:	6923      	ldr	r3, [r4, #16]
  404896:	f1b3 3fff 	cmp.w	r3, #4294967295
  40489a:	d0e6      	beq.n	40486a <remove_chain+0x26>
				fs->free_clust++;
  40489c:	3301      	adds	r3, #1
  40489e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  4048a0:	2301      	movs	r3, #1
  4048a2:	7163      	strb	r3, [r4, #5]
  4048a4:	e7e1      	b.n	40486a <remove_chain+0x26>
		res = FR_INT_ERR;
  4048a6:	2202      	movs	r2, #2
}
  4048a8:	4610      	mov	r0, r2
  4048aa:	4770      	bx	lr
  4048ac:	2200      	movs	r2, #0
  4048ae:	e7d3      	b.n	404858 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4048b0:	2202      	movs	r2, #2
  4048b2:	e7d1      	b.n	404858 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4048b4:	2201      	movs	r2, #1
  4048b6:	e7cf      	b.n	404858 <remove_chain+0x14>
  4048b8:	004044c5 	.word	0x004044c5
  4048bc:	00404651 	.word	0x00404651

004048c0 <dir_next>:
{
  4048c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  4048c4:	88c4      	ldrh	r4, [r0, #6]
  4048c6:	3401      	adds	r4, #1
  4048c8:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4048ca:	b914      	cbnz	r4, 4048d2 <dir_next+0x12>
		return FR_NO_FILE;
  4048cc:	2004      	movs	r0, #4
  4048ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4048d2:	6903      	ldr	r3, [r0, #16]
  4048d4:	b913      	cbnz	r3, 4048dc <dir_next+0x1c>
		return FR_NO_FILE;
  4048d6:	2004      	movs	r0, #4
  4048d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048dc:	460e      	mov	r6, r1
  4048de:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  4048e0:	f014 070f 	ands.w	r7, r4, #15
  4048e4:	d110      	bne.n	404908 <dir_next+0x48>
		dj->sect++;					/* Next sector */
  4048e6:	3301      	adds	r3, #1
  4048e8:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  4048ea:	68c1      	ldr	r1, [r0, #12]
  4048ec:	b931      	cbnz	r1, 4048fc <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  4048ee:	6803      	ldr	r3, [r0, #0]
  4048f0:	891b      	ldrh	r3, [r3, #8]
  4048f2:	42a3      	cmp	r3, r4
  4048f4:	d808      	bhi.n	404908 <dir_next+0x48>
				return FR_NO_FILE;
  4048f6:	2004      	movs	r0, #4
  4048f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  4048fc:	6800      	ldr	r0, [r0, #0]
  4048fe:	7883      	ldrb	r3, [r0, #2]
  404900:	3b01      	subs	r3, #1
  404902:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  404906:	d008      	beq.n	40491a <dir_next+0x5a>
	dj->index = i;
  404908:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  40490a:	682b      	ldr	r3, [r5, #0]
  40490c:	3330      	adds	r3, #48	; 0x30
  40490e:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  404912:	616b      	str	r3, [r5, #20]
	return FR_OK;
  404914:	2000      	movs	r0, #0
  404916:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  40491a:	4b32      	ldr	r3, [pc, #200]	; (4049e4 <dir_next+0x124>)
  40491c:	4798      	blx	r3
  40491e:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  404920:	2801      	cmp	r0, #1
  404922:	d94d      	bls.n	4049c0 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  404924:	f1b0 3fff 	cmp.w	r0, #4294967295
  404928:	d04d      	beq.n	4049c6 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  40492a:	6828      	ldr	r0, [r5, #0]
  40492c:	6983      	ldr	r3, [r0, #24]
  40492e:	4598      	cmp	r8, r3
  404930:	d33e      	bcc.n	4049b0 <dir_next+0xf0>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  404932:	b916      	cbnz	r6, 40493a <dir_next+0x7a>
  404934:	2004      	movs	r0, #4
  404936:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  40493a:	68e9      	ldr	r1, [r5, #12]
  40493c:	4b2a      	ldr	r3, [pc, #168]	; (4049e8 <dir_next+0x128>)
  40493e:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  404940:	4680      	mov	r8, r0
  404942:	b910      	cbnz	r0, 40494a <dir_next+0x8a>
  404944:	2007      	movs	r0, #7
  404946:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  40494a:	2801      	cmp	r0, #1
  40494c:	d03e      	beq.n	4049cc <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40494e:	f1b0 3fff 	cmp.w	r0, #4294967295
  404952:	d03e      	beq.n	4049d2 <dir_next+0x112>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  404954:	2100      	movs	r1, #0
  404956:	6828      	ldr	r0, [r5, #0]
  404958:	4b24      	ldr	r3, [pc, #144]	; (4049ec <dir_next+0x12c>)
  40495a:	4798      	blx	r3
  40495c:	2800      	cmp	r0, #0
  40495e:	d13b      	bne.n	4049d8 <dir_next+0x118>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  404960:	6828      	ldr	r0, [r5, #0]
  404962:	f44f 7200 	mov.w	r2, #512	; 0x200
  404966:	2100      	movs	r1, #0
  404968:	3030      	adds	r0, #48	; 0x30
  40496a:	4b21      	ldr	r3, [pc, #132]	; (4049f0 <dir_next+0x130>)
  40496c:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  40496e:	682e      	ldr	r6, [r5, #0]
  404970:	4641      	mov	r1, r8
  404972:	4630      	mov	r0, r6
  404974:	4b1f      	ldr	r3, [pc, #124]	; (4049f4 <dir_next+0x134>)
  404976:	4798      	blx	r3
  404978:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40497a:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  40497c:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  404980:	46b2      	mov	sl, r6
  404982:	f8df 9068 	ldr.w	r9, [pc, #104]	; 4049ec <dir_next+0x12c>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  404986:	682b      	ldr	r3, [r5, #0]
  404988:	7899      	ldrb	r1, [r3, #2]
  40498a:	b2f2      	uxtb	r2, r6
  40498c:	4291      	cmp	r1, r2
  40498e:	d90b      	bls.n	4049a8 <dir_next+0xe8>
						dj->fs->wflag = 1;
  404990:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  404994:	4651      	mov	r1, sl
  404996:	6828      	ldr	r0, [r5, #0]
  404998:	47c8      	blx	r9
  40499a:	3601      	adds	r6, #1
  40499c:	b9f8      	cbnz	r0, 4049de <dir_next+0x11e>
						dj->fs->winsect++;
  40499e:	682a      	ldr	r2, [r5, #0]
  4049a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  4049a2:	3301      	adds	r3, #1
  4049a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  4049a6:	e7ee      	b.n	404986 <dir_next+0xc6>
					dj->fs->winsect -= c;						/* Rewind window address */
  4049a8:	4616      	mov	r6, r2
  4049aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4049ac:	1b96      	subs	r6, r2, r6
  4049ae:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  4049b0:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  4049b4:	4641      	mov	r1, r8
  4049b6:	6828      	ldr	r0, [r5, #0]
  4049b8:	4b0e      	ldr	r3, [pc, #56]	; (4049f4 <dir_next+0x134>)
  4049ba:	4798      	blx	r3
  4049bc:	6128      	str	r0, [r5, #16]
  4049be:	e7a3      	b.n	404908 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  4049c0:	2002      	movs	r0, #2
  4049c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4049c6:	2001      	movs	r0, #1
  4049c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4049cc:	2002      	movs	r0, #2
  4049ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4049d2:	2001      	movs	r0, #1
  4049d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4049d8:	2001      	movs	r0, #1
  4049da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4049de:	2001      	movs	r0, #1
}
  4049e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049e4:	004044c5 	.word	0x004044c5
  4049e8:	00404785 	.word	0x00404785
  4049ec:	00404435 	.word	0x00404435
  4049f0:	00403e89 	.word	0x00403e89
  4049f4:	00403e97 	.word	0x00403e97

004049f8 <dir_find>:
{
  4049f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4049fc:	b085      	sub	sp, #20
  4049fe:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  404a00:	2100      	movs	r1, #0
  404a02:	4b62      	ldr	r3, [pc, #392]	; (404b8c <dir_find+0x194>)
  404a04:	4798      	blx	r3
	if (res != FR_OK) return res;
  404a06:	4680      	mov	r8, r0
  404a08:	bb08      	cbnz	r0, 404a4e <dir_find+0x56>
  404a0a:	f04f 0bff 	mov.w	fp, #255	; 0xff
  404a0e:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  404a10:	4f5f      	ldr	r7, [pc, #380]	; (404b90 <dir_find+0x198>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  404a12:	46da      	mov	sl, fp
  404a14:	e095      	b.n	404b42 <dir_find+0x14a>
			if (a == AM_LFN) {			/* An LFN entry is found */
  404a16:	2a0f      	cmp	r2, #15
  404a18:	d01d      	beq.n	404a56 <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  404a1a:	f1b9 0f00 	cmp.w	r9, #0
  404a1e:	d104      	bne.n	404a2a <dir_find+0x32>
  404a20:	4620      	mov	r0, r4
  404a22:	4b5c      	ldr	r3, [pc, #368]	; (404b94 <dir_find+0x19c>)
  404a24:	4798      	blx	r3
  404a26:	4582      	cmp	sl, r0
  404a28:	d011      	beq.n	404a4e <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  404a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404a2e:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  404a30:	69ab      	ldr	r3, [r5, #24]
  404a32:	7ada      	ldrb	r2, [r3, #11]
  404a34:	f012 0f01 	tst.w	r2, #1
  404a38:	d17a      	bne.n	404b30 <dir_find+0x138>
  404a3a:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  404a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
  404a42:	f813 2b01 	ldrb.w	r2, [r3], #1
  404a46:	4291      	cmp	r1, r2
  404a48:	d16c      	bne.n	404b24 <dir_find+0x12c>
  404a4a:	42a0      	cmp	r0, r4
  404a4c:	d1f7      	bne.n	404a3e <dir_find+0x46>
}
  404a4e:	4640      	mov	r0, r8
  404a50:	b005      	add	sp, #20
  404a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  404a56:	f8d5 801c 	ldr.w	r8, [r5, #28]
  404a5a:	f1b8 0f00 	cmp.w	r8, #0
  404a5e:	d069      	beq.n	404b34 <dir_find+0x13c>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  404a60:	f016 0f40 	tst.w	r6, #64	; 0x40
  404a64:	d00c      	beq.n	404a80 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  404a66:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  404a6a:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  404a6e:	88eb      	ldrh	r3, [r5, #6]
  404a70:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404a72:	f894 b00d 	ldrb.w	fp, [r4, #13]
  404a76:	45d3      	cmp	fp, sl
  404a78:	d008      	beq.n	404a8c <dir_find+0x94>
  404a7a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  404a7e:	e059      	b.n	404b34 <dir_find+0x13c>
  404a80:	45b1      	cmp	r9, r6
  404a82:	bf18      	it	ne
  404a84:	f04f 09ff 	movne.w	r9, #255	; 0xff
  404a88:	d154      	bne.n	404b34 <dir_find+0x13c>
  404a8a:	e7f2      	b.n	404a72 <dir_find+0x7a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  404a8c:	f894 a000 	ldrb.w	sl, [r4]
  404a90:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  404a94:	f10a 3aff 	add.w	sl, sl, #4294967295
  404a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  404a9c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  404aa0:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 404ba0 <dir_find+0x1a8>
  404aa4:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  404aa8:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  404aaa:	9603      	str	r6, [sp, #12]
  404aac:	f8cd b004 	str.w	fp, [sp, #4]
  404ab0:	461e      	mov	r6, r3
  404ab2:	9502      	str	r5, [sp, #8]
  404ab4:	e00f      	b.n	404ad6 <dir_find+0xde>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  404ab6:	4618      	mov	r0, r3
  404ab8:	4b37      	ldr	r3, [pc, #220]	; (404b98 <dir_find+0x1a0>)
  404aba:	4798      	blx	r3
  404abc:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  404abe:	2efe      	cmp	r6, #254	; 0xfe
  404ac0:	d85b      	bhi.n	404b7a <dir_find+0x182>
  404ac2:	1c75      	adds	r5, r6, #1
  404ac4:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  404ac8:	4b33      	ldr	r3, [pc, #204]	; (404b98 <dir_find+0x1a0>)
  404aca:	4798      	blx	r3
  404acc:	4583      	cmp	fp, r0
  404ace:	d158      	bne.n	404b82 <dir_find+0x18a>
  404ad0:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  404ad2:	45d1      	cmp	r9, sl
  404ad4:	d013      	beq.n	404afe <dir_find+0x106>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  404ad6:	f819 2b01 	ldrb.w	r2, [r9], #1
  404ada:	18a3      	adds	r3, r4, r2
  404adc:	7859      	ldrb	r1, [r3, #1]
  404ade:	5ca3      	ldrb	r3, [r4, r2]
  404ae0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  404ae4:	2800      	cmp	r0, #0
  404ae6:	d1e6      	bne.n	404ab6 <dir_find+0xbe>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  404ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  404aec:	4293      	cmp	r3, r2
  404aee:	d0f0      	beq.n	404ad2 <dir_find+0xda>
  404af0:	f8dd b004 	ldr.w	fp, [sp, #4]
  404af4:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  404af6:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404af8:	f04f 09ff 	mov.w	r9, #255	; 0xff
  404afc:	e01a      	b.n	404b34 <dir_find+0x13c>
  404afe:	f8dd b004 	ldr.w	fp, [sp, #4]
  404b02:	4632      	mov	r2, r6
  404b04:	9e03      	ldr	r6, [sp, #12]
  404b06:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  404b08:	7823      	ldrb	r3, [r4, #0]
  404b0a:	f013 0f40 	tst.w	r3, #64	; 0x40
  404b0e:	d004      	beq.n	404b1a <dir_find+0x122>
  404b10:	b118      	cbz	r0, 404b1a <dir_find+0x122>
  404b12:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  404b16:	2b00      	cmp	r3, #0
  404b18:	d1ed      	bne.n	404af6 <dir_find+0xfe>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404b1a:	3e01      	subs	r6, #1
  404b1c:	fa5f f986 	uxtb.w	r9, r6
  404b20:	46da      	mov	sl, fp
  404b22:	e007      	b.n	404b34 <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  404b24:	f04f 09ff 	mov.w	r9, #255	; 0xff
  404b28:	e004      	b.n	404b34 <dir_find+0x13c>
			ord = 0xFF;
  404b2a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  404b2e:	e001      	b.n	404b34 <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  404b30:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  404b34:	2100      	movs	r1, #0
  404b36:	4628      	mov	r0, r5
  404b38:	4b18      	ldr	r3, [pc, #96]	; (404b9c <dir_find+0x1a4>)
  404b3a:	4798      	blx	r3
	} while (res == FR_OK);
  404b3c:	4680      	mov	r8, r0
  404b3e:	2800      	cmp	r0, #0
  404b40:	d185      	bne.n	404a4e <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  404b42:	6929      	ldr	r1, [r5, #16]
  404b44:	6828      	ldr	r0, [r5, #0]
  404b46:	47b8      	blx	r7
		if (res != FR_OK) break;
  404b48:	4680      	mov	r8, r0
  404b4a:	2800      	cmp	r0, #0
  404b4c:	f47f af7f 	bne.w	404a4e <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  404b50:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  404b52:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  404b54:	b176      	cbz	r6, 404b74 <dir_find+0x17c>
		a = dir[DIR_Attr] & AM_MASK;
  404b56:	7ae3      	ldrb	r3, [r4, #11]
  404b58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  404b5c:	2ee5      	cmp	r6, #229	; 0xe5
  404b5e:	d0e4      	beq.n	404b2a <dir_find+0x132>
  404b60:	f013 0f08 	tst.w	r3, #8
  404b64:	f43f af57 	beq.w	404a16 <dir_find+0x1e>
  404b68:	2a0f      	cmp	r2, #15
  404b6a:	f43f af74 	beq.w	404a56 <dir_find+0x5e>
			ord = 0xFF;
  404b6e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  404b72:	e7df      	b.n	404b34 <dir_find+0x13c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  404b74:	f04f 0804 	mov.w	r8, #4
  404b78:	e769      	b.n	404a4e <dir_find+0x56>
  404b7a:	f8dd b004 	ldr.w	fp, [sp, #4]
  404b7e:	9d02      	ldr	r5, [sp, #8]
  404b80:	e7b9      	b.n	404af6 <dir_find+0xfe>
  404b82:	f8dd b004 	ldr.w	fp, [sp, #4]
  404b86:	9d02      	ldr	r5, [sp, #8]
  404b88:	e7b5      	b.n	404af6 <dir_find+0xfe>
  404b8a:	bf00      	nop
  404b8c:	004045ad 	.word	0x004045ad
  404b90:	00404435 	.word	0x00404435
  404b94:	00403ead 	.word	0x00403ead
  404b98:	00405919 	.word	0x00405919
  404b9c:	004048c1 	.word	0x004048c1
  404ba0:	0040abd8 	.word	0x0040abd8

00404ba4 <dir_register>:
{
  404ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ba8:	b089      	sub	sp, #36	; 0x24
  404baa:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  404bac:	6985      	ldr	r5, [r0, #24]
  404bae:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  404bb2:	220c      	movs	r2, #12
  404bb4:	4629      	mov	r1, r5
  404bb6:	a805      	add	r0, sp, #20
  404bb8:	4ba8      	ldr	r3, [pc, #672]	; (404e5c <dir_register+0x2b8>)
  404bba:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  404bbc:	f89d 301f 	ldrb.w	r3, [sp, #31]
  404bc0:	f013 0f01 	tst.w	r3, #1
  404bc4:	d079      	beq.n	404cba <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  404bc6:	2300      	movs	r3, #0
  404bc8:	72eb      	strb	r3, [r5, #11]
  404bca:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  404bcc:	220b      	movs	r2, #11
  404bce:	a905      	add	r1, sp, #20
  404bd0:	4628      	mov	r0, r5
  404bd2:	4ba2      	ldr	r3, [pc, #648]	; (404e5c <dir_register+0x2b8>)
  404bd4:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  404bd6:	2701      	movs	r7, #1
  404bd8:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  404bda:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  404bde:	f8df 929c 	ldr.w	r9, [pc, #668]	; 404e7c <dir_register+0x2d8>
	mem_cpy(dst, src, 11);
  404be2:	f8df a278 	ldr.w	sl, [pc, #632]	; 404e5c <dir_register+0x2b8>
  404be6:	e032      	b.n	404c4e <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  404be8:	463b      	mov	r3, r7
  404bea:	e030      	b.n	404c4e <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  404bec:	4613      	mov	r3, r2
  404bee:	e002      	b.n	404bf6 <dir_register+0x52>
  404bf0:	2300      	movs	r3, #0
  404bf2:	e000      	b.n	404bf6 <dir_register+0x52>
  404bf4:	4613      	mov	r3, r2
  404bf6:	442b      	add	r3, r5
  404bf8:	e005      	b.n	404c06 <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  404bfa:	4641      	mov	r1, r8
  404bfc:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  404c00:	1b59      	subs	r1, r3, r5
  404c02:	2907      	cmp	r1, #7
  404c04:	d807      	bhi.n	404c16 <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  404c06:	2a07      	cmp	r2, #7
  404c08:	d8f7      	bhi.n	404bfa <dir_register+0x56>
  404c0a:	a908      	add	r1, sp, #32
  404c0c:	4411      	add	r1, r2
  404c0e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  404c12:	3201      	adds	r2, #1
  404c14:	e7f2      	b.n	404bfc <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  404c16:	4620      	mov	r0, r4
  404c18:	47c8      	blx	r9
			if (res != FR_OK) break;
  404c1a:	4606      	mov	r6, r0
  404c1c:	2800      	cmp	r0, #0
  404c1e:	d13e      	bne.n	404c9e <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  404c20:	3701      	adds	r7, #1
  404c22:	b2bf      	uxth	r7, r7
  404c24:	2f64      	cmp	r7, #100	; 0x64
  404c26:	d038      	beq.n	404c9a <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  404c28:	220b      	movs	r2, #11
  404c2a:	a905      	add	r1, sp, #20
  404c2c:	4628      	mov	r0, r5
  404c2e:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  404c30:	2f05      	cmp	r7, #5
  404c32:	d9d9      	bls.n	404be8 <dir_register+0x44>
  404c34:	463b      	mov	r3, r7
  404c36:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  404c38:	03da      	lsls	r2, r3, #15
  404c3a:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  404c3e:	f831 2b02 	ldrh.w	r2, [r1], #2
  404c42:	fa12 f383 	uxtah	r3, r2, r3
  404c46:	b29b      	uxth	r3, r3
  404c48:	880a      	ldrh	r2, [r1, #0]
  404c4a:	2a00      	cmp	r2, #0
  404c4c:	d1f4      	bne.n	404c38 <dir_register+0x94>
  404c4e:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  404c52:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  404c54:	f003 000f 	and.w	r0, r3, #15
  404c58:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  404c5c:	2939      	cmp	r1, #57	; 0x39
  404c5e:	bf88      	it	hi
  404c60:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  404c64:	3a01      	subs	r2, #1
  404c66:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  404c6a:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  404c6e:	2b00      	cmp	r3, #0
  404c70:	d1f0      	bne.n	404c54 <dir_register+0xb0>
	ns[i] = '~';
  404c72:	217e      	movs	r1, #126	; 0x7e
  404c74:	ab08      	add	r3, sp, #32
  404c76:	4413      	add	r3, r2
  404c78:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  404c7c:	2a00      	cmp	r2, #0
  404c7e:	d0b5      	beq.n	404bec <dir_register+0x48>
  404c80:	782b      	ldrb	r3, [r5, #0]
  404c82:	2b20      	cmp	r3, #32
  404c84:	d0b4      	beq.n	404bf0 <dir_register+0x4c>
  404c86:	4629      	mov	r1, r5
  404c88:	2300      	movs	r3, #0
  404c8a:	3301      	adds	r3, #1
  404c8c:	429a      	cmp	r2, r3
  404c8e:	d0b1      	beq.n	404bf4 <dir_register+0x50>
  404c90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  404c94:	2820      	cmp	r0, #32
  404c96:	d1f8      	bne.n	404c8a <dir_register+0xe6>
  404c98:	e7ad      	b.n	404bf6 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  404c9a:	2607      	movs	r6, #7
  404c9c:	e004      	b.n	404ca8 <dir_register+0x104>
  404c9e:	2f64      	cmp	r7, #100	; 0x64
  404ca0:	f000 809f 	beq.w	404de2 <dir_register+0x23e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  404ca4:	2804      	cmp	r0, #4
  404ca6:	d003      	beq.n	404cb0 <dir_register+0x10c>
}
  404ca8:	4630      	mov	r0, r6
  404caa:	b009      	add	sp, #36	; 0x24
  404cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  404cb0:	f89d 301f 	ldrb.w	r3, [sp, #31]
  404cb4:	72eb      	strb	r3, [r5, #11]
  404cb6:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  404cba:	f89d 301f 	ldrb.w	r3, [sp, #31]
  404cbe:	f013 0f02 	tst.w	r3, #2
  404cc2:	d014      	beq.n	404cee <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  404cc4:	f8bb 3000 	ldrh.w	r3, [fp]
  404cc8:	b17b      	cbz	r3, 404cea <dir_register+0x146>
  404cca:	2300      	movs	r3, #0
  404ccc:	3301      	adds	r3, #1
  404cce:	b29b      	uxth	r3, r3
  404cd0:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  404cd4:	2a00      	cmp	r2, #0
  404cd6:	d1f9      	bne.n	404ccc <dir_register+0x128>
		ne = (ne + 25) / 13;
  404cd8:	3319      	adds	r3, #25
  404cda:	4f61      	ldr	r7, [pc, #388]	; (404e60 <dir_register+0x2bc>)
  404cdc:	fb87 2703 	smull	r2, r7, r7, r3
  404ce0:	17db      	asrs	r3, r3, #31
  404ce2:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  404ce6:	b2bf      	uxth	r7, r7
  404ce8:	e002      	b.n	404cf0 <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  404cea:	2300      	movs	r3, #0
  404cec:	e7f4      	b.n	404cd8 <dir_register+0x134>
		ne = 1;
  404cee:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  404cf0:	2100      	movs	r1, #0
  404cf2:	4620      	mov	r0, r4
  404cf4:	4b5b      	ldr	r3, [pc, #364]	; (404e64 <dir_register+0x2c0>)
  404cf6:	4798      	blx	r3
	if (res != FR_OK) return res;
  404cf8:	4606      	mov	r6, r0
  404cfa:	2800      	cmp	r0, #0
  404cfc:	d1d4      	bne.n	404ca8 <dir_register+0x104>
  404cfe:	f04f 0a00 	mov.w	sl, #0
  404d02:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  404d04:	f8df 8168 	ldr.w	r8, [pc, #360]	; 404e70 <dir_register+0x2cc>
			n = 0;					/* Not a blank entry. Restart to search */
  404d08:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  404d0a:	f8df 9160 	ldr.w	r9, [pc, #352]	; 404e6c <dir_register+0x2c8>
  404d0e:	e00a      	b.n	404d26 <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  404d10:	1c6b      	adds	r3, r5, #1
  404d12:	b29b      	uxth	r3, r3
  404d14:	429f      	cmp	r7, r3
  404d16:	d066      	beq.n	404de6 <dir_register+0x242>
  404d18:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  404d1a:	2101      	movs	r1, #1
  404d1c:	4620      	mov	r0, r4
  404d1e:	47c8      	blx	r9
	} while (res == FR_OK);
  404d20:	4606      	mov	r6, r0
  404d22:	2800      	cmp	r0, #0
  404d24:	d1c0      	bne.n	404ca8 <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  404d26:	6921      	ldr	r1, [r4, #16]
  404d28:	6820      	ldr	r0, [r4, #0]
  404d2a:	47c0      	blx	r8
		if (res != FR_OK) break;
  404d2c:	4606      	mov	r6, r0
  404d2e:	2800      	cmp	r0, #0
  404d30:	d1ba      	bne.n	404ca8 <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  404d32:	6963      	ldr	r3, [r4, #20]
  404d34:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  404d36:	2be5      	cmp	r3, #229	; 0xe5
  404d38:	d000      	beq.n	404d3c <dir_register+0x198>
  404d3a:	b923      	cbnz	r3, 404d46 <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  404d3c:	2d00      	cmp	r5, #0
  404d3e:	d1e7      	bne.n	404d10 <dir_register+0x16c>
  404d40:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  404d44:	e7e4      	b.n	404d10 <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  404d46:	465d      	mov	r5, fp
  404d48:	e7e7      	b.n	404d1a <dir_register+0x176>
		res = dir_sdi(dj, is);
  404d4a:	4651      	mov	r1, sl
  404d4c:	4620      	mov	r0, r4
  404d4e:	4b45      	ldr	r3, [pc, #276]	; (404e64 <dir_register+0x2c0>)
  404d50:	4798      	blx	r3
		if (res == FR_OK) {
  404d52:	4606      	mov	r6, r0
  404d54:	2800      	cmp	r0, #0
  404d56:	d1a7      	bne.n	404ca8 <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  404d58:	69a0      	ldr	r0, [r4, #24]
  404d5a:	4b43      	ldr	r3, [pc, #268]	; (404e68 <dir_register+0x2c4>)
  404d5c:	4798      	blx	r3
  404d5e:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  404d60:	2700      	movs	r7, #0
	s = wc = 0;
  404d62:	9701      	str	r7, [sp, #4]
  404d64:	e019      	b.n	404d9a <dir_register+0x1f6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  404d66:	4671      	mov	r1, lr
  404d68:	e062      	b.n	404e30 <dir_register+0x28c>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  404d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  404d6e:	4293      	cmp	r3, r2
  404d70:	d002      	beq.n	404d78 <dir_register+0x1d4>
  404d72:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  404d76:	b90b      	cbnz	r3, 404d7c <dir_register+0x1d8>
  404d78:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  404d7c:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  404d80:	6823      	ldr	r3, [r4, #0]
  404d82:	2201      	movs	r2, #1
  404d84:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  404d86:	4639      	mov	r1, r7
  404d88:	4620      	mov	r0, r4
  404d8a:	4b38      	ldr	r3, [pc, #224]	; (404e6c <dir_register+0x2c8>)
  404d8c:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  404d8e:	4606      	mov	r6, r0
  404d90:	2800      	cmp	r0, #0
  404d92:	d189      	bne.n	404ca8 <dir_register+0x104>
  404d94:	3d01      	subs	r5, #1
  404d96:	b2ad      	uxth	r5, r5
  404d98:	b33d      	cbz	r5, 404dea <dir_register+0x246>
				res = move_window(dj->fs, dj->sect);
  404d9a:	6921      	ldr	r1, [r4, #16]
  404d9c:	6820      	ldr	r0, [r4, #0]
  404d9e:	4b34      	ldr	r3, [pc, #208]	; (404e70 <dir_register+0x2cc>)
  404da0:	4798      	blx	r3
				if (res != FR_OK) break;
  404da2:	4606      	mov	r6, r0
  404da4:	2800      	cmp	r0, #0
  404da6:	f47f af7f 	bne.w	404ca8 <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  404daa:	f8d4 901c 	ldr.w	r9, [r4, #28]
  404dae:	6960      	ldr	r0, [r4, #20]
  404db0:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  404db4:	f89d 3000 	ldrb.w	r3, [sp]
  404db8:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  404dba:	230f      	movs	r3, #15
  404dbc:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  404dbe:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  404dc0:	7687      	strb	r7, [r0, #26]
  404dc2:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  404dc4:	f10b 31ff 	add.w	r1, fp, #4294967295
  404dc8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  404dcc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  404dd0:	4a28      	ldr	r2, [pc, #160]	; (404e74 <dir_register+0x2d0>)
  404dd2:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  404dd6:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  404dd8:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  404ddc:	f04f 0aff 	mov.w	sl, #255	; 0xff
  404de0:	e029      	b.n	404e36 <dir_register+0x292>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  404de2:	2607      	movs	r6, #7
  404de4:	e760      	b.n	404ca8 <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  404de6:	2b01      	cmp	r3, #1
  404de8:	d8af      	bhi.n	404d4a <dir_register+0x1a6>
		res = move_window(dj->fs, dj->sect);
  404dea:	6921      	ldr	r1, [r4, #16]
  404dec:	6820      	ldr	r0, [r4, #0]
  404dee:	4b20      	ldr	r3, [pc, #128]	; (404e70 <dir_register+0x2cc>)
  404df0:	4798      	blx	r3
		if (res == FR_OK) {
  404df2:	4606      	mov	r6, r0
  404df4:	2800      	cmp	r0, #0
  404df6:	f47f af57 	bne.w	404ca8 <dir_register+0x104>
			dir = dj->dir;
  404dfa:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  404dfc:	2220      	movs	r2, #32
  404dfe:	2100      	movs	r1, #0
  404e00:	4628      	mov	r0, r5
  404e02:	4b1d      	ldr	r3, [pc, #116]	; (404e78 <dir_register+0x2d4>)
  404e04:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  404e06:	220b      	movs	r2, #11
  404e08:	69a1      	ldr	r1, [r4, #24]
  404e0a:	4628      	mov	r0, r5
  404e0c:	4b13      	ldr	r3, [pc, #76]	; (404e5c <dir_register+0x2b8>)
  404e0e:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  404e10:	69a3      	ldr	r3, [r4, #24]
  404e12:	7adb      	ldrb	r3, [r3, #11]
  404e14:	f003 0318 	and.w	r3, r3, #24
  404e18:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  404e1a:	6823      	ldr	r3, [r4, #0]
  404e1c:	2201      	movs	r2, #1
  404e1e:	711a      	strb	r2, [r3, #4]
  404e20:	e742      	b.n	404ca8 <dir_register+0x104>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  404e22:	f892 e000 	ldrb.w	lr, [r2]
  404e26:	f800 a00e 	strb.w	sl, [r0, lr]
  404e2a:	4486      	add	lr, r0
  404e2c:	f88e a001 	strb.w	sl, [lr, #1]
  404e30:	3201      	adds	r2, #1
	} while (++s < 13);
  404e32:	4542      	cmp	r2, r8
  404e34:	d099      	beq.n	404d6a <dir_register+0x1c6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  404e36:	42b3      	cmp	r3, r6
  404e38:	d0f3      	beq.n	404e22 <dir_register+0x27e>
  404e3a:	f101 0e01 	add.w	lr, r1, #1
  404e3e:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  404e42:	7811      	ldrb	r1, [r2, #0]
  404e44:	5443      	strb	r3, [r0, r1]
  404e46:	4401      	add	r1, r0
  404e48:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  404e4c:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  404e50:	2b00      	cmp	r3, #0
  404e52:	d188      	bne.n	404d66 <dir_register+0x1c2>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  404e54:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  404e56:	4633      	mov	r3, r6
  404e58:	e7ea      	b.n	404e30 <dir_register+0x28c>
  404e5a:	bf00      	nop
  404e5c:	00403e75 	.word	0x00403e75
  404e60:	4ec4ec4f 	.word	0x4ec4ec4f
  404e64:	004045ad 	.word	0x004045ad
  404e68:	00403ead 	.word	0x00403ead
  404e6c:	004048c1 	.word	0x004048c1
  404e70:	00404435 	.word	0x00404435
  404e74:	0040abd8 	.word	0x0040abd8
  404e78:	00403e89 	.word	0x00403e89
  404e7c:	004049f9 	.word	0x004049f9

00404e80 <dir_read>:
{
  404e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e84:	4604      	mov	r4, r0
	BYTE a, ord = 0xFF, sum = 0xFF;
  404e86:	f04f 09ff 	mov.w	r9, #255	; 0xff
  404e8a:	464e      	mov	r6, r9
	res = FR_NO_FILE;
  404e8c:	2504      	movs	r5, #4
		res = move_window(dj->fs, dj->sect);
  404e8e:	4f40      	ldr	r7, [pc, #256]	; (404f90 <dir_read+0x110>)
			if (uc != 0xFFFF) return 0;		/* Check filler */
  404e90:	f64f 78ff 	movw	r8, #65535	; 0xffff
	while (dj->sect) {
  404e94:	e05a      	b.n	404f4c <dir_read+0xcc>
			if (a == AM_LFN) {			/* An LFN entry is found */
  404e96:	290f      	cmp	r1, #15
  404e98:	d146      	bne.n	404f28 <dir_read+0xa8>
				if (c & LLE) {			/* Is it start of LFN sequence? */
  404e9a:	f013 0f40 	tst.w	r3, #64	; 0x40
  404e9e:	d00b      	beq.n	404eb8 <dir_read+0x38>
					sum = dir[LDIR_Chksum];
  404ea0:	f890 900d 	ldrb.w	r9, [r0, #13]
					c &= ~LLE; ord = c;
  404ea4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
					dj->lfn_idx = dj->index;
  404ea8:	88e2      	ldrh	r2, [r4, #6]
  404eaa:	8422      	strh	r2, [r4, #32]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404eac:	f890 e00d 	ldrb.w	lr, [r0, #13]
  404eb0:	45ce      	cmp	lr, r9
  404eb2:	d006      	beq.n	404ec2 <dir_read+0x42>
  404eb4:	26ff      	movs	r6, #255	; 0xff
  404eb6:	e043      	b.n	404f40 <dir_read+0xc0>
  404eb8:	429e      	cmp	r6, r3
  404eba:	bf18      	it	ne
  404ebc:	26ff      	movne	r6, #255	; 0xff
  404ebe:	d13f      	bne.n	404f40 <dir_read+0xc0>
  404ec0:	e7f4      	b.n	404eac <dir_read+0x2c>
  404ec2:	f8d4 a01c 	ldr.w	sl, [r4, #28]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
  404ec6:	7806      	ldrb	r6, [r0, #0]
  404ec8:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  404ecc:	3e01      	subs	r6, #1
  404ece:	eb06 0246 	add.w	r2, r6, r6, lsl #1
  404ed2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
  404ed6:	492f      	ldr	r1, [pc, #188]	; (404f94 <dir_read+0x114>)
  404ed8:	f101 090d 	add.w	r9, r1, #13
	s = 0; wc = 1;
  404edc:	f04f 0c01 	mov.w	ip, #1
  404ee0:	e003      	b.n	404eea <dir_read+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
  404ee2:	4542      	cmp	r2, r8
  404ee4:	d14b      	bne.n	404f7e <dir_read+0xfe>
	} while (++s < 13);						/* Read all character in the entry */
  404ee6:	4589      	cmp	r9, r1
  404ee8:	d011      	beq.n	404f0e <dir_read+0x8e>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
  404eea:	f811 5b01 	ldrb.w	r5, [r1], #1
  404eee:	1942      	adds	r2, r0, r5
  404ef0:	f892 b001 	ldrb.w	fp, [r2, #1]
  404ef4:	5d42      	ldrb	r2, [r0, r5]
  404ef6:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
  404efa:	f1bc 0f00 	cmp.w	ip, #0
  404efe:	d0f0      	beq.n	404ee2 <dir_read+0x62>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
  404f00:	2efe      	cmp	r6, #254	; 0xfe
  404f02:	d83c      	bhi.n	404f7e <dir_read+0xfe>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404f04:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
  404f08:	4694      	mov	ip, r2
  404f0a:	3601      	adds	r6, #1
  404f0c:	e7eb      	b.n	404ee6 <dir_read+0x66>
	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
  404f0e:	7802      	ldrb	r2, [r0, #0]
  404f10:	f012 0f40 	tst.w	r2, #64	; 0x40
  404f14:	d004      	beq.n	404f20 <dir_read+0xa0>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
  404f16:	2efe      	cmp	r6, #254	; 0xfe
  404f18:	d831      	bhi.n	404f7e <dir_read+0xfe>
		lfnbuf[i] = 0;
  404f1a:	2200      	movs	r2, #0
  404f1c:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404f20:	3b01      	subs	r3, #1
  404f22:	b2de      	uxtb	r6, r3
  404f24:	46f1      	mov	r9, lr
  404f26:	e00b      	b.n	404f40 <dir_read+0xc0>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
  404f28:	b91e      	cbnz	r6, 404f32 <dir_read+0xb2>
  404f2a:	4b1b      	ldr	r3, [pc, #108]	; (404f98 <dir_read+0x118>)
  404f2c:	4798      	blx	r3
  404f2e:	4581      	cmp	r9, r0
  404f30:	d02b      	beq.n	404f8a <dir_read+0x10a>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
  404f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404f36:	8423      	strh	r3, [r4, #32]
  404f38:	e027      	b.n	404f8a <dir_read+0x10a>
			ord = 0xFF;
  404f3a:	26ff      	movs	r6, #255	; 0xff
  404f3c:	e000      	b.n	404f40 <dir_read+0xc0>
  404f3e:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dj, 0);				/* Next entry */
  404f40:	2100      	movs	r1, #0
  404f42:	4620      	mov	r0, r4
  404f44:	4b15      	ldr	r3, [pc, #84]	; (404f9c <dir_read+0x11c>)
  404f46:	4798      	blx	r3
		if (res != FR_OK) break;
  404f48:	4605      	mov	r5, r0
  404f4a:	b9e0      	cbnz	r0, 404f86 <dir_read+0x106>
	while (dj->sect) {
  404f4c:	6921      	ldr	r1, [r4, #16]
  404f4e:	b1a1      	cbz	r1, 404f7a <dir_read+0xfa>
		res = move_window(dj->fs, dj->sect);
  404f50:	6820      	ldr	r0, [r4, #0]
  404f52:	47b8      	blx	r7
		if (res != FR_OK) break;
  404f54:	4605      	mov	r5, r0
  404f56:	b9b0      	cbnz	r0, 404f86 <dir_read+0x106>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  404f58:	6960      	ldr	r0, [r4, #20]
		c = dir[DIR_Name];
  404f5a:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  404f5c:	b193      	cbz	r3, 404f84 <dir_read+0x104>
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  404f5e:	2be5      	cmp	r3, #229	; 0xe5
  404f60:	d0eb      	beq.n	404f3a <dir_read+0xba>
  404f62:	2b2e      	cmp	r3, #46	; 0x2e
  404f64:	d0eb      	beq.n	404f3e <dir_read+0xbe>
		a = dir[DIR_Attr] & AM_MASK;
  404f66:	7ac2      	ldrb	r2, [r0, #11]
  404f68:	f002 013f 	and.w	r1, r2, #63	; 0x3f
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  404f6c:	f012 0f08 	tst.w	r2, #8
  404f70:	d091      	beq.n	404e96 <dir_read+0x16>
  404f72:	290f      	cmp	r1, #15
  404f74:	d091      	beq.n	404e9a <dir_read+0x1a>
			ord = 0xFF;
  404f76:	26ff      	movs	r6, #255	; 0xff
  404f78:	e7e2      	b.n	404f40 <dir_read+0xc0>
	if (res != FR_OK) dj->sect = 0;
  404f7a:	b135      	cbz	r5, 404f8a <dir_read+0x10a>
  404f7c:	e003      	b.n	404f86 <dir_read+0x106>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404f7e:	46f1      	mov	r9, lr
  404f80:	26ff      	movs	r6, #255	; 0xff
  404f82:	e7dd      	b.n	404f40 <dir_read+0xc0>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  404f84:	2504      	movs	r5, #4
	if (res != FR_OK) dj->sect = 0;
  404f86:	2300      	movs	r3, #0
  404f88:	6123      	str	r3, [r4, #16]
}
  404f8a:	4628      	mov	r0, r5
  404f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f90:	00404435 	.word	0x00404435
  404f94:	0040abd8 	.word	0x0040abd8
  404f98:	00403ead 	.word	0x00403ead
  404f9c:	004048c1 	.word	0x004048c1

00404fa0 <sync>:
{
  404fa0:	b570      	push	{r4, r5, r6, lr}
  404fa2:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  404fa4:	2100      	movs	r1, #0
  404fa6:	4b2d      	ldr	r3, [pc, #180]	; (40505c <sync+0xbc>)
  404fa8:	4798      	blx	r3
	if (res == FR_OK) {
  404faa:	4603      	mov	r3, r0
  404fac:	b950      	cbnz	r0, 404fc4 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  404fae:	7823      	ldrb	r3, [r4, #0]
  404fb0:	2b03      	cmp	r3, #3
  404fb2:	d009      	beq.n	404fc8 <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  404fb4:	2200      	movs	r2, #0
  404fb6:	4611      	mov	r1, r2
  404fb8:	7860      	ldrb	r0, [r4, #1]
  404fba:	4b29      	ldr	r3, [pc, #164]	; (405060 <sync+0xc0>)
  404fbc:	4798      	blx	r3
	res = move_window(fs, 0);
  404fbe:	1c03      	adds	r3, r0, #0
  404fc0:	bf18      	it	ne
  404fc2:	2301      	movne	r3, #1
}
  404fc4:	4618      	mov	r0, r3
  404fc6:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  404fc8:	7963      	ldrb	r3, [r4, #5]
  404fca:	2b00      	cmp	r3, #0
  404fcc:	d0f2      	beq.n	404fb4 <sync+0x14>
			fs->winsect = 0;
  404fce:	2600      	movs	r6, #0
  404fd0:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  404fd2:	f104 0530 	add.w	r5, r4, #48	; 0x30
  404fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
  404fda:	4631      	mov	r1, r6
  404fdc:	4628      	mov	r0, r5
  404fde:	4b21      	ldr	r3, [pc, #132]	; (405064 <sync+0xc4>)
  404fe0:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  404fe2:	2355      	movs	r3, #85	; 0x55
  404fe4:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  404fe8:	23aa      	movs	r3, #170	; 0xaa
  404fea:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  404fee:	2352      	movs	r3, #82	; 0x52
  404ff0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  404ff4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  404ff8:	2361      	movs	r3, #97	; 0x61
  404ffa:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  404ffe:	2241      	movs	r2, #65	; 0x41
  405000:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  405004:	2172      	movs	r1, #114	; 0x72
  405006:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
  40500a:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
  40500e:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  405012:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  405016:	6923      	ldr	r3, [r4, #16]
  405018:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  40501c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  405020:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  405024:	0c1a      	lsrs	r2, r3, #16
  405026:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  40502a:	0e1b      	lsrs	r3, r3, #24
  40502c:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  405030:	68e3      	ldr	r3, [r4, #12]
  405032:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  405036:	f3c3 2207 	ubfx	r2, r3, #8, #8
  40503a:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  40503e:	0c1a      	lsrs	r2, r3, #16
  405040:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  405044:	0e1b      	lsrs	r3, r3, #24
  405046:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  40504a:	2301      	movs	r3, #1
  40504c:	6962      	ldr	r2, [r4, #20]
  40504e:	4629      	mov	r1, r5
  405050:	7860      	ldrb	r0, [r4, #1]
  405052:	4d05      	ldr	r5, [pc, #20]	; (405068 <sync+0xc8>)
  405054:	47a8      	blx	r5
			fs->fsi_flag = 0;
  405056:	7166      	strb	r6, [r4, #5]
  405058:	e7ac      	b.n	404fb4 <sync+0x14>
  40505a:	bf00      	nop
  40505c:	00404435 	.word	0x00404435
  405060:	00403dad 	.word	0x00403dad
  405064:	00403e89 	.word	0x00403e89
  405068:	00403d3d 	.word	0x00403d3d

0040506c <follow_path>:
{
  40506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405070:	b083      	sub	sp, #12
  405072:	4682      	mov	sl, r0
  405074:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  405076:	780b      	ldrb	r3, [r1, #0]
  405078:	2b2f      	cmp	r3, #47	; 0x2f
  40507a:	d00c      	beq.n	405096 <follow_path+0x2a>
  40507c:	2b5c      	cmp	r3, #92	; 0x5c
  40507e:	d00a      	beq.n	405096 <follow_path+0x2a>
	dj->sclust = 0;						/* Start from the root dir */
  405080:	2300      	movs	r3, #0
  405082:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  405086:	f898 3000 	ldrb.w	r3, [r8]
  40508a:	2b1f      	cmp	r3, #31
  40508c:	d906      	bls.n	40509c <follow_path+0x30>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40508e:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 405384 <follow_path+0x318>
			res = dir_find(dj);				/* Find it */
  405092:	4644      	mov	r4, r8
  405094:	e00c      	b.n	4050b0 <follow_path+0x44>
		path++;
  405096:	f108 0801 	add.w	r8, r8, #1
  40509a:	e7f1      	b.n	405080 <follow_path+0x14>
		res = dir_sdi(dj, 0);
  40509c:	2100      	movs	r1, #0
  40509e:	4650      	mov	r0, sl
  4050a0:	4bb2      	ldr	r3, [pc, #712]	; (40536c <follow_path+0x300>)
  4050a2:	4798      	blx	r3
  4050a4:	4603      	mov	r3, r0
		dj->dir = 0;
  4050a6:	2200      	movs	r2, #0
  4050a8:	f8ca 2014 	str.w	r2, [sl, #20]
  4050ac:	e12e      	b.n	40530c <follow_path+0x2a0>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  4050ae:	461c      	mov	r4, r3
  4050b0:	4627      	mov	r7, r4
  4050b2:	4623      	mov	r3, r4
  4050b4:	f813 0b01 	ldrb.w	r0, [r3], #1
  4050b8:	282f      	cmp	r0, #47	; 0x2f
  4050ba:	d0f8      	beq.n	4050ae <follow_path+0x42>
  4050bc:	285c      	cmp	r0, #92	; 0x5c
  4050be:	bf08      	it	eq
  4050c0:	461c      	moveq	r4, r3
  4050c2:	d0f5      	beq.n	4050b0 <follow_path+0x44>
	lfn = dj->lfn;
  4050c4:	f8da b01c 	ldr.w	fp, [sl, #28]
		w = p[si++];					/* Get a character */
  4050c8:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  4050ca:	281f      	cmp	r0, #31
  4050cc:	f240 812d 	bls.w	40532a <follow_path+0x2be>
  4050d0:	282f      	cmp	r0, #47	; 0x2f
  4050d2:	f000 812f 	beq.w	405334 <follow_path+0x2c8>
  4050d6:	285c      	cmp	r0, #92	; 0x5c
  4050d8:	f000 8135 	beq.w	405346 <follow_path+0x2da>
  4050dc:	f1ab 0602 	sub.w	r6, fp, #2
  4050e0:	2501      	movs	r5, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4050e2:	46a8      	mov	r8, r5
  4050e4:	e012      	b.n	40510c <follow_path+0xa0>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  4050e6:	bb73      	cbnz	r3, 405146 <follow_path+0xda>
		lfn[di++] = w;					/* Store the Unicode char */
  4050e8:	f826 2f02 	strh.w	r2, [r6, #2]!
		w = p[si++];					/* Get a character */
  4050ec:	1c6b      	adds	r3, r5, #1
  4050ee:	f814 0f01 	ldrb.w	r0, [r4, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  4050f2:	281f      	cmp	r0, #31
  4050f4:	f240 811b 	bls.w	40532e <follow_path+0x2c2>
  4050f8:	282f      	cmp	r0, #47	; 0x2f
  4050fa:	f000 811d 	beq.w	405338 <follow_path+0x2cc>
  4050fe:	285c      	cmp	r0, #92	; 0x5c
  405100:	f000 811a 	beq.w	405338 <follow_path+0x2cc>
		if (di >= _MAX_LFN)				/* Reject too long name */
  405104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  405108:	d01d      	beq.n	405146 <follow_path+0xda>
		w = p[si++];					/* Get a character */
  40510a:	461d      	mov	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40510c:	4641      	mov	r1, r8
  40510e:	47c8      	blx	r9
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  405110:	4602      	mov	r2, r0
  405112:	b1c0      	cbz	r0, 405146 <follow_path+0xda>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  405114:	287f      	cmp	r0, #127	; 0x7f
  405116:	d8e7      	bhi.n	4050e8 <follow_path+0x7c>
	while (*str && *str != chr) str++;
  405118:	2822      	cmp	r0, #34	; 0x22
  40511a:	f000 80f6 	beq.w	40530a <follow_path+0x29e>
  40511e:	232a      	movs	r3, #42	; 0x2a
  405120:	4993      	ldr	r1, [pc, #588]	; (405370 <follow_path+0x304>)
  405122:	b298      	uxth	r0, r3
  405124:	4290      	cmp	r0, r2
  405126:	d0de      	beq.n	4050e6 <follow_path+0x7a>
  405128:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40512c:	2b00      	cmp	r3, #0
  40512e:	d1f8      	bne.n	405122 <follow_path+0xb6>
  405130:	e7da      	b.n	4050e8 <follow_path+0x7c>
	while (di) {						/* Strip trailing spaces and dots */
  405132:	3d01      	subs	r5, #1
  405134:	f000 80e9 	beq.w	40530a <follow_path+0x29e>
		w = lfn[di-1];
  405138:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  40513c:	2b20      	cmp	r3, #32
  40513e:	d0f8      	beq.n	405132 <follow_path+0xc6>
  405140:	2b2e      	cmp	r3, #46	; 0x2e
  405142:	d0f6      	beq.n	405132 <follow_path+0xc6>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  405144:	b90d      	cbnz	r5, 40514a <follow_path+0xde>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  405146:	2306      	movs	r3, #6
	return res;
  405148:	e0e0      	b.n	40530c <follow_path+0x2a0>
	lfn[di] = 0;						/* LFN is created */
  40514a:	006f      	lsls	r7, r5, #1
  40514c:	f04f 0800 	mov.w	r8, #0
  405150:	f82b 8015 	strh.w	r8, [fp, r5, lsl #1]
	mem_set(dj->fn, ' ', 11);
  405154:	220b      	movs	r2, #11
  405156:	2120      	movs	r1, #32
  405158:	f8da 0018 	ldr.w	r0, [sl, #24]
  40515c:	4b85      	ldr	r3, [pc, #532]	; (405374 <follow_path+0x308>)
  40515e:	4798      	blx	r3
  405160:	f1ab 0102 	sub.w	r1, fp, #2
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  405164:	4643      	mov	r3, r8
  405166:	e000      	b.n	40516a <follow_path+0xfe>
  405168:	3301      	adds	r3, #1
  40516a:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  40516e:	2a20      	cmp	r2, #32
  405170:	d0fa      	beq.n	405168 <follow_path+0xfc>
  405172:	2a2e      	cmp	r2, #46	; 0x2e
  405174:	d0f8      	beq.n	405168 <follow_path+0xfc>
	if (si) cf |= NS_LOSS | NS_LFN;
  405176:	b10b      	cbz	r3, 40517c <follow_path+0x110>
  405178:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  40517c:	3f02      	subs	r7, #2
  40517e:	eb0b 0207 	add.w	r2, fp, r7
  405182:	f83b 1007 	ldrh.w	r1, [fp, r7]
  405186:	292e      	cmp	r1, #46	; 0x2e
  405188:	d005      	beq.n	405196 <follow_path+0x12a>
  40518a:	3d01      	subs	r5, #1
  40518c:	d003      	beq.n	405196 <follow_path+0x12a>
  40518e:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  405192:	292e      	cmp	r1, #46	; 0x2e
  405194:	d1f9      	bne.n	40518a <follow_path+0x11e>
		dj->fn[i++] = (BYTE)w;
  405196:	2208      	movs	r2, #8
  405198:	9200      	str	r2, [sp, #0]
  40519a:	f04f 0800 	mov.w	r8, #0
  40519e:	f8cd 8004 	str.w	r8, [sp, #4]
  4051a2:	e005      	b.n	4051b0 <follow_path+0x144>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  4051a4:	42af      	cmp	r7, r5
  4051a6:	f000 80d1 	beq.w	40534c <follow_path+0x2e0>
			cf |= NS_LOSS | NS_LFN; continue;
  4051aa:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN char */
  4051ae:	463b      	mov	r3, r7
  4051b0:	1c5f      	adds	r7, r3, #1
  4051b2:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  4051b6:	b350      	cbz	r0, 40520e <follow_path+0x1a2>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  4051b8:	2820      	cmp	r0, #32
  4051ba:	d0f6      	beq.n	4051aa <follow_path+0x13e>
  4051bc:	282e      	cmp	r0, #46	; 0x2e
  4051be:	d0f1      	beq.n	4051a4 <follow_path+0x138>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  4051c0:	9b00      	ldr	r3, [sp, #0]
  4051c2:	4598      	cmp	r8, r3
  4051c4:	d219      	bcs.n	4051fa <follow_path+0x18e>
  4051c6:	42af      	cmp	r7, r5
  4051c8:	f000 80c0 	beq.w	40534c <follow_path+0x2e0>
		if (w >= 0x80) {				/* Non ASCII char */
  4051cc:	287f      	cmp	r0, #127	; 0x7f
  4051ce:	d86c      	bhi.n	4052aa <follow_path+0x23e>
	while (*str && *str != chr) str++;
  4051d0:	282b      	cmp	r0, #43	; 0x2b
  4051d2:	d079      	beq.n	4052c8 <follow_path+0x25c>
  4051d4:	232c      	movs	r3, #44	; 0x2c
  4051d6:	4a68      	ldr	r2, [pc, #416]	; (405378 <follow_path+0x30c>)
  4051d8:	b299      	uxth	r1, r3
  4051da:	4281      	cmp	r1, r0
  4051dc:	d072      	beq.n	4052c4 <follow_path+0x258>
  4051de:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4051e2:	2b00      	cmp	r3, #0
  4051e4:	d1f8      	bne.n	4051d8 <follow_path+0x16c>
				if (IsUpper(w)) {		/* ASCII large capital */
  4051e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  4051ea:	b29b      	uxth	r3, r3
  4051ec:	2b19      	cmp	r3, #25
  4051ee:	d876      	bhi.n	4052de <follow_path+0x272>
					b |= 2;
  4051f0:	9b01      	ldr	r3, [sp, #4]
  4051f2:	f043 0302 	orr.w	r3, r3, #2
  4051f6:	9301      	str	r3, [sp, #4]
  4051f8:	e069      	b.n	4052ce <follow_path+0x262>
			if (ni == 11) {				/* Long extension */
  4051fa:	9b00      	ldr	r3, [sp, #0]
  4051fc:	2b0b      	cmp	r3, #11
  4051fe:	d048      	beq.n	405292 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  405200:	42af      	cmp	r7, r5
  405202:	f000 80a6 	beq.w	405352 <follow_path+0x2e6>
  405206:	f046 0603 	orr.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  40520a:	f240 80a2 	bls.w	405352 <follow_path+0x2e6>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  40520e:	f8da 3018 	ldr.w	r3, [sl, #24]
  405212:	781a      	ldrb	r2, [r3, #0]
  405214:	2ae5      	cmp	r2, #229	; 0xe5
  405216:	d045      	beq.n	4052a4 <follow_path+0x238>
	if (ni == 8) b <<= 2;
  405218:	9b00      	ldr	r3, [sp, #0]
  40521a:	2b08      	cmp	r3, #8
  40521c:	d06b      	beq.n	4052f6 <follow_path+0x28a>
  40521e:	9a01      	ldr	r2, [sp, #4]
  405220:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  405224:	2b0c      	cmp	r3, #12
  405226:	d06d      	beq.n	405304 <follow_path+0x298>
  405228:	f002 0203 	and.w	r2, r2, #3
  40522c:	2a03      	cmp	r2, #3
  40522e:	d069      	beq.n	405304 <follow_path+0x298>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  405230:	f016 0f02 	tst.w	r6, #2
  405234:	d10b      	bne.n	40524e <follow_path+0x1e2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  405236:	9a01      	ldr	r2, [sp, #4]
  405238:	f002 0b03 	and.w	fp, r2, #3
  40523c:	f1bb 0f01 	cmp.w	fp, #1
  405240:	bf08      	it	eq
  405242:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  405246:	2b04      	cmp	r3, #4
  405248:	bf08      	it	eq
  40524a:	f046 0608 	orreq.w	r6, r6, #8
	dj->fn[NS] = cf;	/* SFN is created */
  40524e:	f8da 3018 	ldr.w	r3, [sl, #24]
  405252:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
  405254:	4650      	mov	r0, sl
  405256:	4b49      	ldr	r3, [pc, #292]	; (40537c <follow_path+0x310>)
  405258:	4798      	blx	r3
			ns = *(dj->fn+NS);
  40525a:	f8da 3018 	ldr.w	r3, [sl, #24]
  40525e:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  405260:	4603      	mov	r3, r0
  405262:	2800      	cmp	r0, #0
  405264:	d156      	bne.n	405314 <follow_path+0x2a8>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  405266:	f012 0f04 	tst.w	r2, #4
  40526a:	d14f      	bne.n	40530c <follow_path+0x2a0>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  40526c:	f8da 2014 	ldr.w	r2, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  405270:	7ad3      	ldrb	r3, [r2, #11]
  405272:	f013 0f10 	tst.w	r3, #16
  405276:	d056      	beq.n	405326 <follow_path+0x2ba>
			dj->sclust = LD_CLUST(dir);
  405278:	7d51      	ldrb	r1, [r2, #21]
  40527a:	7d13      	ldrb	r3, [r2, #20]
  40527c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  405280:	7ed0      	ldrb	r0, [r2, #27]
  405282:	7e93      	ldrb	r3, [r2, #26]
  405284:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  405288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40528c:	f8ca 3008 	str.w	r3, [sl, #8]
			res = create_name(dj, &path);	/* Get a segment */
  405290:	e70e      	b.n	4050b0 <follow_path+0x44>
				cf |= NS_LOSS | NS_LFN; break;
  405292:	f046 0603 	orr.w	r6, r6, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  405296:	f8da 3018 	ldr.w	r3, [sl, #24]
  40529a:	781a      	ldrb	r2, [r3, #0]
  40529c:	2ae5      	cmp	r2, #229	; 0xe5
  40529e:	d1be      	bne.n	40521e <follow_path+0x1b2>
  4052a0:	220b      	movs	r2, #11
  4052a2:	9200      	str	r2, [sp, #0]
  4052a4:	2205      	movs	r2, #5
  4052a6:	701a      	strb	r2, [r3, #0]
  4052a8:	e7b6      	b.n	405218 <follow_path+0x1ac>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  4052aa:	2100      	movs	r1, #0
  4052ac:	47c8      	blx	r9
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  4052ae:	4603      	mov	r3, r0
  4052b0:	2800      	cmp	r0, #0
  4052b2:	d058      	beq.n	405366 <follow_path+0x2fa>
  4052b4:	4a32      	ldr	r2, [pc, #200]	; (405380 <follow_path+0x314>)
  4052b6:	4413      	add	r3, r2
  4052b8:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  4052bc:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  4052c0:	b110      	cbz	r0, 4052c8 <follow_path+0x25c>
  4052c2:	e785      	b.n	4051d0 <follow_path+0x164>
  4052c4:	2b00      	cmp	r3, #0
  4052c6:	d08e      	beq.n	4051e6 <follow_path+0x17a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  4052c8:	f046 0603 	orr.w	r6, r6, #3
  4052cc:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  4052ce:	f8da 3018 	ldr.w	r3, [sl, #24]
  4052d2:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  4052d6:	463b      	mov	r3, r7
		dj->fn[i++] = (BYTE)w;
  4052d8:	f108 0801 	add.w	r8, r8, #1
  4052dc:	e768      	b.n	4051b0 <follow_path+0x144>
					if (IsLower(w)) {	/* ASCII small capital */
  4052de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  4052e2:	b29b      	uxth	r3, r3
  4052e4:	2b19      	cmp	r3, #25
  4052e6:	d8f2      	bhi.n	4052ce <follow_path+0x262>
						b |= 1; w -= 0x20;
  4052e8:	9b01      	ldr	r3, [sp, #4]
  4052ea:	f043 0301 	orr.w	r3, r3, #1
  4052ee:	9301      	str	r3, [sp, #4]
  4052f0:	3820      	subs	r0, #32
  4052f2:	b280      	uxth	r0, r0
  4052f4:	e7eb      	b.n	4052ce <follow_path+0x262>
	if (ni == 8) b <<= 2;
  4052f6:	9b01      	ldr	r3, [sp, #4]
  4052f8:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  4052fc:	fa5f f38b 	uxtb.w	r3, fp
  405300:	9301      	str	r3, [sp, #4]
  405302:	e78c      	b.n	40521e <follow_path+0x1b2>
		cf |= NS_LFN;
  405304:	f046 0602 	orr.w	r6, r6, #2
  405308:	e792      	b.n	405230 <follow_path+0x1c4>
  40530a:	2306      	movs	r3, #6
}
  40530c:	4618      	mov	r0, r3
  40530e:	b003      	add	sp, #12
  405310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  405314:	2804      	cmp	r0, #4
  405316:	d1f9      	bne.n	40530c <follow_path+0x2a0>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  405318:	f002 0204 	and.w	r2, r2, #4
  40531c:	2a00      	cmp	r2, #0
  40531e:	bf14      	ite	ne
  405320:	4603      	movne	r3, r0
  405322:	2305      	moveq	r3, #5
  405324:	e7f2      	b.n	40530c <follow_path+0x2a0>
				res = FR_NO_PATH; break;
  405326:	2305      	movs	r3, #5
  405328:	e7f0      	b.n	40530c <follow_path+0x2a0>
		w = p[si++];					/* Get a character */
  40532a:	2301      	movs	r3, #1
	si = di = 0;
  40532c:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
  40532e:	18fc      	adds	r4, r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  405330:	2604      	movs	r6, #4
  405332:	e003      	b.n	40533c <follow_path+0x2d0>
		w = p[si++];					/* Get a character */
  405334:	2301      	movs	r3, #1
	si = di = 0;
  405336:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
  405338:	18fc      	adds	r4, r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  40533a:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
  40533c:	2d00      	cmp	r5, #0
  40533e:	d0e4      	beq.n	40530a <follow_path+0x29e>
  405340:	eb0b 0245 	add.w	r2, fp, r5, lsl #1
  405344:	e6f8      	b.n	405138 <follow_path+0xcc>
		w = p[si++];					/* Get a character */
  405346:	2301      	movs	r3, #1
	si = di = 0;
  405348:	2500      	movs	r5, #0
  40534a:	e7f5      	b.n	405338 <follow_path+0x2cc>
			if (ni == 11) {				/* Long extension */
  40534c:	9b00      	ldr	r3, [sp, #0]
  40534e:	2b0b      	cmp	r3, #11
  405350:	d09f      	beq.n	405292 <follow_path+0x226>
			b <<= 2; continue;
  405352:	9b01      	ldr	r3, [sp, #4]
  405354:	009b      	lsls	r3, r3, #2
  405356:	b2db      	uxtb	r3, r3
  405358:	9301      	str	r3, [sp, #4]
  40535a:	462b      	mov	r3, r5
			si = di; i = 8; ni = 11;	/* Enter extension section */
  40535c:	220b      	movs	r2, #11
  40535e:	9200      	str	r2, [sp, #0]
  405360:	f04f 0808 	mov.w	r8, #8
  405364:	e724      	b.n	4051b0 <follow_path+0x144>
			cf |= NS_LFN;				/* Force create LFN entry */
  405366:	f046 0602 	orr.w	r6, r6, #2
  40536a:	e7ad      	b.n	4052c8 <follow_path+0x25c>
  40536c:	004045ad 	.word	0x004045ad
  405370:	0040ac69 	.word	0x0040ac69
  405374:	00403e89 	.word	0x00403e89
  405378:	0040ac75 	.word	0x0040ac75
  40537c:	004049f9 	.word	0x004049f9
  405380:	0040abe8 	.word	0x0040abe8
  405384:	004058d9 	.word	0x004058d9

00405388 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  405388:	2807      	cmp	r0, #7
  40538a:	d901      	bls.n	405390 <f_mount+0x8>
		return FR_INVALID_DRIVE;
  40538c:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  40538e:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  405390:	4b06      	ldr	r3, [pc, #24]	; (4053ac <f_mount+0x24>)
  405392:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (rfs) {
  405396:	b10b      	cbz	r3, 40539c <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
  405398:	2200      	movs	r2, #0
  40539a:	701a      	strb	r2, [r3, #0]
	if (fs) {
  40539c:	b109      	cbz	r1, 4053a2 <f_mount+0x1a>
		fs->fs_type = 0;		/* Clear new fs object */
  40539e:	2300      	movs	r3, #0
  4053a0:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  4053a2:	4b02      	ldr	r3, [pc, #8]	; (4053ac <f_mount+0x24>)
  4053a4:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return FR_OK;
  4053a8:	2000      	movs	r0, #0
  4053aa:	4770      	bx	lr
  4053ac:	200061a4 	.word	0x200061a4

004053b0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  4053b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4053b4:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  4053b8:	4605      	mov	r5, r0
  4053ba:	9101      	str	r1, [sp, #4]
  4053bc:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  4053be:	2300      	movs	r3, #0
  4053c0:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  4053c2:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  4053c6:	f002 021e 	and.w	r2, r2, #30
  4053ca:	a985      	add	r1, sp, #532	; 0x214
  4053cc:	a801      	add	r0, sp, #4
  4053ce:	4b58      	ldr	r3, [pc, #352]	; (405530 <f_open+0x180>)
  4053d0:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  4053d2:	ab82      	add	r3, sp, #520	; 0x208
  4053d4:	938b      	str	r3, [sp, #556]	; 0x22c
  4053d6:	ab02      	add	r3, sp, #8
  4053d8:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  4053da:	b140      	cbz	r0, 4053ee <f_open+0x3e>
  4053dc:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  4053de:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  4053e0:	f016 0f1c 	tst.w	r6, #28
  4053e4:	d117      	bne.n	405416 <f_open+0x66>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  4053e6:	2b00      	cmp	r3, #0
  4053e8:	f040 8092 	bne.w	405510 <f_open+0x160>
  4053ec:	e00d      	b.n	40540a <f_open+0x5a>
		res = follow_path(&dj, path);	/* Follow the file path */
  4053ee:	9901      	ldr	r1, [sp, #4]
  4053f0:	a885      	add	r0, sp, #532	; 0x214
  4053f2:	4b50      	ldr	r3, [pc, #320]	; (405534 <f_open+0x184>)
  4053f4:	4798      	blx	r3
	dir = dj.dir;
  4053f6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
  4053f8:	4603      	mov	r3, r0
  4053fa:	2800      	cmp	r0, #0
  4053fc:	d1f0      	bne.n	4053e0 <f_open+0x30>
		if (!dir)	/* Current dir itself */
  4053fe:	2c00      	cmp	r4, #0
  405400:	f000 808b 	beq.w	40551a <f_open+0x16a>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  405404:	f016 0f1c 	tst.w	r6, #28
  405408:	d116      	bne.n	405438 <f_open+0x88>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  40540a:	7ae3      	ldrb	r3, [r4, #11]
  40540c:	f013 0f10 	tst.w	r3, #16
  405410:	d04f      	beq.n	4054b2 <f_open+0x102>
				res = FR_NO_FILE;
  405412:	2304      	movs	r3, #4
  405414:	e07c      	b.n	405510 <f_open+0x160>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  405416:	2b04      	cmp	r3, #4
  405418:	d005      	beq.n	405426 <f_open+0x76>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  40541a:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  40541e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  405420:	2b00      	cmp	r3, #0
  405422:	d057      	beq.n	4054d4 <f_open+0x124>
  405424:	e074      	b.n	405510 <f_open+0x160>
				res = dir_register(&dj);
  405426:	a885      	add	r0, sp, #532	; 0x214
  405428:	4b43      	ldr	r3, [pc, #268]	; (405538 <f_open+0x188>)
  40542a:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  40542c:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  405430:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  405432:	4603      	mov	r3, r0
  405434:	b138      	cbz	r0, 405446 <f_open+0x96>
  405436:	e06b      	b.n	405510 <f_open+0x160>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  405438:	7ae3      	ldrb	r3, [r4, #11]
  40543a:	f013 0f11 	tst.w	r3, #17
  40543e:	d173      	bne.n	405528 <f_open+0x178>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  405440:	f016 0f04 	tst.w	r6, #4
  405444:	d172      	bne.n	40552c <f_open+0x17c>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  405446:	f017 0f08 	tst.w	r7, #8
  40544a:	d03f      	beq.n	4054cc <f_open+0x11c>
			dw = get_fattime();					/* Created time */
  40544c:	4b3b      	ldr	r3, [pc, #236]	; (40553c <f_open+0x18c>)
  40544e:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  405450:	73a0      	strb	r0, [r4, #14]
  405452:	f3c0 2307 	ubfx	r3, r0, #8, #8
  405456:	73e3      	strb	r3, [r4, #15]
  405458:	0c03      	lsrs	r3, r0, #16
  40545a:	7423      	strb	r3, [r4, #16]
  40545c:	0e00      	lsrs	r0, r0, #24
  40545e:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  405460:	2300      	movs	r3, #0
  405462:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  405464:	7723      	strb	r3, [r4, #28]
  405466:	7763      	strb	r3, [r4, #29]
  405468:	77a3      	strb	r3, [r4, #30]
  40546a:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  40546c:	7d62      	ldrb	r2, [r4, #21]
  40546e:	7d26      	ldrb	r6, [r4, #20]
  405470:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  405474:	7ee1      	ldrb	r1, [r4, #27]
  405476:	7ea2      	ldrb	r2, [r4, #26]
  405478:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  40547c:	76a3      	strb	r3, [r4, #26]
  40547e:	76e3      	strb	r3, [r4, #27]
  405480:	7523      	strb	r3, [r4, #20]
  405482:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  405484:	9885      	ldr	r0, [sp, #532]	; 0x214
  405486:	2301      	movs	r3, #1
  405488:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  40548a:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  40548e:	d01b      	beq.n	4054c8 <f_open+0x118>
				dw = dj.fs->winsect;
  405490:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  405494:	4631      	mov	r1, r6
  405496:	4b2a      	ldr	r3, [pc, #168]	; (405540 <f_open+0x190>)
  405498:	4798      	blx	r3
				if (res == FR_OK) {
  40549a:	4603      	mov	r3, r0
  40549c:	2800      	cmp	r0, #0
  40549e:	d137      	bne.n	405510 <f_open+0x160>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  4054a0:	9885      	ldr	r0, [sp, #532]	; 0x214
  4054a2:	3e01      	subs	r6, #1
  4054a4:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  4054a6:	4641      	mov	r1, r8
  4054a8:	4b26      	ldr	r3, [pc, #152]	; (405544 <f_open+0x194>)
  4054aa:	4798      	blx	r3
	if (res == FR_OK) {
  4054ac:	4603      	mov	r3, r0
  4054ae:	b158      	cbz	r0, 4054c8 <f_open+0x118>
  4054b0:	e02e      	b.n	405510 <f_open+0x160>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  4054b2:	f016 0f02 	tst.w	r6, #2
  4054b6:	d004      	beq.n	4054c2 <f_open+0x112>
  4054b8:	f013 0f01 	tst.w	r3, #1
  4054bc:	d001      	beq.n	4054c2 <f_open+0x112>
					res = FR_DENIED;
  4054be:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  4054c0:	e026      	b.n	405510 <f_open+0x160>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  4054c2:	f016 0f08 	tst.w	r6, #8
  4054c6:	d001      	beq.n	4054cc <f_open+0x11c>
			mode |= FA__WRITTEN;
  4054c8:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  4054cc:	9b85      	ldr	r3, [sp, #532]	; 0x214
  4054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4054d0:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  4054d2:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  4054d4:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  4054d6:	7d62      	ldrb	r2, [r4, #21]
  4054d8:	7d23      	ldrb	r3, [r4, #20]
  4054da:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4054de:	7ee1      	ldrb	r1, [r4, #27]
  4054e0:	7ea3      	ldrb	r3, [r4, #26]
  4054e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  4054e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4054ea:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  4054ec:	7fe2      	ldrb	r2, [r4, #31]
  4054ee:	7fa3      	ldrb	r3, [r4, #30]
  4054f0:	041b      	lsls	r3, r3, #16
  4054f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4054f6:	7f22      	ldrb	r2, [r4, #28]
  4054f8:	4313      	orrs	r3, r2
  4054fa:	7f62      	ldrb	r2, [r4, #29]
  4054fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  405500:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  405502:	2300      	movs	r3, #0
  405504:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  405506:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  405508:	9a85      	ldr	r2, [sp, #532]	; 0x214
  40550a:	602a      	str	r2, [r5, #0]
  40550c:	88d2      	ldrh	r2, [r2, #6]
  40550e:	80aa      	strh	r2, [r5, #4]
}
  405510:	4618      	mov	r0, r3
  405512:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  405516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  40551a:	f016 0f1c 	tst.w	r6, #28
  40551e:	d101      	bne.n	405524 <f_open+0x174>
			res = FR_INVALID_NAME;
  405520:	2306      	movs	r3, #6
  405522:	e77d      	b.n	405420 <f_open+0x70>
  405524:	2306      	movs	r3, #6
  405526:	e778      	b.n	40541a <f_open+0x6a>
				res = FR_DENIED;
  405528:	2307      	movs	r3, #7
  40552a:	e7f1      	b.n	405510 <f_open+0x160>
					res = FR_EXIST;
  40552c:	2308      	movs	r3, #8
  40552e:	e7ef      	b.n	405510 <f_open+0x160>
  405530:	00403f91 	.word	0x00403f91
  405534:	0040506d 	.word	0x0040506d
  405538:	00404ba5 	.word	0x00404ba5
  40553c:	00403e1d 	.word	0x00403e1d
  405540:	00404845 	.word	0x00404845
  405544:	00404435 	.word	0x00404435

00405548 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
  405548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40554c:	b083      	sub	sp, #12
  40554e:	4604      	mov	r4, r0
  405550:	4689      	mov	r9, r1
  405552:	4615      	mov	r5, r2
  405554:	4698      	mov	r8, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
  405556:	2300      	movs	r3, #0
  405558:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);				/* Check validity */
  40555c:	8881      	ldrh	r1, [r0, #4]
  40555e:	6800      	ldr	r0, [r0, #0]
  405560:	4b58      	ldr	r3, [pc, #352]	; (4056c4 <f_read+0x17c>)
  405562:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  405564:	9001      	str	r0, [sp, #4]
  405566:	2800      	cmp	r0, #0
  405568:	f040 80a8 	bne.w	4056bc <f_read+0x174>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
  40556c:	79a3      	ldrb	r3, [r4, #6]
  40556e:	f013 0f80 	tst.w	r3, #128	; 0x80
  405572:	f040 80a1 	bne.w	4056b8 <f_read+0x170>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
  405576:	f013 0f01 	tst.w	r3, #1
  40557a:	d102      	bne.n	405582 <f_read+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  40557c:	2307      	movs	r3, #7
  40557e:	9301      	str	r3, [sp, #4]
  405580:	e09c      	b.n	4056bc <f_read+0x174>
	remain = fp->fsize - fp->fptr;
  405582:	68e6      	ldr	r6, [r4, #12]
  405584:	68a3      	ldr	r3, [r4, #8]
  405586:	1af6      	subs	r6, r6, r3
  405588:	42ae      	cmp	r6, r5
  40558a:	bf28      	it	cs
  40558c:	462e      	movcs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
  40558e:	2e00      	cmp	r6, #0
  405590:	d14c      	bne.n	40562c <f_read+0xe4>
  405592:	e093      	b.n	4056bc <f_read+0x174>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
  405594:	6961      	ldr	r1, [r4, #20]
  405596:	4b4c      	ldr	r3, [pc, #304]	; (4056c8 <f_read+0x180>)
  405598:	4798      	blx	r3
  40559a:	e057      	b.n	40564c <f_read+0x104>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  40559c:	79a3      	ldrb	r3, [r4, #6]
  40559e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4055a2:	71a3      	strb	r3, [r4, #6]
  4055a4:	2302      	movs	r3, #2
  4055a6:	9301      	str	r3, [sp, #4]
  4055a8:	e088      	b.n	4056bc <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4055aa:	79a3      	ldrb	r3, [r4, #6]
  4055ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4055b0:	71a3      	strb	r3, [r4, #6]
  4055b2:	2301      	movs	r3, #1
  4055b4:	9301      	str	r3, [sp, #4]
  4055b6:	e081      	b.n	4056bc <f_read+0x174>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  4055b8:	79a3      	ldrb	r3, [r4, #6]
  4055ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4055be:	71a3      	strb	r3, [r4, #6]
  4055c0:	2302      	movs	r3, #2
  4055c2:	9301      	str	r3, [sp, #4]
  4055c4:	e07a      	b.n	4056bc <f_read+0x174>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
  4055c6:	79a3      	ldrb	r3, [r4, #6]
  4055c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4055cc:	71a3      	strb	r3, [r4, #6]
  4055ce:	2301      	movs	r3, #1
  4055d0:	9301      	str	r3, [sp, #4]
  4055d2:	e073      	b.n	4056bc <f_read+0x174>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
  4055d4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4055d8:	3130      	adds	r1, #48	; 0x30
  4055da:	eb09 2040 	add.w	r0, r9, r0, lsl #9
  4055de:	4b3b      	ldr	r3, [pc, #236]	; (4056cc <f_read+0x184>)
  4055e0:	4798      	blx	r3
  4055e2:	e05f      	b.n	4056a4 <f_read+0x15c>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
  4055e4:	61a5      	str	r5, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
  4055e6:	68a5      	ldr	r5, [r4, #8]
  4055e8:	f3c5 0508 	ubfx	r5, r5, #0, #9
  4055ec:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  4055f0:	42b5      	cmp	r5, r6
  4055f2:	bf28      	it	cs
  4055f4:	4635      	movcs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
  4055f6:	69a1      	ldr	r1, [r4, #24]
  4055f8:	6820      	ldr	r0, [r4, #0]
  4055fa:	4b35      	ldr	r3, [pc, #212]	; (4056d0 <f_read+0x188>)
  4055fc:	4798      	blx	r3
  4055fe:	2800      	cmp	r0, #0
  405600:	d153      	bne.n	4056aa <f_read+0x162>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
  405602:	68a1      	ldr	r1, [r4, #8]
  405604:	f3c1 0108 	ubfx	r1, r1, #0, #9
  405608:	3130      	adds	r1, #48	; 0x30
  40560a:	6823      	ldr	r3, [r4, #0]
  40560c:	462a      	mov	r2, r5
  40560e:	4419      	add	r1, r3
  405610:	4648      	mov	r0, r9
  405612:	4b2e      	ldr	r3, [pc, #184]	; (4056cc <f_read+0x184>)
  405614:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  405616:	44a9      	add	r9, r5
  405618:	68a3      	ldr	r3, [r4, #8]
  40561a:	442b      	add	r3, r5
  40561c:	60a3      	str	r3, [r4, #8]
  40561e:	f8d8 3000 	ldr.w	r3, [r8]
  405622:	442b      	add	r3, r5
  405624:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
  405628:	1b76      	subs	r6, r6, r5
  40562a:	d047      	beq.n	4056bc <f_read+0x174>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
  40562c:	68a2      	ldr	r2, [r4, #8]
  40562e:	f3c2 0308 	ubfx	r3, r2, #0, #9
  405632:	2b00      	cmp	r3, #0
  405634:	d1d7      	bne.n	4055e6 <f_read+0x9e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  405636:	6820      	ldr	r0, [r4, #0]
  405638:	7883      	ldrb	r3, [r0, #2]
  40563a:	3b01      	subs	r3, #1
  40563c:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {						/* On the cluster boundary? */
  405640:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  405644:	d108      	bne.n	405658 <f_read+0x110>
				if (fp->fptr == 0) {			/* On the top of the file? */
  405646:	2a00      	cmp	r2, #0
  405648:	d1a4      	bne.n	405594 <f_read+0x4c>
					clst = fp->sclust;			/* Follow from the origin */
  40564a:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  40564c:	2801      	cmp	r0, #1
  40564e:	d9a5      	bls.n	40559c <f_read+0x54>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  405650:	f1b0 3fff 	cmp.w	r0, #4294967295
  405654:	d0a9      	beq.n	4055aa <f_read+0x62>
				fp->clust = clst;				/* Update current cluster */
  405656:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  405658:	f8d4 a000 	ldr.w	sl, [r4]
  40565c:	6961      	ldr	r1, [r4, #20]
  40565e:	4650      	mov	r0, sl
  405660:	4b1c      	ldr	r3, [pc, #112]	; (4056d4 <f_read+0x18c>)
  405662:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  405664:	4605      	mov	r5, r0
  405666:	2800      	cmp	r0, #0
  405668:	d0a6      	beq.n	4055b8 <f_read+0x70>
			sect += csect;
  40566a:	443d      	add	r5, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
  40566c:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  405670:	d0b8      	beq.n	4055e4 <f_read+0x9c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  405672:	f89a 3002 	ldrb.w	r3, [sl, #2]
  405676:	eb07 020b 	add.w	r2, r7, fp
  40567a:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  40567c:	bf88      	it	hi
  40567e:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
  405682:	fa5f f38b 	uxtb.w	r3, fp
  405686:	462a      	mov	r2, r5
  405688:	4649      	mov	r1, r9
  40568a:	f89a 0001 	ldrb.w	r0, [sl, #1]
  40568e:	4f12      	ldr	r7, [pc, #72]	; (4056d8 <f_read+0x190>)
  405690:	47b8      	blx	r7
  405692:	2800      	cmp	r0, #0
  405694:	d197      	bne.n	4055c6 <f_read+0x7e>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
  405696:	6821      	ldr	r1, [r4, #0]
  405698:	790b      	ldrb	r3, [r1, #4]
  40569a:	b11b      	cbz	r3, 4056a4 <f_read+0x15c>
  40569c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
  40569e:	1b40      	subs	r0, r0, r5
  4056a0:	4583      	cmp	fp, r0
  4056a2:	d897      	bhi.n	4055d4 <f_read+0x8c>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
  4056a4:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  4056a8:	e7b5      	b.n	405616 <f_read+0xce>
			ABORT(fp->fs, FR_DISK_ERR);
  4056aa:	79a3      	ldrb	r3, [r4, #6]
  4056ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4056b0:	71a3      	strb	r3, [r4, #6]
  4056b2:	2301      	movs	r3, #1
  4056b4:	9301      	str	r3, [sp, #4]
  4056b6:	e001      	b.n	4056bc <f_read+0x174>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  4056b8:	2302      	movs	r3, #2
  4056ba:	9301      	str	r3, [sp, #4]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
  4056bc:	9801      	ldr	r0, [sp, #4]
  4056be:	b003      	add	sp, #12
  4056c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056c4:	00403ecd 	.word	0x00403ecd
  4056c8:	004044c5 	.word	0x004044c5
  4056cc:	00403e75 	.word	0x00403e75
  4056d0:	00404435 	.word	0x00404435
  4056d4:	00403e97 	.word	0x00403e97
  4056d8:	00403ccd 	.word	0x00403ccd

004056dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  4056dc:	b538      	push	{r3, r4, r5, lr}
  4056de:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  4056e0:	8881      	ldrh	r1, [r0, #4]
  4056e2:	6800      	ldr	r0, [r0, #0]
  4056e4:	4b1f      	ldr	r3, [pc, #124]	; (405764 <f_sync+0x88>)
  4056e6:	4798      	blx	r3
	if (res == FR_OK) {
  4056e8:	4603      	mov	r3, r0
  4056ea:	b918      	cbnz	r0, 4056f4 <f_sync+0x18>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  4056ec:	79a2      	ldrb	r2, [r4, #6]
  4056ee:	f012 0f20 	tst.w	r2, #32
  4056f2:	d101      	bne.n	4056f8 <f_sync+0x1c>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  4056f4:	4618      	mov	r0, r3
  4056f6:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
  4056f8:	69e1      	ldr	r1, [r4, #28]
  4056fa:	6820      	ldr	r0, [r4, #0]
  4056fc:	4b1a      	ldr	r3, [pc, #104]	; (405768 <f_sync+0x8c>)
  4056fe:	4798      	blx	r3
			if (res == FR_OK) {
  405700:	4603      	mov	r3, r0
  405702:	2800      	cmp	r0, #0
  405704:	d1f6      	bne.n	4056f4 <f_sync+0x18>
				dir = fp->dir_ptr;
  405706:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  405708:	7aeb      	ldrb	r3, [r5, #11]
  40570a:	f043 0320 	orr.w	r3, r3, #32
  40570e:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  405710:	68e3      	ldr	r3, [r4, #12]
  405712:	772b      	strb	r3, [r5, #28]
  405714:	89a3      	ldrh	r3, [r4, #12]
  405716:	0a1b      	lsrs	r3, r3, #8
  405718:	776b      	strb	r3, [r5, #29]
  40571a:	89e3      	ldrh	r3, [r4, #14]
  40571c:	77ab      	strb	r3, [r5, #30]
  40571e:	7be3      	ldrb	r3, [r4, #15]
  405720:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  405722:	6923      	ldr	r3, [r4, #16]
  405724:	76ab      	strb	r3, [r5, #26]
  405726:	8a23      	ldrh	r3, [r4, #16]
  405728:	0a1b      	lsrs	r3, r3, #8
  40572a:	76eb      	strb	r3, [r5, #27]
  40572c:	8a63      	ldrh	r3, [r4, #18]
  40572e:	752b      	strb	r3, [r5, #20]
  405730:	8a63      	ldrh	r3, [r4, #18]
  405732:	0a1b      	lsrs	r3, r3, #8
  405734:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  405736:	4b0d      	ldr	r3, [pc, #52]	; (40576c <f_sync+0x90>)
  405738:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  40573a:	75a8      	strb	r0, [r5, #22]
  40573c:	f3c0 2307 	ubfx	r3, r0, #8, #8
  405740:	75eb      	strb	r3, [r5, #23]
  405742:	0c03      	lsrs	r3, r0, #16
  405744:	762b      	strb	r3, [r5, #24]
  405746:	0e00      	lsrs	r0, r0, #24
  405748:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  40574a:	79a3      	ldrb	r3, [r4, #6]
  40574c:	f023 0320 	bic.w	r3, r3, #32
  405750:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  405752:	6823      	ldr	r3, [r4, #0]
  405754:	2201      	movs	r2, #1
  405756:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  405758:	6820      	ldr	r0, [r4, #0]
  40575a:	4b05      	ldr	r3, [pc, #20]	; (405770 <f_sync+0x94>)
  40575c:	4798      	blx	r3
  40575e:	4603      	mov	r3, r0
  405760:	e7c8      	b.n	4056f4 <f_sync+0x18>
  405762:	bf00      	nop
  405764:	00403ecd 	.word	0x00403ecd
  405768:	00404435 	.word	0x00404435
  40576c:	00403e1d 	.word	0x00403e1d
  405770:	00404fa1 	.word	0x00404fa1

00405774 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  405774:	b510      	push	{r4, lr}
  405776:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  405778:	4b03      	ldr	r3, [pc, #12]	; (405788 <f_close+0x14>)
  40577a:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  40577c:	4603      	mov	r3, r0
  40577e:	b908      	cbnz	r0, 405784 <f_close+0x10>
  405780:	2200      	movs	r2, #0
  405782:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  405784:	4618      	mov	r0, r3
  405786:	bd10      	pop	{r4, pc}
  405788:	004056dd 	.word	0x004056dd

0040578c <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
  40578c:	b510      	push	{r4, lr}
  40578e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
  405792:	4604      	mov	r4, r0
  405794:	9101      	str	r1, [sp, #4]
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
  405796:	2200      	movs	r2, #0
  405798:	4601      	mov	r1, r0
  40579a:	a801      	add	r0, sp, #4
  40579c:	4b18      	ldr	r3, [pc, #96]	; (405800 <f_opendir+0x74>)
  40579e:	4798      	blx	r3
	if (res == FR_OK) {
  4057a0:	4603      	mov	r3, r0
  4057a2:	b118      	cbz	r0, 4057ac <f_opendir+0x20>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
  4057a4:	4618      	mov	r0, r3
  4057a6:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
  4057aa:	bd10      	pop	{r4, pc}
		INIT_BUF(*dj);
  4057ac:	ab83      	add	r3, sp, #524	; 0x20c
  4057ae:	61a3      	str	r3, [r4, #24]
  4057b0:	ab03      	add	r3, sp, #12
  4057b2:	61e3      	str	r3, [r4, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
  4057b4:	9901      	ldr	r1, [sp, #4]
  4057b6:	4620      	mov	r0, r4
  4057b8:	4b12      	ldr	r3, [pc, #72]	; (405804 <f_opendir+0x78>)
  4057ba:	4798      	blx	r3
		if (res == FR_OK) {						/* Follow completed */
  4057bc:	4603      	mov	r3, r0
  4057be:	b9c0      	cbnz	r0, 4057f2 <f_opendir+0x66>
			if (dj->dir) {						/* It is not the root dir */
  4057c0:	6963      	ldr	r3, [r4, #20]
  4057c2:	b173      	cbz	r3, 4057e2 <f_opendir+0x56>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
  4057c4:	7ada      	ldrb	r2, [r3, #11]
  4057c6:	f012 0f10 	tst.w	r2, #16
  4057ca:	d016      	beq.n	4057fa <f_opendir+0x6e>
					dj->sclust = LD_CLUST(dj->dir);
  4057cc:	7d59      	ldrb	r1, [r3, #21]
  4057ce:	7d1a      	ldrb	r2, [r3, #20]
  4057d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4057d4:	7ed9      	ldrb	r1, [r3, #27]
  4057d6:	7e9b      	ldrb	r3, [r3, #26]
  4057d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  4057dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4057e0:	60a3      	str	r3, [r4, #8]
				dj->id = dj->fs->id;
  4057e2:	6823      	ldr	r3, [r4, #0]
  4057e4:	88db      	ldrh	r3, [r3, #6]
  4057e6:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
  4057e8:	2100      	movs	r1, #0
  4057ea:	4620      	mov	r0, r4
  4057ec:	4b06      	ldr	r3, [pc, #24]	; (405808 <f_opendir+0x7c>)
  4057ee:	4798      	blx	r3
  4057f0:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
  4057f2:	2b04      	cmp	r3, #4
  4057f4:	bf08      	it	eq
  4057f6:	2305      	moveq	r3, #5
  4057f8:	e7d4      	b.n	4057a4 <f_opendir+0x18>
					res = FR_NO_PATH;
  4057fa:	2305      	movs	r3, #5
	LEAVE_FF(dj->fs, res);
  4057fc:	e7d2      	b.n	4057a4 <f_opendir+0x18>
  4057fe:	bf00      	nop
  405800:	00403f91 	.word	0x00403f91
  405804:	0040506d 	.word	0x0040506d
  405808:	004045ad 	.word	0x004045ad

0040580c <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
  40580c:	b570      	push	{r4, r5, r6, lr}
  40580e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
  405812:	4604      	mov	r4, r0
  405814:	460e      	mov	r6, r1
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
  405816:	8881      	ldrh	r1, [r0, #4]
  405818:	6800      	ldr	r0, [r0, #0]
  40581a:	4b15      	ldr	r3, [pc, #84]	; (405870 <f_readdir+0x64>)
  40581c:	4798      	blx	r3
	if (res == FR_OK) {
  40581e:	4605      	mov	r5, r0
  405820:	b958      	cbnz	r0, 40583a <f_readdir+0x2e>
		if (!fno) {
  405822:	b176      	cbz	r6, 405842 <f_readdir+0x36>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
  405824:	ab81      	add	r3, sp, #516	; 0x204
  405826:	61a3      	str	r3, [r4, #24]
  405828:	ab01      	add	r3, sp, #4
  40582a:	61e3      	str	r3, [r4, #28]
			res = dir_read(dj);				/* Read an directory item */
  40582c:	4620      	mov	r0, r4
  40582e:	4b11      	ldr	r3, [pc, #68]	; (405874 <f_readdir+0x68>)
  405830:	4798      	blx	r3
			if (res == FR_NO_FILE) {		/* Reached end of dir */
  405832:	2804      	cmp	r0, #4
  405834:	d00b      	beq.n	40584e <f_readdir+0x42>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
  405836:	b160      	cbz	r0, 405852 <f_readdir+0x46>
			res = dir_read(dj);				/* Read an directory item */
  405838:	4605      	mov	r5, r0
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
  40583a:	4628      	mov	r0, r5
  40583c:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
  405840:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
  405842:	2100      	movs	r1, #0
  405844:	4620      	mov	r0, r4
  405846:	4b0c      	ldr	r3, [pc, #48]	; (405878 <f_readdir+0x6c>)
  405848:	4798      	blx	r3
  40584a:	4605      	mov	r5, r0
  40584c:	e7f5      	b.n	40583a <f_readdir+0x2e>
				dj->sect = 0;
  40584e:	2300      	movs	r3, #0
  405850:	6123      	str	r3, [r4, #16]
				get_fileinfo(dj, fno);		/* Get the object information */
  405852:	4631      	mov	r1, r6
  405854:	4620      	mov	r0, r4
  405856:	4b09      	ldr	r3, [pc, #36]	; (40587c <f_readdir+0x70>)
  405858:	4798      	blx	r3
				res = dir_next(dj, 0);		/* Increment index for next */
  40585a:	2100      	movs	r1, #0
  40585c:	4620      	mov	r0, r4
  40585e:	4b08      	ldr	r3, [pc, #32]	; (405880 <f_readdir+0x74>)
  405860:	4798      	blx	r3
				if (res == FR_NO_FILE) {
  405862:	2804      	cmp	r0, #4
  405864:	d001      	beq.n	40586a <f_readdir+0x5e>
				res = dir_next(dj, 0);		/* Increment index for next */
  405866:	4605      	mov	r5, r0
  405868:	e7e7      	b.n	40583a <f_readdir+0x2e>
					dj->sect = 0;
  40586a:	2300      	movs	r3, #0
  40586c:	6123      	str	r3, [r4, #16]
  40586e:	e7e4      	b.n	40583a <f_readdir+0x2e>
  405870:	00403ecd 	.word	0x00403ecd
  405874:	00404e81 	.word	0x00404e81
  405878:	004045ad 	.word	0x004045ad
  40587c:	004042fd 	.word	0x004042fd
  405880:	004048c1 	.word	0x004048c1

00405884 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
  405884:	b530      	push	{r4, r5, lr}
  405886:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  40588a:	9001      	str	r0, [sp, #4]
  40588c:	460d      	mov	r5, r1
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
  40588e:	2200      	movs	r2, #0
  405890:	a985      	add	r1, sp, #532	; 0x214
  405892:	a801      	add	r0, sp, #4
  405894:	4b0d      	ldr	r3, [pc, #52]	; (4058cc <f_stat+0x48>)
  405896:	4798      	blx	r3
	if (res == FR_OK) {
  405898:	4604      	mov	r4, r0
  40589a:	b118      	cbz	r0, 4058a4 <f_stat+0x20>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
  40589c:	4620      	mov	r0, r4
  40589e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  4058a2:	bd30      	pop	{r4, r5, pc}
		INIT_BUF(dj);
  4058a4:	ab82      	add	r3, sp, #520	; 0x208
  4058a6:	938b      	str	r3, [sp, #556]	; 0x22c
  4058a8:	ab02      	add	r3, sp, #8
  4058aa:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
  4058ac:	9901      	ldr	r1, [sp, #4]
  4058ae:	a885      	add	r0, sp, #532	; 0x214
  4058b0:	4b07      	ldr	r3, [pc, #28]	; (4058d0 <f_stat+0x4c>)
  4058b2:	4798      	blx	r3
		if (res == FR_OK) {				/* Follow completed */
  4058b4:	4604      	mov	r4, r0
  4058b6:	2800      	cmp	r0, #0
  4058b8:	d1f0      	bne.n	40589c <f_stat+0x18>
			if (dj.dir)		/* Found an object */
  4058ba:	9b8a      	ldr	r3, [sp, #552]	; 0x228
  4058bc:	b123      	cbz	r3, 4058c8 <f_stat+0x44>
				get_fileinfo(&dj, fno);
  4058be:	4629      	mov	r1, r5
  4058c0:	a885      	add	r0, sp, #532	; 0x214
  4058c2:	4b04      	ldr	r3, [pc, #16]	; (4058d4 <f_stat+0x50>)
  4058c4:	4798      	blx	r3
  4058c6:	e7e9      	b.n	40589c <f_stat+0x18>
				res = FR_INVALID_NAME;
  4058c8:	2406      	movs	r4, #6
  4058ca:	e7e7      	b.n	40589c <f_stat+0x18>
  4058cc:	00403f91 	.word	0x00403f91
  4058d0:	0040506d 	.word	0x0040506d
  4058d4:	004042fd 	.word	0x004042fd

004058d8 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  4058d8:	287f      	cmp	r0, #127	; 0x7f
  4058da:	d919      	bls.n	405910 <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  4058dc:	b971      	cbnz	r1, 4058fc <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  4058de:	28c7      	cmp	r0, #199	; 0xc7
  4058e0:	d013      	beq.n	40590a <ff_convert+0x32>
  4058e2:	4a0c      	ldr	r2, [pc, #48]	; (405914 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  4058e4:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  4058e6:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  4058ea:	4281      	cmp	r1, r0
  4058ec:	d003      	beq.n	4058f6 <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  4058ee:	3301      	adds	r3, #1
  4058f0:	b29b      	uxth	r3, r3
  4058f2:	2b80      	cmp	r3, #128	; 0x80
  4058f4:	d1f7      	bne.n	4058e6 <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  4058f6:	3380      	adds	r3, #128	; 0x80
  4058f8:	b2d8      	uxtb	r0, r3
  4058fa:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4058fc:	28ff      	cmp	r0, #255	; 0xff
  4058fe:	d806      	bhi.n	40590e <ff_convert+0x36>
  405900:	3880      	subs	r0, #128	; 0x80
  405902:	4b04      	ldr	r3, [pc, #16]	; (405914 <ff_convert+0x3c>)
  405904:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  405908:	4770      	bx	lr
				if (src == Tbl[c]) break;
  40590a:	2300      	movs	r3, #0
  40590c:	e7f3      	b.n	4058f6 <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40590e:	2000      	movs	r0, #0
		}
	}

	return c;
}
  405910:	4770      	bx	lr
  405912:	bf00      	nop
  405914:	0040ac7c 	.word	0x0040ac7c

00405918 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  405918:	2861      	cmp	r0, #97	; 0x61
  40591a:	d010      	beq.n	40593e <ff_wtoupper+0x26>
  40591c:	4909      	ldr	r1, [pc, #36]	; (405944 <ff_wtoupper+0x2c>)
  40591e:	2201      	movs	r2, #1
  405920:	2362      	movs	r3, #98	; 0x62
  405922:	4298      	cmp	r0, r3
  405924:	d005      	beq.n	405932 <ff_wtoupper+0x1a>
  405926:	3201      	adds	r2, #1
  405928:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  40592c:	2b00      	cmp	r3, #0
  40592e:	d1f8      	bne.n	405922 <ff_wtoupper+0xa>
  405930:	e003      	b.n	40593a <ff_wtoupper+0x22>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  405932:	b118      	cbz	r0, 40593c <ff_wtoupper+0x24>
  405934:	4b04      	ldr	r3, [pc, #16]	; (405948 <ff_wtoupper+0x30>)
  405936:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  40593a:	4770      	bx	lr
  40593c:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  40593e:	2200      	movs	r2, #0
  405940:	e7f8      	b.n	405934 <ff_wtoupper+0x1c>
  405942:	bf00      	nop
  405944:	0040ad7e 	.word	0x0040ad7e
  405948:	0040af5c 	.word	0x0040af5c

0040594c <main>:
#if (!defined(SYS_INIT_FROM_CONSOLE) && !defined(SYS_INIT_FROM_DEFAPP)) || (defined(SYS_INIT_FROM_CONSOLE) && defined(SYS_INIT_FROM_DEFAPP))
#error "Define either SYS_INIT_FROM_CONSOLE or SYS_INIT_FROM_DEFAPP. Not both or none. See system.h"
#endif

int main(void)
{
  40594c:	b508      	push	{r3, lr}
	//Initializes the system
	system_init();
  40594e:	4b02      	ldr	r3, [pc, #8]	; (405958 <main+0xc>)
  405950:	4798      	blx	r3
	
#ifdef SYS_INIT_FROM_CONSOLE
	//Execute the console
	console_begin();	
  405952:	4b02      	ldr	r3, [pc, #8]	; (40595c <main+0x10>)
  405954:	4798      	blx	r3
  405956:	e7fe      	b.n	405956 <main+0xa>
  405958:	004014f9 	.word	0x004014f9
  40595c:	00400341 	.word	0x00400341

00405960 <__aeabi_drsub>:
  405960:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405964:	e002      	b.n	40596c <__adddf3>
  405966:	bf00      	nop

00405968 <__aeabi_dsub>:
  405968:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040596c <__adddf3>:
  40596c:	b530      	push	{r4, r5, lr}
  40596e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405972:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405976:	ea94 0f05 	teq	r4, r5
  40597a:	bf08      	it	eq
  40597c:	ea90 0f02 	teqeq	r0, r2
  405980:	bf1f      	itttt	ne
  405982:	ea54 0c00 	orrsne.w	ip, r4, r0
  405986:	ea55 0c02 	orrsne.w	ip, r5, r2
  40598a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40598e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405992:	f000 80e2 	beq.w	405b5a <__adddf3+0x1ee>
  405996:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40599a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40599e:	bfb8      	it	lt
  4059a0:	426d      	neglt	r5, r5
  4059a2:	dd0c      	ble.n	4059be <__adddf3+0x52>
  4059a4:	442c      	add	r4, r5
  4059a6:	ea80 0202 	eor.w	r2, r0, r2
  4059aa:	ea81 0303 	eor.w	r3, r1, r3
  4059ae:	ea82 0000 	eor.w	r0, r2, r0
  4059b2:	ea83 0101 	eor.w	r1, r3, r1
  4059b6:	ea80 0202 	eor.w	r2, r0, r2
  4059ba:	ea81 0303 	eor.w	r3, r1, r3
  4059be:	2d36      	cmp	r5, #54	; 0x36
  4059c0:	bf88      	it	hi
  4059c2:	bd30      	pophi	{r4, r5, pc}
  4059c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4059c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4059cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4059d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4059d4:	d002      	beq.n	4059dc <__adddf3+0x70>
  4059d6:	4240      	negs	r0, r0
  4059d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4059dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4059e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4059e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4059e8:	d002      	beq.n	4059f0 <__adddf3+0x84>
  4059ea:	4252      	negs	r2, r2
  4059ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4059f0:	ea94 0f05 	teq	r4, r5
  4059f4:	f000 80a7 	beq.w	405b46 <__adddf3+0x1da>
  4059f8:	f1a4 0401 	sub.w	r4, r4, #1
  4059fc:	f1d5 0e20 	rsbs	lr, r5, #32
  405a00:	db0d      	blt.n	405a1e <__adddf3+0xb2>
  405a02:	fa02 fc0e 	lsl.w	ip, r2, lr
  405a06:	fa22 f205 	lsr.w	r2, r2, r5
  405a0a:	1880      	adds	r0, r0, r2
  405a0c:	f141 0100 	adc.w	r1, r1, #0
  405a10:	fa03 f20e 	lsl.w	r2, r3, lr
  405a14:	1880      	adds	r0, r0, r2
  405a16:	fa43 f305 	asr.w	r3, r3, r5
  405a1a:	4159      	adcs	r1, r3
  405a1c:	e00e      	b.n	405a3c <__adddf3+0xd0>
  405a1e:	f1a5 0520 	sub.w	r5, r5, #32
  405a22:	f10e 0e20 	add.w	lr, lr, #32
  405a26:	2a01      	cmp	r2, #1
  405a28:	fa03 fc0e 	lsl.w	ip, r3, lr
  405a2c:	bf28      	it	cs
  405a2e:	f04c 0c02 	orrcs.w	ip, ip, #2
  405a32:	fa43 f305 	asr.w	r3, r3, r5
  405a36:	18c0      	adds	r0, r0, r3
  405a38:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405a3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405a40:	d507      	bpl.n	405a52 <__adddf3+0xe6>
  405a42:	f04f 0e00 	mov.w	lr, #0
  405a46:	f1dc 0c00 	rsbs	ip, ip, #0
  405a4a:	eb7e 0000 	sbcs.w	r0, lr, r0
  405a4e:	eb6e 0101 	sbc.w	r1, lr, r1
  405a52:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405a56:	d31b      	bcc.n	405a90 <__adddf3+0x124>
  405a58:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405a5c:	d30c      	bcc.n	405a78 <__adddf3+0x10c>
  405a5e:	0849      	lsrs	r1, r1, #1
  405a60:	ea5f 0030 	movs.w	r0, r0, rrx
  405a64:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405a68:	f104 0401 	add.w	r4, r4, #1
  405a6c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405a70:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405a74:	f080 809a 	bcs.w	405bac <__adddf3+0x240>
  405a78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405a7c:	bf08      	it	eq
  405a7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405a82:	f150 0000 	adcs.w	r0, r0, #0
  405a86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405a8a:	ea41 0105 	orr.w	r1, r1, r5
  405a8e:	bd30      	pop	{r4, r5, pc}
  405a90:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405a94:	4140      	adcs	r0, r0
  405a96:	eb41 0101 	adc.w	r1, r1, r1
  405a9a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405a9e:	f1a4 0401 	sub.w	r4, r4, #1
  405aa2:	d1e9      	bne.n	405a78 <__adddf3+0x10c>
  405aa4:	f091 0f00 	teq	r1, #0
  405aa8:	bf04      	itt	eq
  405aaa:	4601      	moveq	r1, r0
  405aac:	2000      	moveq	r0, #0
  405aae:	fab1 f381 	clz	r3, r1
  405ab2:	bf08      	it	eq
  405ab4:	3320      	addeq	r3, #32
  405ab6:	f1a3 030b 	sub.w	r3, r3, #11
  405aba:	f1b3 0220 	subs.w	r2, r3, #32
  405abe:	da0c      	bge.n	405ada <__adddf3+0x16e>
  405ac0:	320c      	adds	r2, #12
  405ac2:	dd08      	ble.n	405ad6 <__adddf3+0x16a>
  405ac4:	f102 0c14 	add.w	ip, r2, #20
  405ac8:	f1c2 020c 	rsb	r2, r2, #12
  405acc:	fa01 f00c 	lsl.w	r0, r1, ip
  405ad0:	fa21 f102 	lsr.w	r1, r1, r2
  405ad4:	e00c      	b.n	405af0 <__adddf3+0x184>
  405ad6:	f102 0214 	add.w	r2, r2, #20
  405ada:	bfd8      	it	le
  405adc:	f1c2 0c20 	rsble	ip, r2, #32
  405ae0:	fa01 f102 	lsl.w	r1, r1, r2
  405ae4:	fa20 fc0c 	lsr.w	ip, r0, ip
  405ae8:	bfdc      	itt	le
  405aea:	ea41 010c 	orrle.w	r1, r1, ip
  405aee:	4090      	lslle	r0, r2
  405af0:	1ae4      	subs	r4, r4, r3
  405af2:	bfa2      	ittt	ge
  405af4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405af8:	4329      	orrge	r1, r5
  405afa:	bd30      	popge	{r4, r5, pc}
  405afc:	ea6f 0404 	mvn.w	r4, r4
  405b00:	3c1f      	subs	r4, #31
  405b02:	da1c      	bge.n	405b3e <__adddf3+0x1d2>
  405b04:	340c      	adds	r4, #12
  405b06:	dc0e      	bgt.n	405b26 <__adddf3+0x1ba>
  405b08:	f104 0414 	add.w	r4, r4, #20
  405b0c:	f1c4 0220 	rsb	r2, r4, #32
  405b10:	fa20 f004 	lsr.w	r0, r0, r4
  405b14:	fa01 f302 	lsl.w	r3, r1, r2
  405b18:	ea40 0003 	orr.w	r0, r0, r3
  405b1c:	fa21 f304 	lsr.w	r3, r1, r4
  405b20:	ea45 0103 	orr.w	r1, r5, r3
  405b24:	bd30      	pop	{r4, r5, pc}
  405b26:	f1c4 040c 	rsb	r4, r4, #12
  405b2a:	f1c4 0220 	rsb	r2, r4, #32
  405b2e:	fa20 f002 	lsr.w	r0, r0, r2
  405b32:	fa01 f304 	lsl.w	r3, r1, r4
  405b36:	ea40 0003 	orr.w	r0, r0, r3
  405b3a:	4629      	mov	r1, r5
  405b3c:	bd30      	pop	{r4, r5, pc}
  405b3e:	fa21 f004 	lsr.w	r0, r1, r4
  405b42:	4629      	mov	r1, r5
  405b44:	bd30      	pop	{r4, r5, pc}
  405b46:	f094 0f00 	teq	r4, #0
  405b4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405b4e:	bf06      	itte	eq
  405b50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405b54:	3401      	addeq	r4, #1
  405b56:	3d01      	subne	r5, #1
  405b58:	e74e      	b.n	4059f8 <__adddf3+0x8c>
  405b5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405b5e:	bf18      	it	ne
  405b60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405b64:	d029      	beq.n	405bba <__adddf3+0x24e>
  405b66:	ea94 0f05 	teq	r4, r5
  405b6a:	bf08      	it	eq
  405b6c:	ea90 0f02 	teqeq	r0, r2
  405b70:	d005      	beq.n	405b7e <__adddf3+0x212>
  405b72:	ea54 0c00 	orrs.w	ip, r4, r0
  405b76:	bf04      	itt	eq
  405b78:	4619      	moveq	r1, r3
  405b7a:	4610      	moveq	r0, r2
  405b7c:	bd30      	pop	{r4, r5, pc}
  405b7e:	ea91 0f03 	teq	r1, r3
  405b82:	bf1e      	ittt	ne
  405b84:	2100      	movne	r1, #0
  405b86:	2000      	movne	r0, #0
  405b88:	bd30      	popne	{r4, r5, pc}
  405b8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405b8e:	d105      	bne.n	405b9c <__adddf3+0x230>
  405b90:	0040      	lsls	r0, r0, #1
  405b92:	4149      	adcs	r1, r1
  405b94:	bf28      	it	cs
  405b96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405b9a:	bd30      	pop	{r4, r5, pc}
  405b9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405ba0:	bf3c      	itt	cc
  405ba2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405ba6:	bd30      	popcc	{r4, r5, pc}
  405ba8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405bac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405bb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405bb4:	f04f 0000 	mov.w	r0, #0
  405bb8:	bd30      	pop	{r4, r5, pc}
  405bba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405bbe:	bf1a      	itte	ne
  405bc0:	4619      	movne	r1, r3
  405bc2:	4610      	movne	r0, r2
  405bc4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405bc8:	bf1c      	itt	ne
  405bca:	460b      	movne	r3, r1
  405bcc:	4602      	movne	r2, r0
  405bce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405bd2:	bf06      	itte	eq
  405bd4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405bd8:	ea91 0f03 	teqeq	r1, r3
  405bdc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405be0:	bd30      	pop	{r4, r5, pc}
  405be2:	bf00      	nop

00405be4 <__aeabi_ui2d>:
  405be4:	f090 0f00 	teq	r0, #0
  405be8:	bf04      	itt	eq
  405bea:	2100      	moveq	r1, #0
  405bec:	4770      	bxeq	lr
  405bee:	b530      	push	{r4, r5, lr}
  405bf0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405bf4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405bf8:	f04f 0500 	mov.w	r5, #0
  405bfc:	f04f 0100 	mov.w	r1, #0
  405c00:	e750      	b.n	405aa4 <__adddf3+0x138>
  405c02:	bf00      	nop

00405c04 <__aeabi_i2d>:
  405c04:	f090 0f00 	teq	r0, #0
  405c08:	bf04      	itt	eq
  405c0a:	2100      	moveq	r1, #0
  405c0c:	4770      	bxeq	lr
  405c0e:	b530      	push	{r4, r5, lr}
  405c10:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405c14:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405c18:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405c1c:	bf48      	it	mi
  405c1e:	4240      	negmi	r0, r0
  405c20:	f04f 0100 	mov.w	r1, #0
  405c24:	e73e      	b.n	405aa4 <__adddf3+0x138>
  405c26:	bf00      	nop

00405c28 <__aeabi_f2d>:
  405c28:	0042      	lsls	r2, r0, #1
  405c2a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405c2e:	ea4f 0131 	mov.w	r1, r1, rrx
  405c32:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405c36:	bf1f      	itttt	ne
  405c38:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405c3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405c40:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405c44:	4770      	bxne	lr
  405c46:	f092 0f00 	teq	r2, #0
  405c4a:	bf14      	ite	ne
  405c4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405c50:	4770      	bxeq	lr
  405c52:	b530      	push	{r4, r5, lr}
  405c54:	f44f 7460 	mov.w	r4, #896	; 0x380
  405c58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405c5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405c60:	e720      	b.n	405aa4 <__adddf3+0x138>
  405c62:	bf00      	nop

00405c64 <__aeabi_ul2d>:
  405c64:	ea50 0201 	orrs.w	r2, r0, r1
  405c68:	bf08      	it	eq
  405c6a:	4770      	bxeq	lr
  405c6c:	b530      	push	{r4, r5, lr}
  405c6e:	f04f 0500 	mov.w	r5, #0
  405c72:	e00a      	b.n	405c8a <__aeabi_l2d+0x16>

00405c74 <__aeabi_l2d>:
  405c74:	ea50 0201 	orrs.w	r2, r0, r1
  405c78:	bf08      	it	eq
  405c7a:	4770      	bxeq	lr
  405c7c:	b530      	push	{r4, r5, lr}
  405c7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405c82:	d502      	bpl.n	405c8a <__aeabi_l2d+0x16>
  405c84:	4240      	negs	r0, r0
  405c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405c8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405c8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405c92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405c96:	f43f aedc 	beq.w	405a52 <__adddf3+0xe6>
  405c9a:	f04f 0203 	mov.w	r2, #3
  405c9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405ca2:	bf18      	it	ne
  405ca4:	3203      	addne	r2, #3
  405ca6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405caa:	bf18      	it	ne
  405cac:	3203      	addne	r2, #3
  405cae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405cb2:	f1c2 0320 	rsb	r3, r2, #32
  405cb6:	fa00 fc03 	lsl.w	ip, r0, r3
  405cba:	fa20 f002 	lsr.w	r0, r0, r2
  405cbe:	fa01 fe03 	lsl.w	lr, r1, r3
  405cc2:	ea40 000e 	orr.w	r0, r0, lr
  405cc6:	fa21 f102 	lsr.w	r1, r1, r2
  405cca:	4414      	add	r4, r2
  405ccc:	e6c1      	b.n	405a52 <__adddf3+0xe6>
  405cce:	bf00      	nop

00405cd0 <__aeabi_dmul>:
  405cd0:	b570      	push	{r4, r5, r6, lr}
  405cd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405cd6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405cda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405cde:	bf1d      	ittte	ne
  405ce0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405ce4:	ea94 0f0c 	teqne	r4, ip
  405ce8:	ea95 0f0c 	teqne	r5, ip
  405cec:	f000 f8de 	bleq	405eac <__aeabi_dmul+0x1dc>
  405cf0:	442c      	add	r4, r5
  405cf2:	ea81 0603 	eor.w	r6, r1, r3
  405cf6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405cfa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405cfe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405d02:	bf18      	it	ne
  405d04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405d08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405d10:	d038      	beq.n	405d84 <__aeabi_dmul+0xb4>
  405d12:	fba0 ce02 	umull	ip, lr, r0, r2
  405d16:	f04f 0500 	mov.w	r5, #0
  405d1a:	fbe1 e502 	umlal	lr, r5, r1, r2
  405d1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405d22:	fbe0 e503 	umlal	lr, r5, r0, r3
  405d26:	f04f 0600 	mov.w	r6, #0
  405d2a:	fbe1 5603 	umlal	r5, r6, r1, r3
  405d2e:	f09c 0f00 	teq	ip, #0
  405d32:	bf18      	it	ne
  405d34:	f04e 0e01 	orrne.w	lr, lr, #1
  405d38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405d3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405d40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405d44:	d204      	bcs.n	405d50 <__aeabi_dmul+0x80>
  405d46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405d4a:	416d      	adcs	r5, r5
  405d4c:	eb46 0606 	adc.w	r6, r6, r6
  405d50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405d54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405d58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405d5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405d60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405d64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405d68:	bf88      	it	hi
  405d6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405d6e:	d81e      	bhi.n	405dae <__aeabi_dmul+0xde>
  405d70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405d74:	bf08      	it	eq
  405d76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405d7a:	f150 0000 	adcs.w	r0, r0, #0
  405d7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405d82:	bd70      	pop	{r4, r5, r6, pc}
  405d84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405d88:	ea46 0101 	orr.w	r1, r6, r1
  405d8c:	ea40 0002 	orr.w	r0, r0, r2
  405d90:	ea81 0103 	eor.w	r1, r1, r3
  405d94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405d98:	bfc2      	ittt	gt
  405d9a:	ebd4 050c 	rsbsgt	r5, r4, ip
  405d9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405da2:	bd70      	popgt	{r4, r5, r6, pc}
  405da4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405da8:	f04f 0e00 	mov.w	lr, #0
  405dac:	3c01      	subs	r4, #1
  405dae:	f300 80ab 	bgt.w	405f08 <__aeabi_dmul+0x238>
  405db2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405db6:	bfde      	ittt	le
  405db8:	2000      	movle	r0, #0
  405dba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405dbe:	bd70      	pople	{r4, r5, r6, pc}
  405dc0:	f1c4 0400 	rsb	r4, r4, #0
  405dc4:	3c20      	subs	r4, #32
  405dc6:	da35      	bge.n	405e34 <__aeabi_dmul+0x164>
  405dc8:	340c      	adds	r4, #12
  405dca:	dc1b      	bgt.n	405e04 <__aeabi_dmul+0x134>
  405dcc:	f104 0414 	add.w	r4, r4, #20
  405dd0:	f1c4 0520 	rsb	r5, r4, #32
  405dd4:	fa00 f305 	lsl.w	r3, r0, r5
  405dd8:	fa20 f004 	lsr.w	r0, r0, r4
  405ddc:	fa01 f205 	lsl.w	r2, r1, r5
  405de0:	ea40 0002 	orr.w	r0, r0, r2
  405de4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405de8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405dec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405df0:	fa21 f604 	lsr.w	r6, r1, r4
  405df4:	eb42 0106 	adc.w	r1, r2, r6
  405df8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405dfc:	bf08      	it	eq
  405dfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405e02:	bd70      	pop	{r4, r5, r6, pc}
  405e04:	f1c4 040c 	rsb	r4, r4, #12
  405e08:	f1c4 0520 	rsb	r5, r4, #32
  405e0c:	fa00 f304 	lsl.w	r3, r0, r4
  405e10:	fa20 f005 	lsr.w	r0, r0, r5
  405e14:	fa01 f204 	lsl.w	r2, r1, r4
  405e18:	ea40 0002 	orr.w	r0, r0, r2
  405e1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405e20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405e24:	f141 0100 	adc.w	r1, r1, #0
  405e28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405e2c:	bf08      	it	eq
  405e2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405e32:	bd70      	pop	{r4, r5, r6, pc}
  405e34:	f1c4 0520 	rsb	r5, r4, #32
  405e38:	fa00 f205 	lsl.w	r2, r0, r5
  405e3c:	ea4e 0e02 	orr.w	lr, lr, r2
  405e40:	fa20 f304 	lsr.w	r3, r0, r4
  405e44:	fa01 f205 	lsl.w	r2, r1, r5
  405e48:	ea43 0302 	orr.w	r3, r3, r2
  405e4c:	fa21 f004 	lsr.w	r0, r1, r4
  405e50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405e54:	fa21 f204 	lsr.w	r2, r1, r4
  405e58:	ea20 0002 	bic.w	r0, r0, r2
  405e5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405e60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405e64:	bf08      	it	eq
  405e66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405e6a:	bd70      	pop	{r4, r5, r6, pc}
  405e6c:	f094 0f00 	teq	r4, #0
  405e70:	d10f      	bne.n	405e92 <__aeabi_dmul+0x1c2>
  405e72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405e76:	0040      	lsls	r0, r0, #1
  405e78:	eb41 0101 	adc.w	r1, r1, r1
  405e7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405e80:	bf08      	it	eq
  405e82:	3c01      	subeq	r4, #1
  405e84:	d0f7      	beq.n	405e76 <__aeabi_dmul+0x1a6>
  405e86:	ea41 0106 	orr.w	r1, r1, r6
  405e8a:	f095 0f00 	teq	r5, #0
  405e8e:	bf18      	it	ne
  405e90:	4770      	bxne	lr
  405e92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405e96:	0052      	lsls	r2, r2, #1
  405e98:	eb43 0303 	adc.w	r3, r3, r3
  405e9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405ea0:	bf08      	it	eq
  405ea2:	3d01      	subeq	r5, #1
  405ea4:	d0f7      	beq.n	405e96 <__aeabi_dmul+0x1c6>
  405ea6:	ea43 0306 	orr.w	r3, r3, r6
  405eaa:	4770      	bx	lr
  405eac:	ea94 0f0c 	teq	r4, ip
  405eb0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405eb4:	bf18      	it	ne
  405eb6:	ea95 0f0c 	teqne	r5, ip
  405eba:	d00c      	beq.n	405ed6 <__aeabi_dmul+0x206>
  405ebc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405ec0:	bf18      	it	ne
  405ec2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405ec6:	d1d1      	bne.n	405e6c <__aeabi_dmul+0x19c>
  405ec8:	ea81 0103 	eor.w	r1, r1, r3
  405ecc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405ed0:	f04f 0000 	mov.w	r0, #0
  405ed4:	bd70      	pop	{r4, r5, r6, pc}
  405ed6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405eda:	bf06      	itte	eq
  405edc:	4610      	moveq	r0, r2
  405ede:	4619      	moveq	r1, r3
  405ee0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405ee4:	d019      	beq.n	405f1a <__aeabi_dmul+0x24a>
  405ee6:	ea94 0f0c 	teq	r4, ip
  405eea:	d102      	bne.n	405ef2 <__aeabi_dmul+0x222>
  405eec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405ef0:	d113      	bne.n	405f1a <__aeabi_dmul+0x24a>
  405ef2:	ea95 0f0c 	teq	r5, ip
  405ef6:	d105      	bne.n	405f04 <__aeabi_dmul+0x234>
  405ef8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405efc:	bf1c      	itt	ne
  405efe:	4610      	movne	r0, r2
  405f00:	4619      	movne	r1, r3
  405f02:	d10a      	bne.n	405f1a <__aeabi_dmul+0x24a>
  405f04:	ea81 0103 	eor.w	r1, r1, r3
  405f08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405f0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405f10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405f14:	f04f 0000 	mov.w	r0, #0
  405f18:	bd70      	pop	{r4, r5, r6, pc}
  405f1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405f1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405f22:	bd70      	pop	{r4, r5, r6, pc}

00405f24 <__aeabi_ddiv>:
  405f24:	b570      	push	{r4, r5, r6, lr}
  405f26:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405f2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405f2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405f32:	bf1d      	ittte	ne
  405f34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405f38:	ea94 0f0c 	teqne	r4, ip
  405f3c:	ea95 0f0c 	teqne	r5, ip
  405f40:	f000 f8a7 	bleq	406092 <__aeabi_ddiv+0x16e>
  405f44:	eba4 0405 	sub.w	r4, r4, r5
  405f48:	ea81 0e03 	eor.w	lr, r1, r3
  405f4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405f50:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405f54:	f000 8088 	beq.w	406068 <__aeabi_ddiv+0x144>
  405f58:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405f5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405f60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405f64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405f68:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405f6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405f70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405f74:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405f78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405f7c:	429d      	cmp	r5, r3
  405f7e:	bf08      	it	eq
  405f80:	4296      	cmpeq	r6, r2
  405f82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405f86:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405f8a:	d202      	bcs.n	405f92 <__aeabi_ddiv+0x6e>
  405f8c:	085b      	lsrs	r3, r3, #1
  405f8e:	ea4f 0232 	mov.w	r2, r2, rrx
  405f92:	1ab6      	subs	r6, r6, r2
  405f94:	eb65 0503 	sbc.w	r5, r5, r3
  405f98:	085b      	lsrs	r3, r3, #1
  405f9a:	ea4f 0232 	mov.w	r2, r2, rrx
  405f9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  405fa2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405fa6:	ebb6 0e02 	subs.w	lr, r6, r2
  405faa:	eb75 0e03 	sbcs.w	lr, r5, r3
  405fae:	bf22      	ittt	cs
  405fb0:	1ab6      	subcs	r6, r6, r2
  405fb2:	4675      	movcs	r5, lr
  405fb4:	ea40 000c 	orrcs.w	r0, r0, ip
  405fb8:	085b      	lsrs	r3, r3, #1
  405fba:	ea4f 0232 	mov.w	r2, r2, rrx
  405fbe:	ebb6 0e02 	subs.w	lr, r6, r2
  405fc2:	eb75 0e03 	sbcs.w	lr, r5, r3
  405fc6:	bf22      	ittt	cs
  405fc8:	1ab6      	subcs	r6, r6, r2
  405fca:	4675      	movcs	r5, lr
  405fcc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405fd0:	085b      	lsrs	r3, r3, #1
  405fd2:	ea4f 0232 	mov.w	r2, r2, rrx
  405fd6:	ebb6 0e02 	subs.w	lr, r6, r2
  405fda:	eb75 0e03 	sbcs.w	lr, r5, r3
  405fde:	bf22      	ittt	cs
  405fe0:	1ab6      	subcs	r6, r6, r2
  405fe2:	4675      	movcs	r5, lr
  405fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405fe8:	085b      	lsrs	r3, r3, #1
  405fea:	ea4f 0232 	mov.w	r2, r2, rrx
  405fee:	ebb6 0e02 	subs.w	lr, r6, r2
  405ff2:	eb75 0e03 	sbcs.w	lr, r5, r3
  405ff6:	bf22      	ittt	cs
  405ff8:	1ab6      	subcs	r6, r6, r2
  405ffa:	4675      	movcs	r5, lr
  405ffc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406000:	ea55 0e06 	orrs.w	lr, r5, r6
  406004:	d018      	beq.n	406038 <__aeabi_ddiv+0x114>
  406006:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40600a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40600e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  406012:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  406016:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40601a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40601e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  406022:	d1c0      	bne.n	405fa6 <__aeabi_ddiv+0x82>
  406024:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406028:	d10b      	bne.n	406042 <__aeabi_ddiv+0x11e>
  40602a:	ea41 0100 	orr.w	r1, r1, r0
  40602e:	f04f 0000 	mov.w	r0, #0
  406032:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  406036:	e7b6      	b.n	405fa6 <__aeabi_ddiv+0x82>
  406038:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40603c:	bf04      	itt	eq
  40603e:	4301      	orreq	r1, r0
  406040:	2000      	moveq	r0, #0
  406042:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406046:	bf88      	it	hi
  406048:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40604c:	f63f aeaf 	bhi.w	405dae <__aeabi_dmul+0xde>
  406050:	ebb5 0c03 	subs.w	ip, r5, r3
  406054:	bf04      	itt	eq
  406056:	ebb6 0c02 	subseq.w	ip, r6, r2
  40605a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40605e:	f150 0000 	adcs.w	r0, r0, #0
  406062:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406066:	bd70      	pop	{r4, r5, r6, pc}
  406068:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40606c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  406070:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406074:	bfc2      	ittt	gt
  406076:	ebd4 050c 	rsbsgt	r5, r4, ip
  40607a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40607e:	bd70      	popgt	{r4, r5, r6, pc}
  406080:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406084:	f04f 0e00 	mov.w	lr, #0
  406088:	3c01      	subs	r4, #1
  40608a:	e690      	b.n	405dae <__aeabi_dmul+0xde>
  40608c:	ea45 0e06 	orr.w	lr, r5, r6
  406090:	e68d      	b.n	405dae <__aeabi_dmul+0xde>
  406092:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406096:	ea94 0f0c 	teq	r4, ip
  40609a:	bf08      	it	eq
  40609c:	ea95 0f0c 	teqeq	r5, ip
  4060a0:	f43f af3b 	beq.w	405f1a <__aeabi_dmul+0x24a>
  4060a4:	ea94 0f0c 	teq	r4, ip
  4060a8:	d10a      	bne.n	4060c0 <__aeabi_ddiv+0x19c>
  4060aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4060ae:	f47f af34 	bne.w	405f1a <__aeabi_dmul+0x24a>
  4060b2:	ea95 0f0c 	teq	r5, ip
  4060b6:	f47f af25 	bne.w	405f04 <__aeabi_dmul+0x234>
  4060ba:	4610      	mov	r0, r2
  4060bc:	4619      	mov	r1, r3
  4060be:	e72c      	b.n	405f1a <__aeabi_dmul+0x24a>
  4060c0:	ea95 0f0c 	teq	r5, ip
  4060c4:	d106      	bne.n	4060d4 <__aeabi_ddiv+0x1b0>
  4060c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4060ca:	f43f aefd 	beq.w	405ec8 <__aeabi_dmul+0x1f8>
  4060ce:	4610      	mov	r0, r2
  4060d0:	4619      	mov	r1, r3
  4060d2:	e722      	b.n	405f1a <__aeabi_dmul+0x24a>
  4060d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4060d8:	bf18      	it	ne
  4060da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4060de:	f47f aec5 	bne.w	405e6c <__aeabi_dmul+0x19c>
  4060e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4060e6:	f47f af0d 	bne.w	405f04 <__aeabi_dmul+0x234>
  4060ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4060ee:	f47f aeeb 	bne.w	405ec8 <__aeabi_dmul+0x1f8>
  4060f2:	e712      	b.n	405f1a <__aeabi_dmul+0x24a>

004060f4 <__aeabi_d2uiz>:
  4060f4:	004a      	lsls	r2, r1, #1
  4060f6:	d211      	bcs.n	40611c <__aeabi_d2uiz+0x28>
  4060f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4060fc:	d211      	bcs.n	406122 <__aeabi_d2uiz+0x2e>
  4060fe:	d50d      	bpl.n	40611c <__aeabi_d2uiz+0x28>
  406100:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406104:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406108:	d40e      	bmi.n	406128 <__aeabi_d2uiz+0x34>
  40610a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40610e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406112:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406116:	fa23 f002 	lsr.w	r0, r3, r2
  40611a:	4770      	bx	lr
  40611c:	f04f 0000 	mov.w	r0, #0
  406120:	4770      	bx	lr
  406122:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  406126:	d102      	bne.n	40612e <__aeabi_d2uiz+0x3a>
  406128:	f04f 30ff 	mov.w	r0, #4294967295
  40612c:	4770      	bx	lr
  40612e:	f04f 0000 	mov.w	r0, #0
  406132:	4770      	bx	lr

00406134 <__aeabi_uldivmod>:
  406134:	b953      	cbnz	r3, 40614c <__aeabi_uldivmod+0x18>
  406136:	b94a      	cbnz	r2, 40614c <__aeabi_uldivmod+0x18>
  406138:	2900      	cmp	r1, #0
  40613a:	bf08      	it	eq
  40613c:	2800      	cmpeq	r0, #0
  40613e:	bf1c      	itt	ne
  406140:	f04f 31ff 	movne.w	r1, #4294967295
  406144:	f04f 30ff 	movne.w	r0, #4294967295
  406148:	f000 b97a 	b.w	406440 <__aeabi_idiv0>
  40614c:	f1ad 0c08 	sub.w	ip, sp, #8
  406150:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406154:	f000 f806 	bl	406164 <__udivmoddi4>
  406158:	f8dd e004 	ldr.w	lr, [sp, #4]
  40615c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406160:	b004      	add	sp, #16
  406162:	4770      	bx	lr

00406164 <__udivmoddi4>:
  406164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406168:	468c      	mov	ip, r1
  40616a:	460d      	mov	r5, r1
  40616c:	4604      	mov	r4, r0
  40616e:	9e08      	ldr	r6, [sp, #32]
  406170:	2b00      	cmp	r3, #0
  406172:	d151      	bne.n	406218 <__udivmoddi4+0xb4>
  406174:	428a      	cmp	r2, r1
  406176:	4617      	mov	r7, r2
  406178:	d96d      	bls.n	406256 <__udivmoddi4+0xf2>
  40617a:	fab2 fe82 	clz	lr, r2
  40617e:	f1be 0f00 	cmp.w	lr, #0
  406182:	d00b      	beq.n	40619c <__udivmoddi4+0x38>
  406184:	f1ce 0c20 	rsb	ip, lr, #32
  406188:	fa01 f50e 	lsl.w	r5, r1, lr
  40618c:	fa20 fc0c 	lsr.w	ip, r0, ip
  406190:	fa02 f70e 	lsl.w	r7, r2, lr
  406194:	ea4c 0c05 	orr.w	ip, ip, r5
  406198:	fa00 f40e 	lsl.w	r4, r0, lr
  40619c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4061a0:	0c25      	lsrs	r5, r4, #16
  4061a2:	fbbc f8fa 	udiv	r8, ip, sl
  4061a6:	fa1f f987 	uxth.w	r9, r7
  4061aa:	fb0a cc18 	mls	ip, sl, r8, ip
  4061ae:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4061b2:	fb08 f309 	mul.w	r3, r8, r9
  4061b6:	42ab      	cmp	r3, r5
  4061b8:	d90a      	bls.n	4061d0 <__udivmoddi4+0x6c>
  4061ba:	19ed      	adds	r5, r5, r7
  4061bc:	f108 32ff 	add.w	r2, r8, #4294967295
  4061c0:	f080 8123 	bcs.w	40640a <__udivmoddi4+0x2a6>
  4061c4:	42ab      	cmp	r3, r5
  4061c6:	f240 8120 	bls.w	40640a <__udivmoddi4+0x2a6>
  4061ca:	f1a8 0802 	sub.w	r8, r8, #2
  4061ce:	443d      	add	r5, r7
  4061d0:	1aed      	subs	r5, r5, r3
  4061d2:	b2a4      	uxth	r4, r4
  4061d4:	fbb5 f0fa 	udiv	r0, r5, sl
  4061d8:	fb0a 5510 	mls	r5, sl, r0, r5
  4061dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4061e0:	fb00 f909 	mul.w	r9, r0, r9
  4061e4:	45a1      	cmp	r9, r4
  4061e6:	d909      	bls.n	4061fc <__udivmoddi4+0x98>
  4061e8:	19e4      	adds	r4, r4, r7
  4061ea:	f100 33ff 	add.w	r3, r0, #4294967295
  4061ee:	f080 810a 	bcs.w	406406 <__udivmoddi4+0x2a2>
  4061f2:	45a1      	cmp	r9, r4
  4061f4:	f240 8107 	bls.w	406406 <__udivmoddi4+0x2a2>
  4061f8:	3802      	subs	r0, #2
  4061fa:	443c      	add	r4, r7
  4061fc:	eba4 0409 	sub.w	r4, r4, r9
  406200:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406204:	2100      	movs	r1, #0
  406206:	2e00      	cmp	r6, #0
  406208:	d061      	beq.n	4062ce <__udivmoddi4+0x16a>
  40620a:	fa24 f40e 	lsr.w	r4, r4, lr
  40620e:	2300      	movs	r3, #0
  406210:	6034      	str	r4, [r6, #0]
  406212:	6073      	str	r3, [r6, #4]
  406214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406218:	428b      	cmp	r3, r1
  40621a:	d907      	bls.n	40622c <__udivmoddi4+0xc8>
  40621c:	2e00      	cmp	r6, #0
  40621e:	d054      	beq.n	4062ca <__udivmoddi4+0x166>
  406220:	2100      	movs	r1, #0
  406222:	e886 0021 	stmia.w	r6, {r0, r5}
  406226:	4608      	mov	r0, r1
  406228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40622c:	fab3 f183 	clz	r1, r3
  406230:	2900      	cmp	r1, #0
  406232:	f040 808e 	bne.w	406352 <__udivmoddi4+0x1ee>
  406236:	42ab      	cmp	r3, r5
  406238:	d302      	bcc.n	406240 <__udivmoddi4+0xdc>
  40623a:	4282      	cmp	r2, r0
  40623c:	f200 80fa 	bhi.w	406434 <__udivmoddi4+0x2d0>
  406240:	1a84      	subs	r4, r0, r2
  406242:	eb65 0503 	sbc.w	r5, r5, r3
  406246:	2001      	movs	r0, #1
  406248:	46ac      	mov	ip, r5
  40624a:	2e00      	cmp	r6, #0
  40624c:	d03f      	beq.n	4062ce <__udivmoddi4+0x16a>
  40624e:	e886 1010 	stmia.w	r6, {r4, ip}
  406252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406256:	b912      	cbnz	r2, 40625e <__udivmoddi4+0xfa>
  406258:	2701      	movs	r7, #1
  40625a:	fbb7 f7f2 	udiv	r7, r7, r2
  40625e:	fab7 fe87 	clz	lr, r7
  406262:	f1be 0f00 	cmp.w	lr, #0
  406266:	d134      	bne.n	4062d2 <__udivmoddi4+0x16e>
  406268:	1beb      	subs	r3, r5, r7
  40626a:	0c3a      	lsrs	r2, r7, #16
  40626c:	fa1f fc87 	uxth.w	ip, r7
  406270:	2101      	movs	r1, #1
  406272:	fbb3 f8f2 	udiv	r8, r3, r2
  406276:	0c25      	lsrs	r5, r4, #16
  406278:	fb02 3318 	mls	r3, r2, r8, r3
  40627c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406280:	fb0c f308 	mul.w	r3, ip, r8
  406284:	42ab      	cmp	r3, r5
  406286:	d907      	bls.n	406298 <__udivmoddi4+0x134>
  406288:	19ed      	adds	r5, r5, r7
  40628a:	f108 30ff 	add.w	r0, r8, #4294967295
  40628e:	d202      	bcs.n	406296 <__udivmoddi4+0x132>
  406290:	42ab      	cmp	r3, r5
  406292:	f200 80d1 	bhi.w	406438 <__udivmoddi4+0x2d4>
  406296:	4680      	mov	r8, r0
  406298:	1aed      	subs	r5, r5, r3
  40629a:	b2a3      	uxth	r3, r4
  40629c:	fbb5 f0f2 	udiv	r0, r5, r2
  4062a0:	fb02 5510 	mls	r5, r2, r0, r5
  4062a4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4062a8:	fb0c fc00 	mul.w	ip, ip, r0
  4062ac:	45a4      	cmp	ip, r4
  4062ae:	d907      	bls.n	4062c0 <__udivmoddi4+0x15c>
  4062b0:	19e4      	adds	r4, r4, r7
  4062b2:	f100 33ff 	add.w	r3, r0, #4294967295
  4062b6:	d202      	bcs.n	4062be <__udivmoddi4+0x15a>
  4062b8:	45a4      	cmp	ip, r4
  4062ba:	f200 80b8 	bhi.w	40642e <__udivmoddi4+0x2ca>
  4062be:	4618      	mov	r0, r3
  4062c0:	eba4 040c 	sub.w	r4, r4, ip
  4062c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4062c8:	e79d      	b.n	406206 <__udivmoddi4+0xa2>
  4062ca:	4631      	mov	r1, r6
  4062cc:	4630      	mov	r0, r6
  4062ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4062d2:	f1ce 0420 	rsb	r4, lr, #32
  4062d6:	fa05 f30e 	lsl.w	r3, r5, lr
  4062da:	fa07 f70e 	lsl.w	r7, r7, lr
  4062de:	fa20 f804 	lsr.w	r8, r0, r4
  4062e2:	0c3a      	lsrs	r2, r7, #16
  4062e4:	fa25 f404 	lsr.w	r4, r5, r4
  4062e8:	ea48 0803 	orr.w	r8, r8, r3
  4062ec:	fbb4 f1f2 	udiv	r1, r4, r2
  4062f0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4062f4:	fb02 4411 	mls	r4, r2, r1, r4
  4062f8:	fa1f fc87 	uxth.w	ip, r7
  4062fc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406300:	fb01 f30c 	mul.w	r3, r1, ip
  406304:	42ab      	cmp	r3, r5
  406306:	fa00 f40e 	lsl.w	r4, r0, lr
  40630a:	d909      	bls.n	406320 <__udivmoddi4+0x1bc>
  40630c:	19ed      	adds	r5, r5, r7
  40630e:	f101 30ff 	add.w	r0, r1, #4294967295
  406312:	f080 808a 	bcs.w	40642a <__udivmoddi4+0x2c6>
  406316:	42ab      	cmp	r3, r5
  406318:	f240 8087 	bls.w	40642a <__udivmoddi4+0x2c6>
  40631c:	3902      	subs	r1, #2
  40631e:	443d      	add	r5, r7
  406320:	1aeb      	subs	r3, r5, r3
  406322:	fa1f f588 	uxth.w	r5, r8
  406326:	fbb3 f0f2 	udiv	r0, r3, r2
  40632a:	fb02 3310 	mls	r3, r2, r0, r3
  40632e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406332:	fb00 f30c 	mul.w	r3, r0, ip
  406336:	42ab      	cmp	r3, r5
  406338:	d907      	bls.n	40634a <__udivmoddi4+0x1e6>
  40633a:	19ed      	adds	r5, r5, r7
  40633c:	f100 38ff 	add.w	r8, r0, #4294967295
  406340:	d26f      	bcs.n	406422 <__udivmoddi4+0x2be>
  406342:	42ab      	cmp	r3, r5
  406344:	d96d      	bls.n	406422 <__udivmoddi4+0x2be>
  406346:	3802      	subs	r0, #2
  406348:	443d      	add	r5, r7
  40634a:	1aeb      	subs	r3, r5, r3
  40634c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406350:	e78f      	b.n	406272 <__udivmoddi4+0x10e>
  406352:	f1c1 0720 	rsb	r7, r1, #32
  406356:	fa22 f807 	lsr.w	r8, r2, r7
  40635a:	408b      	lsls	r3, r1
  40635c:	fa05 f401 	lsl.w	r4, r5, r1
  406360:	ea48 0303 	orr.w	r3, r8, r3
  406364:	fa20 fe07 	lsr.w	lr, r0, r7
  406368:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40636c:	40fd      	lsrs	r5, r7
  40636e:	ea4e 0e04 	orr.w	lr, lr, r4
  406372:	fbb5 f9fc 	udiv	r9, r5, ip
  406376:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40637a:	fb0c 5519 	mls	r5, ip, r9, r5
  40637e:	fa1f f883 	uxth.w	r8, r3
  406382:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406386:	fb09 f408 	mul.w	r4, r9, r8
  40638a:	42ac      	cmp	r4, r5
  40638c:	fa02 f201 	lsl.w	r2, r2, r1
  406390:	fa00 fa01 	lsl.w	sl, r0, r1
  406394:	d908      	bls.n	4063a8 <__udivmoddi4+0x244>
  406396:	18ed      	adds	r5, r5, r3
  406398:	f109 30ff 	add.w	r0, r9, #4294967295
  40639c:	d243      	bcs.n	406426 <__udivmoddi4+0x2c2>
  40639e:	42ac      	cmp	r4, r5
  4063a0:	d941      	bls.n	406426 <__udivmoddi4+0x2c2>
  4063a2:	f1a9 0902 	sub.w	r9, r9, #2
  4063a6:	441d      	add	r5, r3
  4063a8:	1b2d      	subs	r5, r5, r4
  4063aa:	fa1f fe8e 	uxth.w	lr, lr
  4063ae:	fbb5 f0fc 	udiv	r0, r5, ip
  4063b2:	fb0c 5510 	mls	r5, ip, r0, r5
  4063b6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4063ba:	fb00 f808 	mul.w	r8, r0, r8
  4063be:	45a0      	cmp	r8, r4
  4063c0:	d907      	bls.n	4063d2 <__udivmoddi4+0x26e>
  4063c2:	18e4      	adds	r4, r4, r3
  4063c4:	f100 35ff 	add.w	r5, r0, #4294967295
  4063c8:	d229      	bcs.n	40641e <__udivmoddi4+0x2ba>
  4063ca:	45a0      	cmp	r8, r4
  4063cc:	d927      	bls.n	40641e <__udivmoddi4+0x2ba>
  4063ce:	3802      	subs	r0, #2
  4063d0:	441c      	add	r4, r3
  4063d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4063d6:	eba4 0408 	sub.w	r4, r4, r8
  4063da:	fba0 8902 	umull	r8, r9, r0, r2
  4063de:	454c      	cmp	r4, r9
  4063e0:	46c6      	mov	lr, r8
  4063e2:	464d      	mov	r5, r9
  4063e4:	d315      	bcc.n	406412 <__udivmoddi4+0x2ae>
  4063e6:	d012      	beq.n	40640e <__udivmoddi4+0x2aa>
  4063e8:	b156      	cbz	r6, 406400 <__udivmoddi4+0x29c>
  4063ea:	ebba 030e 	subs.w	r3, sl, lr
  4063ee:	eb64 0405 	sbc.w	r4, r4, r5
  4063f2:	fa04 f707 	lsl.w	r7, r4, r7
  4063f6:	40cb      	lsrs	r3, r1
  4063f8:	431f      	orrs	r7, r3
  4063fa:	40cc      	lsrs	r4, r1
  4063fc:	6037      	str	r7, [r6, #0]
  4063fe:	6074      	str	r4, [r6, #4]
  406400:	2100      	movs	r1, #0
  406402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406406:	4618      	mov	r0, r3
  406408:	e6f8      	b.n	4061fc <__udivmoddi4+0x98>
  40640a:	4690      	mov	r8, r2
  40640c:	e6e0      	b.n	4061d0 <__udivmoddi4+0x6c>
  40640e:	45c2      	cmp	sl, r8
  406410:	d2ea      	bcs.n	4063e8 <__udivmoddi4+0x284>
  406412:	ebb8 0e02 	subs.w	lr, r8, r2
  406416:	eb69 0503 	sbc.w	r5, r9, r3
  40641a:	3801      	subs	r0, #1
  40641c:	e7e4      	b.n	4063e8 <__udivmoddi4+0x284>
  40641e:	4628      	mov	r0, r5
  406420:	e7d7      	b.n	4063d2 <__udivmoddi4+0x26e>
  406422:	4640      	mov	r0, r8
  406424:	e791      	b.n	40634a <__udivmoddi4+0x1e6>
  406426:	4681      	mov	r9, r0
  406428:	e7be      	b.n	4063a8 <__udivmoddi4+0x244>
  40642a:	4601      	mov	r1, r0
  40642c:	e778      	b.n	406320 <__udivmoddi4+0x1bc>
  40642e:	3802      	subs	r0, #2
  406430:	443c      	add	r4, r7
  406432:	e745      	b.n	4062c0 <__udivmoddi4+0x15c>
  406434:	4608      	mov	r0, r1
  406436:	e708      	b.n	40624a <__udivmoddi4+0xe6>
  406438:	f1a8 0802 	sub.w	r8, r8, #2
  40643c:	443d      	add	r5, r7
  40643e:	e72b      	b.n	406298 <__udivmoddi4+0x134>

00406440 <__aeabi_idiv0>:
  406440:	4770      	bx	lr
  406442:	bf00      	nop

00406444 <__libc_init_array>:
  406444:	b570      	push	{r4, r5, r6, lr}
  406446:	4e0f      	ldr	r6, [pc, #60]	; (406484 <__libc_init_array+0x40>)
  406448:	4d0f      	ldr	r5, [pc, #60]	; (406488 <__libc_init_array+0x44>)
  40644a:	1b76      	subs	r6, r6, r5
  40644c:	10b6      	asrs	r6, r6, #2
  40644e:	bf18      	it	ne
  406450:	2400      	movne	r4, #0
  406452:	d005      	beq.n	406460 <__libc_init_array+0x1c>
  406454:	3401      	adds	r4, #1
  406456:	f855 3b04 	ldr.w	r3, [r5], #4
  40645a:	4798      	blx	r3
  40645c:	42a6      	cmp	r6, r4
  40645e:	d1f9      	bne.n	406454 <__libc_init_array+0x10>
  406460:	4e0a      	ldr	r6, [pc, #40]	; (40648c <__libc_init_array+0x48>)
  406462:	4d0b      	ldr	r5, [pc, #44]	; (406490 <__libc_init_array+0x4c>)
  406464:	1b76      	subs	r6, r6, r5
  406466:	f004 ffaf 	bl	40b3c8 <_init>
  40646a:	10b6      	asrs	r6, r6, #2
  40646c:	bf18      	it	ne
  40646e:	2400      	movne	r4, #0
  406470:	d006      	beq.n	406480 <__libc_init_array+0x3c>
  406472:	3401      	adds	r4, #1
  406474:	f855 3b04 	ldr.w	r3, [r5], #4
  406478:	4798      	blx	r3
  40647a:	42a6      	cmp	r6, r4
  40647c:	d1f9      	bne.n	406472 <__libc_init_array+0x2e>
  40647e:	bd70      	pop	{r4, r5, r6, pc}
  406480:	bd70      	pop	{r4, r5, r6, pc}
  406482:	bf00      	nop
  406484:	0040b3d4 	.word	0x0040b3d4
  406488:	0040b3d4 	.word	0x0040b3d4
  40648c:	0040b3dc 	.word	0x0040b3dc
  406490:	0040b3d4 	.word	0x0040b3d4

00406494 <memset>:
  406494:	b470      	push	{r4, r5, r6}
  406496:	0786      	lsls	r6, r0, #30
  406498:	d046      	beq.n	406528 <memset+0x94>
  40649a:	1e54      	subs	r4, r2, #1
  40649c:	2a00      	cmp	r2, #0
  40649e:	d041      	beq.n	406524 <memset+0x90>
  4064a0:	b2ca      	uxtb	r2, r1
  4064a2:	4603      	mov	r3, r0
  4064a4:	e002      	b.n	4064ac <memset+0x18>
  4064a6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4064aa:	d33b      	bcc.n	406524 <memset+0x90>
  4064ac:	f803 2b01 	strb.w	r2, [r3], #1
  4064b0:	079d      	lsls	r5, r3, #30
  4064b2:	d1f8      	bne.n	4064a6 <memset+0x12>
  4064b4:	2c03      	cmp	r4, #3
  4064b6:	d92e      	bls.n	406516 <memset+0x82>
  4064b8:	b2cd      	uxtb	r5, r1
  4064ba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4064be:	2c0f      	cmp	r4, #15
  4064c0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4064c4:	d919      	bls.n	4064fa <memset+0x66>
  4064c6:	f103 0210 	add.w	r2, r3, #16
  4064ca:	4626      	mov	r6, r4
  4064cc:	3e10      	subs	r6, #16
  4064ce:	2e0f      	cmp	r6, #15
  4064d0:	f842 5c10 	str.w	r5, [r2, #-16]
  4064d4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4064d8:	f842 5c08 	str.w	r5, [r2, #-8]
  4064dc:	f842 5c04 	str.w	r5, [r2, #-4]
  4064e0:	f102 0210 	add.w	r2, r2, #16
  4064e4:	d8f2      	bhi.n	4064cc <memset+0x38>
  4064e6:	f1a4 0210 	sub.w	r2, r4, #16
  4064ea:	f022 020f 	bic.w	r2, r2, #15
  4064ee:	f004 040f 	and.w	r4, r4, #15
  4064f2:	3210      	adds	r2, #16
  4064f4:	2c03      	cmp	r4, #3
  4064f6:	4413      	add	r3, r2
  4064f8:	d90d      	bls.n	406516 <memset+0x82>
  4064fa:	461e      	mov	r6, r3
  4064fc:	4622      	mov	r2, r4
  4064fe:	3a04      	subs	r2, #4
  406500:	2a03      	cmp	r2, #3
  406502:	f846 5b04 	str.w	r5, [r6], #4
  406506:	d8fa      	bhi.n	4064fe <memset+0x6a>
  406508:	1f22      	subs	r2, r4, #4
  40650a:	f022 0203 	bic.w	r2, r2, #3
  40650e:	3204      	adds	r2, #4
  406510:	4413      	add	r3, r2
  406512:	f004 0403 	and.w	r4, r4, #3
  406516:	b12c      	cbz	r4, 406524 <memset+0x90>
  406518:	b2c9      	uxtb	r1, r1
  40651a:	441c      	add	r4, r3
  40651c:	f803 1b01 	strb.w	r1, [r3], #1
  406520:	429c      	cmp	r4, r3
  406522:	d1fb      	bne.n	40651c <memset+0x88>
  406524:	bc70      	pop	{r4, r5, r6}
  406526:	4770      	bx	lr
  406528:	4614      	mov	r4, r2
  40652a:	4603      	mov	r3, r0
  40652c:	e7c2      	b.n	4064b4 <memset+0x20>
  40652e:	bf00      	nop

00406530 <sprintf>:
  406530:	b40e      	push	{r1, r2, r3}
  406532:	b5f0      	push	{r4, r5, r6, r7, lr}
  406534:	b09c      	sub	sp, #112	; 0x70
  406536:	ab21      	add	r3, sp, #132	; 0x84
  406538:	490f      	ldr	r1, [pc, #60]	; (406578 <sprintf+0x48>)
  40653a:	f853 2b04 	ldr.w	r2, [r3], #4
  40653e:	9301      	str	r3, [sp, #4]
  406540:	4605      	mov	r5, r0
  406542:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  406546:	6808      	ldr	r0, [r1, #0]
  406548:	9502      	str	r5, [sp, #8]
  40654a:	f44f 7702 	mov.w	r7, #520	; 0x208
  40654e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  406552:	a902      	add	r1, sp, #8
  406554:	9506      	str	r5, [sp, #24]
  406556:	f8ad 7014 	strh.w	r7, [sp, #20]
  40655a:	9404      	str	r4, [sp, #16]
  40655c:	9407      	str	r4, [sp, #28]
  40655e:	f8ad 6016 	strh.w	r6, [sp, #22]
  406562:	f000 fa5b 	bl	406a1c <_svfprintf_r>
  406566:	9b02      	ldr	r3, [sp, #8]
  406568:	2200      	movs	r2, #0
  40656a:	701a      	strb	r2, [r3, #0]
  40656c:	b01c      	add	sp, #112	; 0x70
  40656e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  406572:	b003      	add	sp, #12
  406574:	4770      	bx	lr
  406576:	bf00      	nop
  406578:	20000484 	.word	0x20000484
  40657c:	00000000 	.word	0x00000000
  406580:	eba2 0003 	sub.w	r0, r2, r3
  406584:	4770      	bx	lr
  406586:	bf00      	nop

00406588 <strcmp>:
  406588:	7802      	ldrb	r2, [r0, #0]
  40658a:	780b      	ldrb	r3, [r1, #0]
  40658c:	2a01      	cmp	r2, #1
  40658e:	bf28      	it	cs
  406590:	429a      	cmpcs	r2, r3
  406592:	d1f5      	bne.n	406580 <sprintf+0x50>
  406594:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  406598:	ea40 0401 	orr.w	r4, r0, r1
  40659c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  4065a0:	f06f 0c00 	mvn.w	ip, #0
  4065a4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  4065a8:	b312      	cbz	r2, 4065f0 <strcmp+0x68>
  4065aa:	ea80 0401 	eor.w	r4, r0, r1
  4065ae:	f014 0f07 	tst.w	r4, #7
  4065b2:	d16a      	bne.n	40668a <strcmp+0x102>
  4065b4:	f000 0407 	and.w	r4, r0, #7
  4065b8:	f020 0007 	bic.w	r0, r0, #7
  4065bc:	f004 0503 	and.w	r5, r4, #3
  4065c0:	f021 0107 	bic.w	r1, r1, #7
  4065c4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4065c8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4065cc:	f014 0f04 	tst.w	r4, #4
  4065d0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4065d4:	fa0c f405 	lsl.w	r4, ip, r5
  4065d8:	ea62 0204 	orn	r2, r2, r4
  4065dc:	ea66 0604 	orn	r6, r6, r4
  4065e0:	d00a      	beq.n	4065f8 <strcmp+0x70>
  4065e2:	ea63 0304 	orn	r3, r3, r4
  4065e6:	4662      	mov	r2, ip
  4065e8:	ea67 0704 	orn	r7, r7, r4
  4065ec:	4666      	mov	r6, ip
  4065ee:	e003      	b.n	4065f8 <strcmp+0x70>
  4065f0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4065f4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4065f8:	fa82 f54c 	uadd8	r5, r2, ip
  4065fc:	ea82 0406 	eor.w	r4, r2, r6
  406600:	faa4 f48c 	sel	r4, r4, ip
  406604:	bb6c      	cbnz	r4, 406662 <strcmp+0xda>
  406606:	fa83 f54c 	uadd8	r5, r3, ip
  40660a:	ea83 0507 	eor.w	r5, r3, r7
  40660e:	faa5 f58c 	sel	r5, r5, ip
  406612:	b995      	cbnz	r5, 40663a <strcmp+0xb2>
  406614:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  406618:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40661c:	fa82 f54c 	uadd8	r5, r2, ip
  406620:	ea82 0406 	eor.w	r4, r2, r6
  406624:	faa4 f48c 	sel	r4, r4, ip
  406628:	fa83 f54c 	uadd8	r5, r3, ip
  40662c:	ea83 0507 	eor.w	r5, r3, r7
  406630:	faa5 f58c 	sel	r5, r5, ip
  406634:	4325      	orrs	r5, r4
  406636:	d0db      	beq.n	4065f0 <strcmp+0x68>
  406638:	b99c      	cbnz	r4, 406662 <strcmp+0xda>
  40663a:	ba2d      	rev	r5, r5
  40663c:	fab5 f485 	clz	r4, r5
  406640:	f024 0407 	bic.w	r4, r4, #7
  406644:	fa27 f104 	lsr.w	r1, r7, r4
  406648:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40664c:	fa23 f304 	lsr.w	r3, r3, r4
  406650:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  406654:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406658:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40665c:	eba0 0001 	sub.w	r0, r0, r1
  406660:	4770      	bx	lr
  406662:	ba24      	rev	r4, r4
  406664:	fab4 f484 	clz	r4, r4
  406668:	f024 0407 	bic.w	r4, r4, #7
  40666c:	fa26 f104 	lsr.w	r1, r6, r4
  406670:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  406674:	fa22 f204 	lsr.w	r2, r2, r4
  406678:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40667c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406680:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  406684:	eba0 0001 	sub.w	r0, r0, r1
  406688:	4770      	bx	lr
  40668a:	f014 0f03 	tst.w	r4, #3
  40668e:	d13c      	bne.n	40670a <strcmp+0x182>
  406690:	f010 0403 	ands.w	r4, r0, #3
  406694:	d128      	bne.n	4066e8 <strcmp+0x160>
  406696:	f850 2b08 	ldr.w	r2, [r0], #8
  40669a:	f851 3b08 	ldr.w	r3, [r1], #8
  40669e:	fa82 f54c 	uadd8	r5, r2, ip
  4066a2:	ea82 0503 	eor.w	r5, r2, r3
  4066a6:	faa5 f58c 	sel	r5, r5, ip
  4066aa:	b95d      	cbnz	r5, 4066c4 <strcmp+0x13c>
  4066ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4066b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4066b4:	fa82 f54c 	uadd8	r5, r2, ip
  4066b8:	ea82 0503 	eor.w	r5, r2, r3
  4066bc:	faa5 f58c 	sel	r5, r5, ip
  4066c0:	2d00      	cmp	r5, #0
  4066c2:	d0e8      	beq.n	406696 <strcmp+0x10e>
  4066c4:	ba2d      	rev	r5, r5
  4066c6:	fab5 f485 	clz	r4, r5
  4066ca:	f024 0407 	bic.w	r4, r4, #7
  4066ce:	fa23 f104 	lsr.w	r1, r3, r4
  4066d2:	fa22 f204 	lsr.w	r2, r2, r4
  4066d6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4066da:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4066de:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4066e2:	eba0 0001 	sub.w	r0, r0, r1
  4066e6:	4770      	bx	lr
  4066e8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  4066ec:	f020 0003 	bic.w	r0, r0, #3
  4066f0:	f850 2b08 	ldr.w	r2, [r0], #8
  4066f4:	f021 0103 	bic.w	r1, r1, #3
  4066f8:	f851 3b08 	ldr.w	r3, [r1], #8
  4066fc:	fa0c f404 	lsl.w	r4, ip, r4
  406700:	ea62 0204 	orn	r2, r2, r4
  406704:	ea63 0304 	orn	r3, r3, r4
  406708:	e7c9      	b.n	40669e <strcmp+0x116>
  40670a:	f010 0403 	ands.w	r4, r0, #3
  40670e:	d01a      	beq.n	406746 <strcmp+0x1be>
  406710:	eba1 0104 	sub.w	r1, r1, r4
  406714:	f020 0003 	bic.w	r0, r0, #3
  406718:	07e4      	lsls	r4, r4, #31
  40671a:	f850 2b04 	ldr.w	r2, [r0], #4
  40671e:	d006      	beq.n	40672e <strcmp+0x1a6>
  406720:	d20f      	bcs.n	406742 <strcmp+0x1ba>
  406722:	788b      	ldrb	r3, [r1, #2]
  406724:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  406728:	1ae4      	subs	r4, r4, r3
  40672a:	d106      	bne.n	40673a <strcmp+0x1b2>
  40672c:	b12b      	cbz	r3, 40673a <strcmp+0x1b2>
  40672e:	78cb      	ldrb	r3, [r1, #3]
  406730:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  406734:	1ae4      	subs	r4, r4, r3
  406736:	d100      	bne.n	40673a <strcmp+0x1b2>
  406738:	b91b      	cbnz	r3, 406742 <strcmp+0x1ba>
  40673a:	4620      	mov	r0, r4
  40673c:	f85d 4b10 	ldr.w	r4, [sp], #16
  406740:	4770      	bx	lr
  406742:	f101 0104 	add.w	r1, r1, #4
  406746:	f850 2b04 	ldr.w	r2, [r0], #4
  40674a:	07cc      	lsls	r4, r1, #31
  40674c:	f021 0103 	bic.w	r1, r1, #3
  406750:	f851 3b04 	ldr.w	r3, [r1], #4
  406754:	d848      	bhi.n	4067e8 <strcmp+0x260>
  406756:	d224      	bcs.n	4067a2 <strcmp+0x21a>
  406758:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40675c:	fa82 f54c 	uadd8	r5, r2, ip
  406760:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  406764:	faa5 f58c 	sel	r5, r5, ip
  406768:	d10a      	bne.n	406780 <strcmp+0x1f8>
  40676a:	b965      	cbnz	r5, 406786 <strcmp+0x1fe>
  40676c:	f851 3b04 	ldr.w	r3, [r1], #4
  406770:	ea84 0402 	eor.w	r4, r4, r2
  406774:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  406778:	d10e      	bne.n	406798 <strcmp+0x210>
  40677a:	f850 2b04 	ldr.w	r2, [r0], #4
  40677e:	e7eb      	b.n	406758 <strcmp+0x1d0>
  406780:	ea4f 2313 	mov.w	r3, r3, lsr #8
  406784:	e055      	b.n	406832 <strcmp+0x2aa>
  406786:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40678a:	d14d      	bne.n	406828 <strcmp+0x2a0>
  40678c:	7808      	ldrb	r0, [r1, #0]
  40678e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  406792:	f1c0 0000 	rsb	r0, r0, #0
  406796:	4770      	bx	lr
  406798:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40679c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  4067a0:	e047      	b.n	406832 <strcmp+0x2aa>
  4067a2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  4067a6:	fa82 f54c 	uadd8	r5, r2, ip
  4067aa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  4067ae:	faa5 f58c 	sel	r5, r5, ip
  4067b2:	d10a      	bne.n	4067ca <strcmp+0x242>
  4067b4:	b965      	cbnz	r5, 4067d0 <strcmp+0x248>
  4067b6:	f851 3b04 	ldr.w	r3, [r1], #4
  4067ba:	ea84 0402 	eor.w	r4, r4, r2
  4067be:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  4067c2:	d10c      	bne.n	4067de <strcmp+0x256>
  4067c4:	f850 2b04 	ldr.w	r2, [r0], #4
  4067c8:	e7eb      	b.n	4067a2 <strcmp+0x21a>
  4067ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4067ce:	e030      	b.n	406832 <strcmp+0x2aa>
  4067d0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  4067d4:	d128      	bne.n	406828 <strcmp+0x2a0>
  4067d6:	880b      	ldrh	r3, [r1, #0]
  4067d8:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4067dc:	e029      	b.n	406832 <strcmp+0x2aa>
  4067de:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4067e2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  4067e6:	e024      	b.n	406832 <strcmp+0x2aa>
  4067e8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  4067ec:	fa82 f54c 	uadd8	r5, r2, ip
  4067f0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  4067f4:	faa5 f58c 	sel	r5, r5, ip
  4067f8:	d10a      	bne.n	406810 <strcmp+0x288>
  4067fa:	b965      	cbnz	r5, 406816 <strcmp+0x28e>
  4067fc:	f851 3b04 	ldr.w	r3, [r1], #4
  406800:	ea84 0402 	eor.w	r4, r4, r2
  406804:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  406808:	d109      	bne.n	40681e <strcmp+0x296>
  40680a:	f850 2b04 	ldr.w	r2, [r0], #4
  40680e:	e7eb      	b.n	4067e8 <strcmp+0x260>
  406810:	ea4f 6313 	mov.w	r3, r3, lsr #24
  406814:	e00d      	b.n	406832 <strcmp+0x2aa>
  406816:	f015 0fff 	tst.w	r5, #255	; 0xff
  40681a:	d105      	bne.n	406828 <strcmp+0x2a0>
  40681c:	680b      	ldr	r3, [r1, #0]
  40681e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  406822:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  406826:	e004      	b.n	406832 <strcmp+0x2aa>
  406828:	f04f 0000 	mov.w	r0, #0
  40682c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  406830:	4770      	bx	lr
  406832:	ba12      	rev	r2, r2
  406834:	ba1b      	rev	r3, r3
  406836:	fa82 f44c 	uadd8	r4, r2, ip
  40683a:	ea82 0403 	eor.w	r4, r2, r3
  40683e:	faa4 f58c 	sel	r5, r4, ip
  406842:	fab5 f485 	clz	r4, r5
  406846:	fa02 f204 	lsl.w	r2, r2, r4
  40684a:	fa03 f304 	lsl.w	r3, r3, r4
  40684e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  406852:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  406856:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40685a:	4770      	bx	lr

0040685c <strcpy>:
  40685c:	ea80 0201 	eor.w	r2, r0, r1
  406860:	4684      	mov	ip, r0
  406862:	f012 0f03 	tst.w	r2, #3
  406866:	d14f      	bne.n	406908 <strcpy+0xac>
  406868:	f011 0f03 	tst.w	r1, #3
  40686c:	d132      	bne.n	4068d4 <strcpy+0x78>
  40686e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  406872:	f011 0f04 	tst.w	r1, #4
  406876:	f851 3b04 	ldr.w	r3, [r1], #4
  40687a:	d00b      	beq.n	406894 <strcpy+0x38>
  40687c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  406880:	439a      	bics	r2, r3
  406882:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406886:	bf04      	itt	eq
  406888:	f84c 3b04 	streq.w	r3, [ip], #4
  40688c:	f851 3b04 	ldreq.w	r3, [r1], #4
  406890:	d116      	bne.n	4068c0 <strcpy+0x64>
  406892:	bf00      	nop
  406894:	f851 4b04 	ldr.w	r4, [r1], #4
  406898:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40689c:	439a      	bics	r2, r3
  40689e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4068a2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4068a6:	d10b      	bne.n	4068c0 <strcpy+0x64>
  4068a8:	f84c 3b04 	str.w	r3, [ip], #4
  4068ac:	43a2      	bics	r2, r4
  4068ae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4068b2:	bf04      	itt	eq
  4068b4:	f851 3b04 	ldreq.w	r3, [r1], #4
  4068b8:	f84c 4b04 	streq.w	r4, [ip], #4
  4068bc:	d0ea      	beq.n	406894 <strcpy+0x38>
  4068be:	4623      	mov	r3, r4
  4068c0:	f80c 3b01 	strb.w	r3, [ip], #1
  4068c4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4068c8:	ea4f 2333 	mov.w	r3, r3, ror #8
  4068cc:	d1f8      	bne.n	4068c0 <strcpy+0x64>
  4068ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  4068d2:	4770      	bx	lr
  4068d4:	f011 0f01 	tst.w	r1, #1
  4068d8:	d006      	beq.n	4068e8 <strcpy+0x8c>
  4068da:	f811 2b01 	ldrb.w	r2, [r1], #1
  4068de:	f80c 2b01 	strb.w	r2, [ip], #1
  4068e2:	2a00      	cmp	r2, #0
  4068e4:	bf08      	it	eq
  4068e6:	4770      	bxeq	lr
  4068e8:	f011 0f02 	tst.w	r1, #2
  4068ec:	d0bf      	beq.n	40686e <strcpy+0x12>
  4068ee:	f831 2b02 	ldrh.w	r2, [r1], #2
  4068f2:	f012 0fff 	tst.w	r2, #255	; 0xff
  4068f6:	bf16      	itet	ne
  4068f8:	f82c 2b02 	strhne.w	r2, [ip], #2
  4068fc:	f88c 2000 	strbeq.w	r2, [ip]
  406900:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  406904:	d1b3      	bne.n	40686e <strcpy+0x12>
  406906:	4770      	bx	lr
  406908:	f811 2b01 	ldrb.w	r2, [r1], #1
  40690c:	f80c 2b01 	strb.w	r2, [ip], #1
  406910:	2a00      	cmp	r2, #0
  406912:	d1f9      	bne.n	406908 <strcpy+0xac>
  406914:	4770      	bx	lr
  406916:	bf00      	nop
	...

00406940 <strlen>:
  406940:	f890 f000 	pld	[r0]
  406944:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406948:	f020 0107 	bic.w	r1, r0, #7
  40694c:	f06f 0c00 	mvn.w	ip, #0
  406950:	f010 0407 	ands.w	r4, r0, #7
  406954:	f891 f020 	pld	[r1, #32]
  406958:	f040 8049 	bne.w	4069ee <strlen+0xae>
  40695c:	f04f 0400 	mov.w	r4, #0
  406960:	f06f 0007 	mvn.w	r0, #7
  406964:	e9d1 2300 	ldrd	r2, r3, [r1]
  406968:	f891 f040 	pld	[r1, #64]	; 0x40
  40696c:	f100 0008 	add.w	r0, r0, #8
  406970:	fa82 f24c 	uadd8	r2, r2, ip
  406974:	faa4 f28c 	sel	r2, r4, ip
  406978:	fa83 f34c 	uadd8	r3, r3, ip
  40697c:	faa2 f38c 	sel	r3, r2, ip
  406980:	bb4b      	cbnz	r3, 4069d6 <strlen+0x96>
  406982:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406986:	fa82 f24c 	uadd8	r2, r2, ip
  40698a:	f100 0008 	add.w	r0, r0, #8
  40698e:	faa4 f28c 	sel	r2, r4, ip
  406992:	fa83 f34c 	uadd8	r3, r3, ip
  406996:	faa2 f38c 	sel	r3, r2, ip
  40699a:	b9e3      	cbnz	r3, 4069d6 <strlen+0x96>
  40699c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4069a0:	fa82 f24c 	uadd8	r2, r2, ip
  4069a4:	f100 0008 	add.w	r0, r0, #8
  4069a8:	faa4 f28c 	sel	r2, r4, ip
  4069ac:	fa83 f34c 	uadd8	r3, r3, ip
  4069b0:	faa2 f38c 	sel	r3, r2, ip
  4069b4:	b97b      	cbnz	r3, 4069d6 <strlen+0x96>
  4069b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4069ba:	f101 0120 	add.w	r1, r1, #32
  4069be:	fa82 f24c 	uadd8	r2, r2, ip
  4069c2:	f100 0008 	add.w	r0, r0, #8
  4069c6:	faa4 f28c 	sel	r2, r4, ip
  4069ca:	fa83 f34c 	uadd8	r3, r3, ip
  4069ce:	faa2 f38c 	sel	r3, r2, ip
  4069d2:	2b00      	cmp	r3, #0
  4069d4:	d0c6      	beq.n	406964 <strlen+0x24>
  4069d6:	2a00      	cmp	r2, #0
  4069d8:	bf04      	itt	eq
  4069da:	3004      	addeq	r0, #4
  4069dc:	461a      	moveq	r2, r3
  4069de:	ba12      	rev	r2, r2
  4069e0:	fab2 f282 	clz	r2, r2
  4069e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4069e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4069ec:	4770      	bx	lr
  4069ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4069f2:	f004 0503 	and.w	r5, r4, #3
  4069f6:	f1c4 0000 	rsb	r0, r4, #0
  4069fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4069fe:	f014 0f04 	tst.w	r4, #4
  406a02:	f891 f040 	pld	[r1, #64]	; 0x40
  406a06:	fa0c f505 	lsl.w	r5, ip, r5
  406a0a:	ea62 0205 	orn	r2, r2, r5
  406a0e:	bf1c      	itt	ne
  406a10:	ea63 0305 	ornne	r3, r3, r5
  406a14:	4662      	movne	r2, ip
  406a16:	f04f 0400 	mov.w	r4, #0
  406a1a:	e7a9      	b.n	406970 <strlen+0x30>

00406a1c <_svfprintf_r>:
  406a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a20:	b0c3      	sub	sp, #268	; 0x10c
  406a22:	460c      	mov	r4, r1
  406a24:	910b      	str	r1, [sp, #44]	; 0x2c
  406a26:	4692      	mov	sl, r2
  406a28:	930f      	str	r3, [sp, #60]	; 0x3c
  406a2a:	900c      	str	r0, [sp, #48]	; 0x30
  406a2c:	f002 fb42 	bl	4090b4 <_localeconv_r>
  406a30:	6803      	ldr	r3, [r0, #0]
  406a32:	931a      	str	r3, [sp, #104]	; 0x68
  406a34:	4618      	mov	r0, r3
  406a36:	f7ff ff83 	bl	406940 <strlen>
  406a3a:	89a3      	ldrh	r3, [r4, #12]
  406a3c:	9019      	str	r0, [sp, #100]	; 0x64
  406a3e:	0619      	lsls	r1, r3, #24
  406a40:	d503      	bpl.n	406a4a <_svfprintf_r+0x2e>
  406a42:	6923      	ldr	r3, [r4, #16]
  406a44:	2b00      	cmp	r3, #0
  406a46:	f001 8003 	beq.w	407a50 <_svfprintf_r+0x1034>
  406a4a:	2300      	movs	r3, #0
  406a4c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  406a50:	9313      	str	r3, [sp, #76]	; 0x4c
  406a52:	9315      	str	r3, [sp, #84]	; 0x54
  406a54:	9314      	str	r3, [sp, #80]	; 0x50
  406a56:	9327      	str	r3, [sp, #156]	; 0x9c
  406a58:	9326      	str	r3, [sp, #152]	; 0x98
  406a5a:	9318      	str	r3, [sp, #96]	; 0x60
  406a5c:	931b      	str	r3, [sp, #108]	; 0x6c
  406a5e:	9309      	str	r3, [sp, #36]	; 0x24
  406a60:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  406a64:	46c8      	mov	r8, r9
  406a66:	9316      	str	r3, [sp, #88]	; 0x58
  406a68:	9317      	str	r3, [sp, #92]	; 0x5c
  406a6a:	f89a 3000 	ldrb.w	r3, [sl]
  406a6e:	4654      	mov	r4, sl
  406a70:	b1e3      	cbz	r3, 406aac <_svfprintf_r+0x90>
  406a72:	2b25      	cmp	r3, #37	; 0x25
  406a74:	d102      	bne.n	406a7c <_svfprintf_r+0x60>
  406a76:	e019      	b.n	406aac <_svfprintf_r+0x90>
  406a78:	2b25      	cmp	r3, #37	; 0x25
  406a7a:	d003      	beq.n	406a84 <_svfprintf_r+0x68>
  406a7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406a80:	2b00      	cmp	r3, #0
  406a82:	d1f9      	bne.n	406a78 <_svfprintf_r+0x5c>
  406a84:	eba4 050a 	sub.w	r5, r4, sl
  406a88:	b185      	cbz	r5, 406aac <_svfprintf_r+0x90>
  406a8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406a8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406a8e:	f8c8 a000 	str.w	sl, [r8]
  406a92:	3301      	adds	r3, #1
  406a94:	442a      	add	r2, r5
  406a96:	2b07      	cmp	r3, #7
  406a98:	f8c8 5004 	str.w	r5, [r8, #4]
  406a9c:	9227      	str	r2, [sp, #156]	; 0x9c
  406a9e:	9326      	str	r3, [sp, #152]	; 0x98
  406aa0:	dc7f      	bgt.n	406ba2 <_svfprintf_r+0x186>
  406aa2:	f108 0808 	add.w	r8, r8, #8
  406aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406aa8:	442b      	add	r3, r5
  406aaa:	9309      	str	r3, [sp, #36]	; 0x24
  406aac:	7823      	ldrb	r3, [r4, #0]
  406aae:	2b00      	cmp	r3, #0
  406ab0:	d07f      	beq.n	406bb2 <_svfprintf_r+0x196>
  406ab2:	2300      	movs	r3, #0
  406ab4:	461a      	mov	r2, r3
  406ab6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  406aba:	4619      	mov	r1, r3
  406abc:	930d      	str	r3, [sp, #52]	; 0x34
  406abe:	469b      	mov	fp, r3
  406ac0:	f04f 30ff 	mov.w	r0, #4294967295
  406ac4:	7863      	ldrb	r3, [r4, #1]
  406ac6:	900a      	str	r0, [sp, #40]	; 0x28
  406ac8:	f104 0a01 	add.w	sl, r4, #1
  406acc:	f10a 0a01 	add.w	sl, sl, #1
  406ad0:	f1a3 0020 	sub.w	r0, r3, #32
  406ad4:	2858      	cmp	r0, #88	; 0x58
  406ad6:	f200 83c1 	bhi.w	40725c <_svfprintf_r+0x840>
  406ada:	e8df f010 	tbh	[pc, r0, lsl #1]
  406ade:	0238      	.short	0x0238
  406ae0:	03bf03bf 	.word	0x03bf03bf
  406ae4:	03bf0240 	.word	0x03bf0240
  406ae8:	03bf03bf 	.word	0x03bf03bf
  406aec:	03bf03bf 	.word	0x03bf03bf
  406af0:	024503bf 	.word	0x024503bf
  406af4:	03bf0203 	.word	0x03bf0203
  406af8:	026b005d 	.word	0x026b005d
  406afc:	028603bf 	.word	0x028603bf
  406b00:	039d039d 	.word	0x039d039d
  406b04:	039d039d 	.word	0x039d039d
  406b08:	039d039d 	.word	0x039d039d
  406b0c:	039d039d 	.word	0x039d039d
  406b10:	03bf039d 	.word	0x03bf039d
  406b14:	03bf03bf 	.word	0x03bf03bf
  406b18:	03bf03bf 	.word	0x03bf03bf
  406b1c:	03bf03bf 	.word	0x03bf03bf
  406b20:	03bf03bf 	.word	0x03bf03bf
  406b24:	033703bf 	.word	0x033703bf
  406b28:	03bf0357 	.word	0x03bf0357
  406b2c:	03bf0357 	.word	0x03bf0357
  406b30:	03bf03bf 	.word	0x03bf03bf
  406b34:	039803bf 	.word	0x039803bf
  406b38:	03bf03bf 	.word	0x03bf03bf
  406b3c:	03bf03ad 	.word	0x03bf03ad
  406b40:	03bf03bf 	.word	0x03bf03bf
  406b44:	03bf03bf 	.word	0x03bf03bf
  406b48:	03bf0259 	.word	0x03bf0259
  406b4c:	031e03bf 	.word	0x031e03bf
  406b50:	03bf03bf 	.word	0x03bf03bf
  406b54:	03bf03bf 	.word	0x03bf03bf
  406b58:	03bf03bf 	.word	0x03bf03bf
  406b5c:	03bf03bf 	.word	0x03bf03bf
  406b60:	03bf03bf 	.word	0x03bf03bf
  406b64:	02db02c6 	.word	0x02db02c6
  406b68:	03570357 	.word	0x03570357
  406b6c:	028b0357 	.word	0x028b0357
  406b70:	03bf02db 	.word	0x03bf02db
  406b74:	029003bf 	.word	0x029003bf
  406b78:	029d03bf 	.word	0x029d03bf
  406b7c:	02b401cc 	.word	0x02b401cc
  406b80:	03bf0208 	.word	0x03bf0208
  406b84:	03bf01e1 	.word	0x03bf01e1
  406b88:	03bf007e 	.word	0x03bf007e
  406b8c:	020d03bf 	.word	0x020d03bf
  406b90:	980d      	ldr	r0, [sp, #52]	; 0x34
  406b92:	930f      	str	r3, [sp, #60]	; 0x3c
  406b94:	4240      	negs	r0, r0
  406b96:	900d      	str	r0, [sp, #52]	; 0x34
  406b98:	f04b 0b04 	orr.w	fp, fp, #4
  406b9c:	f89a 3000 	ldrb.w	r3, [sl]
  406ba0:	e794      	b.n	406acc <_svfprintf_r+0xb0>
  406ba2:	aa25      	add	r2, sp, #148	; 0x94
  406ba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406ba6:	980c      	ldr	r0, [sp, #48]	; 0x30
  406ba8:	f003 fb6e 	bl	40a288 <__ssprint_r>
  406bac:	b940      	cbnz	r0, 406bc0 <_svfprintf_r+0x1a4>
  406bae:	46c8      	mov	r8, r9
  406bb0:	e779      	b.n	406aa6 <_svfprintf_r+0x8a>
  406bb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  406bb4:	b123      	cbz	r3, 406bc0 <_svfprintf_r+0x1a4>
  406bb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  406bb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406bba:	aa25      	add	r2, sp, #148	; 0x94
  406bbc:	f003 fb64 	bl	40a288 <__ssprint_r>
  406bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406bc2:	899b      	ldrh	r3, [r3, #12]
  406bc4:	f013 0f40 	tst.w	r3, #64	; 0x40
  406bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406bca:	bf18      	it	ne
  406bcc:	f04f 33ff 	movne.w	r3, #4294967295
  406bd0:	9309      	str	r3, [sp, #36]	; 0x24
  406bd2:	9809      	ldr	r0, [sp, #36]	; 0x24
  406bd4:	b043      	add	sp, #268	; 0x10c
  406bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bda:	f01b 0f20 	tst.w	fp, #32
  406bde:	9311      	str	r3, [sp, #68]	; 0x44
  406be0:	f040 81dd 	bne.w	406f9e <_svfprintf_r+0x582>
  406be4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406be6:	f01b 0f10 	tst.w	fp, #16
  406bea:	4613      	mov	r3, r2
  406bec:	f040 856e 	bne.w	4076cc <_svfprintf_r+0xcb0>
  406bf0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406bf4:	f000 856a 	beq.w	4076cc <_svfprintf_r+0xcb0>
  406bf8:	8814      	ldrh	r4, [r2, #0]
  406bfa:	3204      	adds	r2, #4
  406bfc:	2500      	movs	r5, #0
  406bfe:	2301      	movs	r3, #1
  406c00:	920f      	str	r2, [sp, #60]	; 0x3c
  406c02:	2700      	movs	r7, #0
  406c04:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406c08:	990a      	ldr	r1, [sp, #40]	; 0x28
  406c0a:	1c4a      	adds	r2, r1, #1
  406c0c:	f000 8265 	beq.w	4070da <_svfprintf_r+0x6be>
  406c10:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  406c14:	9207      	str	r2, [sp, #28]
  406c16:	ea54 0205 	orrs.w	r2, r4, r5
  406c1a:	f040 8264 	bne.w	4070e6 <_svfprintf_r+0x6ca>
  406c1e:	2900      	cmp	r1, #0
  406c20:	f040 843c 	bne.w	40749c <_svfprintf_r+0xa80>
  406c24:	2b00      	cmp	r3, #0
  406c26:	f040 84d7 	bne.w	4075d8 <_svfprintf_r+0xbbc>
  406c2a:	f01b 0301 	ands.w	r3, fp, #1
  406c2e:	930e      	str	r3, [sp, #56]	; 0x38
  406c30:	f000 8604 	beq.w	40783c <_svfprintf_r+0xe20>
  406c34:	ae42      	add	r6, sp, #264	; 0x108
  406c36:	2330      	movs	r3, #48	; 0x30
  406c38:	f806 3d41 	strb.w	r3, [r6, #-65]!
  406c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406c40:	4293      	cmp	r3, r2
  406c42:	bfb8      	it	lt
  406c44:	4613      	movlt	r3, r2
  406c46:	9308      	str	r3, [sp, #32]
  406c48:	2300      	movs	r3, #0
  406c4a:	9312      	str	r3, [sp, #72]	; 0x48
  406c4c:	b117      	cbz	r7, 406c54 <_svfprintf_r+0x238>
  406c4e:	9b08      	ldr	r3, [sp, #32]
  406c50:	3301      	adds	r3, #1
  406c52:	9308      	str	r3, [sp, #32]
  406c54:	9b07      	ldr	r3, [sp, #28]
  406c56:	f013 0302 	ands.w	r3, r3, #2
  406c5a:	9310      	str	r3, [sp, #64]	; 0x40
  406c5c:	d002      	beq.n	406c64 <_svfprintf_r+0x248>
  406c5e:	9b08      	ldr	r3, [sp, #32]
  406c60:	3302      	adds	r3, #2
  406c62:	9308      	str	r3, [sp, #32]
  406c64:	9b07      	ldr	r3, [sp, #28]
  406c66:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  406c6a:	f040 830e 	bne.w	40728a <_svfprintf_r+0x86e>
  406c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406c70:	9a08      	ldr	r2, [sp, #32]
  406c72:	eba3 0b02 	sub.w	fp, r3, r2
  406c76:	f1bb 0f00 	cmp.w	fp, #0
  406c7a:	f340 8306 	ble.w	40728a <_svfprintf_r+0x86e>
  406c7e:	f1bb 0f10 	cmp.w	fp, #16
  406c82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406c84:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406c86:	dd29      	ble.n	406cdc <_svfprintf_r+0x2c0>
  406c88:	4643      	mov	r3, r8
  406c8a:	4621      	mov	r1, r4
  406c8c:	46a8      	mov	r8, r5
  406c8e:	2710      	movs	r7, #16
  406c90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406c92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406c94:	e006      	b.n	406ca4 <_svfprintf_r+0x288>
  406c96:	f1ab 0b10 	sub.w	fp, fp, #16
  406c9a:	f1bb 0f10 	cmp.w	fp, #16
  406c9e:	f103 0308 	add.w	r3, r3, #8
  406ca2:	dd18      	ble.n	406cd6 <_svfprintf_r+0x2ba>
  406ca4:	3201      	adds	r2, #1
  406ca6:	48b7      	ldr	r0, [pc, #732]	; (406f84 <_svfprintf_r+0x568>)
  406ca8:	9226      	str	r2, [sp, #152]	; 0x98
  406caa:	3110      	adds	r1, #16
  406cac:	2a07      	cmp	r2, #7
  406cae:	9127      	str	r1, [sp, #156]	; 0x9c
  406cb0:	e883 0081 	stmia.w	r3, {r0, r7}
  406cb4:	ddef      	ble.n	406c96 <_svfprintf_r+0x27a>
  406cb6:	aa25      	add	r2, sp, #148	; 0x94
  406cb8:	4629      	mov	r1, r5
  406cba:	4620      	mov	r0, r4
  406cbc:	f003 fae4 	bl	40a288 <__ssprint_r>
  406cc0:	2800      	cmp	r0, #0
  406cc2:	f47f af7d 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  406cc6:	f1ab 0b10 	sub.w	fp, fp, #16
  406cca:	f1bb 0f10 	cmp.w	fp, #16
  406cce:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406cd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406cd2:	464b      	mov	r3, r9
  406cd4:	dce6      	bgt.n	406ca4 <_svfprintf_r+0x288>
  406cd6:	4645      	mov	r5, r8
  406cd8:	460c      	mov	r4, r1
  406cda:	4698      	mov	r8, r3
  406cdc:	3201      	adds	r2, #1
  406cde:	4ba9      	ldr	r3, [pc, #676]	; (406f84 <_svfprintf_r+0x568>)
  406ce0:	9226      	str	r2, [sp, #152]	; 0x98
  406ce2:	445c      	add	r4, fp
  406ce4:	2a07      	cmp	r2, #7
  406ce6:	9427      	str	r4, [sp, #156]	; 0x9c
  406ce8:	e888 0808 	stmia.w	r8, {r3, fp}
  406cec:	f300 8498 	bgt.w	407620 <_svfprintf_r+0xc04>
  406cf0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406cf4:	f108 0808 	add.w	r8, r8, #8
  406cf8:	b177      	cbz	r7, 406d18 <_svfprintf_r+0x2fc>
  406cfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406cfc:	3301      	adds	r3, #1
  406cfe:	3401      	adds	r4, #1
  406d00:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  406d04:	2201      	movs	r2, #1
  406d06:	2b07      	cmp	r3, #7
  406d08:	9427      	str	r4, [sp, #156]	; 0x9c
  406d0a:	9326      	str	r3, [sp, #152]	; 0x98
  406d0c:	e888 0006 	stmia.w	r8, {r1, r2}
  406d10:	f300 83db 	bgt.w	4074ca <_svfprintf_r+0xaae>
  406d14:	f108 0808 	add.w	r8, r8, #8
  406d18:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406d1a:	b16b      	cbz	r3, 406d38 <_svfprintf_r+0x31c>
  406d1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406d1e:	3301      	adds	r3, #1
  406d20:	3402      	adds	r4, #2
  406d22:	a91e      	add	r1, sp, #120	; 0x78
  406d24:	2202      	movs	r2, #2
  406d26:	2b07      	cmp	r3, #7
  406d28:	9427      	str	r4, [sp, #156]	; 0x9c
  406d2a:	9326      	str	r3, [sp, #152]	; 0x98
  406d2c:	e888 0006 	stmia.w	r8, {r1, r2}
  406d30:	f300 83d6 	bgt.w	4074e0 <_svfprintf_r+0xac4>
  406d34:	f108 0808 	add.w	r8, r8, #8
  406d38:	2d80      	cmp	r5, #128	; 0x80
  406d3a:	f000 8315 	beq.w	407368 <_svfprintf_r+0x94c>
  406d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406d42:	1a9f      	subs	r7, r3, r2
  406d44:	2f00      	cmp	r7, #0
  406d46:	dd36      	ble.n	406db6 <_svfprintf_r+0x39a>
  406d48:	2f10      	cmp	r7, #16
  406d4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406d4c:	4d8e      	ldr	r5, [pc, #568]	; (406f88 <_svfprintf_r+0x56c>)
  406d4e:	dd27      	ble.n	406da0 <_svfprintf_r+0x384>
  406d50:	4642      	mov	r2, r8
  406d52:	4621      	mov	r1, r4
  406d54:	46b0      	mov	r8, r6
  406d56:	f04f 0b10 	mov.w	fp, #16
  406d5a:	462e      	mov	r6, r5
  406d5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406d5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406d60:	e004      	b.n	406d6c <_svfprintf_r+0x350>
  406d62:	3f10      	subs	r7, #16
  406d64:	2f10      	cmp	r7, #16
  406d66:	f102 0208 	add.w	r2, r2, #8
  406d6a:	dd15      	ble.n	406d98 <_svfprintf_r+0x37c>
  406d6c:	3301      	adds	r3, #1
  406d6e:	3110      	adds	r1, #16
  406d70:	2b07      	cmp	r3, #7
  406d72:	9127      	str	r1, [sp, #156]	; 0x9c
  406d74:	9326      	str	r3, [sp, #152]	; 0x98
  406d76:	e882 0840 	stmia.w	r2, {r6, fp}
  406d7a:	ddf2      	ble.n	406d62 <_svfprintf_r+0x346>
  406d7c:	aa25      	add	r2, sp, #148	; 0x94
  406d7e:	4629      	mov	r1, r5
  406d80:	4620      	mov	r0, r4
  406d82:	f003 fa81 	bl	40a288 <__ssprint_r>
  406d86:	2800      	cmp	r0, #0
  406d88:	f47f af1a 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  406d8c:	3f10      	subs	r7, #16
  406d8e:	2f10      	cmp	r7, #16
  406d90:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406d94:	464a      	mov	r2, r9
  406d96:	dce9      	bgt.n	406d6c <_svfprintf_r+0x350>
  406d98:	4635      	mov	r5, r6
  406d9a:	460c      	mov	r4, r1
  406d9c:	4646      	mov	r6, r8
  406d9e:	4690      	mov	r8, r2
  406da0:	3301      	adds	r3, #1
  406da2:	443c      	add	r4, r7
  406da4:	2b07      	cmp	r3, #7
  406da6:	9427      	str	r4, [sp, #156]	; 0x9c
  406da8:	9326      	str	r3, [sp, #152]	; 0x98
  406daa:	e888 00a0 	stmia.w	r8, {r5, r7}
  406dae:	f300 8381 	bgt.w	4074b4 <_svfprintf_r+0xa98>
  406db2:	f108 0808 	add.w	r8, r8, #8
  406db6:	9b07      	ldr	r3, [sp, #28]
  406db8:	05df      	lsls	r7, r3, #23
  406dba:	f100 8268 	bmi.w	40728e <_svfprintf_r+0x872>
  406dbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406dc0:	990e      	ldr	r1, [sp, #56]	; 0x38
  406dc2:	f8c8 6000 	str.w	r6, [r8]
  406dc6:	3301      	adds	r3, #1
  406dc8:	440c      	add	r4, r1
  406dca:	2b07      	cmp	r3, #7
  406dcc:	9427      	str	r4, [sp, #156]	; 0x9c
  406dce:	f8c8 1004 	str.w	r1, [r8, #4]
  406dd2:	9326      	str	r3, [sp, #152]	; 0x98
  406dd4:	f300 834d 	bgt.w	407472 <_svfprintf_r+0xa56>
  406dd8:	f108 0808 	add.w	r8, r8, #8
  406ddc:	9b07      	ldr	r3, [sp, #28]
  406dde:	075b      	lsls	r3, r3, #29
  406de0:	d53a      	bpl.n	406e58 <_svfprintf_r+0x43c>
  406de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406de4:	9a08      	ldr	r2, [sp, #32]
  406de6:	1a9d      	subs	r5, r3, r2
  406de8:	2d00      	cmp	r5, #0
  406dea:	dd35      	ble.n	406e58 <_svfprintf_r+0x43c>
  406dec:	2d10      	cmp	r5, #16
  406dee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406df0:	dd20      	ble.n	406e34 <_svfprintf_r+0x418>
  406df2:	2610      	movs	r6, #16
  406df4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406df6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  406dfa:	e004      	b.n	406e06 <_svfprintf_r+0x3ea>
  406dfc:	3d10      	subs	r5, #16
  406dfe:	2d10      	cmp	r5, #16
  406e00:	f108 0808 	add.w	r8, r8, #8
  406e04:	dd16      	ble.n	406e34 <_svfprintf_r+0x418>
  406e06:	3301      	adds	r3, #1
  406e08:	4a5e      	ldr	r2, [pc, #376]	; (406f84 <_svfprintf_r+0x568>)
  406e0a:	9326      	str	r3, [sp, #152]	; 0x98
  406e0c:	3410      	adds	r4, #16
  406e0e:	2b07      	cmp	r3, #7
  406e10:	9427      	str	r4, [sp, #156]	; 0x9c
  406e12:	e888 0044 	stmia.w	r8, {r2, r6}
  406e16:	ddf1      	ble.n	406dfc <_svfprintf_r+0x3e0>
  406e18:	aa25      	add	r2, sp, #148	; 0x94
  406e1a:	4659      	mov	r1, fp
  406e1c:	4638      	mov	r0, r7
  406e1e:	f003 fa33 	bl	40a288 <__ssprint_r>
  406e22:	2800      	cmp	r0, #0
  406e24:	f47f aecc 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  406e28:	3d10      	subs	r5, #16
  406e2a:	2d10      	cmp	r5, #16
  406e2c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406e2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e30:	46c8      	mov	r8, r9
  406e32:	dce8      	bgt.n	406e06 <_svfprintf_r+0x3ea>
  406e34:	3301      	adds	r3, #1
  406e36:	4a53      	ldr	r2, [pc, #332]	; (406f84 <_svfprintf_r+0x568>)
  406e38:	9326      	str	r3, [sp, #152]	; 0x98
  406e3a:	442c      	add	r4, r5
  406e3c:	2b07      	cmp	r3, #7
  406e3e:	9427      	str	r4, [sp, #156]	; 0x9c
  406e40:	e888 0024 	stmia.w	r8, {r2, r5}
  406e44:	dd08      	ble.n	406e58 <_svfprintf_r+0x43c>
  406e46:	aa25      	add	r2, sp, #148	; 0x94
  406e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406e4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  406e4c:	f003 fa1c 	bl	40a288 <__ssprint_r>
  406e50:	2800      	cmp	r0, #0
  406e52:	f47f aeb5 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  406e56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406e5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406e5c:	9908      	ldr	r1, [sp, #32]
  406e5e:	428a      	cmp	r2, r1
  406e60:	bfac      	ite	ge
  406e62:	189b      	addge	r3, r3, r2
  406e64:	185b      	addlt	r3, r3, r1
  406e66:	9309      	str	r3, [sp, #36]	; 0x24
  406e68:	2c00      	cmp	r4, #0
  406e6a:	f040 830d 	bne.w	407488 <_svfprintf_r+0xa6c>
  406e6e:	2300      	movs	r3, #0
  406e70:	9326      	str	r3, [sp, #152]	; 0x98
  406e72:	46c8      	mov	r8, r9
  406e74:	e5f9      	b.n	406a6a <_svfprintf_r+0x4e>
  406e76:	9311      	str	r3, [sp, #68]	; 0x44
  406e78:	f01b 0320 	ands.w	r3, fp, #32
  406e7c:	f040 81e3 	bne.w	407246 <_svfprintf_r+0x82a>
  406e80:	f01b 0210 	ands.w	r2, fp, #16
  406e84:	f040 842e 	bne.w	4076e4 <_svfprintf_r+0xcc8>
  406e88:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  406e8c:	f000 842a 	beq.w	4076e4 <_svfprintf_r+0xcc8>
  406e90:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406e92:	4613      	mov	r3, r2
  406e94:	460a      	mov	r2, r1
  406e96:	3204      	adds	r2, #4
  406e98:	880c      	ldrh	r4, [r1, #0]
  406e9a:	920f      	str	r2, [sp, #60]	; 0x3c
  406e9c:	2500      	movs	r5, #0
  406e9e:	e6b0      	b.n	406c02 <_svfprintf_r+0x1e6>
  406ea0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406ea2:	9311      	str	r3, [sp, #68]	; 0x44
  406ea4:	6816      	ldr	r6, [r2, #0]
  406ea6:	2400      	movs	r4, #0
  406ea8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  406eac:	1d15      	adds	r5, r2, #4
  406eae:	2e00      	cmp	r6, #0
  406eb0:	f000 86a7 	beq.w	407c02 <_svfprintf_r+0x11e6>
  406eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406eb6:	1c53      	adds	r3, r2, #1
  406eb8:	f000 8609 	beq.w	407ace <_svfprintf_r+0x10b2>
  406ebc:	4621      	mov	r1, r4
  406ebe:	4630      	mov	r0, r6
  406ec0:	f002 fbd6 	bl	409670 <memchr>
  406ec4:	2800      	cmp	r0, #0
  406ec6:	f000 86e1 	beq.w	407c8c <_svfprintf_r+0x1270>
  406eca:	1b83      	subs	r3, r0, r6
  406ecc:	930e      	str	r3, [sp, #56]	; 0x38
  406ece:	940a      	str	r4, [sp, #40]	; 0x28
  406ed0:	950f      	str	r5, [sp, #60]	; 0x3c
  406ed2:	f8cd b01c 	str.w	fp, [sp, #28]
  406ed6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406eda:	9308      	str	r3, [sp, #32]
  406edc:	9412      	str	r4, [sp, #72]	; 0x48
  406ede:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406ee2:	e6b3      	b.n	406c4c <_svfprintf_r+0x230>
  406ee4:	f89a 3000 	ldrb.w	r3, [sl]
  406ee8:	2201      	movs	r2, #1
  406eea:	212b      	movs	r1, #43	; 0x2b
  406eec:	e5ee      	b.n	406acc <_svfprintf_r+0xb0>
  406eee:	f04b 0b20 	orr.w	fp, fp, #32
  406ef2:	f89a 3000 	ldrb.w	r3, [sl]
  406ef6:	e5e9      	b.n	406acc <_svfprintf_r+0xb0>
  406ef8:	9311      	str	r3, [sp, #68]	; 0x44
  406efa:	2a00      	cmp	r2, #0
  406efc:	f040 8795 	bne.w	407e2a <_svfprintf_r+0x140e>
  406f00:	4b22      	ldr	r3, [pc, #136]	; (406f8c <_svfprintf_r+0x570>)
  406f02:	9318      	str	r3, [sp, #96]	; 0x60
  406f04:	f01b 0f20 	tst.w	fp, #32
  406f08:	f040 8111 	bne.w	40712e <_svfprintf_r+0x712>
  406f0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406f0e:	f01b 0f10 	tst.w	fp, #16
  406f12:	4613      	mov	r3, r2
  406f14:	f040 83e1 	bne.w	4076da <_svfprintf_r+0xcbe>
  406f18:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406f1c:	f000 83dd 	beq.w	4076da <_svfprintf_r+0xcbe>
  406f20:	3304      	adds	r3, #4
  406f22:	8814      	ldrh	r4, [r2, #0]
  406f24:	930f      	str	r3, [sp, #60]	; 0x3c
  406f26:	2500      	movs	r5, #0
  406f28:	f01b 0f01 	tst.w	fp, #1
  406f2c:	f000 810c 	beq.w	407148 <_svfprintf_r+0x72c>
  406f30:	ea54 0305 	orrs.w	r3, r4, r5
  406f34:	f000 8108 	beq.w	407148 <_svfprintf_r+0x72c>
  406f38:	2330      	movs	r3, #48	; 0x30
  406f3a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  406f3e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  406f42:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  406f46:	f04b 0b02 	orr.w	fp, fp, #2
  406f4a:	2302      	movs	r3, #2
  406f4c:	e659      	b.n	406c02 <_svfprintf_r+0x1e6>
  406f4e:	f89a 3000 	ldrb.w	r3, [sl]
  406f52:	2900      	cmp	r1, #0
  406f54:	f47f adba 	bne.w	406acc <_svfprintf_r+0xb0>
  406f58:	2201      	movs	r2, #1
  406f5a:	2120      	movs	r1, #32
  406f5c:	e5b6      	b.n	406acc <_svfprintf_r+0xb0>
  406f5e:	f04b 0b01 	orr.w	fp, fp, #1
  406f62:	f89a 3000 	ldrb.w	r3, [sl]
  406f66:	e5b1      	b.n	406acc <_svfprintf_r+0xb0>
  406f68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  406f6a:	6823      	ldr	r3, [r4, #0]
  406f6c:	930d      	str	r3, [sp, #52]	; 0x34
  406f6e:	4618      	mov	r0, r3
  406f70:	2800      	cmp	r0, #0
  406f72:	4623      	mov	r3, r4
  406f74:	f103 0304 	add.w	r3, r3, #4
  406f78:	f6ff ae0a 	blt.w	406b90 <_svfprintf_r+0x174>
  406f7c:	930f      	str	r3, [sp, #60]	; 0x3c
  406f7e:	f89a 3000 	ldrb.w	r3, [sl]
  406f82:	e5a3      	b.n	406acc <_svfprintf_r+0xb0>
  406f84:	0040b184 	.word	0x0040b184
  406f88:	0040b194 	.word	0x0040b194
  406f8c:	0040b164 	.word	0x0040b164
  406f90:	f04b 0b10 	orr.w	fp, fp, #16
  406f94:	f01b 0f20 	tst.w	fp, #32
  406f98:	9311      	str	r3, [sp, #68]	; 0x44
  406f9a:	f43f ae23 	beq.w	406be4 <_svfprintf_r+0x1c8>
  406f9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406fa0:	3507      	adds	r5, #7
  406fa2:	f025 0307 	bic.w	r3, r5, #7
  406fa6:	f103 0208 	add.w	r2, r3, #8
  406faa:	e9d3 4500 	ldrd	r4, r5, [r3]
  406fae:	920f      	str	r2, [sp, #60]	; 0x3c
  406fb0:	2301      	movs	r3, #1
  406fb2:	e626      	b.n	406c02 <_svfprintf_r+0x1e6>
  406fb4:	f89a 3000 	ldrb.w	r3, [sl]
  406fb8:	2b2a      	cmp	r3, #42	; 0x2a
  406fba:	f10a 0401 	add.w	r4, sl, #1
  406fbe:	f000 8727 	beq.w	407e10 <_svfprintf_r+0x13f4>
  406fc2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406fc6:	2809      	cmp	r0, #9
  406fc8:	46a2      	mov	sl, r4
  406fca:	f200 86ad 	bhi.w	407d28 <_svfprintf_r+0x130c>
  406fce:	2300      	movs	r3, #0
  406fd0:	461c      	mov	r4, r3
  406fd2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  406fd6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406fda:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  406fde:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406fe2:	2809      	cmp	r0, #9
  406fe4:	d9f5      	bls.n	406fd2 <_svfprintf_r+0x5b6>
  406fe6:	940a      	str	r4, [sp, #40]	; 0x28
  406fe8:	e572      	b.n	406ad0 <_svfprintf_r+0xb4>
  406fea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  406fee:	f89a 3000 	ldrb.w	r3, [sl]
  406ff2:	e56b      	b.n	406acc <_svfprintf_r+0xb0>
  406ff4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  406ff8:	f89a 3000 	ldrb.w	r3, [sl]
  406ffc:	e566      	b.n	406acc <_svfprintf_r+0xb0>
  406ffe:	f89a 3000 	ldrb.w	r3, [sl]
  407002:	2b6c      	cmp	r3, #108	; 0x6c
  407004:	bf03      	ittte	eq
  407006:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40700a:	f04b 0b20 	orreq.w	fp, fp, #32
  40700e:	f10a 0a01 	addeq.w	sl, sl, #1
  407012:	f04b 0b10 	orrne.w	fp, fp, #16
  407016:	e559      	b.n	406acc <_svfprintf_r+0xb0>
  407018:	2a00      	cmp	r2, #0
  40701a:	f040 8711 	bne.w	407e40 <_svfprintf_r+0x1424>
  40701e:	f01b 0f20 	tst.w	fp, #32
  407022:	f040 84f9 	bne.w	407a18 <_svfprintf_r+0xffc>
  407026:	f01b 0f10 	tst.w	fp, #16
  40702a:	f040 84ac 	bne.w	407986 <_svfprintf_r+0xf6a>
  40702e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407032:	f000 84a8 	beq.w	407986 <_svfprintf_r+0xf6a>
  407036:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407038:	6813      	ldr	r3, [r2, #0]
  40703a:	3204      	adds	r2, #4
  40703c:	920f      	str	r2, [sp, #60]	; 0x3c
  40703e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  407042:	801a      	strh	r2, [r3, #0]
  407044:	e511      	b.n	406a6a <_svfprintf_r+0x4e>
  407046:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407048:	4bb3      	ldr	r3, [pc, #716]	; (407318 <_svfprintf_r+0x8fc>)
  40704a:	680c      	ldr	r4, [r1, #0]
  40704c:	9318      	str	r3, [sp, #96]	; 0x60
  40704e:	2230      	movs	r2, #48	; 0x30
  407050:	2378      	movs	r3, #120	; 0x78
  407052:	3104      	adds	r1, #4
  407054:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  407058:	9311      	str	r3, [sp, #68]	; 0x44
  40705a:	f04b 0b02 	orr.w	fp, fp, #2
  40705e:	910f      	str	r1, [sp, #60]	; 0x3c
  407060:	2500      	movs	r5, #0
  407062:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  407066:	2302      	movs	r3, #2
  407068:	e5cb      	b.n	406c02 <_svfprintf_r+0x1e6>
  40706a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40706c:	9311      	str	r3, [sp, #68]	; 0x44
  40706e:	680a      	ldr	r2, [r1, #0]
  407070:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  407074:	2300      	movs	r3, #0
  407076:	460a      	mov	r2, r1
  407078:	461f      	mov	r7, r3
  40707a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40707e:	3204      	adds	r2, #4
  407080:	2301      	movs	r3, #1
  407082:	9308      	str	r3, [sp, #32]
  407084:	f8cd b01c 	str.w	fp, [sp, #28]
  407088:	970a      	str	r7, [sp, #40]	; 0x28
  40708a:	9712      	str	r7, [sp, #72]	; 0x48
  40708c:	920f      	str	r2, [sp, #60]	; 0x3c
  40708e:	930e      	str	r3, [sp, #56]	; 0x38
  407090:	ae28      	add	r6, sp, #160	; 0xa0
  407092:	e5df      	b.n	406c54 <_svfprintf_r+0x238>
  407094:	9311      	str	r3, [sp, #68]	; 0x44
  407096:	2a00      	cmp	r2, #0
  407098:	f040 86ea 	bne.w	407e70 <_svfprintf_r+0x1454>
  40709c:	f01b 0f20 	tst.w	fp, #32
  4070a0:	d15d      	bne.n	40715e <_svfprintf_r+0x742>
  4070a2:	f01b 0f10 	tst.w	fp, #16
  4070a6:	f040 8308 	bne.w	4076ba <_svfprintf_r+0xc9e>
  4070aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4070ae:	f000 8304 	beq.w	4076ba <_svfprintf_r+0xc9e>
  4070b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4070b4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4070b8:	3104      	adds	r1, #4
  4070ba:	17e5      	asrs	r5, r4, #31
  4070bc:	4622      	mov	r2, r4
  4070be:	462b      	mov	r3, r5
  4070c0:	910f      	str	r1, [sp, #60]	; 0x3c
  4070c2:	2a00      	cmp	r2, #0
  4070c4:	f173 0300 	sbcs.w	r3, r3, #0
  4070c8:	db58      	blt.n	40717c <_svfprintf_r+0x760>
  4070ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  4070cc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4070d0:	1c4a      	adds	r2, r1, #1
  4070d2:	f04f 0301 	mov.w	r3, #1
  4070d6:	f47f ad9b 	bne.w	406c10 <_svfprintf_r+0x1f4>
  4070da:	ea54 0205 	orrs.w	r2, r4, r5
  4070de:	f000 81df 	beq.w	4074a0 <_svfprintf_r+0xa84>
  4070e2:	f8cd b01c 	str.w	fp, [sp, #28]
  4070e6:	2b01      	cmp	r3, #1
  4070e8:	f000 827b 	beq.w	4075e2 <_svfprintf_r+0xbc6>
  4070ec:	2b02      	cmp	r3, #2
  4070ee:	f040 8206 	bne.w	4074fe <_svfprintf_r+0xae2>
  4070f2:	9818      	ldr	r0, [sp, #96]	; 0x60
  4070f4:	464e      	mov	r6, r9
  4070f6:	0923      	lsrs	r3, r4, #4
  4070f8:	f004 010f 	and.w	r1, r4, #15
  4070fc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407100:	092a      	lsrs	r2, r5, #4
  407102:	461c      	mov	r4, r3
  407104:	4615      	mov	r5, r2
  407106:	5c43      	ldrb	r3, [r0, r1]
  407108:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40710c:	ea54 0305 	orrs.w	r3, r4, r5
  407110:	d1f1      	bne.n	4070f6 <_svfprintf_r+0x6da>
  407112:	eba9 0306 	sub.w	r3, r9, r6
  407116:	930e      	str	r3, [sp, #56]	; 0x38
  407118:	e590      	b.n	406c3c <_svfprintf_r+0x220>
  40711a:	9311      	str	r3, [sp, #68]	; 0x44
  40711c:	2a00      	cmp	r2, #0
  40711e:	f040 86a3 	bne.w	407e68 <_svfprintf_r+0x144c>
  407122:	4b7e      	ldr	r3, [pc, #504]	; (40731c <_svfprintf_r+0x900>)
  407124:	9318      	str	r3, [sp, #96]	; 0x60
  407126:	f01b 0f20 	tst.w	fp, #32
  40712a:	f43f aeef 	beq.w	406f0c <_svfprintf_r+0x4f0>
  40712e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407130:	3507      	adds	r5, #7
  407132:	f025 0307 	bic.w	r3, r5, #7
  407136:	f103 0208 	add.w	r2, r3, #8
  40713a:	f01b 0f01 	tst.w	fp, #1
  40713e:	920f      	str	r2, [sp, #60]	; 0x3c
  407140:	e9d3 4500 	ldrd	r4, r5, [r3]
  407144:	f47f aef4 	bne.w	406f30 <_svfprintf_r+0x514>
  407148:	2302      	movs	r3, #2
  40714a:	e55a      	b.n	406c02 <_svfprintf_r+0x1e6>
  40714c:	9311      	str	r3, [sp, #68]	; 0x44
  40714e:	2a00      	cmp	r2, #0
  407150:	f040 8686 	bne.w	407e60 <_svfprintf_r+0x1444>
  407154:	f04b 0b10 	orr.w	fp, fp, #16
  407158:	f01b 0f20 	tst.w	fp, #32
  40715c:	d0a1      	beq.n	4070a2 <_svfprintf_r+0x686>
  40715e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407160:	3507      	adds	r5, #7
  407162:	f025 0507 	bic.w	r5, r5, #7
  407166:	e9d5 2300 	ldrd	r2, r3, [r5]
  40716a:	2a00      	cmp	r2, #0
  40716c:	f105 0108 	add.w	r1, r5, #8
  407170:	461d      	mov	r5, r3
  407172:	f173 0300 	sbcs.w	r3, r3, #0
  407176:	910f      	str	r1, [sp, #60]	; 0x3c
  407178:	4614      	mov	r4, r2
  40717a:	daa6      	bge.n	4070ca <_svfprintf_r+0x6ae>
  40717c:	272d      	movs	r7, #45	; 0x2d
  40717e:	4264      	negs	r4, r4
  407180:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  407184:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407188:	2301      	movs	r3, #1
  40718a:	e53d      	b.n	406c08 <_svfprintf_r+0x1ec>
  40718c:	9311      	str	r3, [sp, #68]	; 0x44
  40718e:	2a00      	cmp	r2, #0
  407190:	f040 8662 	bne.w	407e58 <_svfprintf_r+0x143c>
  407194:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407196:	3507      	adds	r5, #7
  407198:	f025 0307 	bic.w	r3, r5, #7
  40719c:	f103 0208 	add.w	r2, r3, #8
  4071a0:	920f      	str	r2, [sp, #60]	; 0x3c
  4071a2:	681a      	ldr	r2, [r3, #0]
  4071a4:	9215      	str	r2, [sp, #84]	; 0x54
  4071a6:	685b      	ldr	r3, [r3, #4]
  4071a8:	9314      	str	r3, [sp, #80]	; 0x50
  4071aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4071ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4071ae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4071b2:	4628      	mov	r0, r5
  4071b4:	4621      	mov	r1, r4
  4071b6:	f04f 32ff 	mov.w	r2, #4294967295
  4071ba:	4b59      	ldr	r3, [pc, #356]	; (407320 <_svfprintf_r+0x904>)
  4071bc:	f003 fa0a 	bl	40a5d4 <__aeabi_dcmpun>
  4071c0:	2800      	cmp	r0, #0
  4071c2:	f040 834a 	bne.w	40785a <_svfprintf_r+0xe3e>
  4071c6:	4628      	mov	r0, r5
  4071c8:	4621      	mov	r1, r4
  4071ca:	f04f 32ff 	mov.w	r2, #4294967295
  4071ce:	4b54      	ldr	r3, [pc, #336]	; (407320 <_svfprintf_r+0x904>)
  4071d0:	f003 f9e2 	bl	40a598 <__aeabi_dcmple>
  4071d4:	2800      	cmp	r0, #0
  4071d6:	f040 8340 	bne.w	40785a <_svfprintf_r+0xe3e>
  4071da:	a815      	add	r0, sp, #84	; 0x54
  4071dc:	c80d      	ldmia	r0, {r0, r2, r3}
  4071de:	9914      	ldr	r1, [sp, #80]	; 0x50
  4071e0:	f003 f9d0 	bl	40a584 <__aeabi_dcmplt>
  4071e4:	2800      	cmp	r0, #0
  4071e6:	f040 8530 	bne.w	407c4a <_svfprintf_r+0x122e>
  4071ea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4071ee:	4e4d      	ldr	r6, [pc, #308]	; (407324 <_svfprintf_r+0x908>)
  4071f0:	4b4d      	ldr	r3, [pc, #308]	; (407328 <_svfprintf_r+0x90c>)
  4071f2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4071f6:	9007      	str	r0, [sp, #28]
  4071f8:	9811      	ldr	r0, [sp, #68]	; 0x44
  4071fa:	2203      	movs	r2, #3
  4071fc:	2100      	movs	r1, #0
  4071fe:	9208      	str	r2, [sp, #32]
  407200:	910a      	str	r1, [sp, #40]	; 0x28
  407202:	2847      	cmp	r0, #71	; 0x47
  407204:	bfd8      	it	le
  407206:	461e      	movle	r6, r3
  407208:	920e      	str	r2, [sp, #56]	; 0x38
  40720a:	9112      	str	r1, [sp, #72]	; 0x48
  40720c:	e51e      	b.n	406c4c <_svfprintf_r+0x230>
  40720e:	f04b 0b08 	orr.w	fp, fp, #8
  407212:	f89a 3000 	ldrb.w	r3, [sl]
  407216:	e459      	b.n	406acc <_svfprintf_r+0xb0>
  407218:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40721c:	2300      	movs	r3, #0
  40721e:	461c      	mov	r4, r3
  407220:	f81a 3b01 	ldrb.w	r3, [sl], #1
  407224:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407228:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40722c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407230:	2809      	cmp	r0, #9
  407232:	d9f5      	bls.n	407220 <_svfprintf_r+0x804>
  407234:	940d      	str	r4, [sp, #52]	; 0x34
  407236:	e44b      	b.n	406ad0 <_svfprintf_r+0xb4>
  407238:	f04b 0b10 	orr.w	fp, fp, #16
  40723c:	9311      	str	r3, [sp, #68]	; 0x44
  40723e:	f01b 0320 	ands.w	r3, fp, #32
  407242:	f43f ae1d 	beq.w	406e80 <_svfprintf_r+0x464>
  407246:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407248:	3507      	adds	r5, #7
  40724a:	f025 0307 	bic.w	r3, r5, #7
  40724e:	f103 0208 	add.w	r2, r3, #8
  407252:	e9d3 4500 	ldrd	r4, r5, [r3]
  407256:	920f      	str	r2, [sp, #60]	; 0x3c
  407258:	2300      	movs	r3, #0
  40725a:	e4d2      	b.n	406c02 <_svfprintf_r+0x1e6>
  40725c:	9311      	str	r3, [sp, #68]	; 0x44
  40725e:	2a00      	cmp	r2, #0
  407260:	f040 85e7 	bne.w	407e32 <_svfprintf_r+0x1416>
  407264:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407266:	2a00      	cmp	r2, #0
  407268:	f43f aca3 	beq.w	406bb2 <_svfprintf_r+0x196>
  40726c:	2300      	movs	r3, #0
  40726e:	2101      	movs	r1, #1
  407270:	461f      	mov	r7, r3
  407272:	9108      	str	r1, [sp, #32]
  407274:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  407278:	f8cd b01c 	str.w	fp, [sp, #28]
  40727c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  407280:	930a      	str	r3, [sp, #40]	; 0x28
  407282:	9312      	str	r3, [sp, #72]	; 0x48
  407284:	910e      	str	r1, [sp, #56]	; 0x38
  407286:	ae28      	add	r6, sp, #160	; 0xa0
  407288:	e4e4      	b.n	406c54 <_svfprintf_r+0x238>
  40728a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40728c:	e534      	b.n	406cf8 <_svfprintf_r+0x2dc>
  40728e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407290:	2b65      	cmp	r3, #101	; 0x65
  407292:	f340 80a7 	ble.w	4073e4 <_svfprintf_r+0x9c8>
  407296:	a815      	add	r0, sp, #84	; 0x54
  407298:	c80d      	ldmia	r0, {r0, r2, r3}
  40729a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40729c:	f003 f968 	bl	40a570 <__aeabi_dcmpeq>
  4072a0:	2800      	cmp	r0, #0
  4072a2:	f000 8150 	beq.w	407546 <_svfprintf_r+0xb2a>
  4072a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4072a8:	4a20      	ldr	r2, [pc, #128]	; (40732c <_svfprintf_r+0x910>)
  4072aa:	f8c8 2000 	str.w	r2, [r8]
  4072ae:	3301      	adds	r3, #1
  4072b0:	3401      	adds	r4, #1
  4072b2:	2201      	movs	r2, #1
  4072b4:	2b07      	cmp	r3, #7
  4072b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4072b8:	9326      	str	r3, [sp, #152]	; 0x98
  4072ba:	f8c8 2004 	str.w	r2, [r8, #4]
  4072be:	f300 836a 	bgt.w	407996 <_svfprintf_r+0xf7a>
  4072c2:	f108 0808 	add.w	r8, r8, #8
  4072c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4072c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4072ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4072cc:	4293      	cmp	r3, r2
  4072ce:	db03      	blt.n	4072d8 <_svfprintf_r+0x8bc>
  4072d0:	9b07      	ldr	r3, [sp, #28]
  4072d2:	07dd      	lsls	r5, r3, #31
  4072d4:	f57f ad82 	bpl.w	406ddc <_svfprintf_r+0x3c0>
  4072d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4072da:	9919      	ldr	r1, [sp, #100]	; 0x64
  4072dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4072de:	f8c8 2000 	str.w	r2, [r8]
  4072e2:	3301      	adds	r3, #1
  4072e4:	440c      	add	r4, r1
  4072e6:	2b07      	cmp	r3, #7
  4072e8:	f8c8 1004 	str.w	r1, [r8, #4]
  4072ec:	9427      	str	r4, [sp, #156]	; 0x9c
  4072ee:	9326      	str	r3, [sp, #152]	; 0x98
  4072f0:	f300 839e 	bgt.w	407a30 <_svfprintf_r+0x1014>
  4072f4:	f108 0808 	add.w	r8, r8, #8
  4072f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4072fa:	1e5e      	subs	r6, r3, #1
  4072fc:	2e00      	cmp	r6, #0
  4072fe:	f77f ad6d 	ble.w	406ddc <_svfprintf_r+0x3c0>
  407302:	2e10      	cmp	r6, #16
  407304:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407306:	4d0a      	ldr	r5, [pc, #40]	; (407330 <_svfprintf_r+0x914>)
  407308:	f340 81f5 	ble.w	4076f6 <_svfprintf_r+0xcda>
  40730c:	4622      	mov	r2, r4
  40730e:	2710      	movs	r7, #16
  407310:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407314:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407316:	e013      	b.n	407340 <_svfprintf_r+0x924>
  407318:	0040b164 	.word	0x0040b164
  40731c:	0040b150 	.word	0x0040b150
  407320:	7fefffff 	.word	0x7fefffff
  407324:	0040b144 	.word	0x0040b144
  407328:	0040b140 	.word	0x0040b140
  40732c:	0040b180 	.word	0x0040b180
  407330:	0040b194 	.word	0x0040b194
  407334:	f108 0808 	add.w	r8, r8, #8
  407338:	3e10      	subs	r6, #16
  40733a:	2e10      	cmp	r6, #16
  40733c:	f340 81da 	ble.w	4076f4 <_svfprintf_r+0xcd8>
  407340:	3301      	adds	r3, #1
  407342:	3210      	adds	r2, #16
  407344:	2b07      	cmp	r3, #7
  407346:	9227      	str	r2, [sp, #156]	; 0x9c
  407348:	9326      	str	r3, [sp, #152]	; 0x98
  40734a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40734e:	ddf1      	ble.n	407334 <_svfprintf_r+0x918>
  407350:	aa25      	add	r2, sp, #148	; 0x94
  407352:	4621      	mov	r1, r4
  407354:	4658      	mov	r0, fp
  407356:	f002 ff97 	bl	40a288 <__ssprint_r>
  40735a:	2800      	cmp	r0, #0
  40735c:	f47f ac30 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407360:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407362:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407364:	46c8      	mov	r8, r9
  407366:	e7e7      	b.n	407338 <_svfprintf_r+0x91c>
  407368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40736a:	9a08      	ldr	r2, [sp, #32]
  40736c:	1a9f      	subs	r7, r3, r2
  40736e:	2f00      	cmp	r7, #0
  407370:	f77f ace5 	ble.w	406d3e <_svfprintf_r+0x322>
  407374:	2f10      	cmp	r7, #16
  407376:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407378:	4db6      	ldr	r5, [pc, #728]	; (407654 <_svfprintf_r+0xc38>)
  40737a:	dd27      	ble.n	4073cc <_svfprintf_r+0x9b0>
  40737c:	4642      	mov	r2, r8
  40737e:	4621      	mov	r1, r4
  407380:	46b0      	mov	r8, r6
  407382:	f04f 0b10 	mov.w	fp, #16
  407386:	462e      	mov	r6, r5
  407388:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40738a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40738c:	e004      	b.n	407398 <_svfprintf_r+0x97c>
  40738e:	3f10      	subs	r7, #16
  407390:	2f10      	cmp	r7, #16
  407392:	f102 0208 	add.w	r2, r2, #8
  407396:	dd15      	ble.n	4073c4 <_svfprintf_r+0x9a8>
  407398:	3301      	adds	r3, #1
  40739a:	3110      	adds	r1, #16
  40739c:	2b07      	cmp	r3, #7
  40739e:	9127      	str	r1, [sp, #156]	; 0x9c
  4073a0:	9326      	str	r3, [sp, #152]	; 0x98
  4073a2:	e882 0840 	stmia.w	r2, {r6, fp}
  4073a6:	ddf2      	ble.n	40738e <_svfprintf_r+0x972>
  4073a8:	aa25      	add	r2, sp, #148	; 0x94
  4073aa:	4629      	mov	r1, r5
  4073ac:	4620      	mov	r0, r4
  4073ae:	f002 ff6b 	bl	40a288 <__ssprint_r>
  4073b2:	2800      	cmp	r0, #0
  4073b4:	f47f ac04 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  4073b8:	3f10      	subs	r7, #16
  4073ba:	2f10      	cmp	r7, #16
  4073bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4073be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4073c0:	464a      	mov	r2, r9
  4073c2:	dce9      	bgt.n	407398 <_svfprintf_r+0x97c>
  4073c4:	4635      	mov	r5, r6
  4073c6:	460c      	mov	r4, r1
  4073c8:	4646      	mov	r6, r8
  4073ca:	4690      	mov	r8, r2
  4073cc:	3301      	adds	r3, #1
  4073ce:	443c      	add	r4, r7
  4073d0:	2b07      	cmp	r3, #7
  4073d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4073d4:	9326      	str	r3, [sp, #152]	; 0x98
  4073d6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4073da:	f300 8232 	bgt.w	407842 <_svfprintf_r+0xe26>
  4073de:	f108 0808 	add.w	r8, r8, #8
  4073e2:	e4ac      	b.n	406d3e <_svfprintf_r+0x322>
  4073e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4073e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4073e8:	2b01      	cmp	r3, #1
  4073ea:	f340 81fe 	ble.w	4077ea <_svfprintf_r+0xdce>
  4073ee:	3701      	adds	r7, #1
  4073f0:	3401      	adds	r4, #1
  4073f2:	2301      	movs	r3, #1
  4073f4:	2f07      	cmp	r7, #7
  4073f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4073f8:	9726      	str	r7, [sp, #152]	; 0x98
  4073fa:	f8c8 6000 	str.w	r6, [r8]
  4073fe:	f8c8 3004 	str.w	r3, [r8, #4]
  407402:	f300 8203 	bgt.w	40780c <_svfprintf_r+0xdf0>
  407406:	f108 0808 	add.w	r8, r8, #8
  40740a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40740c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40740e:	f8c8 3000 	str.w	r3, [r8]
  407412:	3701      	adds	r7, #1
  407414:	4414      	add	r4, r2
  407416:	2f07      	cmp	r7, #7
  407418:	9427      	str	r4, [sp, #156]	; 0x9c
  40741a:	9726      	str	r7, [sp, #152]	; 0x98
  40741c:	f8c8 2004 	str.w	r2, [r8, #4]
  407420:	f300 8200 	bgt.w	407824 <_svfprintf_r+0xe08>
  407424:	f108 0808 	add.w	r8, r8, #8
  407428:	a815      	add	r0, sp, #84	; 0x54
  40742a:	c80d      	ldmia	r0, {r0, r2, r3}
  40742c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40742e:	f003 f89f 	bl	40a570 <__aeabi_dcmpeq>
  407432:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407434:	2800      	cmp	r0, #0
  407436:	f040 8101 	bne.w	40763c <_svfprintf_r+0xc20>
  40743a:	3b01      	subs	r3, #1
  40743c:	3701      	adds	r7, #1
  40743e:	3601      	adds	r6, #1
  407440:	441c      	add	r4, r3
  407442:	2f07      	cmp	r7, #7
  407444:	9726      	str	r7, [sp, #152]	; 0x98
  407446:	9427      	str	r4, [sp, #156]	; 0x9c
  407448:	f8c8 6000 	str.w	r6, [r8]
  40744c:	f8c8 3004 	str.w	r3, [r8, #4]
  407450:	f300 8127 	bgt.w	4076a2 <_svfprintf_r+0xc86>
  407454:	f108 0808 	add.w	r8, r8, #8
  407458:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40745a:	f8c8 2004 	str.w	r2, [r8, #4]
  40745e:	3701      	adds	r7, #1
  407460:	4414      	add	r4, r2
  407462:	ab21      	add	r3, sp, #132	; 0x84
  407464:	2f07      	cmp	r7, #7
  407466:	9427      	str	r4, [sp, #156]	; 0x9c
  407468:	9726      	str	r7, [sp, #152]	; 0x98
  40746a:	f8c8 3000 	str.w	r3, [r8]
  40746e:	f77f acb3 	ble.w	406dd8 <_svfprintf_r+0x3bc>
  407472:	aa25      	add	r2, sp, #148	; 0x94
  407474:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407476:	980c      	ldr	r0, [sp, #48]	; 0x30
  407478:	f002 ff06 	bl	40a288 <__ssprint_r>
  40747c:	2800      	cmp	r0, #0
  40747e:	f47f ab9f 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407482:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407484:	46c8      	mov	r8, r9
  407486:	e4a9      	b.n	406ddc <_svfprintf_r+0x3c0>
  407488:	aa25      	add	r2, sp, #148	; 0x94
  40748a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40748c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40748e:	f002 fefb 	bl	40a288 <__ssprint_r>
  407492:	2800      	cmp	r0, #0
  407494:	f43f aceb 	beq.w	406e6e <_svfprintf_r+0x452>
  407498:	f7ff bb92 	b.w	406bc0 <_svfprintf_r+0x1a4>
  40749c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4074a0:	2b01      	cmp	r3, #1
  4074a2:	f000 8134 	beq.w	40770e <_svfprintf_r+0xcf2>
  4074a6:	2b02      	cmp	r3, #2
  4074a8:	d125      	bne.n	4074f6 <_svfprintf_r+0xada>
  4074aa:	f8cd b01c 	str.w	fp, [sp, #28]
  4074ae:	2400      	movs	r4, #0
  4074b0:	2500      	movs	r5, #0
  4074b2:	e61e      	b.n	4070f2 <_svfprintf_r+0x6d6>
  4074b4:	aa25      	add	r2, sp, #148	; 0x94
  4074b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4074b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4074ba:	f002 fee5 	bl	40a288 <__ssprint_r>
  4074be:	2800      	cmp	r0, #0
  4074c0:	f47f ab7e 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  4074c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4074c6:	46c8      	mov	r8, r9
  4074c8:	e475      	b.n	406db6 <_svfprintf_r+0x39a>
  4074ca:	aa25      	add	r2, sp, #148	; 0x94
  4074cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4074ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4074d0:	f002 feda 	bl	40a288 <__ssprint_r>
  4074d4:	2800      	cmp	r0, #0
  4074d6:	f47f ab73 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  4074da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4074dc:	46c8      	mov	r8, r9
  4074de:	e41b      	b.n	406d18 <_svfprintf_r+0x2fc>
  4074e0:	aa25      	add	r2, sp, #148	; 0x94
  4074e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4074e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4074e6:	f002 fecf 	bl	40a288 <__ssprint_r>
  4074ea:	2800      	cmp	r0, #0
  4074ec:	f47f ab68 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  4074f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4074f2:	46c8      	mov	r8, r9
  4074f4:	e420      	b.n	406d38 <_svfprintf_r+0x31c>
  4074f6:	f8cd b01c 	str.w	fp, [sp, #28]
  4074fa:	2400      	movs	r4, #0
  4074fc:	2500      	movs	r5, #0
  4074fe:	4649      	mov	r1, r9
  407500:	e000      	b.n	407504 <_svfprintf_r+0xae8>
  407502:	4631      	mov	r1, r6
  407504:	08e2      	lsrs	r2, r4, #3
  407506:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40750a:	08e8      	lsrs	r0, r5, #3
  40750c:	f004 0307 	and.w	r3, r4, #7
  407510:	4605      	mov	r5, r0
  407512:	4614      	mov	r4, r2
  407514:	3330      	adds	r3, #48	; 0x30
  407516:	ea54 0205 	orrs.w	r2, r4, r5
  40751a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40751e:	f101 36ff 	add.w	r6, r1, #4294967295
  407522:	d1ee      	bne.n	407502 <_svfprintf_r+0xae6>
  407524:	9a07      	ldr	r2, [sp, #28]
  407526:	07d2      	lsls	r2, r2, #31
  407528:	f57f adf3 	bpl.w	407112 <_svfprintf_r+0x6f6>
  40752c:	2b30      	cmp	r3, #48	; 0x30
  40752e:	f43f adf0 	beq.w	407112 <_svfprintf_r+0x6f6>
  407532:	3902      	subs	r1, #2
  407534:	2330      	movs	r3, #48	; 0x30
  407536:	f806 3c01 	strb.w	r3, [r6, #-1]
  40753a:	eba9 0301 	sub.w	r3, r9, r1
  40753e:	930e      	str	r3, [sp, #56]	; 0x38
  407540:	460e      	mov	r6, r1
  407542:	f7ff bb7b 	b.w	406c3c <_svfprintf_r+0x220>
  407546:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407548:	2900      	cmp	r1, #0
  40754a:	f340 822e 	ble.w	4079aa <_svfprintf_r+0xf8e>
  40754e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407552:	4293      	cmp	r3, r2
  407554:	bfa8      	it	ge
  407556:	4613      	movge	r3, r2
  407558:	2b00      	cmp	r3, #0
  40755a:	461f      	mov	r7, r3
  40755c:	dd0d      	ble.n	40757a <_svfprintf_r+0xb5e>
  40755e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407560:	f8c8 6000 	str.w	r6, [r8]
  407564:	3301      	adds	r3, #1
  407566:	443c      	add	r4, r7
  407568:	2b07      	cmp	r3, #7
  40756a:	9427      	str	r4, [sp, #156]	; 0x9c
  40756c:	f8c8 7004 	str.w	r7, [r8, #4]
  407570:	9326      	str	r3, [sp, #152]	; 0x98
  407572:	f300 831f 	bgt.w	407bb4 <_svfprintf_r+0x1198>
  407576:	f108 0808 	add.w	r8, r8, #8
  40757a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40757c:	2f00      	cmp	r7, #0
  40757e:	bfa8      	it	ge
  407580:	1bdb      	subge	r3, r3, r7
  407582:	2b00      	cmp	r3, #0
  407584:	461f      	mov	r7, r3
  407586:	f340 80d6 	ble.w	407736 <_svfprintf_r+0xd1a>
  40758a:	2f10      	cmp	r7, #16
  40758c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40758e:	4d31      	ldr	r5, [pc, #196]	; (407654 <_svfprintf_r+0xc38>)
  407590:	f340 81ed 	ble.w	40796e <_svfprintf_r+0xf52>
  407594:	4642      	mov	r2, r8
  407596:	4621      	mov	r1, r4
  407598:	46b0      	mov	r8, r6
  40759a:	f04f 0b10 	mov.w	fp, #16
  40759e:	462e      	mov	r6, r5
  4075a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4075a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4075a4:	e004      	b.n	4075b0 <_svfprintf_r+0xb94>
  4075a6:	3208      	adds	r2, #8
  4075a8:	3f10      	subs	r7, #16
  4075aa:	2f10      	cmp	r7, #16
  4075ac:	f340 81db 	ble.w	407966 <_svfprintf_r+0xf4a>
  4075b0:	3301      	adds	r3, #1
  4075b2:	3110      	adds	r1, #16
  4075b4:	2b07      	cmp	r3, #7
  4075b6:	9127      	str	r1, [sp, #156]	; 0x9c
  4075b8:	9326      	str	r3, [sp, #152]	; 0x98
  4075ba:	e882 0840 	stmia.w	r2, {r6, fp}
  4075be:	ddf2      	ble.n	4075a6 <_svfprintf_r+0xb8a>
  4075c0:	aa25      	add	r2, sp, #148	; 0x94
  4075c2:	4629      	mov	r1, r5
  4075c4:	4620      	mov	r0, r4
  4075c6:	f002 fe5f 	bl	40a288 <__ssprint_r>
  4075ca:	2800      	cmp	r0, #0
  4075cc:	f47f aaf8 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  4075d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4075d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4075d4:	464a      	mov	r2, r9
  4075d6:	e7e7      	b.n	4075a8 <_svfprintf_r+0xb8c>
  4075d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4075da:	930e      	str	r3, [sp, #56]	; 0x38
  4075dc:	464e      	mov	r6, r9
  4075de:	f7ff bb2d 	b.w	406c3c <_svfprintf_r+0x220>
  4075e2:	2d00      	cmp	r5, #0
  4075e4:	bf08      	it	eq
  4075e6:	2c0a      	cmpeq	r4, #10
  4075e8:	f0c0 808f 	bcc.w	40770a <_svfprintf_r+0xcee>
  4075ec:	464e      	mov	r6, r9
  4075ee:	4620      	mov	r0, r4
  4075f0:	4629      	mov	r1, r5
  4075f2:	220a      	movs	r2, #10
  4075f4:	2300      	movs	r3, #0
  4075f6:	f7fe fd9d 	bl	406134 <__aeabi_uldivmod>
  4075fa:	3230      	adds	r2, #48	; 0x30
  4075fc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  407600:	4620      	mov	r0, r4
  407602:	4629      	mov	r1, r5
  407604:	2300      	movs	r3, #0
  407606:	220a      	movs	r2, #10
  407608:	f7fe fd94 	bl	406134 <__aeabi_uldivmod>
  40760c:	4604      	mov	r4, r0
  40760e:	460d      	mov	r5, r1
  407610:	ea54 0305 	orrs.w	r3, r4, r5
  407614:	d1eb      	bne.n	4075ee <_svfprintf_r+0xbd2>
  407616:	eba9 0306 	sub.w	r3, r9, r6
  40761a:	930e      	str	r3, [sp, #56]	; 0x38
  40761c:	f7ff bb0e 	b.w	406c3c <_svfprintf_r+0x220>
  407620:	aa25      	add	r2, sp, #148	; 0x94
  407622:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407624:	980c      	ldr	r0, [sp, #48]	; 0x30
  407626:	f002 fe2f 	bl	40a288 <__ssprint_r>
  40762a:	2800      	cmp	r0, #0
  40762c:	f47f aac8 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407630:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407634:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407636:	46c8      	mov	r8, r9
  407638:	f7ff bb5e 	b.w	406cf8 <_svfprintf_r+0x2dc>
  40763c:	1e5e      	subs	r6, r3, #1
  40763e:	2e00      	cmp	r6, #0
  407640:	f77f af0a 	ble.w	407458 <_svfprintf_r+0xa3c>
  407644:	2e10      	cmp	r6, #16
  407646:	4d03      	ldr	r5, [pc, #12]	; (407654 <_svfprintf_r+0xc38>)
  407648:	dd22      	ble.n	407690 <_svfprintf_r+0xc74>
  40764a:	4622      	mov	r2, r4
  40764c:	f04f 0b10 	mov.w	fp, #16
  407650:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407652:	e006      	b.n	407662 <_svfprintf_r+0xc46>
  407654:	0040b194 	.word	0x0040b194
  407658:	3e10      	subs	r6, #16
  40765a:	2e10      	cmp	r6, #16
  40765c:	f108 0808 	add.w	r8, r8, #8
  407660:	dd15      	ble.n	40768e <_svfprintf_r+0xc72>
  407662:	3701      	adds	r7, #1
  407664:	3210      	adds	r2, #16
  407666:	2f07      	cmp	r7, #7
  407668:	9227      	str	r2, [sp, #156]	; 0x9c
  40766a:	9726      	str	r7, [sp, #152]	; 0x98
  40766c:	e888 0820 	stmia.w	r8, {r5, fp}
  407670:	ddf2      	ble.n	407658 <_svfprintf_r+0xc3c>
  407672:	aa25      	add	r2, sp, #148	; 0x94
  407674:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407676:	4620      	mov	r0, r4
  407678:	f002 fe06 	bl	40a288 <__ssprint_r>
  40767c:	2800      	cmp	r0, #0
  40767e:	f47f aa9f 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407682:	3e10      	subs	r6, #16
  407684:	2e10      	cmp	r6, #16
  407686:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407688:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40768a:	46c8      	mov	r8, r9
  40768c:	dce9      	bgt.n	407662 <_svfprintf_r+0xc46>
  40768e:	4614      	mov	r4, r2
  407690:	3701      	adds	r7, #1
  407692:	4434      	add	r4, r6
  407694:	2f07      	cmp	r7, #7
  407696:	9427      	str	r4, [sp, #156]	; 0x9c
  407698:	9726      	str	r7, [sp, #152]	; 0x98
  40769a:	e888 0060 	stmia.w	r8, {r5, r6}
  40769e:	f77f aed9 	ble.w	407454 <_svfprintf_r+0xa38>
  4076a2:	aa25      	add	r2, sp, #148	; 0x94
  4076a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4076a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4076a8:	f002 fdee 	bl	40a288 <__ssprint_r>
  4076ac:	2800      	cmp	r0, #0
  4076ae:	f47f aa87 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  4076b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4076b4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4076b6:	46c8      	mov	r8, r9
  4076b8:	e6ce      	b.n	407458 <_svfprintf_r+0xa3c>
  4076ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4076bc:	6814      	ldr	r4, [r2, #0]
  4076be:	4613      	mov	r3, r2
  4076c0:	3304      	adds	r3, #4
  4076c2:	17e5      	asrs	r5, r4, #31
  4076c4:	930f      	str	r3, [sp, #60]	; 0x3c
  4076c6:	4622      	mov	r2, r4
  4076c8:	462b      	mov	r3, r5
  4076ca:	e4fa      	b.n	4070c2 <_svfprintf_r+0x6a6>
  4076cc:	3204      	adds	r2, #4
  4076ce:	681c      	ldr	r4, [r3, #0]
  4076d0:	920f      	str	r2, [sp, #60]	; 0x3c
  4076d2:	2301      	movs	r3, #1
  4076d4:	2500      	movs	r5, #0
  4076d6:	f7ff ba94 	b.w	406c02 <_svfprintf_r+0x1e6>
  4076da:	681c      	ldr	r4, [r3, #0]
  4076dc:	3304      	adds	r3, #4
  4076de:	930f      	str	r3, [sp, #60]	; 0x3c
  4076e0:	2500      	movs	r5, #0
  4076e2:	e421      	b.n	406f28 <_svfprintf_r+0x50c>
  4076e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4076e6:	460a      	mov	r2, r1
  4076e8:	3204      	adds	r2, #4
  4076ea:	680c      	ldr	r4, [r1, #0]
  4076ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4076ee:	2500      	movs	r5, #0
  4076f0:	f7ff ba87 	b.w	406c02 <_svfprintf_r+0x1e6>
  4076f4:	4614      	mov	r4, r2
  4076f6:	3301      	adds	r3, #1
  4076f8:	4434      	add	r4, r6
  4076fa:	2b07      	cmp	r3, #7
  4076fc:	9427      	str	r4, [sp, #156]	; 0x9c
  4076fe:	9326      	str	r3, [sp, #152]	; 0x98
  407700:	e888 0060 	stmia.w	r8, {r5, r6}
  407704:	f77f ab68 	ble.w	406dd8 <_svfprintf_r+0x3bc>
  407708:	e6b3      	b.n	407472 <_svfprintf_r+0xa56>
  40770a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40770e:	f8cd b01c 	str.w	fp, [sp, #28]
  407712:	ae42      	add	r6, sp, #264	; 0x108
  407714:	3430      	adds	r4, #48	; 0x30
  407716:	2301      	movs	r3, #1
  407718:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40771c:	930e      	str	r3, [sp, #56]	; 0x38
  40771e:	f7ff ba8d 	b.w	406c3c <_svfprintf_r+0x220>
  407722:	aa25      	add	r2, sp, #148	; 0x94
  407724:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407726:	980c      	ldr	r0, [sp, #48]	; 0x30
  407728:	f002 fdae 	bl	40a288 <__ssprint_r>
  40772c:	2800      	cmp	r0, #0
  40772e:	f47f aa47 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407732:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407734:	46c8      	mov	r8, r9
  407736:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407738:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40773a:	429a      	cmp	r2, r3
  40773c:	db44      	blt.n	4077c8 <_svfprintf_r+0xdac>
  40773e:	9b07      	ldr	r3, [sp, #28]
  407740:	07d9      	lsls	r1, r3, #31
  407742:	d441      	bmi.n	4077c8 <_svfprintf_r+0xdac>
  407744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407746:	9812      	ldr	r0, [sp, #72]	; 0x48
  407748:	1a9a      	subs	r2, r3, r2
  40774a:	1a1d      	subs	r5, r3, r0
  40774c:	4295      	cmp	r5, r2
  40774e:	bfa8      	it	ge
  407750:	4615      	movge	r5, r2
  407752:	2d00      	cmp	r5, #0
  407754:	dd0e      	ble.n	407774 <_svfprintf_r+0xd58>
  407756:	9926      	ldr	r1, [sp, #152]	; 0x98
  407758:	f8c8 5004 	str.w	r5, [r8, #4]
  40775c:	3101      	adds	r1, #1
  40775e:	4406      	add	r6, r0
  407760:	442c      	add	r4, r5
  407762:	2907      	cmp	r1, #7
  407764:	f8c8 6000 	str.w	r6, [r8]
  407768:	9427      	str	r4, [sp, #156]	; 0x9c
  40776a:	9126      	str	r1, [sp, #152]	; 0x98
  40776c:	f300 823b 	bgt.w	407be6 <_svfprintf_r+0x11ca>
  407770:	f108 0808 	add.w	r8, r8, #8
  407774:	2d00      	cmp	r5, #0
  407776:	bfac      	ite	ge
  407778:	1b56      	subge	r6, r2, r5
  40777a:	4616      	movlt	r6, r2
  40777c:	2e00      	cmp	r6, #0
  40777e:	f77f ab2d 	ble.w	406ddc <_svfprintf_r+0x3c0>
  407782:	2e10      	cmp	r6, #16
  407784:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407786:	4db0      	ldr	r5, [pc, #704]	; (407a48 <_svfprintf_r+0x102c>)
  407788:	ddb5      	ble.n	4076f6 <_svfprintf_r+0xcda>
  40778a:	4622      	mov	r2, r4
  40778c:	2710      	movs	r7, #16
  40778e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407792:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407794:	e004      	b.n	4077a0 <_svfprintf_r+0xd84>
  407796:	f108 0808 	add.w	r8, r8, #8
  40779a:	3e10      	subs	r6, #16
  40779c:	2e10      	cmp	r6, #16
  40779e:	dda9      	ble.n	4076f4 <_svfprintf_r+0xcd8>
  4077a0:	3301      	adds	r3, #1
  4077a2:	3210      	adds	r2, #16
  4077a4:	2b07      	cmp	r3, #7
  4077a6:	9227      	str	r2, [sp, #156]	; 0x9c
  4077a8:	9326      	str	r3, [sp, #152]	; 0x98
  4077aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4077ae:	ddf2      	ble.n	407796 <_svfprintf_r+0xd7a>
  4077b0:	aa25      	add	r2, sp, #148	; 0x94
  4077b2:	4621      	mov	r1, r4
  4077b4:	4658      	mov	r0, fp
  4077b6:	f002 fd67 	bl	40a288 <__ssprint_r>
  4077ba:	2800      	cmp	r0, #0
  4077bc:	f47f aa00 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  4077c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4077c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4077c4:	46c8      	mov	r8, r9
  4077c6:	e7e8      	b.n	40779a <_svfprintf_r+0xd7e>
  4077c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4077ca:	9819      	ldr	r0, [sp, #100]	; 0x64
  4077cc:	991a      	ldr	r1, [sp, #104]	; 0x68
  4077ce:	f8c8 1000 	str.w	r1, [r8]
  4077d2:	3301      	adds	r3, #1
  4077d4:	4404      	add	r4, r0
  4077d6:	2b07      	cmp	r3, #7
  4077d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4077da:	f8c8 0004 	str.w	r0, [r8, #4]
  4077de:	9326      	str	r3, [sp, #152]	; 0x98
  4077e0:	f300 81f5 	bgt.w	407bce <_svfprintf_r+0x11b2>
  4077e4:	f108 0808 	add.w	r8, r8, #8
  4077e8:	e7ac      	b.n	407744 <_svfprintf_r+0xd28>
  4077ea:	9b07      	ldr	r3, [sp, #28]
  4077ec:	07da      	lsls	r2, r3, #31
  4077ee:	f53f adfe 	bmi.w	4073ee <_svfprintf_r+0x9d2>
  4077f2:	3701      	adds	r7, #1
  4077f4:	3401      	adds	r4, #1
  4077f6:	2301      	movs	r3, #1
  4077f8:	2f07      	cmp	r7, #7
  4077fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4077fc:	9726      	str	r7, [sp, #152]	; 0x98
  4077fe:	f8c8 6000 	str.w	r6, [r8]
  407802:	f8c8 3004 	str.w	r3, [r8, #4]
  407806:	f77f ae25 	ble.w	407454 <_svfprintf_r+0xa38>
  40780a:	e74a      	b.n	4076a2 <_svfprintf_r+0xc86>
  40780c:	aa25      	add	r2, sp, #148	; 0x94
  40780e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407810:	980c      	ldr	r0, [sp, #48]	; 0x30
  407812:	f002 fd39 	bl	40a288 <__ssprint_r>
  407816:	2800      	cmp	r0, #0
  407818:	f47f a9d2 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  40781c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40781e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407820:	46c8      	mov	r8, r9
  407822:	e5f2      	b.n	40740a <_svfprintf_r+0x9ee>
  407824:	aa25      	add	r2, sp, #148	; 0x94
  407826:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407828:	980c      	ldr	r0, [sp, #48]	; 0x30
  40782a:	f002 fd2d 	bl	40a288 <__ssprint_r>
  40782e:	2800      	cmp	r0, #0
  407830:	f47f a9c6 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407834:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407836:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407838:	46c8      	mov	r8, r9
  40783a:	e5f5      	b.n	407428 <_svfprintf_r+0xa0c>
  40783c:	464e      	mov	r6, r9
  40783e:	f7ff b9fd 	b.w	406c3c <_svfprintf_r+0x220>
  407842:	aa25      	add	r2, sp, #148	; 0x94
  407844:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407846:	980c      	ldr	r0, [sp, #48]	; 0x30
  407848:	f002 fd1e 	bl	40a288 <__ssprint_r>
  40784c:	2800      	cmp	r0, #0
  40784e:	f47f a9b7 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407852:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407854:	46c8      	mov	r8, r9
  407856:	f7ff ba72 	b.w	406d3e <_svfprintf_r+0x322>
  40785a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40785c:	4622      	mov	r2, r4
  40785e:	4620      	mov	r0, r4
  407860:	9c14      	ldr	r4, [sp, #80]	; 0x50
  407862:	4623      	mov	r3, r4
  407864:	4621      	mov	r1, r4
  407866:	f002 feb5 	bl	40a5d4 <__aeabi_dcmpun>
  40786a:	2800      	cmp	r0, #0
  40786c:	f040 8286 	bne.w	407d7c <_svfprintf_r+0x1360>
  407870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407872:	3301      	adds	r3, #1
  407874:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407876:	f023 0320 	bic.w	r3, r3, #32
  40787a:	930e      	str	r3, [sp, #56]	; 0x38
  40787c:	f000 81e2 	beq.w	407c44 <_svfprintf_r+0x1228>
  407880:	2b47      	cmp	r3, #71	; 0x47
  407882:	f000 811e 	beq.w	407ac2 <_svfprintf_r+0x10a6>
  407886:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40788a:	9307      	str	r3, [sp, #28]
  40788c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40788e:	1e1f      	subs	r7, r3, #0
  407890:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407892:	9308      	str	r3, [sp, #32]
  407894:	bfbb      	ittet	lt
  407896:	463b      	movlt	r3, r7
  407898:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40789c:	2300      	movge	r3, #0
  40789e:	232d      	movlt	r3, #45	; 0x2d
  4078a0:	9310      	str	r3, [sp, #64]	; 0x40
  4078a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4078a4:	2b66      	cmp	r3, #102	; 0x66
  4078a6:	f000 81bb 	beq.w	407c20 <_svfprintf_r+0x1204>
  4078aa:	2b46      	cmp	r3, #70	; 0x46
  4078ac:	f000 80df 	beq.w	407a6e <_svfprintf_r+0x1052>
  4078b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4078b2:	9a08      	ldr	r2, [sp, #32]
  4078b4:	2b45      	cmp	r3, #69	; 0x45
  4078b6:	bf0c      	ite	eq
  4078b8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4078ba:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4078bc:	a823      	add	r0, sp, #140	; 0x8c
  4078be:	a920      	add	r1, sp, #128	; 0x80
  4078c0:	bf08      	it	eq
  4078c2:	1c5d      	addeq	r5, r3, #1
  4078c4:	9004      	str	r0, [sp, #16]
  4078c6:	9103      	str	r1, [sp, #12]
  4078c8:	a81f      	add	r0, sp, #124	; 0x7c
  4078ca:	2102      	movs	r1, #2
  4078cc:	463b      	mov	r3, r7
  4078ce:	9002      	str	r0, [sp, #8]
  4078d0:	9501      	str	r5, [sp, #4]
  4078d2:	9100      	str	r1, [sp, #0]
  4078d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4078d6:	f000 fb73 	bl	407fc0 <_dtoa_r>
  4078da:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4078dc:	2b67      	cmp	r3, #103	; 0x67
  4078de:	4606      	mov	r6, r0
  4078e0:	f040 81e0 	bne.w	407ca4 <_svfprintf_r+0x1288>
  4078e4:	f01b 0f01 	tst.w	fp, #1
  4078e8:	f000 8246 	beq.w	407d78 <_svfprintf_r+0x135c>
  4078ec:	1974      	adds	r4, r6, r5
  4078ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4078f0:	9808      	ldr	r0, [sp, #32]
  4078f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4078f4:	4639      	mov	r1, r7
  4078f6:	f002 fe3b 	bl	40a570 <__aeabi_dcmpeq>
  4078fa:	2800      	cmp	r0, #0
  4078fc:	f040 8165 	bne.w	407bca <_svfprintf_r+0x11ae>
  407900:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407902:	42a3      	cmp	r3, r4
  407904:	d206      	bcs.n	407914 <_svfprintf_r+0xef8>
  407906:	2130      	movs	r1, #48	; 0x30
  407908:	1c5a      	adds	r2, r3, #1
  40790a:	9223      	str	r2, [sp, #140]	; 0x8c
  40790c:	7019      	strb	r1, [r3, #0]
  40790e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407910:	429c      	cmp	r4, r3
  407912:	d8f9      	bhi.n	407908 <_svfprintf_r+0xeec>
  407914:	1b9b      	subs	r3, r3, r6
  407916:	9313      	str	r3, [sp, #76]	; 0x4c
  407918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40791a:	2b47      	cmp	r3, #71	; 0x47
  40791c:	f000 80e9 	beq.w	407af2 <_svfprintf_r+0x10d6>
  407920:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407922:	2b65      	cmp	r3, #101	; 0x65
  407924:	f340 81cd 	ble.w	407cc2 <_svfprintf_r+0x12a6>
  407928:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40792a:	2b66      	cmp	r3, #102	; 0x66
  40792c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40792e:	9312      	str	r3, [sp, #72]	; 0x48
  407930:	f000 819e 	beq.w	407c70 <_svfprintf_r+0x1254>
  407934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407936:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407938:	4619      	mov	r1, r3
  40793a:	4291      	cmp	r1, r2
  40793c:	f300 818a 	bgt.w	407c54 <_svfprintf_r+0x1238>
  407940:	f01b 0f01 	tst.w	fp, #1
  407944:	f040 8213 	bne.w	407d6e <_svfprintf_r+0x1352>
  407948:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40794c:	9308      	str	r3, [sp, #32]
  40794e:	2367      	movs	r3, #103	; 0x67
  407950:	920e      	str	r2, [sp, #56]	; 0x38
  407952:	9311      	str	r3, [sp, #68]	; 0x44
  407954:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407956:	2b00      	cmp	r3, #0
  407958:	f040 80c4 	bne.w	407ae4 <_svfprintf_r+0x10c8>
  40795c:	930a      	str	r3, [sp, #40]	; 0x28
  40795e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407962:	f7ff b973 	b.w	406c4c <_svfprintf_r+0x230>
  407966:	4635      	mov	r5, r6
  407968:	460c      	mov	r4, r1
  40796a:	4646      	mov	r6, r8
  40796c:	4690      	mov	r8, r2
  40796e:	3301      	adds	r3, #1
  407970:	443c      	add	r4, r7
  407972:	2b07      	cmp	r3, #7
  407974:	9427      	str	r4, [sp, #156]	; 0x9c
  407976:	9326      	str	r3, [sp, #152]	; 0x98
  407978:	e888 00a0 	stmia.w	r8, {r5, r7}
  40797c:	f73f aed1 	bgt.w	407722 <_svfprintf_r+0xd06>
  407980:	f108 0808 	add.w	r8, r8, #8
  407984:	e6d7      	b.n	407736 <_svfprintf_r+0xd1a>
  407986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407988:	6813      	ldr	r3, [r2, #0]
  40798a:	3204      	adds	r2, #4
  40798c:	920f      	str	r2, [sp, #60]	; 0x3c
  40798e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407990:	601a      	str	r2, [r3, #0]
  407992:	f7ff b86a 	b.w	406a6a <_svfprintf_r+0x4e>
  407996:	aa25      	add	r2, sp, #148	; 0x94
  407998:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40799a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40799c:	f002 fc74 	bl	40a288 <__ssprint_r>
  4079a0:	2800      	cmp	r0, #0
  4079a2:	f47f a90d 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  4079a6:	46c8      	mov	r8, r9
  4079a8:	e48d      	b.n	4072c6 <_svfprintf_r+0x8aa>
  4079aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4079ac:	4a27      	ldr	r2, [pc, #156]	; (407a4c <_svfprintf_r+0x1030>)
  4079ae:	f8c8 2000 	str.w	r2, [r8]
  4079b2:	3301      	adds	r3, #1
  4079b4:	3401      	adds	r4, #1
  4079b6:	2201      	movs	r2, #1
  4079b8:	2b07      	cmp	r3, #7
  4079ba:	9427      	str	r4, [sp, #156]	; 0x9c
  4079bc:	9326      	str	r3, [sp, #152]	; 0x98
  4079be:	f8c8 2004 	str.w	r2, [r8, #4]
  4079c2:	dc72      	bgt.n	407aaa <_svfprintf_r+0x108e>
  4079c4:	f108 0808 	add.w	r8, r8, #8
  4079c8:	b929      	cbnz	r1, 4079d6 <_svfprintf_r+0xfba>
  4079ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4079cc:	b91b      	cbnz	r3, 4079d6 <_svfprintf_r+0xfba>
  4079ce:	9b07      	ldr	r3, [sp, #28]
  4079d0:	07d8      	lsls	r0, r3, #31
  4079d2:	f57f aa03 	bpl.w	406ddc <_svfprintf_r+0x3c0>
  4079d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4079d8:	9819      	ldr	r0, [sp, #100]	; 0x64
  4079da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4079dc:	f8c8 2000 	str.w	r2, [r8]
  4079e0:	3301      	adds	r3, #1
  4079e2:	4602      	mov	r2, r0
  4079e4:	4422      	add	r2, r4
  4079e6:	2b07      	cmp	r3, #7
  4079e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4079ea:	f8c8 0004 	str.w	r0, [r8, #4]
  4079ee:	9326      	str	r3, [sp, #152]	; 0x98
  4079f0:	f300 818d 	bgt.w	407d0e <_svfprintf_r+0x12f2>
  4079f4:	f108 0808 	add.w	r8, r8, #8
  4079f8:	2900      	cmp	r1, #0
  4079fa:	f2c0 8165 	blt.w	407cc8 <_svfprintf_r+0x12ac>
  4079fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
  407a00:	f8c8 6000 	str.w	r6, [r8]
  407a04:	3301      	adds	r3, #1
  407a06:	188c      	adds	r4, r1, r2
  407a08:	2b07      	cmp	r3, #7
  407a0a:	9427      	str	r4, [sp, #156]	; 0x9c
  407a0c:	9326      	str	r3, [sp, #152]	; 0x98
  407a0e:	f8c8 1004 	str.w	r1, [r8, #4]
  407a12:	f77f a9e1 	ble.w	406dd8 <_svfprintf_r+0x3bc>
  407a16:	e52c      	b.n	407472 <_svfprintf_r+0xa56>
  407a18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407a1a:	9909      	ldr	r1, [sp, #36]	; 0x24
  407a1c:	6813      	ldr	r3, [r2, #0]
  407a1e:	17cd      	asrs	r5, r1, #31
  407a20:	4608      	mov	r0, r1
  407a22:	3204      	adds	r2, #4
  407a24:	4629      	mov	r1, r5
  407a26:	920f      	str	r2, [sp, #60]	; 0x3c
  407a28:	e9c3 0100 	strd	r0, r1, [r3]
  407a2c:	f7ff b81d 	b.w	406a6a <_svfprintf_r+0x4e>
  407a30:	aa25      	add	r2, sp, #148	; 0x94
  407a32:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407a34:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a36:	f002 fc27 	bl	40a288 <__ssprint_r>
  407a3a:	2800      	cmp	r0, #0
  407a3c:	f47f a8c0 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407a40:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407a42:	46c8      	mov	r8, r9
  407a44:	e458      	b.n	4072f8 <_svfprintf_r+0x8dc>
  407a46:	bf00      	nop
  407a48:	0040b194 	.word	0x0040b194
  407a4c:	0040b180 	.word	0x0040b180
  407a50:	2140      	movs	r1, #64	; 0x40
  407a52:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a54:	f001 fb40 	bl	4090d8 <_malloc_r>
  407a58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407a5a:	6010      	str	r0, [r2, #0]
  407a5c:	6110      	str	r0, [r2, #16]
  407a5e:	2800      	cmp	r0, #0
  407a60:	f000 81f2 	beq.w	407e48 <_svfprintf_r+0x142c>
  407a64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407a66:	2340      	movs	r3, #64	; 0x40
  407a68:	6153      	str	r3, [r2, #20]
  407a6a:	f7fe bfee 	b.w	406a4a <_svfprintf_r+0x2e>
  407a6e:	a823      	add	r0, sp, #140	; 0x8c
  407a70:	a920      	add	r1, sp, #128	; 0x80
  407a72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407a74:	9004      	str	r0, [sp, #16]
  407a76:	9103      	str	r1, [sp, #12]
  407a78:	a81f      	add	r0, sp, #124	; 0x7c
  407a7a:	2103      	movs	r1, #3
  407a7c:	9002      	str	r0, [sp, #8]
  407a7e:	9a08      	ldr	r2, [sp, #32]
  407a80:	9401      	str	r4, [sp, #4]
  407a82:	463b      	mov	r3, r7
  407a84:	9100      	str	r1, [sp, #0]
  407a86:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a88:	f000 fa9a 	bl	407fc0 <_dtoa_r>
  407a8c:	4625      	mov	r5, r4
  407a8e:	4606      	mov	r6, r0
  407a90:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407a92:	2b46      	cmp	r3, #70	; 0x46
  407a94:	eb06 0405 	add.w	r4, r6, r5
  407a98:	f47f af29 	bne.w	4078ee <_svfprintf_r+0xed2>
  407a9c:	7833      	ldrb	r3, [r6, #0]
  407a9e:	2b30      	cmp	r3, #48	; 0x30
  407aa0:	f000 8178 	beq.w	407d94 <_svfprintf_r+0x1378>
  407aa4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  407aa6:	442c      	add	r4, r5
  407aa8:	e721      	b.n	4078ee <_svfprintf_r+0xed2>
  407aaa:	aa25      	add	r2, sp, #148	; 0x94
  407aac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407aae:	980c      	ldr	r0, [sp, #48]	; 0x30
  407ab0:	f002 fbea 	bl	40a288 <__ssprint_r>
  407ab4:	2800      	cmp	r0, #0
  407ab6:	f47f a883 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407aba:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407abc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407abe:	46c8      	mov	r8, r9
  407ac0:	e782      	b.n	4079c8 <_svfprintf_r+0xfac>
  407ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407ac4:	2b00      	cmp	r3, #0
  407ac6:	bf08      	it	eq
  407ac8:	2301      	moveq	r3, #1
  407aca:	930a      	str	r3, [sp, #40]	; 0x28
  407acc:	e6db      	b.n	407886 <_svfprintf_r+0xe6a>
  407ace:	4630      	mov	r0, r6
  407ad0:	940a      	str	r4, [sp, #40]	; 0x28
  407ad2:	f7fe ff35 	bl	406940 <strlen>
  407ad6:	950f      	str	r5, [sp, #60]	; 0x3c
  407ad8:	900e      	str	r0, [sp, #56]	; 0x38
  407ada:	f8cd b01c 	str.w	fp, [sp, #28]
  407ade:	4603      	mov	r3, r0
  407ae0:	f7ff b9f9 	b.w	406ed6 <_svfprintf_r+0x4ba>
  407ae4:	272d      	movs	r7, #45	; 0x2d
  407ae6:	2300      	movs	r3, #0
  407ae8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407aec:	930a      	str	r3, [sp, #40]	; 0x28
  407aee:	f7ff b8ae 	b.w	406c4e <_svfprintf_r+0x232>
  407af2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407af4:	9312      	str	r3, [sp, #72]	; 0x48
  407af6:	461a      	mov	r2, r3
  407af8:	3303      	adds	r3, #3
  407afa:	db04      	blt.n	407b06 <_svfprintf_r+0x10ea>
  407afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407afe:	4619      	mov	r1, r3
  407b00:	4291      	cmp	r1, r2
  407b02:	f6bf af17 	bge.w	407934 <_svfprintf_r+0xf18>
  407b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407b08:	3b02      	subs	r3, #2
  407b0a:	9311      	str	r3, [sp, #68]	; 0x44
  407b0c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  407b10:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  407b14:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407b16:	3b01      	subs	r3, #1
  407b18:	2b00      	cmp	r3, #0
  407b1a:	931f      	str	r3, [sp, #124]	; 0x7c
  407b1c:	bfbd      	ittte	lt
  407b1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  407b20:	f1c3 0301 	rsblt	r3, r3, #1
  407b24:	222d      	movlt	r2, #45	; 0x2d
  407b26:	222b      	movge	r2, #43	; 0x2b
  407b28:	2b09      	cmp	r3, #9
  407b2a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  407b2e:	f340 8116 	ble.w	407d5e <_svfprintf_r+0x1342>
  407b32:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  407b36:	4620      	mov	r0, r4
  407b38:	4dab      	ldr	r5, [pc, #684]	; (407de8 <_svfprintf_r+0x13cc>)
  407b3a:	e000      	b.n	407b3e <_svfprintf_r+0x1122>
  407b3c:	4610      	mov	r0, r2
  407b3e:	fb85 1203 	smull	r1, r2, r5, r3
  407b42:	17d9      	asrs	r1, r3, #31
  407b44:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407b48:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  407b4c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  407b50:	3230      	adds	r2, #48	; 0x30
  407b52:	2909      	cmp	r1, #9
  407b54:	f800 2c01 	strb.w	r2, [r0, #-1]
  407b58:	460b      	mov	r3, r1
  407b5a:	f100 32ff 	add.w	r2, r0, #4294967295
  407b5e:	dced      	bgt.n	407b3c <_svfprintf_r+0x1120>
  407b60:	3330      	adds	r3, #48	; 0x30
  407b62:	3802      	subs	r0, #2
  407b64:	b2d9      	uxtb	r1, r3
  407b66:	4284      	cmp	r4, r0
  407b68:	f802 1c01 	strb.w	r1, [r2, #-1]
  407b6c:	f240 8165 	bls.w	407e3a <_svfprintf_r+0x141e>
  407b70:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  407b74:	4613      	mov	r3, r2
  407b76:	e001      	b.n	407b7c <_svfprintf_r+0x1160>
  407b78:	f813 1b01 	ldrb.w	r1, [r3], #1
  407b7c:	f800 1b01 	strb.w	r1, [r0], #1
  407b80:	42a3      	cmp	r3, r4
  407b82:	d1f9      	bne.n	407b78 <_svfprintf_r+0x115c>
  407b84:	3301      	adds	r3, #1
  407b86:	1a9b      	subs	r3, r3, r2
  407b88:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  407b8c:	4413      	add	r3, r2
  407b8e:	aa21      	add	r2, sp, #132	; 0x84
  407b90:	1a9b      	subs	r3, r3, r2
  407b92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407b94:	931b      	str	r3, [sp, #108]	; 0x6c
  407b96:	2a01      	cmp	r2, #1
  407b98:	4413      	add	r3, r2
  407b9a:	930e      	str	r3, [sp, #56]	; 0x38
  407b9c:	f340 8119 	ble.w	407dd2 <_svfprintf_r+0x13b6>
  407ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407ba2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407ba4:	4413      	add	r3, r2
  407ba6:	930e      	str	r3, [sp, #56]	; 0x38
  407ba8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407bac:	9308      	str	r3, [sp, #32]
  407bae:	2300      	movs	r3, #0
  407bb0:	9312      	str	r3, [sp, #72]	; 0x48
  407bb2:	e6cf      	b.n	407954 <_svfprintf_r+0xf38>
  407bb4:	aa25      	add	r2, sp, #148	; 0x94
  407bb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407bb8:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bba:	f002 fb65 	bl	40a288 <__ssprint_r>
  407bbe:	2800      	cmp	r0, #0
  407bc0:	f47e affe 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407bc4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407bc6:	46c8      	mov	r8, r9
  407bc8:	e4d7      	b.n	40757a <_svfprintf_r+0xb5e>
  407bca:	4623      	mov	r3, r4
  407bcc:	e6a2      	b.n	407914 <_svfprintf_r+0xef8>
  407bce:	aa25      	add	r2, sp, #148	; 0x94
  407bd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407bd2:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bd4:	f002 fb58 	bl	40a288 <__ssprint_r>
  407bd8:	2800      	cmp	r0, #0
  407bda:	f47e aff1 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407bde:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407be0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407be2:	46c8      	mov	r8, r9
  407be4:	e5ae      	b.n	407744 <_svfprintf_r+0xd28>
  407be6:	aa25      	add	r2, sp, #148	; 0x94
  407be8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407bea:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bec:	f002 fb4c 	bl	40a288 <__ssprint_r>
  407bf0:	2800      	cmp	r0, #0
  407bf2:	f47e afe5 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407bf6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407bf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407bfa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407bfc:	1a9a      	subs	r2, r3, r2
  407bfe:	46c8      	mov	r8, r9
  407c00:	e5b8      	b.n	407774 <_svfprintf_r+0xd58>
  407c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c04:	9612      	str	r6, [sp, #72]	; 0x48
  407c06:	2b06      	cmp	r3, #6
  407c08:	bf28      	it	cs
  407c0a:	2306      	movcs	r3, #6
  407c0c:	960a      	str	r6, [sp, #40]	; 0x28
  407c0e:	4637      	mov	r7, r6
  407c10:	9308      	str	r3, [sp, #32]
  407c12:	950f      	str	r5, [sp, #60]	; 0x3c
  407c14:	f8cd b01c 	str.w	fp, [sp, #28]
  407c18:	930e      	str	r3, [sp, #56]	; 0x38
  407c1a:	4e74      	ldr	r6, [pc, #464]	; (407dec <_svfprintf_r+0x13d0>)
  407c1c:	f7ff b816 	b.w	406c4c <_svfprintf_r+0x230>
  407c20:	a823      	add	r0, sp, #140	; 0x8c
  407c22:	a920      	add	r1, sp, #128	; 0x80
  407c24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407c26:	9004      	str	r0, [sp, #16]
  407c28:	9103      	str	r1, [sp, #12]
  407c2a:	a81f      	add	r0, sp, #124	; 0x7c
  407c2c:	2103      	movs	r1, #3
  407c2e:	9002      	str	r0, [sp, #8]
  407c30:	9a08      	ldr	r2, [sp, #32]
  407c32:	9501      	str	r5, [sp, #4]
  407c34:	463b      	mov	r3, r7
  407c36:	9100      	str	r1, [sp, #0]
  407c38:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c3a:	f000 f9c1 	bl	407fc0 <_dtoa_r>
  407c3e:	4606      	mov	r6, r0
  407c40:	1944      	adds	r4, r0, r5
  407c42:	e72b      	b.n	407a9c <_svfprintf_r+0x1080>
  407c44:	2306      	movs	r3, #6
  407c46:	930a      	str	r3, [sp, #40]	; 0x28
  407c48:	e61d      	b.n	407886 <_svfprintf_r+0xe6a>
  407c4a:	272d      	movs	r7, #45	; 0x2d
  407c4c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407c50:	f7ff bacd 	b.w	4071ee <_svfprintf_r+0x7d2>
  407c54:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407c56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407c58:	4413      	add	r3, r2
  407c5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407c5c:	930e      	str	r3, [sp, #56]	; 0x38
  407c5e:	2a00      	cmp	r2, #0
  407c60:	f340 80b0 	ble.w	407dc4 <_svfprintf_r+0x13a8>
  407c64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407c68:	9308      	str	r3, [sp, #32]
  407c6a:	2367      	movs	r3, #103	; 0x67
  407c6c:	9311      	str	r3, [sp, #68]	; 0x44
  407c6e:	e671      	b.n	407954 <_svfprintf_r+0xf38>
  407c70:	2b00      	cmp	r3, #0
  407c72:	f340 80c3 	ble.w	407dfc <_svfprintf_r+0x13e0>
  407c76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407c78:	2a00      	cmp	r2, #0
  407c7a:	f040 8099 	bne.w	407db0 <_svfprintf_r+0x1394>
  407c7e:	f01b 0f01 	tst.w	fp, #1
  407c82:	f040 8095 	bne.w	407db0 <_svfprintf_r+0x1394>
  407c86:	9308      	str	r3, [sp, #32]
  407c88:	930e      	str	r3, [sp, #56]	; 0x38
  407c8a:	e663      	b.n	407954 <_svfprintf_r+0xf38>
  407c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c8e:	9308      	str	r3, [sp, #32]
  407c90:	930e      	str	r3, [sp, #56]	; 0x38
  407c92:	900a      	str	r0, [sp, #40]	; 0x28
  407c94:	950f      	str	r5, [sp, #60]	; 0x3c
  407c96:	f8cd b01c 	str.w	fp, [sp, #28]
  407c9a:	9012      	str	r0, [sp, #72]	; 0x48
  407c9c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407ca0:	f7fe bfd4 	b.w	406c4c <_svfprintf_r+0x230>
  407ca4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407ca6:	2b47      	cmp	r3, #71	; 0x47
  407ca8:	f47f ae20 	bne.w	4078ec <_svfprintf_r+0xed0>
  407cac:	f01b 0f01 	tst.w	fp, #1
  407cb0:	f47f aeee 	bne.w	407a90 <_svfprintf_r+0x1074>
  407cb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407cb6:	1b9b      	subs	r3, r3, r6
  407cb8:	9313      	str	r3, [sp, #76]	; 0x4c
  407cba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407cbc:	2b47      	cmp	r3, #71	; 0x47
  407cbe:	f43f af18 	beq.w	407af2 <_svfprintf_r+0x10d6>
  407cc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407cc4:	9312      	str	r3, [sp, #72]	; 0x48
  407cc6:	e721      	b.n	407b0c <_svfprintf_r+0x10f0>
  407cc8:	424f      	negs	r7, r1
  407cca:	3110      	adds	r1, #16
  407ccc:	4d48      	ldr	r5, [pc, #288]	; (407df0 <_svfprintf_r+0x13d4>)
  407cce:	da2f      	bge.n	407d30 <_svfprintf_r+0x1314>
  407cd0:	2410      	movs	r4, #16
  407cd2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407cd6:	e004      	b.n	407ce2 <_svfprintf_r+0x12c6>
  407cd8:	f108 0808 	add.w	r8, r8, #8
  407cdc:	3f10      	subs	r7, #16
  407cde:	2f10      	cmp	r7, #16
  407ce0:	dd26      	ble.n	407d30 <_svfprintf_r+0x1314>
  407ce2:	3301      	adds	r3, #1
  407ce4:	3210      	adds	r2, #16
  407ce6:	2b07      	cmp	r3, #7
  407ce8:	9227      	str	r2, [sp, #156]	; 0x9c
  407cea:	9326      	str	r3, [sp, #152]	; 0x98
  407cec:	f8c8 5000 	str.w	r5, [r8]
  407cf0:	f8c8 4004 	str.w	r4, [r8, #4]
  407cf4:	ddf0      	ble.n	407cd8 <_svfprintf_r+0x12bc>
  407cf6:	aa25      	add	r2, sp, #148	; 0x94
  407cf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407cfa:	4658      	mov	r0, fp
  407cfc:	f002 fac4 	bl	40a288 <__ssprint_r>
  407d00:	2800      	cmp	r0, #0
  407d02:	f47e af5d 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407d06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407d08:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407d0a:	46c8      	mov	r8, r9
  407d0c:	e7e6      	b.n	407cdc <_svfprintf_r+0x12c0>
  407d0e:	aa25      	add	r2, sp, #148	; 0x94
  407d10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d12:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d14:	f002 fab8 	bl	40a288 <__ssprint_r>
  407d18:	2800      	cmp	r0, #0
  407d1a:	f47e af51 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407d1e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407d20:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407d22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407d24:	46c8      	mov	r8, r9
  407d26:	e667      	b.n	4079f8 <_svfprintf_r+0xfdc>
  407d28:	2000      	movs	r0, #0
  407d2a:	900a      	str	r0, [sp, #40]	; 0x28
  407d2c:	f7fe bed0 	b.w	406ad0 <_svfprintf_r+0xb4>
  407d30:	3301      	adds	r3, #1
  407d32:	443a      	add	r2, r7
  407d34:	2b07      	cmp	r3, #7
  407d36:	e888 00a0 	stmia.w	r8, {r5, r7}
  407d3a:	9227      	str	r2, [sp, #156]	; 0x9c
  407d3c:	9326      	str	r3, [sp, #152]	; 0x98
  407d3e:	f108 0808 	add.w	r8, r8, #8
  407d42:	f77f ae5c 	ble.w	4079fe <_svfprintf_r+0xfe2>
  407d46:	aa25      	add	r2, sp, #148	; 0x94
  407d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d4c:	f002 fa9c 	bl	40a288 <__ssprint_r>
  407d50:	2800      	cmp	r0, #0
  407d52:	f47e af35 	bne.w	406bc0 <_svfprintf_r+0x1a4>
  407d56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407d58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407d5a:	46c8      	mov	r8, r9
  407d5c:	e64f      	b.n	4079fe <_svfprintf_r+0xfe2>
  407d5e:	3330      	adds	r3, #48	; 0x30
  407d60:	2230      	movs	r2, #48	; 0x30
  407d62:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  407d66:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  407d6a:	ab22      	add	r3, sp, #136	; 0x88
  407d6c:	e70f      	b.n	407b8e <_svfprintf_r+0x1172>
  407d6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407d70:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407d72:	4413      	add	r3, r2
  407d74:	930e      	str	r3, [sp, #56]	; 0x38
  407d76:	e775      	b.n	407c64 <_svfprintf_r+0x1248>
  407d78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407d7a:	e5cb      	b.n	407914 <_svfprintf_r+0xef8>
  407d7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407d7e:	4e1d      	ldr	r6, [pc, #116]	; (407df4 <_svfprintf_r+0x13d8>)
  407d80:	2b00      	cmp	r3, #0
  407d82:	bfb6      	itet	lt
  407d84:	272d      	movlt	r7, #45	; 0x2d
  407d86:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  407d8a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  407d8e:	4b1a      	ldr	r3, [pc, #104]	; (407df8 <_svfprintf_r+0x13dc>)
  407d90:	f7ff ba2f 	b.w	4071f2 <_svfprintf_r+0x7d6>
  407d94:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407d96:	9808      	ldr	r0, [sp, #32]
  407d98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407d9a:	4639      	mov	r1, r7
  407d9c:	f002 fbe8 	bl	40a570 <__aeabi_dcmpeq>
  407da0:	2800      	cmp	r0, #0
  407da2:	f47f ae7f 	bne.w	407aa4 <_svfprintf_r+0x1088>
  407da6:	f1c5 0501 	rsb	r5, r5, #1
  407daa:	951f      	str	r5, [sp, #124]	; 0x7c
  407dac:	442c      	add	r4, r5
  407dae:	e59e      	b.n	4078ee <_svfprintf_r+0xed2>
  407db0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407db2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407db4:	4413      	add	r3, r2
  407db6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407db8:	441a      	add	r2, r3
  407dba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407dbe:	920e      	str	r2, [sp, #56]	; 0x38
  407dc0:	9308      	str	r3, [sp, #32]
  407dc2:	e5c7      	b.n	407954 <_svfprintf_r+0xf38>
  407dc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407dc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407dc8:	f1c3 0301 	rsb	r3, r3, #1
  407dcc:	441a      	add	r2, r3
  407dce:	4613      	mov	r3, r2
  407dd0:	e7d0      	b.n	407d74 <_svfprintf_r+0x1358>
  407dd2:	f01b 0301 	ands.w	r3, fp, #1
  407dd6:	9312      	str	r3, [sp, #72]	; 0x48
  407dd8:	f47f aee2 	bne.w	407ba0 <_svfprintf_r+0x1184>
  407ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407dde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407de2:	9308      	str	r3, [sp, #32]
  407de4:	e5b6      	b.n	407954 <_svfprintf_r+0xf38>
  407de6:	bf00      	nop
  407de8:	66666667 	.word	0x66666667
  407dec:	0040b178 	.word	0x0040b178
  407df0:	0040b194 	.word	0x0040b194
  407df4:	0040b14c 	.word	0x0040b14c
  407df8:	0040b148 	.word	0x0040b148
  407dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407dfe:	b913      	cbnz	r3, 407e06 <_svfprintf_r+0x13ea>
  407e00:	f01b 0f01 	tst.w	fp, #1
  407e04:	d002      	beq.n	407e0c <_svfprintf_r+0x13f0>
  407e06:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407e08:	3301      	adds	r3, #1
  407e0a:	e7d4      	b.n	407db6 <_svfprintf_r+0x139a>
  407e0c:	2301      	movs	r3, #1
  407e0e:	e73a      	b.n	407c86 <_svfprintf_r+0x126a>
  407e10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407e12:	f89a 3001 	ldrb.w	r3, [sl, #1]
  407e16:	6828      	ldr	r0, [r5, #0]
  407e18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  407e1c:	900a      	str	r0, [sp, #40]	; 0x28
  407e1e:	4628      	mov	r0, r5
  407e20:	3004      	adds	r0, #4
  407e22:	46a2      	mov	sl, r4
  407e24:	900f      	str	r0, [sp, #60]	; 0x3c
  407e26:	f7fe be51 	b.w	406acc <_svfprintf_r+0xb0>
  407e2a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407e2e:	f7ff b867 	b.w	406f00 <_svfprintf_r+0x4e4>
  407e32:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407e36:	f7ff ba15 	b.w	407264 <_svfprintf_r+0x848>
  407e3a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  407e3e:	e6a6      	b.n	407b8e <_svfprintf_r+0x1172>
  407e40:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407e44:	f7ff b8eb 	b.w	40701e <_svfprintf_r+0x602>
  407e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407e4a:	230c      	movs	r3, #12
  407e4c:	6013      	str	r3, [r2, #0]
  407e4e:	f04f 33ff 	mov.w	r3, #4294967295
  407e52:	9309      	str	r3, [sp, #36]	; 0x24
  407e54:	f7fe bebd 	b.w	406bd2 <_svfprintf_r+0x1b6>
  407e58:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407e5c:	f7ff b99a 	b.w	407194 <_svfprintf_r+0x778>
  407e60:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407e64:	f7ff b976 	b.w	407154 <_svfprintf_r+0x738>
  407e68:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407e6c:	f7ff b959 	b.w	407122 <_svfprintf_r+0x706>
  407e70:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407e74:	f7ff b912 	b.w	40709c <_svfprintf_r+0x680>

00407e78 <register_fini>:
  407e78:	4b02      	ldr	r3, [pc, #8]	; (407e84 <register_fini+0xc>)
  407e7a:	b113      	cbz	r3, 407e82 <register_fini+0xa>
  407e7c:	4802      	ldr	r0, [pc, #8]	; (407e88 <register_fini+0x10>)
  407e7e:	f000 b805 	b.w	407e8c <atexit>
  407e82:	4770      	bx	lr
  407e84:	00000000 	.word	0x00000000
  407e88:	00408e15 	.word	0x00408e15

00407e8c <atexit>:
  407e8c:	2300      	movs	r3, #0
  407e8e:	4601      	mov	r1, r0
  407e90:	461a      	mov	r2, r3
  407e92:	4618      	mov	r0, r3
  407e94:	f002 ba84 	b.w	40a3a0 <__register_exitproc>

00407e98 <quorem>:
  407e98:	6902      	ldr	r2, [r0, #16]
  407e9a:	690b      	ldr	r3, [r1, #16]
  407e9c:	4293      	cmp	r3, r2
  407e9e:	f300 808d 	bgt.w	407fbc <quorem+0x124>
  407ea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ea6:	f103 38ff 	add.w	r8, r3, #4294967295
  407eaa:	f101 0714 	add.w	r7, r1, #20
  407eae:	f100 0b14 	add.w	fp, r0, #20
  407eb2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  407eb6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  407eba:	ea4f 0488 	mov.w	r4, r8, lsl #2
  407ebe:	b083      	sub	sp, #12
  407ec0:	3201      	adds	r2, #1
  407ec2:	fbb3 f9f2 	udiv	r9, r3, r2
  407ec6:	eb0b 0304 	add.w	r3, fp, r4
  407eca:	9400      	str	r4, [sp, #0]
  407ecc:	eb07 0a04 	add.w	sl, r7, r4
  407ed0:	9301      	str	r3, [sp, #4]
  407ed2:	f1b9 0f00 	cmp.w	r9, #0
  407ed6:	d039      	beq.n	407f4c <quorem+0xb4>
  407ed8:	2500      	movs	r5, #0
  407eda:	462e      	mov	r6, r5
  407edc:	46bc      	mov	ip, r7
  407ede:	46de      	mov	lr, fp
  407ee0:	f85c 4b04 	ldr.w	r4, [ip], #4
  407ee4:	f8de 3000 	ldr.w	r3, [lr]
  407ee8:	b2a2      	uxth	r2, r4
  407eea:	fb09 5502 	mla	r5, r9, r2, r5
  407eee:	0c22      	lsrs	r2, r4, #16
  407ef0:	0c2c      	lsrs	r4, r5, #16
  407ef2:	fb09 4202 	mla	r2, r9, r2, r4
  407ef6:	b2ad      	uxth	r5, r5
  407ef8:	1b75      	subs	r5, r6, r5
  407efa:	b296      	uxth	r6, r2
  407efc:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  407f00:	fa15 f383 	uxtah	r3, r5, r3
  407f04:	eb06 4623 	add.w	r6, r6, r3, asr #16
  407f08:	b29b      	uxth	r3, r3
  407f0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  407f0e:	45e2      	cmp	sl, ip
  407f10:	ea4f 4512 	mov.w	r5, r2, lsr #16
  407f14:	f84e 3b04 	str.w	r3, [lr], #4
  407f18:	ea4f 4626 	mov.w	r6, r6, asr #16
  407f1c:	d2e0      	bcs.n	407ee0 <quorem+0x48>
  407f1e:	9b00      	ldr	r3, [sp, #0]
  407f20:	f85b 3003 	ldr.w	r3, [fp, r3]
  407f24:	b993      	cbnz	r3, 407f4c <quorem+0xb4>
  407f26:	9c01      	ldr	r4, [sp, #4]
  407f28:	1f23      	subs	r3, r4, #4
  407f2a:	459b      	cmp	fp, r3
  407f2c:	d20c      	bcs.n	407f48 <quorem+0xb0>
  407f2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407f32:	b94b      	cbnz	r3, 407f48 <quorem+0xb0>
  407f34:	f1a4 0308 	sub.w	r3, r4, #8
  407f38:	e002      	b.n	407f40 <quorem+0xa8>
  407f3a:	681a      	ldr	r2, [r3, #0]
  407f3c:	3b04      	subs	r3, #4
  407f3e:	b91a      	cbnz	r2, 407f48 <quorem+0xb0>
  407f40:	459b      	cmp	fp, r3
  407f42:	f108 38ff 	add.w	r8, r8, #4294967295
  407f46:	d3f8      	bcc.n	407f3a <quorem+0xa2>
  407f48:	f8c0 8010 	str.w	r8, [r0, #16]
  407f4c:	4604      	mov	r4, r0
  407f4e:	f001 fee7 	bl	409d20 <__mcmp>
  407f52:	2800      	cmp	r0, #0
  407f54:	db2e      	blt.n	407fb4 <quorem+0x11c>
  407f56:	f109 0901 	add.w	r9, r9, #1
  407f5a:	465d      	mov	r5, fp
  407f5c:	2300      	movs	r3, #0
  407f5e:	f857 1b04 	ldr.w	r1, [r7], #4
  407f62:	6828      	ldr	r0, [r5, #0]
  407f64:	b28a      	uxth	r2, r1
  407f66:	1a9a      	subs	r2, r3, r2
  407f68:	0c0b      	lsrs	r3, r1, #16
  407f6a:	fa12 f280 	uxtah	r2, r2, r0
  407f6e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  407f72:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407f76:	b292      	uxth	r2, r2
  407f78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407f7c:	45ba      	cmp	sl, r7
  407f7e:	f845 2b04 	str.w	r2, [r5], #4
  407f82:	ea4f 4323 	mov.w	r3, r3, asr #16
  407f86:	d2ea      	bcs.n	407f5e <quorem+0xc6>
  407f88:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407f8c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  407f90:	b982      	cbnz	r2, 407fb4 <quorem+0x11c>
  407f92:	1f1a      	subs	r2, r3, #4
  407f94:	4593      	cmp	fp, r2
  407f96:	d20b      	bcs.n	407fb0 <quorem+0x118>
  407f98:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407f9c:	b942      	cbnz	r2, 407fb0 <quorem+0x118>
  407f9e:	3b08      	subs	r3, #8
  407fa0:	e002      	b.n	407fa8 <quorem+0x110>
  407fa2:	681a      	ldr	r2, [r3, #0]
  407fa4:	3b04      	subs	r3, #4
  407fa6:	b91a      	cbnz	r2, 407fb0 <quorem+0x118>
  407fa8:	459b      	cmp	fp, r3
  407faa:	f108 38ff 	add.w	r8, r8, #4294967295
  407fae:	d3f8      	bcc.n	407fa2 <quorem+0x10a>
  407fb0:	f8c4 8010 	str.w	r8, [r4, #16]
  407fb4:	4648      	mov	r0, r9
  407fb6:	b003      	add	sp, #12
  407fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407fbc:	2000      	movs	r0, #0
  407fbe:	4770      	bx	lr

00407fc0 <_dtoa_r>:
  407fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407fc4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  407fc6:	b09b      	sub	sp, #108	; 0x6c
  407fc8:	4604      	mov	r4, r0
  407fca:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  407fcc:	4692      	mov	sl, r2
  407fce:	469b      	mov	fp, r3
  407fd0:	b141      	cbz	r1, 407fe4 <_dtoa_r+0x24>
  407fd2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  407fd4:	604a      	str	r2, [r1, #4]
  407fd6:	2301      	movs	r3, #1
  407fd8:	4093      	lsls	r3, r2
  407fda:	608b      	str	r3, [r1, #8]
  407fdc:	f001 fcc8 	bl	409970 <_Bfree>
  407fe0:	2300      	movs	r3, #0
  407fe2:	6423      	str	r3, [r4, #64]	; 0x40
  407fe4:	f1bb 0f00 	cmp.w	fp, #0
  407fe8:	465d      	mov	r5, fp
  407fea:	db35      	blt.n	408058 <_dtoa_r+0x98>
  407fec:	2300      	movs	r3, #0
  407fee:	6033      	str	r3, [r6, #0]
  407ff0:	4b9d      	ldr	r3, [pc, #628]	; (408268 <_dtoa_r+0x2a8>)
  407ff2:	43ab      	bics	r3, r5
  407ff4:	d015      	beq.n	408022 <_dtoa_r+0x62>
  407ff6:	4650      	mov	r0, sl
  407ff8:	4659      	mov	r1, fp
  407ffa:	2200      	movs	r2, #0
  407ffc:	2300      	movs	r3, #0
  407ffe:	f002 fab7 	bl	40a570 <__aeabi_dcmpeq>
  408002:	4680      	mov	r8, r0
  408004:	2800      	cmp	r0, #0
  408006:	d02d      	beq.n	408064 <_dtoa_r+0xa4>
  408008:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40800a:	2301      	movs	r3, #1
  40800c:	6013      	str	r3, [r2, #0]
  40800e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408010:	2b00      	cmp	r3, #0
  408012:	f000 80bd 	beq.w	408190 <_dtoa_r+0x1d0>
  408016:	4895      	ldr	r0, [pc, #596]	; (40826c <_dtoa_r+0x2ac>)
  408018:	6018      	str	r0, [r3, #0]
  40801a:	3801      	subs	r0, #1
  40801c:	b01b      	add	sp, #108	; 0x6c
  40801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408022:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408024:	f242 730f 	movw	r3, #9999	; 0x270f
  408028:	6013      	str	r3, [r2, #0]
  40802a:	f1ba 0f00 	cmp.w	sl, #0
  40802e:	d10d      	bne.n	40804c <_dtoa_r+0x8c>
  408030:	f3c5 0513 	ubfx	r5, r5, #0, #20
  408034:	b955      	cbnz	r5, 40804c <_dtoa_r+0x8c>
  408036:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408038:	488d      	ldr	r0, [pc, #564]	; (408270 <_dtoa_r+0x2b0>)
  40803a:	2b00      	cmp	r3, #0
  40803c:	d0ee      	beq.n	40801c <_dtoa_r+0x5c>
  40803e:	f100 0308 	add.w	r3, r0, #8
  408042:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  408044:	6013      	str	r3, [r2, #0]
  408046:	b01b      	add	sp, #108	; 0x6c
  408048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40804c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40804e:	4889      	ldr	r0, [pc, #548]	; (408274 <_dtoa_r+0x2b4>)
  408050:	2b00      	cmp	r3, #0
  408052:	d0e3      	beq.n	40801c <_dtoa_r+0x5c>
  408054:	1cc3      	adds	r3, r0, #3
  408056:	e7f4      	b.n	408042 <_dtoa_r+0x82>
  408058:	2301      	movs	r3, #1
  40805a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40805e:	6033      	str	r3, [r6, #0]
  408060:	46ab      	mov	fp, r5
  408062:	e7c5      	b.n	407ff0 <_dtoa_r+0x30>
  408064:	aa18      	add	r2, sp, #96	; 0x60
  408066:	ab19      	add	r3, sp, #100	; 0x64
  408068:	9201      	str	r2, [sp, #4]
  40806a:	9300      	str	r3, [sp, #0]
  40806c:	4652      	mov	r2, sl
  40806e:	465b      	mov	r3, fp
  408070:	4620      	mov	r0, r4
  408072:	f001 fef5 	bl	409e60 <__d2b>
  408076:	0d2b      	lsrs	r3, r5, #20
  408078:	4681      	mov	r9, r0
  40807a:	d071      	beq.n	408160 <_dtoa_r+0x1a0>
  40807c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  408080:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  408084:	9f18      	ldr	r7, [sp, #96]	; 0x60
  408086:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40808a:	4650      	mov	r0, sl
  40808c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  408090:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  408094:	2200      	movs	r2, #0
  408096:	4b78      	ldr	r3, [pc, #480]	; (408278 <_dtoa_r+0x2b8>)
  408098:	f7fd fc66 	bl	405968 <__aeabi_dsub>
  40809c:	a36c      	add	r3, pc, #432	; (adr r3, 408250 <_dtoa_r+0x290>)
  40809e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4080a2:	f7fd fe15 	bl	405cd0 <__aeabi_dmul>
  4080a6:	a36c      	add	r3, pc, #432	; (adr r3, 408258 <_dtoa_r+0x298>)
  4080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4080ac:	f7fd fc5e 	bl	40596c <__adddf3>
  4080b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4080b4:	4630      	mov	r0, r6
  4080b6:	f7fd fda5 	bl	405c04 <__aeabi_i2d>
  4080ba:	a369      	add	r3, pc, #420	; (adr r3, 408260 <_dtoa_r+0x2a0>)
  4080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4080c0:	f7fd fe06 	bl	405cd0 <__aeabi_dmul>
  4080c4:	4602      	mov	r2, r0
  4080c6:	460b      	mov	r3, r1
  4080c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4080cc:	f7fd fc4e 	bl	40596c <__adddf3>
  4080d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4080d4:	f002 fa94 	bl	40a600 <__aeabi_d2iz>
  4080d8:	2200      	movs	r2, #0
  4080da:	9002      	str	r0, [sp, #8]
  4080dc:	2300      	movs	r3, #0
  4080de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4080e2:	f002 fa4f 	bl	40a584 <__aeabi_dcmplt>
  4080e6:	2800      	cmp	r0, #0
  4080e8:	f040 8173 	bne.w	4083d2 <_dtoa_r+0x412>
  4080ec:	9d02      	ldr	r5, [sp, #8]
  4080ee:	2d16      	cmp	r5, #22
  4080f0:	f200 815d 	bhi.w	4083ae <_dtoa_r+0x3ee>
  4080f4:	4b61      	ldr	r3, [pc, #388]	; (40827c <_dtoa_r+0x2bc>)
  4080f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4080fa:	e9d3 0100 	ldrd	r0, r1, [r3]
  4080fe:	4652      	mov	r2, sl
  408100:	465b      	mov	r3, fp
  408102:	f002 fa5d 	bl	40a5c0 <__aeabi_dcmpgt>
  408106:	2800      	cmp	r0, #0
  408108:	f000 81c5 	beq.w	408496 <_dtoa_r+0x4d6>
  40810c:	1e6b      	subs	r3, r5, #1
  40810e:	9302      	str	r3, [sp, #8]
  408110:	2300      	movs	r3, #0
  408112:	930e      	str	r3, [sp, #56]	; 0x38
  408114:	1bbf      	subs	r7, r7, r6
  408116:	1e7b      	subs	r3, r7, #1
  408118:	9306      	str	r3, [sp, #24]
  40811a:	f100 8154 	bmi.w	4083c6 <_dtoa_r+0x406>
  40811e:	2300      	movs	r3, #0
  408120:	9308      	str	r3, [sp, #32]
  408122:	9b02      	ldr	r3, [sp, #8]
  408124:	2b00      	cmp	r3, #0
  408126:	f2c0 8145 	blt.w	4083b4 <_dtoa_r+0x3f4>
  40812a:	9a06      	ldr	r2, [sp, #24]
  40812c:	930d      	str	r3, [sp, #52]	; 0x34
  40812e:	4611      	mov	r1, r2
  408130:	4419      	add	r1, r3
  408132:	2300      	movs	r3, #0
  408134:	9106      	str	r1, [sp, #24]
  408136:	930c      	str	r3, [sp, #48]	; 0x30
  408138:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40813a:	2b09      	cmp	r3, #9
  40813c:	d82a      	bhi.n	408194 <_dtoa_r+0x1d4>
  40813e:	2b05      	cmp	r3, #5
  408140:	f340 865b 	ble.w	408dfa <_dtoa_r+0xe3a>
  408144:	3b04      	subs	r3, #4
  408146:	9324      	str	r3, [sp, #144]	; 0x90
  408148:	2500      	movs	r5, #0
  40814a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40814c:	3b02      	subs	r3, #2
  40814e:	2b03      	cmp	r3, #3
  408150:	f200 8642 	bhi.w	408dd8 <_dtoa_r+0xe18>
  408154:	e8df f013 	tbh	[pc, r3, lsl #1]
  408158:	02c903d4 	.word	0x02c903d4
  40815c:	046103df 	.word	0x046103df
  408160:	9f18      	ldr	r7, [sp, #96]	; 0x60
  408162:	9e19      	ldr	r6, [sp, #100]	; 0x64
  408164:	443e      	add	r6, r7
  408166:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40816a:	2b20      	cmp	r3, #32
  40816c:	f340 818e 	ble.w	40848c <_dtoa_r+0x4cc>
  408170:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  408174:	f206 4012 	addw	r0, r6, #1042	; 0x412
  408178:	409d      	lsls	r5, r3
  40817a:	fa2a f000 	lsr.w	r0, sl, r0
  40817e:	4328      	orrs	r0, r5
  408180:	f7fd fd30 	bl	405be4 <__aeabi_ui2d>
  408184:	2301      	movs	r3, #1
  408186:	3e01      	subs	r6, #1
  408188:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40818c:	9314      	str	r3, [sp, #80]	; 0x50
  40818e:	e781      	b.n	408094 <_dtoa_r+0xd4>
  408190:	483b      	ldr	r0, [pc, #236]	; (408280 <_dtoa_r+0x2c0>)
  408192:	e743      	b.n	40801c <_dtoa_r+0x5c>
  408194:	2100      	movs	r1, #0
  408196:	6461      	str	r1, [r4, #68]	; 0x44
  408198:	4620      	mov	r0, r4
  40819a:	9125      	str	r1, [sp, #148]	; 0x94
  40819c:	f001 fbc2 	bl	409924 <_Balloc>
  4081a0:	f04f 33ff 	mov.w	r3, #4294967295
  4081a4:	930a      	str	r3, [sp, #40]	; 0x28
  4081a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4081a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4081aa:	2301      	movs	r3, #1
  4081ac:	9004      	str	r0, [sp, #16]
  4081ae:	6420      	str	r0, [r4, #64]	; 0x40
  4081b0:	9224      	str	r2, [sp, #144]	; 0x90
  4081b2:	930b      	str	r3, [sp, #44]	; 0x2c
  4081b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4081b6:	2b00      	cmp	r3, #0
  4081b8:	f2c0 80d9 	blt.w	40836e <_dtoa_r+0x3ae>
  4081bc:	9a02      	ldr	r2, [sp, #8]
  4081be:	2a0e      	cmp	r2, #14
  4081c0:	f300 80d5 	bgt.w	40836e <_dtoa_r+0x3ae>
  4081c4:	4b2d      	ldr	r3, [pc, #180]	; (40827c <_dtoa_r+0x2bc>)
  4081c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4081d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4081d4:	2b00      	cmp	r3, #0
  4081d6:	f2c0 83ba 	blt.w	40894e <_dtoa_r+0x98e>
  4081da:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4081de:	4650      	mov	r0, sl
  4081e0:	462a      	mov	r2, r5
  4081e2:	4633      	mov	r3, r6
  4081e4:	4659      	mov	r1, fp
  4081e6:	f7fd fe9d 	bl	405f24 <__aeabi_ddiv>
  4081ea:	f002 fa09 	bl	40a600 <__aeabi_d2iz>
  4081ee:	4680      	mov	r8, r0
  4081f0:	f7fd fd08 	bl	405c04 <__aeabi_i2d>
  4081f4:	462a      	mov	r2, r5
  4081f6:	4633      	mov	r3, r6
  4081f8:	f7fd fd6a 	bl	405cd0 <__aeabi_dmul>
  4081fc:	460b      	mov	r3, r1
  4081fe:	4602      	mov	r2, r0
  408200:	4659      	mov	r1, fp
  408202:	4650      	mov	r0, sl
  408204:	f7fd fbb0 	bl	405968 <__aeabi_dsub>
  408208:	9d04      	ldr	r5, [sp, #16]
  40820a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40820e:	702b      	strb	r3, [r5, #0]
  408210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408212:	2b01      	cmp	r3, #1
  408214:	4606      	mov	r6, r0
  408216:	460f      	mov	r7, r1
  408218:	f105 0501 	add.w	r5, r5, #1
  40821c:	d068      	beq.n	4082f0 <_dtoa_r+0x330>
  40821e:	2200      	movs	r2, #0
  408220:	4b18      	ldr	r3, [pc, #96]	; (408284 <_dtoa_r+0x2c4>)
  408222:	f7fd fd55 	bl	405cd0 <__aeabi_dmul>
  408226:	2200      	movs	r2, #0
  408228:	2300      	movs	r3, #0
  40822a:	4606      	mov	r6, r0
  40822c:	460f      	mov	r7, r1
  40822e:	f002 f99f 	bl	40a570 <__aeabi_dcmpeq>
  408232:	2800      	cmp	r0, #0
  408234:	f040 8088 	bne.w	408348 <_dtoa_r+0x388>
  408238:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40823c:	f04f 0a00 	mov.w	sl, #0
  408240:	f8df b040 	ldr.w	fp, [pc, #64]	; 408284 <_dtoa_r+0x2c4>
  408244:	940c      	str	r4, [sp, #48]	; 0x30
  408246:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40824a:	e028      	b.n	40829e <_dtoa_r+0x2de>
  40824c:	f3af 8000 	nop.w
  408250:	636f4361 	.word	0x636f4361
  408254:	3fd287a7 	.word	0x3fd287a7
  408258:	8b60c8b3 	.word	0x8b60c8b3
  40825c:	3fc68a28 	.word	0x3fc68a28
  408260:	509f79fb 	.word	0x509f79fb
  408264:	3fd34413 	.word	0x3fd34413
  408268:	7ff00000 	.word	0x7ff00000
  40826c:	0040b181 	.word	0x0040b181
  408270:	0040b1a4 	.word	0x0040b1a4
  408274:	0040b1b0 	.word	0x0040b1b0
  408278:	3ff80000 	.word	0x3ff80000
  40827c:	0040b1f0 	.word	0x0040b1f0
  408280:	0040b180 	.word	0x0040b180
  408284:	40240000 	.word	0x40240000
  408288:	f7fd fd22 	bl	405cd0 <__aeabi_dmul>
  40828c:	2200      	movs	r2, #0
  40828e:	2300      	movs	r3, #0
  408290:	4606      	mov	r6, r0
  408292:	460f      	mov	r7, r1
  408294:	f002 f96c 	bl	40a570 <__aeabi_dcmpeq>
  408298:	2800      	cmp	r0, #0
  40829a:	f040 83c1 	bne.w	408a20 <_dtoa_r+0xa60>
  40829e:	4642      	mov	r2, r8
  4082a0:	464b      	mov	r3, r9
  4082a2:	4630      	mov	r0, r6
  4082a4:	4639      	mov	r1, r7
  4082a6:	f7fd fe3d 	bl	405f24 <__aeabi_ddiv>
  4082aa:	f002 f9a9 	bl	40a600 <__aeabi_d2iz>
  4082ae:	4604      	mov	r4, r0
  4082b0:	f7fd fca8 	bl	405c04 <__aeabi_i2d>
  4082b4:	4642      	mov	r2, r8
  4082b6:	464b      	mov	r3, r9
  4082b8:	f7fd fd0a 	bl	405cd0 <__aeabi_dmul>
  4082bc:	4602      	mov	r2, r0
  4082be:	460b      	mov	r3, r1
  4082c0:	4630      	mov	r0, r6
  4082c2:	4639      	mov	r1, r7
  4082c4:	f7fd fb50 	bl	405968 <__aeabi_dsub>
  4082c8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4082cc:	9e04      	ldr	r6, [sp, #16]
  4082ce:	f805 eb01 	strb.w	lr, [r5], #1
  4082d2:	eba5 0e06 	sub.w	lr, r5, r6
  4082d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4082d8:	45b6      	cmp	lr, r6
  4082da:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4082de:	4652      	mov	r2, sl
  4082e0:	465b      	mov	r3, fp
  4082e2:	d1d1      	bne.n	408288 <_dtoa_r+0x2c8>
  4082e4:	46a0      	mov	r8, r4
  4082e6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4082ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4082ec:	4606      	mov	r6, r0
  4082ee:	460f      	mov	r7, r1
  4082f0:	4632      	mov	r2, r6
  4082f2:	463b      	mov	r3, r7
  4082f4:	4630      	mov	r0, r6
  4082f6:	4639      	mov	r1, r7
  4082f8:	f7fd fb38 	bl	40596c <__adddf3>
  4082fc:	4606      	mov	r6, r0
  4082fe:	460f      	mov	r7, r1
  408300:	4602      	mov	r2, r0
  408302:	460b      	mov	r3, r1
  408304:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408308:	f002 f93c 	bl	40a584 <__aeabi_dcmplt>
  40830c:	b948      	cbnz	r0, 408322 <_dtoa_r+0x362>
  40830e:	4632      	mov	r2, r6
  408310:	463b      	mov	r3, r7
  408312:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408316:	f002 f92b 	bl	40a570 <__aeabi_dcmpeq>
  40831a:	b1a8      	cbz	r0, 408348 <_dtoa_r+0x388>
  40831c:	f018 0f01 	tst.w	r8, #1
  408320:	d012      	beq.n	408348 <_dtoa_r+0x388>
  408322:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408326:	9a04      	ldr	r2, [sp, #16]
  408328:	1e6b      	subs	r3, r5, #1
  40832a:	e004      	b.n	408336 <_dtoa_r+0x376>
  40832c:	429a      	cmp	r2, r3
  40832e:	f000 8401 	beq.w	408b34 <_dtoa_r+0xb74>
  408332:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  408336:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40833a:	f103 0501 	add.w	r5, r3, #1
  40833e:	d0f5      	beq.n	40832c <_dtoa_r+0x36c>
  408340:	f108 0801 	add.w	r8, r8, #1
  408344:	f883 8000 	strb.w	r8, [r3]
  408348:	4649      	mov	r1, r9
  40834a:	4620      	mov	r0, r4
  40834c:	f001 fb10 	bl	409970 <_Bfree>
  408350:	2200      	movs	r2, #0
  408352:	9b02      	ldr	r3, [sp, #8]
  408354:	702a      	strb	r2, [r5, #0]
  408356:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408358:	3301      	adds	r3, #1
  40835a:	6013      	str	r3, [r2, #0]
  40835c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40835e:	2b00      	cmp	r3, #0
  408360:	f000 839e 	beq.w	408aa0 <_dtoa_r+0xae0>
  408364:	9804      	ldr	r0, [sp, #16]
  408366:	601d      	str	r5, [r3, #0]
  408368:	b01b      	add	sp, #108	; 0x6c
  40836a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40836e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408370:	2a00      	cmp	r2, #0
  408372:	d03e      	beq.n	4083f2 <_dtoa_r+0x432>
  408374:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408376:	2a01      	cmp	r2, #1
  408378:	f340 8311 	ble.w	40899e <_dtoa_r+0x9de>
  40837c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40837e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408380:	1e5f      	subs	r7, r3, #1
  408382:	42ba      	cmp	r2, r7
  408384:	f2c0 838f 	blt.w	408aa6 <_dtoa_r+0xae6>
  408388:	1bd7      	subs	r7, r2, r7
  40838a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40838c:	2b00      	cmp	r3, #0
  40838e:	f2c0 848b 	blt.w	408ca8 <_dtoa_r+0xce8>
  408392:	9d08      	ldr	r5, [sp, #32]
  408394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408396:	9a08      	ldr	r2, [sp, #32]
  408398:	441a      	add	r2, r3
  40839a:	9208      	str	r2, [sp, #32]
  40839c:	9a06      	ldr	r2, [sp, #24]
  40839e:	2101      	movs	r1, #1
  4083a0:	441a      	add	r2, r3
  4083a2:	4620      	mov	r0, r4
  4083a4:	9206      	str	r2, [sp, #24]
  4083a6:	f001 fb7d 	bl	409aa4 <__i2b>
  4083aa:	4606      	mov	r6, r0
  4083ac:	e024      	b.n	4083f8 <_dtoa_r+0x438>
  4083ae:	2301      	movs	r3, #1
  4083b0:	930e      	str	r3, [sp, #56]	; 0x38
  4083b2:	e6af      	b.n	408114 <_dtoa_r+0x154>
  4083b4:	9a08      	ldr	r2, [sp, #32]
  4083b6:	9b02      	ldr	r3, [sp, #8]
  4083b8:	1ad2      	subs	r2, r2, r3
  4083ba:	425b      	negs	r3, r3
  4083bc:	930c      	str	r3, [sp, #48]	; 0x30
  4083be:	2300      	movs	r3, #0
  4083c0:	9208      	str	r2, [sp, #32]
  4083c2:	930d      	str	r3, [sp, #52]	; 0x34
  4083c4:	e6b8      	b.n	408138 <_dtoa_r+0x178>
  4083c6:	f1c7 0301 	rsb	r3, r7, #1
  4083ca:	9308      	str	r3, [sp, #32]
  4083cc:	2300      	movs	r3, #0
  4083ce:	9306      	str	r3, [sp, #24]
  4083d0:	e6a7      	b.n	408122 <_dtoa_r+0x162>
  4083d2:	9d02      	ldr	r5, [sp, #8]
  4083d4:	4628      	mov	r0, r5
  4083d6:	f7fd fc15 	bl	405c04 <__aeabi_i2d>
  4083da:	4602      	mov	r2, r0
  4083dc:	460b      	mov	r3, r1
  4083de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4083e2:	f002 f8c5 	bl	40a570 <__aeabi_dcmpeq>
  4083e6:	2800      	cmp	r0, #0
  4083e8:	f47f ae80 	bne.w	4080ec <_dtoa_r+0x12c>
  4083ec:	1e6b      	subs	r3, r5, #1
  4083ee:	9302      	str	r3, [sp, #8]
  4083f0:	e67c      	b.n	4080ec <_dtoa_r+0x12c>
  4083f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4083f4:	9d08      	ldr	r5, [sp, #32]
  4083f6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4083f8:	2d00      	cmp	r5, #0
  4083fa:	dd0c      	ble.n	408416 <_dtoa_r+0x456>
  4083fc:	9906      	ldr	r1, [sp, #24]
  4083fe:	2900      	cmp	r1, #0
  408400:	460b      	mov	r3, r1
  408402:	dd08      	ble.n	408416 <_dtoa_r+0x456>
  408404:	42a9      	cmp	r1, r5
  408406:	9a08      	ldr	r2, [sp, #32]
  408408:	bfa8      	it	ge
  40840a:	462b      	movge	r3, r5
  40840c:	1ad2      	subs	r2, r2, r3
  40840e:	1aed      	subs	r5, r5, r3
  408410:	1acb      	subs	r3, r1, r3
  408412:	9208      	str	r2, [sp, #32]
  408414:	9306      	str	r3, [sp, #24]
  408416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408418:	b1d3      	cbz	r3, 408450 <_dtoa_r+0x490>
  40841a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40841c:	2b00      	cmp	r3, #0
  40841e:	f000 82b7 	beq.w	408990 <_dtoa_r+0x9d0>
  408422:	2f00      	cmp	r7, #0
  408424:	dd10      	ble.n	408448 <_dtoa_r+0x488>
  408426:	4631      	mov	r1, r6
  408428:	463a      	mov	r2, r7
  40842a:	4620      	mov	r0, r4
  40842c:	f001 fbd6 	bl	409bdc <__pow5mult>
  408430:	464a      	mov	r2, r9
  408432:	4601      	mov	r1, r0
  408434:	4606      	mov	r6, r0
  408436:	4620      	mov	r0, r4
  408438:	f001 fb3e 	bl	409ab8 <__multiply>
  40843c:	4649      	mov	r1, r9
  40843e:	4680      	mov	r8, r0
  408440:	4620      	mov	r0, r4
  408442:	f001 fa95 	bl	409970 <_Bfree>
  408446:	46c1      	mov	r9, r8
  408448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40844a:	1bda      	subs	r2, r3, r7
  40844c:	f040 82a1 	bne.w	408992 <_dtoa_r+0x9d2>
  408450:	2101      	movs	r1, #1
  408452:	4620      	mov	r0, r4
  408454:	f001 fb26 	bl	409aa4 <__i2b>
  408458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40845a:	2b00      	cmp	r3, #0
  40845c:	4680      	mov	r8, r0
  40845e:	dd1c      	ble.n	40849a <_dtoa_r+0x4da>
  408460:	4601      	mov	r1, r0
  408462:	461a      	mov	r2, r3
  408464:	4620      	mov	r0, r4
  408466:	f001 fbb9 	bl	409bdc <__pow5mult>
  40846a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40846c:	2b01      	cmp	r3, #1
  40846e:	4680      	mov	r8, r0
  408470:	f340 8254 	ble.w	40891c <_dtoa_r+0x95c>
  408474:	2300      	movs	r3, #0
  408476:	930c      	str	r3, [sp, #48]	; 0x30
  408478:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40847c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  408480:	6918      	ldr	r0, [r3, #16]
  408482:	f001 fabf 	bl	409a04 <__hi0bits>
  408486:	f1c0 0020 	rsb	r0, r0, #32
  40848a:	e010      	b.n	4084ae <_dtoa_r+0x4ee>
  40848c:	f1c3 0520 	rsb	r5, r3, #32
  408490:	fa0a f005 	lsl.w	r0, sl, r5
  408494:	e674      	b.n	408180 <_dtoa_r+0x1c0>
  408496:	900e      	str	r0, [sp, #56]	; 0x38
  408498:	e63c      	b.n	408114 <_dtoa_r+0x154>
  40849a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40849c:	2b01      	cmp	r3, #1
  40849e:	f340 8287 	ble.w	4089b0 <_dtoa_r+0x9f0>
  4084a2:	2300      	movs	r3, #0
  4084a4:	930c      	str	r3, [sp, #48]	; 0x30
  4084a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4084a8:	2001      	movs	r0, #1
  4084aa:	2b00      	cmp	r3, #0
  4084ac:	d1e4      	bne.n	408478 <_dtoa_r+0x4b8>
  4084ae:	9a06      	ldr	r2, [sp, #24]
  4084b0:	4410      	add	r0, r2
  4084b2:	f010 001f 	ands.w	r0, r0, #31
  4084b6:	f000 80a1 	beq.w	4085fc <_dtoa_r+0x63c>
  4084ba:	f1c0 0320 	rsb	r3, r0, #32
  4084be:	2b04      	cmp	r3, #4
  4084c0:	f340 849e 	ble.w	408e00 <_dtoa_r+0xe40>
  4084c4:	9b08      	ldr	r3, [sp, #32]
  4084c6:	f1c0 001c 	rsb	r0, r0, #28
  4084ca:	4403      	add	r3, r0
  4084cc:	9308      	str	r3, [sp, #32]
  4084ce:	4613      	mov	r3, r2
  4084d0:	4403      	add	r3, r0
  4084d2:	4405      	add	r5, r0
  4084d4:	9306      	str	r3, [sp, #24]
  4084d6:	9b08      	ldr	r3, [sp, #32]
  4084d8:	2b00      	cmp	r3, #0
  4084da:	dd05      	ble.n	4084e8 <_dtoa_r+0x528>
  4084dc:	4649      	mov	r1, r9
  4084de:	461a      	mov	r2, r3
  4084e0:	4620      	mov	r0, r4
  4084e2:	f001 fbcb 	bl	409c7c <__lshift>
  4084e6:	4681      	mov	r9, r0
  4084e8:	9b06      	ldr	r3, [sp, #24]
  4084ea:	2b00      	cmp	r3, #0
  4084ec:	dd05      	ble.n	4084fa <_dtoa_r+0x53a>
  4084ee:	4641      	mov	r1, r8
  4084f0:	461a      	mov	r2, r3
  4084f2:	4620      	mov	r0, r4
  4084f4:	f001 fbc2 	bl	409c7c <__lshift>
  4084f8:	4680      	mov	r8, r0
  4084fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4084fc:	2b00      	cmp	r3, #0
  4084fe:	f040 8086 	bne.w	40860e <_dtoa_r+0x64e>
  408502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408504:	2b00      	cmp	r3, #0
  408506:	f340 8266 	ble.w	4089d6 <_dtoa_r+0xa16>
  40850a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40850c:	2b00      	cmp	r3, #0
  40850e:	f000 8098 	beq.w	408642 <_dtoa_r+0x682>
  408512:	2d00      	cmp	r5, #0
  408514:	dd05      	ble.n	408522 <_dtoa_r+0x562>
  408516:	4631      	mov	r1, r6
  408518:	462a      	mov	r2, r5
  40851a:	4620      	mov	r0, r4
  40851c:	f001 fbae 	bl	409c7c <__lshift>
  408520:	4606      	mov	r6, r0
  408522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408524:	2b00      	cmp	r3, #0
  408526:	f040 8337 	bne.w	408b98 <_dtoa_r+0xbd8>
  40852a:	9606      	str	r6, [sp, #24]
  40852c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40852e:	9a04      	ldr	r2, [sp, #16]
  408530:	f8dd b018 	ldr.w	fp, [sp, #24]
  408534:	3b01      	subs	r3, #1
  408536:	18d3      	adds	r3, r2, r3
  408538:	930b      	str	r3, [sp, #44]	; 0x2c
  40853a:	f00a 0301 	and.w	r3, sl, #1
  40853e:	930c      	str	r3, [sp, #48]	; 0x30
  408540:	4617      	mov	r7, r2
  408542:	46c2      	mov	sl, r8
  408544:	4651      	mov	r1, sl
  408546:	4648      	mov	r0, r9
  408548:	f7ff fca6 	bl	407e98 <quorem>
  40854c:	4631      	mov	r1, r6
  40854e:	4605      	mov	r5, r0
  408550:	4648      	mov	r0, r9
  408552:	f001 fbe5 	bl	409d20 <__mcmp>
  408556:	465a      	mov	r2, fp
  408558:	900a      	str	r0, [sp, #40]	; 0x28
  40855a:	4651      	mov	r1, sl
  40855c:	4620      	mov	r0, r4
  40855e:	f001 fbfb 	bl	409d58 <__mdiff>
  408562:	68c2      	ldr	r2, [r0, #12]
  408564:	4680      	mov	r8, r0
  408566:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40856a:	2a00      	cmp	r2, #0
  40856c:	f040 822b 	bne.w	4089c6 <_dtoa_r+0xa06>
  408570:	4601      	mov	r1, r0
  408572:	4648      	mov	r0, r9
  408574:	9308      	str	r3, [sp, #32]
  408576:	f001 fbd3 	bl	409d20 <__mcmp>
  40857a:	4641      	mov	r1, r8
  40857c:	9006      	str	r0, [sp, #24]
  40857e:	4620      	mov	r0, r4
  408580:	f001 f9f6 	bl	409970 <_Bfree>
  408584:	9a06      	ldr	r2, [sp, #24]
  408586:	9b08      	ldr	r3, [sp, #32]
  408588:	b932      	cbnz	r2, 408598 <_dtoa_r+0x5d8>
  40858a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40858c:	b921      	cbnz	r1, 408598 <_dtoa_r+0x5d8>
  40858e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408590:	2a00      	cmp	r2, #0
  408592:	f000 83ef 	beq.w	408d74 <_dtoa_r+0xdb4>
  408596:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408598:	990a      	ldr	r1, [sp, #40]	; 0x28
  40859a:	2900      	cmp	r1, #0
  40859c:	f2c0 829f 	blt.w	408ade <_dtoa_r+0xb1e>
  4085a0:	d105      	bne.n	4085ae <_dtoa_r+0x5ee>
  4085a2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4085a4:	b919      	cbnz	r1, 4085ae <_dtoa_r+0x5ee>
  4085a6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4085a8:	2900      	cmp	r1, #0
  4085aa:	f000 8298 	beq.w	408ade <_dtoa_r+0xb1e>
  4085ae:	2a00      	cmp	r2, #0
  4085b0:	f300 8306 	bgt.w	408bc0 <_dtoa_r+0xc00>
  4085b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4085b6:	703b      	strb	r3, [r7, #0]
  4085b8:	f107 0801 	add.w	r8, r7, #1
  4085bc:	4297      	cmp	r7, r2
  4085be:	4645      	mov	r5, r8
  4085c0:	f000 830c 	beq.w	408bdc <_dtoa_r+0xc1c>
  4085c4:	4649      	mov	r1, r9
  4085c6:	2300      	movs	r3, #0
  4085c8:	220a      	movs	r2, #10
  4085ca:	4620      	mov	r0, r4
  4085cc:	f001 f9da 	bl	409984 <__multadd>
  4085d0:	455e      	cmp	r6, fp
  4085d2:	4681      	mov	r9, r0
  4085d4:	4631      	mov	r1, r6
  4085d6:	f04f 0300 	mov.w	r3, #0
  4085da:	f04f 020a 	mov.w	r2, #10
  4085de:	4620      	mov	r0, r4
  4085e0:	f000 81eb 	beq.w	4089ba <_dtoa_r+0x9fa>
  4085e4:	f001 f9ce 	bl	409984 <__multadd>
  4085e8:	4659      	mov	r1, fp
  4085ea:	4606      	mov	r6, r0
  4085ec:	2300      	movs	r3, #0
  4085ee:	220a      	movs	r2, #10
  4085f0:	4620      	mov	r0, r4
  4085f2:	f001 f9c7 	bl	409984 <__multadd>
  4085f6:	4647      	mov	r7, r8
  4085f8:	4683      	mov	fp, r0
  4085fa:	e7a3      	b.n	408544 <_dtoa_r+0x584>
  4085fc:	201c      	movs	r0, #28
  4085fe:	9b08      	ldr	r3, [sp, #32]
  408600:	4403      	add	r3, r0
  408602:	9308      	str	r3, [sp, #32]
  408604:	9b06      	ldr	r3, [sp, #24]
  408606:	4403      	add	r3, r0
  408608:	4405      	add	r5, r0
  40860a:	9306      	str	r3, [sp, #24]
  40860c:	e763      	b.n	4084d6 <_dtoa_r+0x516>
  40860e:	4641      	mov	r1, r8
  408610:	4648      	mov	r0, r9
  408612:	f001 fb85 	bl	409d20 <__mcmp>
  408616:	2800      	cmp	r0, #0
  408618:	f6bf af73 	bge.w	408502 <_dtoa_r+0x542>
  40861c:	9f02      	ldr	r7, [sp, #8]
  40861e:	4649      	mov	r1, r9
  408620:	2300      	movs	r3, #0
  408622:	220a      	movs	r2, #10
  408624:	4620      	mov	r0, r4
  408626:	3f01      	subs	r7, #1
  408628:	9702      	str	r7, [sp, #8]
  40862a:	f001 f9ab 	bl	409984 <__multadd>
  40862e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408630:	4681      	mov	r9, r0
  408632:	2b00      	cmp	r3, #0
  408634:	f040 83b6 	bne.w	408da4 <_dtoa_r+0xde4>
  408638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40863a:	2b00      	cmp	r3, #0
  40863c:	f340 83bf 	ble.w	408dbe <_dtoa_r+0xdfe>
  408640:	930a      	str	r3, [sp, #40]	; 0x28
  408642:	f8dd b010 	ldr.w	fp, [sp, #16]
  408646:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408648:	465d      	mov	r5, fp
  40864a:	e002      	b.n	408652 <_dtoa_r+0x692>
  40864c:	f001 f99a 	bl	409984 <__multadd>
  408650:	4681      	mov	r9, r0
  408652:	4641      	mov	r1, r8
  408654:	4648      	mov	r0, r9
  408656:	f7ff fc1f 	bl	407e98 <quorem>
  40865a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40865e:	f805 ab01 	strb.w	sl, [r5], #1
  408662:	eba5 030b 	sub.w	r3, r5, fp
  408666:	42bb      	cmp	r3, r7
  408668:	f04f 020a 	mov.w	r2, #10
  40866c:	f04f 0300 	mov.w	r3, #0
  408670:	4649      	mov	r1, r9
  408672:	4620      	mov	r0, r4
  408674:	dbea      	blt.n	40864c <_dtoa_r+0x68c>
  408676:	9b04      	ldr	r3, [sp, #16]
  408678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40867a:	2a01      	cmp	r2, #1
  40867c:	bfac      	ite	ge
  40867e:	189b      	addge	r3, r3, r2
  408680:	3301      	addlt	r3, #1
  408682:	461d      	mov	r5, r3
  408684:	f04f 0b00 	mov.w	fp, #0
  408688:	4649      	mov	r1, r9
  40868a:	2201      	movs	r2, #1
  40868c:	4620      	mov	r0, r4
  40868e:	f001 faf5 	bl	409c7c <__lshift>
  408692:	4641      	mov	r1, r8
  408694:	4681      	mov	r9, r0
  408696:	f001 fb43 	bl	409d20 <__mcmp>
  40869a:	2800      	cmp	r0, #0
  40869c:	f340 823d 	ble.w	408b1a <_dtoa_r+0xb5a>
  4086a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4086a4:	9904      	ldr	r1, [sp, #16]
  4086a6:	1e6b      	subs	r3, r5, #1
  4086a8:	e004      	b.n	4086b4 <_dtoa_r+0x6f4>
  4086aa:	428b      	cmp	r3, r1
  4086ac:	f000 81ae 	beq.w	408a0c <_dtoa_r+0xa4c>
  4086b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4086b4:	2a39      	cmp	r2, #57	; 0x39
  4086b6:	f103 0501 	add.w	r5, r3, #1
  4086ba:	d0f6      	beq.n	4086aa <_dtoa_r+0x6ea>
  4086bc:	3201      	adds	r2, #1
  4086be:	701a      	strb	r2, [r3, #0]
  4086c0:	4641      	mov	r1, r8
  4086c2:	4620      	mov	r0, r4
  4086c4:	f001 f954 	bl	409970 <_Bfree>
  4086c8:	2e00      	cmp	r6, #0
  4086ca:	f43f ae3d 	beq.w	408348 <_dtoa_r+0x388>
  4086ce:	f1bb 0f00 	cmp.w	fp, #0
  4086d2:	d005      	beq.n	4086e0 <_dtoa_r+0x720>
  4086d4:	45b3      	cmp	fp, r6
  4086d6:	d003      	beq.n	4086e0 <_dtoa_r+0x720>
  4086d8:	4659      	mov	r1, fp
  4086da:	4620      	mov	r0, r4
  4086dc:	f001 f948 	bl	409970 <_Bfree>
  4086e0:	4631      	mov	r1, r6
  4086e2:	4620      	mov	r0, r4
  4086e4:	f001 f944 	bl	409970 <_Bfree>
  4086e8:	e62e      	b.n	408348 <_dtoa_r+0x388>
  4086ea:	2300      	movs	r3, #0
  4086ec:	930b      	str	r3, [sp, #44]	; 0x2c
  4086ee:	9b02      	ldr	r3, [sp, #8]
  4086f0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4086f2:	4413      	add	r3, r2
  4086f4:	930f      	str	r3, [sp, #60]	; 0x3c
  4086f6:	3301      	adds	r3, #1
  4086f8:	2b01      	cmp	r3, #1
  4086fa:	461f      	mov	r7, r3
  4086fc:	461e      	mov	r6, r3
  4086fe:	930a      	str	r3, [sp, #40]	; 0x28
  408700:	bfb8      	it	lt
  408702:	2701      	movlt	r7, #1
  408704:	2100      	movs	r1, #0
  408706:	2f17      	cmp	r7, #23
  408708:	6461      	str	r1, [r4, #68]	; 0x44
  40870a:	d90a      	bls.n	408722 <_dtoa_r+0x762>
  40870c:	2201      	movs	r2, #1
  40870e:	2304      	movs	r3, #4
  408710:	005b      	lsls	r3, r3, #1
  408712:	f103 0014 	add.w	r0, r3, #20
  408716:	4287      	cmp	r7, r0
  408718:	4611      	mov	r1, r2
  40871a:	f102 0201 	add.w	r2, r2, #1
  40871e:	d2f7      	bcs.n	408710 <_dtoa_r+0x750>
  408720:	6461      	str	r1, [r4, #68]	; 0x44
  408722:	4620      	mov	r0, r4
  408724:	f001 f8fe 	bl	409924 <_Balloc>
  408728:	2e0e      	cmp	r6, #14
  40872a:	9004      	str	r0, [sp, #16]
  40872c:	6420      	str	r0, [r4, #64]	; 0x40
  40872e:	f63f ad41 	bhi.w	4081b4 <_dtoa_r+0x1f4>
  408732:	2d00      	cmp	r5, #0
  408734:	f43f ad3e 	beq.w	4081b4 <_dtoa_r+0x1f4>
  408738:	9902      	ldr	r1, [sp, #8]
  40873a:	2900      	cmp	r1, #0
  40873c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  408740:	f340 8202 	ble.w	408b48 <_dtoa_r+0xb88>
  408744:	4bb8      	ldr	r3, [pc, #736]	; (408a28 <_dtoa_r+0xa68>)
  408746:	f001 020f 	and.w	r2, r1, #15
  40874a:	110d      	asrs	r5, r1, #4
  40874c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408750:	06e9      	lsls	r1, r5, #27
  408752:	e9d3 6700 	ldrd	r6, r7, [r3]
  408756:	f140 81ae 	bpl.w	408ab6 <_dtoa_r+0xaf6>
  40875a:	4bb4      	ldr	r3, [pc, #720]	; (408a2c <_dtoa_r+0xa6c>)
  40875c:	4650      	mov	r0, sl
  40875e:	4659      	mov	r1, fp
  408760:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  408764:	f7fd fbde 	bl	405f24 <__aeabi_ddiv>
  408768:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40876c:	f005 050f 	and.w	r5, r5, #15
  408770:	f04f 0a03 	mov.w	sl, #3
  408774:	b18d      	cbz	r5, 40879a <_dtoa_r+0x7da>
  408776:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 408a2c <_dtoa_r+0xa6c>
  40877a:	07ea      	lsls	r2, r5, #31
  40877c:	d509      	bpl.n	408792 <_dtoa_r+0x7d2>
  40877e:	4630      	mov	r0, r6
  408780:	4639      	mov	r1, r7
  408782:	e9d8 2300 	ldrd	r2, r3, [r8]
  408786:	f7fd faa3 	bl	405cd0 <__aeabi_dmul>
  40878a:	f10a 0a01 	add.w	sl, sl, #1
  40878e:	4606      	mov	r6, r0
  408790:	460f      	mov	r7, r1
  408792:	106d      	asrs	r5, r5, #1
  408794:	f108 0808 	add.w	r8, r8, #8
  408798:	d1ef      	bne.n	40877a <_dtoa_r+0x7ba>
  40879a:	463b      	mov	r3, r7
  40879c:	4632      	mov	r2, r6
  40879e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4087a2:	f7fd fbbf 	bl	405f24 <__aeabi_ddiv>
  4087a6:	4607      	mov	r7, r0
  4087a8:	4688      	mov	r8, r1
  4087aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4087ac:	b143      	cbz	r3, 4087c0 <_dtoa_r+0x800>
  4087ae:	2200      	movs	r2, #0
  4087b0:	4b9f      	ldr	r3, [pc, #636]	; (408a30 <_dtoa_r+0xa70>)
  4087b2:	4638      	mov	r0, r7
  4087b4:	4641      	mov	r1, r8
  4087b6:	f001 fee5 	bl	40a584 <__aeabi_dcmplt>
  4087ba:	2800      	cmp	r0, #0
  4087bc:	f040 8286 	bne.w	408ccc <_dtoa_r+0xd0c>
  4087c0:	4650      	mov	r0, sl
  4087c2:	f7fd fa1f 	bl	405c04 <__aeabi_i2d>
  4087c6:	463a      	mov	r2, r7
  4087c8:	4643      	mov	r3, r8
  4087ca:	f7fd fa81 	bl	405cd0 <__aeabi_dmul>
  4087ce:	4b99      	ldr	r3, [pc, #612]	; (408a34 <_dtoa_r+0xa74>)
  4087d0:	2200      	movs	r2, #0
  4087d2:	f7fd f8cb 	bl	40596c <__adddf3>
  4087d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4087d8:	4605      	mov	r5, r0
  4087da:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4087de:	2b00      	cmp	r3, #0
  4087e0:	f000 813e 	beq.w	408a60 <_dtoa_r+0xaa0>
  4087e4:	9b02      	ldr	r3, [sp, #8]
  4087e6:	9315      	str	r3, [sp, #84]	; 0x54
  4087e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4087ea:	9312      	str	r3, [sp, #72]	; 0x48
  4087ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4087ee:	2b00      	cmp	r3, #0
  4087f0:	f000 81fa 	beq.w	408be8 <_dtoa_r+0xc28>
  4087f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4087f6:	4b8c      	ldr	r3, [pc, #560]	; (408a28 <_dtoa_r+0xa68>)
  4087f8:	498f      	ldr	r1, [pc, #572]	; (408a38 <_dtoa_r+0xa78>)
  4087fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4087fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  408802:	2000      	movs	r0, #0
  408804:	f7fd fb8e 	bl	405f24 <__aeabi_ddiv>
  408808:	462a      	mov	r2, r5
  40880a:	4633      	mov	r3, r6
  40880c:	f7fd f8ac 	bl	405968 <__aeabi_dsub>
  408810:	4682      	mov	sl, r0
  408812:	468b      	mov	fp, r1
  408814:	4638      	mov	r0, r7
  408816:	4641      	mov	r1, r8
  408818:	f001 fef2 	bl	40a600 <__aeabi_d2iz>
  40881c:	4605      	mov	r5, r0
  40881e:	f7fd f9f1 	bl	405c04 <__aeabi_i2d>
  408822:	4602      	mov	r2, r0
  408824:	460b      	mov	r3, r1
  408826:	4638      	mov	r0, r7
  408828:	4641      	mov	r1, r8
  40882a:	f7fd f89d 	bl	405968 <__aeabi_dsub>
  40882e:	3530      	adds	r5, #48	; 0x30
  408830:	fa5f f885 	uxtb.w	r8, r5
  408834:	9d04      	ldr	r5, [sp, #16]
  408836:	4606      	mov	r6, r0
  408838:	460f      	mov	r7, r1
  40883a:	f885 8000 	strb.w	r8, [r5]
  40883e:	4602      	mov	r2, r0
  408840:	460b      	mov	r3, r1
  408842:	4650      	mov	r0, sl
  408844:	4659      	mov	r1, fp
  408846:	3501      	adds	r5, #1
  408848:	f001 feba 	bl	40a5c0 <__aeabi_dcmpgt>
  40884c:	2800      	cmp	r0, #0
  40884e:	d154      	bne.n	4088fa <_dtoa_r+0x93a>
  408850:	4632      	mov	r2, r6
  408852:	463b      	mov	r3, r7
  408854:	2000      	movs	r0, #0
  408856:	4976      	ldr	r1, [pc, #472]	; (408a30 <_dtoa_r+0xa70>)
  408858:	f7fd f886 	bl	405968 <__aeabi_dsub>
  40885c:	4602      	mov	r2, r0
  40885e:	460b      	mov	r3, r1
  408860:	4650      	mov	r0, sl
  408862:	4659      	mov	r1, fp
  408864:	f001 feac 	bl	40a5c0 <__aeabi_dcmpgt>
  408868:	2800      	cmp	r0, #0
  40886a:	f040 8270 	bne.w	408d4e <_dtoa_r+0xd8e>
  40886e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408870:	2a01      	cmp	r2, #1
  408872:	f000 8111 	beq.w	408a98 <_dtoa_r+0xad8>
  408876:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408878:	9a04      	ldr	r2, [sp, #16]
  40887a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40887e:	4413      	add	r3, r2
  408880:	4699      	mov	r9, r3
  408882:	e00d      	b.n	4088a0 <_dtoa_r+0x8e0>
  408884:	2000      	movs	r0, #0
  408886:	496a      	ldr	r1, [pc, #424]	; (408a30 <_dtoa_r+0xa70>)
  408888:	f7fd f86e 	bl	405968 <__aeabi_dsub>
  40888c:	4652      	mov	r2, sl
  40888e:	465b      	mov	r3, fp
  408890:	f001 fe78 	bl	40a584 <__aeabi_dcmplt>
  408894:	2800      	cmp	r0, #0
  408896:	f040 8258 	bne.w	408d4a <_dtoa_r+0xd8a>
  40889a:	454d      	cmp	r5, r9
  40889c:	f000 80fa 	beq.w	408a94 <_dtoa_r+0xad4>
  4088a0:	4650      	mov	r0, sl
  4088a2:	4659      	mov	r1, fp
  4088a4:	2200      	movs	r2, #0
  4088a6:	4b65      	ldr	r3, [pc, #404]	; (408a3c <_dtoa_r+0xa7c>)
  4088a8:	f7fd fa12 	bl	405cd0 <__aeabi_dmul>
  4088ac:	2200      	movs	r2, #0
  4088ae:	4b63      	ldr	r3, [pc, #396]	; (408a3c <_dtoa_r+0xa7c>)
  4088b0:	4682      	mov	sl, r0
  4088b2:	468b      	mov	fp, r1
  4088b4:	4630      	mov	r0, r6
  4088b6:	4639      	mov	r1, r7
  4088b8:	f7fd fa0a 	bl	405cd0 <__aeabi_dmul>
  4088bc:	460f      	mov	r7, r1
  4088be:	4606      	mov	r6, r0
  4088c0:	f001 fe9e 	bl	40a600 <__aeabi_d2iz>
  4088c4:	4680      	mov	r8, r0
  4088c6:	f7fd f99d 	bl	405c04 <__aeabi_i2d>
  4088ca:	4602      	mov	r2, r0
  4088cc:	460b      	mov	r3, r1
  4088ce:	4630      	mov	r0, r6
  4088d0:	4639      	mov	r1, r7
  4088d2:	f7fd f849 	bl	405968 <__aeabi_dsub>
  4088d6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4088da:	fa5f f888 	uxtb.w	r8, r8
  4088de:	4652      	mov	r2, sl
  4088e0:	465b      	mov	r3, fp
  4088e2:	f805 8b01 	strb.w	r8, [r5], #1
  4088e6:	4606      	mov	r6, r0
  4088e8:	460f      	mov	r7, r1
  4088ea:	f001 fe4b 	bl	40a584 <__aeabi_dcmplt>
  4088ee:	4632      	mov	r2, r6
  4088f0:	463b      	mov	r3, r7
  4088f2:	2800      	cmp	r0, #0
  4088f4:	d0c6      	beq.n	408884 <_dtoa_r+0x8c4>
  4088f6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4088fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4088fc:	9302      	str	r3, [sp, #8]
  4088fe:	e523      	b.n	408348 <_dtoa_r+0x388>
  408900:	2300      	movs	r3, #0
  408902:	930b      	str	r3, [sp, #44]	; 0x2c
  408904:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408906:	2b00      	cmp	r3, #0
  408908:	f340 80dc 	ble.w	408ac4 <_dtoa_r+0xb04>
  40890c:	461f      	mov	r7, r3
  40890e:	461e      	mov	r6, r3
  408910:	930f      	str	r3, [sp, #60]	; 0x3c
  408912:	930a      	str	r3, [sp, #40]	; 0x28
  408914:	e6f6      	b.n	408704 <_dtoa_r+0x744>
  408916:	2301      	movs	r3, #1
  408918:	930b      	str	r3, [sp, #44]	; 0x2c
  40891a:	e7f3      	b.n	408904 <_dtoa_r+0x944>
  40891c:	f1ba 0f00 	cmp.w	sl, #0
  408920:	f47f ada8 	bne.w	408474 <_dtoa_r+0x4b4>
  408924:	f3cb 0313 	ubfx	r3, fp, #0, #20
  408928:	2b00      	cmp	r3, #0
  40892a:	f47f adba 	bne.w	4084a2 <_dtoa_r+0x4e2>
  40892e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  408932:	0d3f      	lsrs	r7, r7, #20
  408934:	053f      	lsls	r7, r7, #20
  408936:	2f00      	cmp	r7, #0
  408938:	f000 820d 	beq.w	408d56 <_dtoa_r+0xd96>
  40893c:	9b08      	ldr	r3, [sp, #32]
  40893e:	3301      	adds	r3, #1
  408940:	9308      	str	r3, [sp, #32]
  408942:	9b06      	ldr	r3, [sp, #24]
  408944:	3301      	adds	r3, #1
  408946:	9306      	str	r3, [sp, #24]
  408948:	2301      	movs	r3, #1
  40894a:	930c      	str	r3, [sp, #48]	; 0x30
  40894c:	e5ab      	b.n	4084a6 <_dtoa_r+0x4e6>
  40894e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408950:	2b00      	cmp	r3, #0
  408952:	f73f ac42 	bgt.w	4081da <_dtoa_r+0x21a>
  408956:	f040 8221 	bne.w	408d9c <_dtoa_r+0xddc>
  40895a:	2200      	movs	r2, #0
  40895c:	4b38      	ldr	r3, [pc, #224]	; (408a40 <_dtoa_r+0xa80>)
  40895e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408962:	f7fd f9b5 	bl	405cd0 <__aeabi_dmul>
  408966:	4652      	mov	r2, sl
  408968:	465b      	mov	r3, fp
  40896a:	f001 fe1f 	bl	40a5ac <__aeabi_dcmpge>
  40896e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  408972:	4646      	mov	r6, r8
  408974:	2800      	cmp	r0, #0
  408976:	d041      	beq.n	4089fc <_dtoa_r+0xa3c>
  408978:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40897a:	9d04      	ldr	r5, [sp, #16]
  40897c:	43db      	mvns	r3, r3
  40897e:	9302      	str	r3, [sp, #8]
  408980:	4641      	mov	r1, r8
  408982:	4620      	mov	r0, r4
  408984:	f000 fff4 	bl	409970 <_Bfree>
  408988:	2e00      	cmp	r6, #0
  40898a:	f43f acdd 	beq.w	408348 <_dtoa_r+0x388>
  40898e:	e6a7      	b.n	4086e0 <_dtoa_r+0x720>
  408990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408992:	4649      	mov	r1, r9
  408994:	4620      	mov	r0, r4
  408996:	f001 f921 	bl	409bdc <__pow5mult>
  40899a:	4681      	mov	r9, r0
  40899c:	e558      	b.n	408450 <_dtoa_r+0x490>
  40899e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4089a0:	2a00      	cmp	r2, #0
  4089a2:	f000 8187 	beq.w	408cb4 <_dtoa_r+0xcf4>
  4089a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4089aa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4089ac:	9d08      	ldr	r5, [sp, #32]
  4089ae:	e4f2      	b.n	408396 <_dtoa_r+0x3d6>
  4089b0:	f1ba 0f00 	cmp.w	sl, #0
  4089b4:	f47f ad75 	bne.w	4084a2 <_dtoa_r+0x4e2>
  4089b8:	e7b4      	b.n	408924 <_dtoa_r+0x964>
  4089ba:	f000 ffe3 	bl	409984 <__multadd>
  4089be:	4647      	mov	r7, r8
  4089c0:	4606      	mov	r6, r0
  4089c2:	4683      	mov	fp, r0
  4089c4:	e5be      	b.n	408544 <_dtoa_r+0x584>
  4089c6:	4601      	mov	r1, r0
  4089c8:	4620      	mov	r0, r4
  4089ca:	9306      	str	r3, [sp, #24]
  4089cc:	f000 ffd0 	bl	409970 <_Bfree>
  4089d0:	2201      	movs	r2, #1
  4089d2:	9b06      	ldr	r3, [sp, #24]
  4089d4:	e5e0      	b.n	408598 <_dtoa_r+0x5d8>
  4089d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4089d8:	2b02      	cmp	r3, #2
  4089da:	f77f ad96 	ble.w	40850a <_dtoa_r+0x54a>
  4089de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4089e0:	2b00      	cmp	r3, #0
  4089e2:	d1c9      	bne.n	408978 <_dtoa_r+0x9b8>
  4089e4:	4641      	mov	r1, r8
  4089e6:	2205      	movs	r2, #5
  4089e8:	4620      	mov	r0, r4
  4089ea:	f000 ffcb 	bl	409984 <__multadd>
  4089ee:	4601      	mov	r1, r0
  4089f0:	4680      	mov	r8, r0
  4089f2:	4648      	mov	r0, r9
  4089f4:	f001 f994 	bl	409d20 <__mcmp>
  4089f8:	2800      	cmp	r0, #0
  4089fa:	ddbd      	ble.n	408978 <_dtoa_r+0x9b8>
  4089fc:	9a02      	ldr	r2, [sp, #8]
  4089fe:	9904      	ldr	r1, [sp, #16]
  408a00:	2331      	movs	r3, #49	; 0x31
  408a02:	3201      	adds	r2, #1
  408a04:	9202      	str	r2, [sp, #8]
  408a06:	700b      	strb	r3, [r1, #0]
  408a08:	1c4d      	adds	r5, r1, #1
  408a0a:	e7b9      	b.n	408980 <_dtoa_r+0x9c0>
  408a0c:	9a02      	ldr	r2, [sp, #8]
  408a0e:	3201      	adds	r2, #1
  408a10:	9202      	str	r2, [sp, #8]
  408a12:	9a04      	ldr	r2, [sp, #16]
  408a14:	2331      	movs	r3, #49	; 0x31
  408a16:	7013      	strb	r3, [r2, #0]
  408a18:	e652      	b.n	4086c0 <_dtoa_r+0x700>
  408a1a:	2301      	movs	r3, #1
  408a1c:	930b      	str	r3, [sp, #44]	; 0x2c
  408a1e:	e666      	b.n	4086ee <_dtoa_r+0x72e>
  408a20:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  408a24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408a26:	e48f      	b.n	408348 <_dtoa_r+0x388>
  408a28:	0040b1f0 	.word	0x0040b1f0
  408a2c:	0040b1c8 	.word	0x0040b1c8
  408a30:	3ff00000 	.word	0x3ff00000
  408a34:	401c0000 	.word	0x401c0000
  408a38:	3fe00000 	.word	0x3fe00000
  408a3c:	40240000 	.word	0x40240000
  408a40:	40140000 	.word	0x40140000
  408a44:	4650      	mov	r0, sl
  408a46:	f7fd f8dd 	bl	405c04 <__aeabi_i2d>
  408a4a:	463a      	mov	r2, r7
  408a4c:	4643      	mov	r3, r8
  408a4e:	f7fd f93f 	bl	405cd0 <__aeabi_dmul>
  408a52:	2200      	movs	r2, #0
  408a54:	4bc1      	ldr	r3, [pc, #772]	; (408d5c <_dtoa_r+0xd9c>)
  408a56:	f7fc ff89 	bl	40596c <__adddf3>
  408a5a:	4605      	mov	r5, r0
  408a5c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408a60:	4641      	mov	r1, r8
  408a62:	2200      	movs	r2, #0
  408a64:	4bbe      	ldr	r3, [pc, #760]	; (408d60 <_dtoa_r+0xda0>)
  408a66:	4638      	mov	r0, r7
  408a68:	f7fc ff7e 	bl	405968 <__aeabi_dsub>
  408a6c:	462a      	mov	r2, r5
  408a6e:	4633      	mov	r3, r6
  408a70:	4682      	mov	sl, r0
  408a72:	468b      	mov	fp, r1
  408a74:	f001 fda4 	bl	40a5c0 <__aeabi_dcmpgt>
  408a78:	4680      	mov	r8, r0
  408a7a:	2800      	cmp	r0, #0
  408a7c:	f040 8110 	bne.w	408ca0 <_dtoa_r+0xce0>
  408a80:	462a      	mov	r2, r5
  408a82:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  408a86:	4650      	mov	r0, sl
  408a88:	4659      	mov	r1, fp
  408a8a:	f001 fd7b 	bl	40a584 <__aeabi_dcmplt>
  408a8e:	b118      	cbz	r0, 408a98 <_dtoa_r+0xad8>
  408a90:	4646      	mov	r6, r8
  408a92:	e771      	b.n	408978 <_dtoa_r+0x9b8>
  408a94:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408a98:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  408a9c:	f7ff bb8a 	b.w	4081b4 <_dtoa_r+0x1f4>
  408aa0:	9804      	ldr	r0, [sp, #16]
  408aa2:	f7ff babb 	b.w	40801c <_dtoa_r+0x5c>
  408aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408aaa:	970c      	str	r7, [sp, #48]	; 0x30
  408aac:	1afb      	subs	r3, r7, r3
  408aae:	441a      	add	r2, r3
  408ab0:	920d      	str	r2, [sp, #52]	; 0x34
  408ab2:	2700      	movs	r7, #0
  408ab4:	e469      	b.n	40838a <_dtoa_r+0x3ca>
  408ab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  408aba:	f04f 0a02 	mov.w	sl, #2
  408abe:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  408ac2:	e657      	b.n	408774 <_dtoa_r+0x7b4>
  408ac4:	2100      	movs	r1, #0
  408ac6:	2301      	movs	r3, #1
  408ac8:	6461      	str	r1, [r4, #68]	; 0x44
  408aca:	4620      	mov	r0, r4
  408acc:	9325      	str	r3, [sp, #148]	; 0x94
  408ace:	f000 ff29 	bl	409924 <_Balloc>
  408ad2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408ad4:	9004      	str	r0, [sp, #16]
  408ad6:	6420      	str	r0, [r4, #64]	; 0x40
  408ad8:	930a      	str	r3, [sp, #40]	; 0x28
  408ada:	930f      	str	r3, [sp, #60]	; 0x3c
  408adc:	e629      	b.n	408732 <_dtoa_r+0x772>
  408ade:	2a00      	cmp	r2, #0
  408ae0:	46d0      	mov	r8, sl
  408ae2:	f8cd b018 	str.w	fp, [sp, #24]
  408ae6:	469a      	mov	sl, r3
  408ae8:	dd11      	ble.n	408b0e <_dtoa_r+0xb4e>
  408aea:	4649      	mov	r1, r9
  408aec:	2201      	movs	r2, #1
  408aee:	4620      	mov	r0, r4
  408af0:	f001 f8c4 	bl	409c7c <__lshift>
  408af4:	4641      	mov	r1, r8
  408af6:	4681      	mov	r9, r0
  408af8:	f001 f912 	bl	409d20 <__mcmp>
  408afc:	2800      	cmp	r0, #0
  408afe:	f340 8146 	ble.w	408d8e <_dtoa_r+0xdce>
  408b02:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  408b06:	f000 8106 	beq.w	408d16 <_dtoa_r+0xd56>
  408b0a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  408b0e:	46b3      	mov	fp, r6
  408b10:	f887 a000 	strb.w	sl, [r7]
  408b14:	1c7d      	adds	r5, r7, #1
  408b16:	9e06      	ldr	r6, [sp, #24]
  408b18:	e5d2      	b.n	4086c0 <_dtoa_r+0x700>
  408b1a:	d104      	bne.n	408b26 <_dtoa_r+0xb66>
  408b1c:	f01a 0f01 	tst.w	sl, #1
  408b20:	d001      	beq.n	408b26 <_dtoa_r+0xb66>
  408b22:	e5bd      	b.n	4086a0 <_dtoa_r+0x6e0>
  408b24:	4615      	mov	r5, r2
  408b26:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408b2a:	2b30      	cmp	r3, #48	; 0x30
  408b2c:	f105 32ff 	add.w	r2, r5, #4294967295
  408b30:	d0f8      	beq.n	408b24 <_dtoa_r+0xb64>
  408b32:	e5c5      	b.n	4086c0 <_dtoa_r+0x700>
  408b34:	9904      	ldr	r1, [sp, #16]
  408b36:	2230      	movs	r2, #48	; 0x30
  408b38:	700a      	strb	r2, [r1, #0]
  408b3a:	9a02      	ldr	r2, [sp, #8]
  408b3c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408b40:	3201      	adds	r2, #1
  408b42:	9202      	str	r2, [sp, #8]
  408b44:	f7ff bbfc 	b.w	408340 <_dtoa_r+0x380>
  408b48:	f000 80bb 	beq.w	408cc2 <_dtoa_r+0xd02>
  408b4c:	9b02      	ldr	r3, [sp, #8]
  408b4e:	425d      	negs	r5, r3
  408b50:	4b84      	ldr	r3, [pc, #528]	; (408d64 <_dtoa_r+0xda4>)
  408b52:	f005 020f 	and.w	r2, r5, #15
  408b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  408b62:	f7fd f8b5 	bl	405cd0 <__aeabi_dmul>
  408b66:	112d      	asrs	r5, r5, #4
  408b68:	4607      	mov	r7, r0
  408b6a:	4688      	mov	r8, r1
  408b6c:	f000 812c 	beq.w	408dc8 <_dtoa_r+0xe08>
  408b70:	4e7d      	ldr	r6, [pc, #500]	; (408d68 <_dtoa_r+0xda8>)
  408b72:	f04f 0a02 	mov.w	sl, #2
  408b76:	07eb      	lsls	r3, r5, #31
  408b78:	d509      	bpl.n	408b8e <_dtoa_r+0xbce>
  408b7a:	4638      	mov	r0, r7
  408b7c:	4641      	mov	r1, r8
  408b7e:	e9d6 2300 	ldrd	r2, r3, [r6]
  408b82:	f7fd f8a5 	bl	405cd0 <__aeabi_dmul>
  408b86:	f10a 0a01 	add.w	sl, sl, #1
  408b8a:	4607      	mov	r7, r0
  408b8c:	4688      	mov	r8, r1
  408b8e:	106d      	asrs	r5, r5, #1
  408b90:	f106 0608 	add.w	r6, r6, #8
  408b94:	d1ef      	bne.n	408b76 <_dtoa_r+0xbb6>
  408b96:	e608      	b.n	4087aa <_dtoa_r+0x7ea>
  408b98:	6871      	ldr	r1, [r6, #4]
  408b9a:	4620      	mov	r0, r4
  408b9c:	f000 fec2 	bl	409924 <_Balloc>
  408ba0:	6933      	ldr	r3, [r6, #16]
  408ba2:	3302      	adds	r3, #2
  408ba4:	009a      	lsls	r2, r3, #2
  408ba6:	4605      	mov	r5, r0
  408ba8:	f106 010c 	add.w	r1, r6, #12
  408bac:	300c      	adds	r0, #12
  408bae:	f000 fdaf 	bl	409710 <memcpy>
  408bb2:	4629      	mov	r1, r5
  408bb4:	2201      	movs	r2, #1
  408bb6:	4620      	mov	r0, r4
  408bb8:	f001 f860 	bl	409c7c <__lshift>
  408bbc:	9006      	str	r0, [sp, #24]
  408bbe:	e4b5      	b.n	40852c <_dtoa_r+0x56c>
  408bc0:	2b39      	cmp	r3, #57	; 0x39
  408bc2:	f8cd b018 	str.w	fp, [sp, #24]
  408bc6:	46d0      	mov	r8, sl
  408bc8:	f000 80a5 	beq.w	408d16 <_dtoa_r+0xd56>
  408bcc:	f103 0a01 	add.w	sl, r3, #1
  408bd0:	46b3      	mov	fp, r6
  408bd2:	f887 a000 	strb.w	sl, [r7]
  408bd6:	1c7d      	adds	r5, r7, #1
  408bd8:	9e06      	ldr	r6, [sp, #24]
  408bda:	e571      	b.n	4086c0 <_dtoa_r+0x700>
  408bdc:	465a      	mov	r2, fp
  408bde:	46d0      	mov	r8, sl
  408be0:	46b3      	mov	fp, r6
  408be2:	469a      	mov	sl, r3
  408be4:	4616      	mov	r6, r2
  408be6:	e54f      	b.n	408688 <_dtoa_r+0x6c8>
  408be8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408bea:	495e      	ldr	r1, [pc, #376]	; (408d64 <_dtoa_r+0xda4>)
  408bec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408bf0:	462a      	mov	r2, r5
  408bf2:	4633      	mov	r3, r6
  408bf4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  408bf8:	f7fd f86a 	bl	405cd0 <__aeabi_dmul>
  408bfc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  408c00:	4638      	mov	r0, r7
  408c02:	4641      	mov	r1, r8
  408c04:	f001 fcfc 	bl	40a600 <__aeabi_d2iz>
  408c08:	4605      	mov	r5, r0
  408c0a:	f7fc fffb 	bl	405c04 <__aeabi_i2d>
  408c0e:	460b      	mov	r3, r1
  408c10:	4602      	mov	r2, r0
  408c12:	4641      	mov	r1, r8
  408c14:	4638      	mov	r0, r7
  408c16:	f7fc fea7 	bl	405968 <__aeabi_dsub>
  408c1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408c1c:	460f      	mov	r7, r1
  408c1e:	9904      	ldr	r1, [sp, #16]
  408c20:	3530      	adds	r5, #48	; 0x30
  408c22:	2b01      	cmp	r3, #1
  408c24:	700d      	strb	r5, [r1, #0]
  408c26:	4606      	mov	r6, r0
  408c28:	f101 0501 	add.w	r5, r1, #1
  408c2c:	d026      	beq.n	408c7c <_dtoa_r+0xcbc>
  408c2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408c30:	9a04      	ldr	r2, [sp, #16]
  408c32:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408d70 <_dtoa_r+0xdb0>
  408c36:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  408c3a:	4413      	add	r3, r2
  408c3c:	f04f 0a00 	mov.w	sl, #0
  408c40:	4699      	mov	r9, r3
  408c42:	4652      	mov	r2, sl
  408c44:	465b      	mov	r3, fp
  408c46:	4630      	mov	r0, r6
  408c48:	4639      	mov	r1, r7
  408c4a:	f7fd f841 	bl	405cd0 <__aeabi_dmul>
  408c4e:	460f      	mov	r7, r1
  408c50:	4606      	mov	r6, r0
  408c52:	f001 fcd5 	bl	40a600 <__aeabi_d2iz>
  408c56:	4680      	mov	r8, r0
  408c58:	f7fc ffd4 	bl	405c04 <__aeabi_i2d>
  408c5c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408c60:	4602      	mov	r2, r0
  408c62:	460b      	mov	r3, r1
  408c64:	4630      	mov	r0, r6
  408c66:	4639      	mov	r1, r7
  408c68:	f7fc fe7e 	bl	405968 <__aeabi_dsub>
  408c6c:	f805 8b01 	strb.w	r8, [r5], #1
  408c70:	454d      	cmp	r5, r9
  408c72:	4606      	mov	r6, r0
  408c74:	460f      	mov	r7, r1
  408c76:	d1e4      	bne.n	408c42 <_dtoa_r+0xc82>
  408c78:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408c7c:	4b3b      	ldr	r3, [pc, #236]	; (408d6c <_dtoa_r+0xdac>)
  408c7e:	2200      	movs	r2, #0
  408c80:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408c84:	f7fc fe72 	bl	40596c <__adddf3>
  408c88:	4632      	mov	r2, r6
  408c8a:	463b      	mov	r3, r7
  408c8c:	f001 fc7a 	bl	40a584 <__aeabi_dcmplt>
  408c90:	2800      	cmp	r0, #0
  408c92:	d046      	beq.n	408d22 <_dtoa_r+0xd62>
  408c94:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408c96:	9302      	str	r3, [sp, #8]
  408c98:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408c9c:	f7ff bb43 	b.w	408326 <_dtoa_r+0x366>
  408ca0:	f04f 0800 	mov.w	r8, #0
  408ca4:	4646      	mov	r6, r8
  408ca6:	e6a9      	b.n	4089fc <_dtoa_r+0xa3c>
  408ca8:	9b08      	ldr	r3, [sp, #32]
  408caa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408cac:	1a9d      	subs	r5, r3, r2
  408cae:	2300      	movs	r3, #0
  408cb0:	f7ff bb71 	b.w	408396 <_dtoa_r+0x3d6>
  408cb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  408cb6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408cb8:	9d08      	ldr	r5, [sp, #32]
  408cba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  408cbe:	f7ff bb6a 	b.w	408396 <_dtoa_r+0x3d6>
  408cc2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  408cc6:	f04f 0a02 	mov.w	sl, #2
  408cca:	e56e      	b.n	4087aa <_dtoa_r+0x7ea>
  408ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408cce:	2b00      	cmp	r3, #0
  408cd0:	f43f aeb8 	beq.w	408a44 <_dtoa_r+0xa84>
  408cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408cd6:	2b00      	cmp	r3, #0
  408cd8:	f77f aede 	ble.w	408a98 <_dtoa_r+0xad8>
  408cdc:	2200      	movs	r2, #0
  408cde:	4b24      	ldr	r3, [pc, #144]	; (408d70 <_dtoa_r+0xdb0>)
  408ce0:	4638      	mov	r0, r7
  408ce2:	4641      	mov	r1, r8
  408ce4:	f7fc fff4 	bl	405cd0 <__aeabi_dmul>
  408ce8:	4607      	mov	r7, r0
  408cea:	4688      	mov	r8, r1
  408cec:	f10a 0001 	add.w	r0, sl, #1
  408cf0:	f7fc ff88 	bl	405c04 <__aeabi_i2d>
  408cf4:	463a      	mov	r2, r7
  408cf6:	4643      	mov	r3, r8
  408cf8:	f7fc ffea 	bl	405cd0 <__aeabi_dmul>
  408cfc:	2200      	movs	r2, #0
  408cfe:	4b17      	ldr	r3, [pc, #92]	; (408d5c <_dtoa_r+0xd9c>)
  408d00:	f7fc fe34 	bl	40596c <__adddf3>
  408d04:	9a02      	ldr	r2, [sp, #8]
  408d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408d08:	9312      	str	r3, [sp, #72]	; 0x48
  408d0a:	3a01      	subs	r2, #1
  408d0c:	4605      	mov	r5, r0
  408d0e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408d12:	9215      	str	r2, [sp, #84]	; 0x54
  408d14:	e56a      	b.n	4087ec <_dtoa_r+0x82c>
  408d16:	2239      	movs	r2, #57	; 0x39
  408d18:	46b3      	mov	fp, r6
  408d1a:	703a      	strb	r2, [r7, #0]
  408d1c:	9e06      	ldr	r6, [sp, #24]
  408d1e:	1c7d      	adds	r5, r7, #1
  408d20:	e4c0      	b.n	4086a4 <_dtoa_r+0x6e4>
  408d22:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  408d26:	2000      	movs	r0, #0
  408d28:	4910      	ldr	r1, [pc, #64]	; (408d6c <_dtoa_r+0xdac>)
  408d2a:	f7fc fe1d 	bl	405968 <__aeabi_dsub>
  408d2e:	4632      	mov	r2, r6
  408d30:	463b      	mov	r3, r7
  408d32:	f001 fc45 	bl	40a5c0 <__aeabi_dcmpgt>
  408d36:	b908      	cbnz	r0, 408d3c <_dtoa_r+0xd7c>
  408d38:	e6ae      	b.n	408a98 <_dtoa_r+0xad8>
  408d3a:	4615      	mov	r5, r2
  408d3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408d40:	2b30      	cmp	r3, #48	; 0x30
  408d42:	f105 32ff 	add.w	r2, r5, #4294967295
  408d46:	d0f8      	beq.n	408d3a <_dtoa_r+0xd7a>
  408d48:	e5d7      	b.n	4088fa <_dtoa_r+0x93a>
  408d4a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408d4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408d50:	9302      	str	r3, [sp, #8]
  408d52:	f7ff bae8 	b.w	408326 <_dtoa_r+0x366>
  408d56:	970c      	str	r7, [sp, #48]	; 0x30
  408d58:	f7ff bba5 	b.w	4084a6 <_dtoa_r+0x4e6>
  408d5c:	401c0000 	.word	0x401c0000
  408d60:	40140000 	.word	0x40140000
  408d64:	0040b1f0 	.word	0x0040b1f0
  408d68:	0040b1c8 	.word	0x0040b1c8
  408d6c:	3fe00000 	.word	0x3fe00000
  408d70:	40240000 	.word	0x40240000
  408d74:	2b39      	cmp	r3, #57	; 0x39
  408d76:	f8cd b018 	str.w	fp, [sp, #24]
  408d7a:	46d0      	mov	r8, sl
  408d7c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408d80:	469a      	mov	sl, r3
  408d82:	d0c8      	beq.n	408d16 <_dtoa_r+0xd56>
  408d84:	f1bb 0f00 	cmp.w	fp, #0
  408d88:	f73f aebf 	bgt.w	408b0a <_dtoa_r+0xb4a>
  408d8c:	e6bf      	b.n	408b0e <_dtoa_r+0xb4e>
  408d8e:	f47f aebe 	bne.w	408b0e <_dtoa_r+0xb4e>
  408d92:	f01a 0f01 	tst.w	sl, #1
  408d96:	f43f aeba 	beq.w	408b0e <_dtoa_r+0xb4e>
  408d9a:	e6b2      	b.n	408b02 <_dtoa_r+0xb42>
  408d9c:	f04f 0800 	mov.w	r8, #0
  408da0:	4646      	mov	r6, r8
  408da2:	e5e9      	b.n	408978 <_dtoa_r+0x9b8>
  408da4:	4631      	mov	r1, r6
  408da6:	2300      	movs	r3, #0
  408da8:	220a      	movs	r2, #10
  408daa:	4620      	mov	r0, r4
  408dac:	f000 fdea 	bl	409984 <__multadd>
  408db0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408db2:	2b00      	cmp	r3, #0
  408db4:	4606      	mov	r6, r0
  408db6:	dd0a      	ble.n	408dce <_dtoa_r+0xe0e>
  408db8:	930a      	str	r3, [sp, #40]	; 0x28
  408dba:	f7ff bbaa 	b.w	408512 <_dtoa_r+0x552>
  408dbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408dc0:	2b02      	cmp	r3, #2
  408dc2:	dc23      	bgt.n	408e0c <_dtoa_r+0xe4c>
  408dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408dc6:	e43b      	b.n	408640 <_dtoa_r+0x680>
  408dc8:	f04f 0a02 	mov.w	sl, #2
  408dcc:	e4ed      	b.n	4087aa <_dtoa_r+0x7ea>
  408dce:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408dd0:	2b02      	cmp	r3, #2
  408dd2:	dc1b      	bgt.n	408e0c <_dtoa_r+0xe4c>
  408dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408dd6:	e7ef      	b.n	408db8 <_dtoa_r+0xdf8>
  408dd8:	2500      	movs	r5, #0
  408dda:	6465      	str	r5, [r4, #68]	; 0x44
  408ddc:	4629      	mov	r1, r5
  408dde:	4620      	mov	r0, r4
  408de0:	f000 fda0 	bl	409924 <_Balloc>
  408de4:	f04f 33ff 	mov.w	r3, #4294967295
  408de8:	930a      	str	r3, [sp, #40]	; 0x28
  408dea:	930f      	str	r3, [sp, #60]	; 0x3c
  408dec:	2301      	movs	r3, #1
  408dee:	9004      	str	r0, [sp, #16]
  408df0:	9525      	str	r5, [sp, #148]	; 0x94
  408df2:	6420      	str	r0, [r4, #64]	; 0x40
  408df4:	930b      	str	r3, [sp, #44]	; 0x2c
  408df6:	f7ff b9dd 	b.w	4081b4 <_dtoa_r+0x1f4>
  408dfa:	2501      	movs	r5, #1
  408dfc:	f7ff b9a5 	b.w	40814a <_dtoa_r+0x18a>
  408e00:	f43f ab69 	beq.w	4084d6 <_dtoa_r+0x516>
  408e04:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  408e08:	f7ff bbf9 	b.w	4085fe <_dtoa_r+0x63e>
  408e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408e0e:	930a      	str	r3, [sp, #40]	; 0x28
  408e10:	e5e5      	b.n	4089de <_dtoa_r+0xa1e>
  408e12:	bf00      	nop

00408e14 <__libc_fini_array>:
  408e14:	b538      	push	{r3, r4, r5, lr}
  408e16:	4c0a      	ldr	r4, [pc, #40]	; (408e40 <__libc_fini_array+0x2c>)
  408e18:	4d0a      	ldr	r5, [pc, #40]	; (408e44 <__libc_fini_array+0x30>)
  408e1a:	1b64      	subs	r4, r4, r5
  408e1c:	10a4      	asrs	r4, r4, #2
  408e1e:	d00a      	beq.n	408e36 <__libc_fini_array+0x22>
  408e20:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408e24:	3b01      	subs	r3, #1
  408e26:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408e2a:	3c01      	subs	r4, #1
  408e2c:	f855 3904 	ldr.w	r3, [r5], #-4
  408e30:	4798      	blx	r3
  408e32:	2c00      	cmp	r4, #0
  408e34:	d1f9      	bne.n	408e2a <__libc_fini_array+0x16>
  408e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408e3a:	f002 bacf 	b.w	40b3dc <_fini>
  408e3e:	bf00      	nop
  408e40:	0040b3ec 	.word	0x0040b3ec
  408e44:	0040b3e8 	.word	0x0040b3e8

00408e48 <_malloc_trim_r>:
  408e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408e4a:	4f24      	ldr	r7, [pc, #144]	; (408edc <_malloc_trim_r+0x94>)
  408e4c:	460c      	mov	r4, r1
  408e4e:	4606      	mov	r6, r0
  408e50:	f000 fd5c 	bl	40990c <__malloc_lock>
  408e54:	68bb      	ldr	r3, [r7, #8]
  408e56:	685d      	ldr	r5, [r3, #4]
  408e58:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408e5c:	310f      	adds	r1, #15
  408e5e:	f025 0503 	bic.w	r5, r5, #3
  408e62:	4429      	add	r1, r5
  408e64:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408e68:	f021 010f 	bic.w	r1, r1, #15
  408e6c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408e70:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408e74:	db07      	blt.n	408e86 <_malloc_trim_r+0x3e>
  408e76:	2100      	movs	r1, #0
  408e78:	4630      	mov	r0, r6
  408e7a:	f001 f9f3 	bl	40a264 <_sbrk_r>
  408e7e:	68bb      	ldr	r3, [r7, #8]
  408e80:	442b      	add	r3, r5
  408e82:	4298      	cmp	r0, r3
  408e84:	d004      	beq.n	408e90 <_malloc_trim_r+0x48>
  408e86:	4630      	mov	r0, r6
  408e88:	f000 fd46 	bl	409918 <__malloc_unlock>
  408e8c:	2000      	movs	r0, #0
  408e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408e90:	4261      	negs	r1, r4
  408e92:	4630      	mov	r0, r6
  408e94:	f001 f9e6 	bl	40a264 <_sbrk_r>
  408e98:	3001      	adds	r0, #1
  408e9a:	d00d      	beq.n	408eb8 <_malloc_trim_r+0x70>
  408e9c:	4b10      	ldr	r3, [pc, #64]	; (408ee0 <_malloc_trim_r+0x98>)
  408e9e:	68ba      	ldr	r2, [r7, #8]
  408ea0:	6819      	ldr	r1, [r3, #0]
  408ea2:	1b2d      	subs	r5, r5, r4
  408ea4:	f045 0501 	orr.w	r5, r5, #1
  408ea8:	4630      	mov	r0, r6
  408eaa:	1b09      	subs	r1, r1, r4
  408eac:	6055      	str	r5, [r2, #4]
  408eae:	6019      	str	r1, [r3, #0]
  408eb0:	f000 fd32 	bl	409918 <__malloc_unlock>
  408eb4:	2001      	movs	r0, #1
  408eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408eb8:	2100      	movs	r1, #0
  408eba:	4630      	mov	r0, r6
  408ebc:	f001 f9d2 	bl	40a264 <_sbrk_r>
  408ec0:	68ba      	ldr	r2, [r7, #8]
  408ec2:	1a83      	subs	r3, r0, r2
  408ec4:	2b0f      	cmp	r3, #15
  408ec6:	ddde      	ble.n	408e86 <_malloc_trim_r+0x3e>
  408ec8:	4c06      	ldr	r4, [pc, #24]	; (408ee4 <_malloc_trim_r+0x9c>)
  408eca:	4905      	ldr	r1, [pc, #20]	; (408ee0 <_malloc_trim_r+0x98>)
  408ecc:	6824      	ldr	r4, [r4, #0]
  408ece:	f043 0301 	orr.w	r3, r3, #1
  408ed2:	1b00      	subs	r0, r0, r4
  408ed4:	6053      	str	r3, [r2, #4]
  408ed6:	6008      	str	r0, [r1, #0]
  408ed8:	e7d5      	b.n	408e86 <_malloc_trim_r+0x3e>
  408eda:	bf00      	nop
  408edc:	20000a20 	.word	0x20000a20
  408ee0:	200061c8 	.word	0x200061c8
  408ee4:	20000e28 	.word	0x20000e28

00408ee8 <_free_r>:
  408ee8:	2900      	cmp	r1, #0
  408eea:	d044      	beq.n	408f76 <_free_r+0x8e>
  408eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408ef0:	460d      	mov	r5, r1
  408ef2:	4680      	mov	r8, r0
  408ef4:	f000 fd0a 	bl	40990c <__malloc_lock>
  408ef8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408efc:	4969      	ldr	r1, [pc, #420]	; (4090a4 <_free_r+0x1bc>)
  408efe:	f027 0301 	bic.w	r3, r7, #1
  408f02:	f1a5 0408 	sub.w	r4, r5, #8
  408f06:	18e2      	adds	r2, r4, r3
  408f08:	688e      	ldr	r6, [r1, #8]
  408f0a:	6850      	ldr	r0, [r2, #4]
  408f0c:	42b2      	cmp	r2, r6
  408f0e:	f020 0003 	bic.w	r0, r0, #3
  408f12:	d05e      	beq.n	408fd2 <_free_r+0xea>
  408f14:	07fe      	lsls	r6, r7, #31
  408f16:	6050      	str	r0, [r2, #4]
  408f18:	d40b      	bmi.n	408f32 <_free_r+0x4a>
  408f1a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408f1e:	1be4      	subs	r4, r4, r7
  408f20:	f101 0e08 	add.w	lr, r1, #8
  408f24:	68a5      	ldr	r5, [r4, #8]
  408f26:	4575      	cmp	r5, lr
  408f28:	443b      	add	r3, r7
  408f2a:	d06d      	beq.n	409008 <_free_r+0x120>
  408f2c:	68e7      	ldr	r7, [r4, #12]
  408f2e:	60ef      	str	r7, [r5, #12]
  408f30:	60bd      	str	r5, [r7, #8]
  408f32:	1815      	adds	r5, r2, r0
  408f34:	686d      	ldr	r5, [r5, #4]
  408f36:	07ed      	lsls	r5, r5, #31
  408f38:	d53e      	bpl.n	408fb8 <_free_r+0xd0>
  408f3a:	f043 0201 	orr.w	r2, r3, #1
  408f3e:	6062      	str	r2, [r4, #4]
  408f40:	50e3      	str	r3, [r4, r3]
  408f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408f46:	d217      	bcs.n	408f78 <_free_r+0x90>
  408f48:	08db      	lsrs	r3, r3, #3
  408f4a:	1c58      	adds	r0, r3, #1
  408f4c:	109a      	asrs	r2, r3, #2
  408f4e:	684d      	ldr	r5, [r1, #4]
  408f50:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408f54:	60a7      	str	r7, [r4, #8]
  408f56:	2301      	movs	r3, #1
  408f58:	4093      	lsls	r3, r2
  408f5a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  408f5e:	432b      	orrs	r3, r5
  408f60:	3a08      	subs	r2, #8
  408f62:	60e2      	str	r2, [r4, #12]
  408f64:	604b      	str	r3, [r1, #4]
  408f66:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408f6a:	60fc      	str	r4, [r7, #12]
  408f6c:	4640      	mov	r0, r8
  408f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408f72:	f000 bcd1 	b.w	409918 <__malloc_unlock>
  408f76:	4770      	bx	lr
  408f78:	0a5a      	lsrs	r2, r3, #9
  408f7a:	2a04      	cmp	r2, #4
  408f7c:	d852      	bhi.n	409024 <_free_r+0x13c>
  408f7e:	099a      	lsrs	r2, r3, #6
  408f80:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408f84:	00ff      	lsls	r7, r7, #3
  408f86:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408f8a:	19c8      	adds	r0, r1, r7
  408f8c:	59ca      	ldr	r2, [r1, r7]
  408f8e:	3808      	subs	r0, #8
  408f90:	4290      	cmp	r0, r2
  408f92:	d04f      	beq.n	409034 <_free_r+0x14c>
  408f94:	6851      	ldr	r1, [r2, #4]
  408f96:	f021 0103 	bic.w	r1, r1, #3
  408f9a:	428b      	cmp	r3, r1
  408f9c:	d232      	bcs.n	409004 <_free_r+0x11c>
  408f9e:	6892      	ldr	r2, [r2, #8]
  408fa0:	4290      	cmp	r0, r2
  408fa2:	d1f7      	bne.n	408f94 <_free_r+0xac>
  408fa4:	68c3      	ldr	r3, [r0, #12]
  408fa6:	60a0      	str	r0, [r4, #8]
  408fa8:	60e3      	str	r3, [r4, #12]
  408faa:	609c      	str	r4, [r3, #8]
  408fac:	60c4      	str	r4, [r0, #12]
  408fae:	4640      	mov	r0, r8
  408fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408fb4:	f000 bcb0 	b.w	409918 <__malloc_unlock>
  408fb8:	6895      	ldr	r5, [r2, #8]
  408fba:	4f3b      	ldr	r7, [pc, #236]	; (4090a8 <_free_r+0x1c0>)
  408fbc:	42bd      	cmp	r5, r7
  408fbe:	4403      	add	r3, r0
  408fc0:	d040      	beq.n	409044 <_free_r+0x15c>
  408fc2:	68d0      	ldr	r0, [r2, #12]
  408fc4:	60e8      	str	r0, [r5, #12]
  408fc6:	f043 0201 	orr.w	r2, r3, #1
  408fca:	6085      	str	r5, [r0, #8]
  408fcc:	6062      	str	r2, [r4, #4]
  408fce:	50e3      	str	r3, [r4, r3]
  408fd0:	e7b7      	b.n	408f42 <_free_r+0x5a>
  408fd2:	07ff      	lsls	r7, r7, #31
  408fd4:	4403      	add	r3, r0
  408fd6:	d407      	bmi.n	408fe8 <_free_r+0x100>
  408fd8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408fdc:	1aa4      	subs	r4, r4, r2
  408fde:	4413      	add	r3, r2
  408fe0:	68a0      	ldr	r0, [r4, #8]
  408fe2:	68e2      	ldr	r2, [r4, #12]
  408fe4:	60c2      	str	r2, [r0, #12]
  408fe6:	6090      	str	r0, [r2, #8]
  408fe8:	4a30      	ldr	r2, [pc, #192]	; (4090ac <_free_r+0x1c4>)
  408fea:	6812      	ldr	r2, [r2, #0]
  408fec:	f043 0001 	orr.w	r0, r3, #1
  408ff0:	4293      	cmp	r3, r2
  408ff2:	6060      	str	r0, [r4, #4]
  408ff4:	608c      	str	r4, [r1, #8]
  408ff6:	d3b9      	bcc.n	408f6c <_free_r+0x84>
  408ff8:	4b2d      	ldr	r3, [pc, #180]	; (4090b0 <_free_r+0x1c8>)
  408ffa:	4640      	mov	r0, r8
  408ffc:	6819      	ldr	r1, [r3, #0]
  408ffe:	f7ff ff23 	bl	408e48 <_malloc_trim_r>
  409002:	e7b3      	b.n	408f6c <_free_r+0x84>
  409004:	4610      	mov	r0, r2
  409006:	e7cd      	b.n	408fa4 <_free_r+0xbc>
  409008:	1811      	adds	r1, r2, r0
  40900a:	6849      	ldr	r1, [r1, #4]
  40900c:	07c9      	lsls	r1, r1, #31
  40900e:	d444      	bmi.n	40909a <_free_r+0x1b2>
  409010:	6891      	ldr	r1, [r2, #8]
  409012:	68d2      	ldr	r2, [r2, #12]
  409014:	60ca      	str	r2, [r1, #12]
  409016:	4403      	add	r3, r0
  409018:	f043 0001 	orr.w	r0, r3, #1
  40901c:	6091      	str	r1, [r2, #8]
  40901e:	6060      	str	r0, [r4, #4]
  409020:	50e3      	str	r3, [r4, r3]
  409022:	e7a3      	b.n	408f6c <_free_r+0x84>
  409024:	2a14      	cmp	r2, #20
  409026:	d816      	bhi.n	409056 <_free_r+0x16e>
  409028:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40902c:	00ff      	lsls	r7, r7, #3
  40902e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  409032:	e7aa      	b.n	408f8a <_free_r+0xa2>
  409034:	10aa      	asrs	r2, r5, #2
  409036:	2301      	movs	r3, #1
  409038:	684d      	ldr	r5, [r1, #4]
  40903a:	4093      	lsls	r3, r2
  40903c:	432b      	orrs	r3, r5
  40903e:	604b      	str	r3, [r1, #4]
  409040:	4603      	mov	r3, r0
  409042:	e7b0      	b.n	408fa6 <_free_r+0xbe>
  409044:	f043 0201 	orr.w	r2, r3, #1
  409048:	614c      	str	r4, [r1, #20]
  40904a:	610c      	str	r4, [r1, #16]
  40904c:	60e5      	str	r5, [r4, #12]
  40904e:	60a5      	str	r5, [r4, #8]
  409050:	6062      	str	r2, [r4, #4]
  409052:	50e3      	str	r3, [r4, r3]
  409054:	e78a      	b.n	408f6c <_free_r+0x84>
  409056:	2a54      	cmp	r2, #84	; 0x54
  409058:	d806      	bhi.n	409068 <_free_r+0x180>
  40905a:	0b1a      	lsrs	r2, r3, #12
  40905c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  409060:	00ff      	lsls	r7, r7, #3
  409062:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  409066:	e790      	b.n	408f8a <_free_r+0xa2>
  409068:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40906c:	d806      	bhi.n	40907c <_free_r+0x194>
  40906e:	0bda      	lsrs	r2, r3, #15
  409070:	f102 0778 	add.w	r7, r2, #120	; 0x78
  409074:	00ff      	lsls	r7, r7, #3
  409076:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40907a:	e786      	b.n	408f8a <_free_r+0xa2>
  40907c:	f240 5054 	movw	r0, #1364	; 0x554
  409080:	4282      	cmp	r2, r0
  409082:	d806      	bhi.n	409092 <_free_r+0x1aa>
  409084:	0c9a      	lsrs	r2, r3, #18
  409086:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40908a:	00ff      	lsls	r7, r7, #3
  40908c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  409090:	e77b      	b.n	408f8a <_free_r+0xa2>
  409092:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  409096:	257e      	movs	r5, #126	; 0x7e
  409098:	e777      	b.n	408f8a <_free_r+0xa2>
  40909a:	f043 0101 	orr.w	r1, r3, #1
  40909e:	6061      	str	r1, [r4, #4]
  4090a0:	6013      	str	r3, [r2, #0]
  4090a2:	e763      	b.n	408f6c <_free_r+0x84>
  4090a4:	20000a20 	.word	0x20000a20
  4090a8:	20000a28 	.word	0x20000a28
  4090ac:	20000e2c 	.word	0x20000e2c
  4090b0:	200061f8 	.word	0x200061f8

004090b4 <_localeconv_r>:
  4090b4:	4a04      	ldr	r2, [pc, #16]	; (4090c8 <_localeconv_r+0x14>)
  4090b6:	4b05      	ldr	r3, [pc, #20]	; (4090cc <_localeconv_r+0x18>)
  4090b8:	6812      	ldr	r2, [r2, #0]
  4090ba:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4090bc:	2800      	cmp	r0, #0
  4090be:	bf08      	it	eq
  4090c0:	4618      	moveq	r0, r3
  4090c2:	30f0      	adds	r0, #240	; 0xf0
  4090c4:	4770      	bx	lr
  4090c6:	bf00      	nop
  4090c8:	20000484 	.word	0x20000484
  4090cc:	200008b4 	.word	0x200008b4

004090d0 <__retarget_lock_acquire_recursive>:
  4090d0:	4770      	bx	lr
  4090d2:	bf00      	nop

004090d4 <__retarget_lock_release_recursive>:
  4090d4:	4770      	bx	lr
  4090d6:	bf00      	nop

004090d8 <_malloc_r>:
  4090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4090dc:	f101 060b 	add.w	r6, r1, #11
  4090e0:	2e16      	cmp	r6, #22
  4090e2:	b083      	sub	sp, #12
  4090e4:	4605      	mov	r5, r0
  4090e6:	f240 809e 	bls.w	409226 <_malloc_r+0x14e>
  4090ea:	f036 0607 	bics.w	r6, r6, #7
  4090ee:	f100 80bd 	bmi.w	40926c <_malloc_r+0x194>
  4090f2:	42b1      	cmp	r1, r6
  4090f4:	f200 80ba 	bhi.w	40926c <_malloc_r+0x194>
  4090f8:	f000 fc08 	bl	40990c <__malloc_lock>
  4090fc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  409100:	f0c0 8293 	bcc.w	40962a <_malloc_r+0x552>
  409104:	0a73      	lsrs	r3, r6, #9
  409106:	f000 80b8 	beq.w	40927a <_malloc_r+0x1a2>
  40910a:	2b04      	cmp	r3, #4
  40910c:	f200 8179 	bhi.w	409402 <_malloc_r+0x32a>
  409110:	09b3      	lsrs	r3, r6, #6
  409112:	f103 0039 	add.w	r0, r3, #57	; 0x39
  409116:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40911a:	00c3      	lsls	r3, r0, #3
  40911c:	4fbf      	ldr	r7, [pc, #764]	; (40941c <_malloc_r+0x344>)
  40911e:	443b      	add	r3, r7
  409120:	f1a3 0108 	sub.w	r1, r3, #8
  409124:	685c      	ldr	r4, [r3, #4]
  409126:	42a1      	cmp	r1, r4
  409128:	d106      	bne.n	409138 <_malloc_r+0x60>
  40912a:	e00c      	b.n	409146 <_malloc_r+0x6e>
  40912c:	2a00      	cmp	r2, #0
  40912e:	f280 80aa 	bge.w	409286 <_malloc_r+0x1ae>
  409132:	68e4      	ldr	r4, [r4, #12]
  409134:	42a1      	cmp	r1, r4
  409136:	d006      	beq.n	409146 <_malloc_r+0x6e>
  409138:	6863      	ldr	r3, [r4, #4]
  40913a:	f023 0303 	bic.w	r3, r3, #3
  40913e:	1b9a      	subs	r2, r3, r6
  409140:	2a0f      	cmp	r2, #15
  409142:	ddf3      	ble.n	40912c <_malloc_r+0x54>
  409144:	4670      	mov	r0, lr
  409146:	693c      	ldr	r4, [r7, #16]
  409148:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 409430 <_malloc_r+0x358>
  40914c:	4574      	cmp	r4, lr
  40914e:	f000 81ab 	beq.w	4094a8 <_malloc_r+0x3d0>
  409152:	6863      	ldr	r3, [r4, #4]
  409154:	f023 0303 	bic.w	r3, r3, #3
  409158:	1b9a      	subs	r2, r3, r6
  40915a:	2a0f      	cmp	r2, #15
  40915c:	f300 8190 	bgt.w	409480 <_malloc_r+0x3a8>
  409160:	2a00      	cmp	r2, #0
  409162:	f8c7 e014 	str.w	lr, [r7, #20]
  409166:	f8c7 e010 	str.w	lr, [r7, #16]
  40916a:	f280 809d 	bge.w	4092a8 <_malloc_r+0x1d0>
  40916e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  409172:	f080 8161 	bcs.w	409438 <_malloc_r+0x360>
  409176:	08db      	lsrs	r3, r3, #3
  409178:	f103 0c01 	add.w	ip, r3, #1
  40917c:	1099      	asrs	r1, r3, #2
  40917e:	687a      	ldr	r2, [r7, #4]
  409180:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  409184:	f8c4 8008 	str.w	r8, [r4, #8]
  409188:	2301      	movs	r3, #1
  40918a:	408b      	lsls	r3, r1
  40918c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  409190:	4313      	orrs	r3, r2
  409192:	3908      	subs	r1, #8
  409194:	60e1      	str	r1, [r4, #12]
  409196:	607b      	str	r3, [r7, #4]
  409198:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40919c:	f8c8 400c 	str.w	r4, [r8, #12]
  4091a0:	1082      	asrs	r2, r0, #2
  4091a2:	2401      	movs	r4, #1
  4091a4:	4094      	lsls	r4, r2
  4091a6:	429c      	cmp	r4, r3
  4091a8:	f200 808b 	bhi.w	4092c2 <_malloc_r+0x1ea>
  4091ac:	421c      	tst	r4, r3
  4091ae:	d106      	bne.n	4091be <_malloc_r+0xe6>
  4091b0:	f020 0003 	bic.w	r0, r0, #3
  4091b4:	0064      	lsls	r4, r4, #1
  4091b6:	421c      	tst	r4, r3
  4091b8:	f100 0004 	add.w	r0, r0, #4
  4091bc:	d0fa      	beq.n	4091b4 <_malloc_r+0xdc>
  4091be:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4091c2:	46cc      	mov	ip, r9
  4091c4:	4680      	mov	r8, r0
  4091c6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4091ca:	459c      	cmp	ip, r3
  4091cc:	d107      	bne.n	4091de <_malloc_r+0x106>
  4091ce:	e16d      	b.n	4094ac <_malloc_r+0x3d4>
  4091d0:	2a00      	cmp	r2, #0
  4091d2:	f280 817b 	bge.w	4094cc <_malloc_r+0x3f4>
  4091d6:	68db      	ldr	r3, [r3, #12]
  4091d8:	459c      	cmp	ip, r3
  4091da:	f000 8167 	beq.w	4094ac <_malloc_r+0x3d4>
  4091de:	6859      	ldr	r1, [r3, #4]
  4091e0:	f021 0103 	bic.w	r1, r1, #3
  4091e4:	1b8a      	subs	r2, r1, r6
  4091e6:	2a0f      	cmp	r2, #15
  4091e8:	ddf2      	ble.n	4091d0 <_malloc_r+0xf8>
  4091ea:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4091ee:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4091f2:	9300      	str	r3, [sp, #0]
  4091f4:	199c      	adds	r4, r3, r6
  4091f6:	4628      	mov	r0, r5
  4091f8:	f046 0601 	orr.w	r6, r6, #1
  4091fc:	f042 0501 	orr.w	r5, r2, #1
  409200:	605e      	str	r6, [r3, #4]
  409202:	f8c8 c00c 	str.w	ip, [r8, #12]
  409206:	f8cc 8008 	str.w	r8, [ip, #8]
  40920a:	617c      	str	r4, [r7, #20]
  40920c:	613c      	str	r4, [r7, #16]
  40920e:	f8c4 e00c 	str.w	lr, [r4, #12]
  409212:	f8c4 e008 	str.w	lr, [r4, #8]
  409216:	6065      	str	r5, [r4, #4]
  409218:	505a      	str	r2, [r3, r1]
  40921a:	f000 fb7d 	bl	409918 <__malloc_unlock>
  40921e:	9b00      	ldr	r3, [sp, #0]
  409220:	f103 0408 	add.w	r4, r3, #8
  409224:	e01e      	b.n	409264 <_malloc_r+0x18c>
  409226:	2910      	cmp	r1, #16
  409228:	d820      	bhi.n	40926c <_malloc_r+0x194>
  40922a:	f000 fb6f 	bl	40990c <__malloc_lock>
  40922e:	2610      	movs	r6, #16
  409230:	2318      	movs	r3, #24
  409232:	2002      	movs	r0, #2
  409234:	4f79      	ldr	r7, [pc, #484]	; (40941c <_malloc_r+0x344>)
  409236:	443b      	add	r3, r7
  409238:	f1a3 0208 	sub.w	r2, r3, #8
  40923c:	685c      	ldr	r4, [r3, #4]
  40923e:	4294      	cmp	r4, r2
  409240:	f000 813d 	beq.w	4094be <_malloc_r+0x3e6>
  409244:	6863      	ldr	r3, [r4, #4]
  409246:	68e1      	ldr	r1, [r4, #12]
  409248:	68a6      	ldr	r6, [r4, #8]
  40924a:	f023 0303 	bic.w	r3, r3, #3
  40924e:	4423      	add	r3, r4
  409250:	4628      	mov	r0, r5
  409252:	685a      	ldr	r2, [r3, #4]
  409254:	60f1      	str	r1, [r6, #12]
  409256:	f042 0201 	orr.w	r2, r2, #1
  40925a:	608e      	str	r6, [r1, #8]
  40925c:	605a      	str	r2, [r3, #4]
  40925e:	f000 fb5b 	bl	409918 <__malloc_unlock>
  409262:	3408      	adds	r4, #8
  409264:	4620      	mov	r0, r4
  409266:	b003      	add	sp, #12
  409268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40926c:	2400      	movs	r4, #0
  40926e:	230c      	movs	r3, #12
  409270:	4620      	mov	r0, r4
  409272:	602b      	str	r3, [r5, #0]
  409274:	b003      	add	sp, #12
  409276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40927a:	2040      	movs	r0, #64	; 0x40
  40927c:	f44f 7300 	mov.w	r3, #512	; 0x200
  409280:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  409284:	e74a      	b.n	40911c <_malloc_r+0x44>
  409286:	4423      	add	r3, r4
  409288:	68e1      	ldr	r1, [r4, #12]
  40928a:	685a      	ldr	r2, [r3, #4]
  40928c:	68a6      	ldr	r6, [r4, #8]
  40928e:	f042 0201 	orr.w	r2, r2, #1
  409292:	60f1      	str	r1, [r6, #12]
  409294:	4628      	mov	r0, r5
  409296:	608e      	str	r6, [r1, #8]
  409298:	605a      	str	r2, [r3, #4]
  40929a:	f000 fb3d 	bl	409918 <__malloc_unlock>
  40929e:	3408      	adds	r4, #8
  4092a0:	4620      	mov	r0, r4
  4092a2:	b003      	add	sp, #12
  4092a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092a8:	4423      	add	r3, r4
  4092aa:	4628      	mov	r0, r5
  4092ac:	685a      	ldr	r2, [r3, #4]
  4092ae:	f042 0201 	orr.w	r2, r2, #1
  4092b2:	605a      	str	r2, [r3, #4]
  4092b4:	f000 fb30 	bl	409918 <__malloc_unlock>
  4092b8:	3408      	adds	r4, #8
  4092ba:	4620      	mov	r0, r4
  4092bc:	b003      	add	sp, #12
  4092be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092c2:	68bc      	ldr	r4, [r7, #8]
  4092c4:	6863      	ldr	r3, [r4, #4]
  4092c6:	f023 0803 	bic.w	r8, r3, #3
  4092ca:	45b0      	cmp	r8, r6
  4092cc:	d304      	bcc.n	4092d8 <_malloc_r+0x200>
  4092ce:	eba8 0306 	sub.w	r3, r8, r6
  4092d2:	2b0f      	cmp	r3, #15
  4092d4:	f300 8085 	bgt.w	4093e2 <_malloc_r+0x30a>
  4092d8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 409434 <_malloc_r+0x35c>
  4092dc:	4b50      	ldr	r3, [pc, #320]	; (409420 <_malloc_r+0x348>)
  4092de:	f8d9 2000 	ldr.w	r2, [r9]
  4092e2:	681b      	ldr	r3, [r3, #0]
  4092e4:	3201      	adds	r2, #1
  4092e6:	4433      	add	r3, r6
  4092e8:	eb04 0a08 	add.w	sl, r4, r8
  4092ec:	f000 8155 	beq.w	40959a <_malloc_r+0x4c2>
  4092f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4092f4:	330f      	adds	r3, #15
  4092f6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4092fa:	f02b 0b0f 	bic.w	fp, fp, #15
  4092fe:	4659      	mov	r1, fp
  409300:	4628      	mov	r0, r5
  409302:	f000 ffaf 	bl	40a264 <_sbrk_r>
  409306:	1c41      	adds	r1, r0, #1
  409308:	4602      	mov	r2, r0
  40930a:	f000 80fc 	beq.w	409506 <_malloc_r+0x42e>
  40930e:	4582      	cmp	sl, r0
  409310:	f200 80f7 	bhi.w	409502 <_malloc_r+0x42a>
  409314:	4b43      	ldr	r3, [pc, #268]	; (409424 <_malloc_r+0x34c>)
  409316:	6819      	ldr	r1, [r3, #0]
  409318:	4459      	add	r1, fp
  40931a:	6019      	str	r1, [r3, #0]
  40931c:	f000 814d 	beq.w	4095ba <_malloc_r+0x4e2>
  409320:	f8d9 0000 	ldr.w	r0, [r9]
  409324:	3001      	adds	r0, #1
  409326:	bf1b      	ittet	ne
  409328:	eba2 0a0a 	subne.w	sl, r2, sl
  40932c:	4451      	addne	r1, sl
  40932e:	f8c9 2000 	streq.w	r2, [r9]
  409332:	6019      	strne	r1, [r3, #0]
  409334:	f012 0107 	ands.w	r1, r2, #7
  409338:	f000 8115 	beq.w	409566 <_malloc_r+0x48e>
  40933c:	f1c1 0008 	rsb	r0, r1, #8
  409340:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  409344:	4402      	add	r2, r0
  409346:	3108      	adds	r1, #8
  409348:	eb02 090b 	add.w	r9, r2, fp
  40934c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  409350:	eba1 0909 	sub.w	r9, r1, r9
  409354:	4649      	mov	r1, r9
  409356:	4628      	mov	r0, r5
  409358:	9301      	str	r3, [sp, #4]
  40935a:	9200      	str	r2, [sp, #0]
  40935c:	f000 ff82 	bl	40a264 <_sbrk_r>
  409360:	1c43      	adds	r3, r0, #1
  409362:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409366:	f000 8143 	beq.w	4095f0 <_malloc_r+0x518>
  40936a:	1a80      	subs	r0, r0, r2
  40936c:	4448      	add	r0, r9
  40936e:	f040 0001 	orr.w	r0, r0, #1
  409372:	6819      	ldr	r1, [r3, #0]
  409374:	60ba      	str	r2, [r7, #8]
  409376:	4449      	add	r1, r9
  409378:	42bc      	cmp	r4, r7
  40937a:	6050      	str	r0, [r2, #4]
  40937c:	6019      	str	r1, [r3, #0]
  40937e:	d017      	beq.n	4093b0 <_malloc_r+0x2d8>
  409380:	f1b8 0f0f 	cmp.w	r8, #15
  409384:	f240 80fb 	bls.w	40957e <_malloc_r+0x4a6>
  409388:	6860      	ldr	r0, [r4, #4]
  40938a:	f1a8 020c 	sub.w	r2, r8, #12
  40938e:	f022 0207 	bic.w	r2, r2, #7
  409392:	eb04 0e02 	add.w	lr, r4, r2
  409396:	f000 0001 	and.w	r0, r0, #1
  40939a:	f04f 0c05 	mov.w	ip, #5
  40939e:	4310      	orrs	r0, r2
  4093a0:	2a0f      	cmp	r2, #15
  4093a2:	6060      	str	r0, [r4, #4]
  4093a4:	f8ce c004 	str.w	ip, [lr, #4]
  4093a8:	f8ce c008 	str.w	ip, [lr, #8]
  4093ac:	f200 8117 	bhi.w	4095de <_malloc_r+0x506>
  4093b0:	4b1d      	ldr	r3, [pc, #116]	; (409428 <_malloc_r+0x350>)
  4093b2:	68bc      	ldr	r4, [r7, #8]
  4093b4:	681a      	ldr	r2, [r3, #0]
  4093b6:	4291      	cmp	r1, r2
  4093b8:	bf88      	it	hi
  4093ba:	6019      	strhi	r1, [r3, #0]
  4093bc:	4b1b      	ldr	r3, [pc, #108]	; (40942c <_malloc_r+0x354>)
  4093be:	681a      	ldr	r2, [r3, #0]
  4093c0:	4291      	cmp	r1, r2
  4093c2:	6862      	ldr	r2, [r4, #4]
  4093c4:	bf88      	it	hi
  4093c6:	6019      	strhi	r1, [r3, #0]
  4093c8:	f022 0203 	bic.w	r2, r2, #3
  4093cc:	4296      	cmp	r6, r2
  4093ce:	eba2 0306 	sub.w	r3, r2, r6
  4093d2:	d801      	bhi.n	4093d8 <_malloc_r+0x300>
  4093d4:	2b0f      	cmp	r3, #15
  4093d6:	dc04      	bgt.n	4093e2 <_malloc_r+0x30a>
  4093d8:	4628      	mov	r0, r5
  4093da:	f000 fa9d 	bl	409918 <__malloc_unlock>
  4093de:	2400      	movs	r4, #0
  4093e0:	e740      	b.n	409264 <_malloc_r+0x18c>
  4093e2:	19a2      	adds	r2, r4, r6
  4093e4:	f043 0301 	orr.w	r3, r3, #1
  4093e8:	f046 0601 	orr.w	r6, r6, #1
  4093ec:	6066      	str	r6, [r4, #4]
  4093ee:	4628      	mov	r0, r5
  4093f0:	60ba      	str	r2, [r7, #8]
  4093f2:	6053      	str	r3, [r2, #4]
  4093f4:	f000 fa90 	bl	409918 <__malloc_unlock>
  4093f8:	3408      	adds	r4, #8
  4093fa:	4620      	mov	r0, r4
  4093fc:	b003      	add	sp, #12
  4093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409402:	2b14      	cmp	r3, #20
  409404:	d971      	bls.n	4094ea <_malloc_r+0x412>
  409406:	2b54      	cmp	r3, #84	; 0x54
  409408:	f200 80a3 	bhi.w	409552 <_malloc_r+0x47a>
  40940c:	0b33      	lsrs	r3, r6, #12
  40940e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  409412:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  409416:	00c3      	lsls	r3, r0, #3
  409418:	e680      	b.n	40911c <_malloc_r+0x44>
  40941a:	bf00      	nop
  40941c:	20000a20 	.word	0x20000a20
  409420:	200061f8 	.word	0x200061f8
  409424:	200061c8 	.word	0x200061c8
  409428:	200061f0 	.word	0x200061f0
  40942c:	200061f4 	.word	0x200061f4
  409430:	20000a28 	.word	0x20000a28
  409434:	20000e28 	.word	0x20000e28
  409438:	0a5a      	lsrs	r2, r3, #9
  40943a:	2a04      	cmp	r2, #4
  40943c:	d95b      	bls.n	4094f6 <_malloc_r+0x41e>
  40943e:	2a14      	cmp	r2, #20
  409440:	f200 80ae 	bhi.w	4095a0 <_malloc_r+0x4c8>
  409444:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  409448:	00c9      	lsls	r1, r1, #3
  40944a:	325b      	adds	r2, #91	; 0x5b
  40944c:	eb07 0c01 	add.w	ip, r7, r1
  409450:	5879      	ldr	r1, [r7, r1]
  409452:	f1ac 0c08 	sub.w	ip, ip, #8
  409456:	458c      	cmp	ip, r1
  409458:	f000 8088 	beq.w	40956c <_malloc_r+0x494>
  40945c:	684a      	ldr	r2, [r1, #4]
  40945e:	f022 0203 	bic.w	r2, r2, #3
  409462:	4293      	cmp	r3, r2
  409464:	d273      	bcs.n	40954e <_malloc_r+0x476>
  409466:	6889      	ldr	r1, [r1, #8]
  409468:	458c      	cmp	ip, r1
  40946a:	d1f7      	bne.n	40945c <_malloc_r+0x384>
  40946c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  409470:	687b      	ldr	r3, [r7, #4]
  409472:	60e2      	str	r2, [r4, #12]
  409474:	f8c4 c008 	str.w	ip, [r4, #8]
  409478:	6094      	str	r4, [r2, #8]
  40947a:	f8cc 400c 	str.w	r4, [ip, #12]
  40947e:	e68f      	b.n	4091a0 <_malloc_r+0xc8>
  409480:	19a1      	adds	r1, r4, r6
  409482:	f046 0c01 	orr.w	ip, r6, #1
  409486:	f042 0601 	orr.w	r6, r2, #1
  40948a:	f8c4 c004 	str.w	ip, [r4, #4]
  40948e:	4628      	mov	r0, r5
  409490:	6179      	str	r1, [r7, #20]
  409492:	6139      	str	r1, [r7, #16]
  409494:	f8c1 e00c 	str.w	lr, [r1, #12]
  409498:	f8c1 e008 	str.w	lr, [r1, #8]
  40949c:	604e      	str	r6, [r1, #4]
  40949e:	50e2      	str	r2, [r4, r3]
  4094a0:	f000 fa3a 	bl	409918 <__malloc_unlock>
  4094a4:	3408      	adds	r4, #8
  4094a6:	e6dd      	b.n	409264 <_malloc_r+0x18c>
  4094a8:	687b      	ldr	r3, [r7, #4]
  4094aa:	e679      	b.n	4091a0 <_malloc_r+0xc8>
  4094ac:	f108 0801 	add.w	r8, r8, #1
  4094b0:	f018 0f03 	tst.w	r8, #3
  4094b4:	f10c 0c08 	add.w	ip, ip, #8
  4094b8:	f47f ae85 	bne.w	4091c6 <_malloc_r+0xee>
  4094bc:	e02d      	b.n	40951a <_malloc_r+0x442>
  4094be:	68dc      	ldr	r4, [r3, #12]
  4094c0:	42a3      	cmp	r3, r4
  4094c2:	bf08      	it	eq
  4094c4:	3002      	addeq	r0, #2
  4094c6:	f43f ae3e 	beq.w	409146 <_malloc_r+0x6e>
  4094ca:	e6bb      	b.n	409244 <_malloc_r+0x16c>
  4094cc:	4419      	add	r1, r3
  4094ce:	461c      	mov	r4, r3
  4094d0:	684a      	ldr	r2, [r1, #4]
  4094d2:	68db      	ldr	r3, [r3, #12]
  4094d4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4094d8:	f042 0201 	orr.w	r2, r2, #1
  4094dc:	604a      	str	r2, [r1, #4]
  4094de:	4628      	mov	r0, r5
  4094e0:	60f3      	str	r3, [r6, #12]
  4094e2:	609e      	str	r6, [r3, #8]
  4094e4:	f000 fa18 	bl	409918 <__malloc_unlock>
  4094e8:	e6bc      	b.n	409264 <_malloc_r+0x18c>
  4094ea:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4094ee:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4094f2:	00c3      	lsls	r3, r0, #3
  4094f4:	e612      	b.n	40911c <_malloc_r+0x44>
  4094f6:	099a      	lsrs	r2, r3, #6
  4094f8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4094fc:	00c9      	lsls	r1, r1, #3
  4094fe:	3238      	adds	r2, #56	; 0x38
  409500:	e7a4      	b.n	40944c <_malloc_r+0x374>
  409502:	42bc      	cmp	r4, r7
  409504:	d054      	beq.n	4095b0 <_malloc_r+0x4d8>
  409506:	68bc      	ldr	r4, [r7, #8]
  409508:	6862      	ldr	r2, [r4, #4]
  40950a:	f022 0203 	bic.w	r2, r2, #3
  40950e:	e75d      	b.n	4093cc <_malloc_r+0x2f4>
  409510:	f859 3908 	ldr.w	r3, [r9], #-8
  409514:	4599      	cmp	r9, r3
  409516:	f040 8086 	bne.w	409626 <_malloc_r+0x54e>
  40951a:	f010 0f03 	tst.w	r0, #3
  40951e:	f100 30ff 	add.w	r0, r0, #4294967295
  409522:	d1f5      	bne.n	409510 <_malloc_r+0x438>
  409524:	687b      	ldr	r3, [r7, #4]
  409526:	ea23 0304 	bic.w	r3, r3, r4
  40952a:	607b      	str	r3, [r7, #4]
  40952c:	0064      	lsls	r4, r4, #1
  40952e:	429c      	cmp	r4, r3
  409530:	f63f aec7 	bhi.w	4092c2 <_malloc_r+0x1ea>
  409534:	2c00      	cmp	r4, #0
  409536:	f43f aec4 	beq.w	4092c2 <_malloc_r+0x1ea>
  40953a:	421c      	tst	r4, r3
  40953c:	4640      	mov	r0, r8
  40953e:	f47f ae3e 	bne.w	4091be <_malloc_r+0xe6>
  409542:	0064      	lsls	r4, r4, #1
  409544:	421c      	tst	r4, r3
  409546:	f100 0004 	add.w	r0, r0, #4
  40954a:	d0fa      	beq.n	409542 <_malloc_r+0x46a>
  40954c:	e637      	b.n	4091be <_malloc_r+0xe6>
  40954e:	468c      	mov	ip, r1
  409550:	e78c      	b.n	40946c <_malloc_r+0x394>
  409552:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  409556:	d815      	bhi.n	409584 <_malloc_r+0x4ac>
  409558:	0bf3      	lsrs	r3, r6, #15
  40955a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40955e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  409562:	00c3      	lsls	r3, r0, #3
  409564:	e5da      	b.n	40911c <_malloc_r+0x44>
  409566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40956a:	e6ed      	b.n	409348 <_malloc_r+0x270>
  40956c:	687b      	ldr	r3, [r7, #4]
  40956e:	1092      	asrs	r2, r2, #2
  409570:	2101      	movs	r1, #1
  409572:	fa01 f202 	lsl.w	r2, r1, r2
  409576:	4313      	orrs	r3, r2
  409578:	607b      	str	r3, [r7, #4]
  40957a:	4662      	mov	r2, ip
  40957c:	e779      	b.n	409472 <_malloc_r+0x39a>
  40957e:	2301      	movs	r3, #1
  409580:	6053      	str	r3, [r2, #4]
  409582:	e729      	b.n	4093d8 <_malloc_r+0x300>
  409584:	f240 5254 	movw	r2, #1364	; 0x554
  409588:	4293      	cmp	r3, r2
  40958a:	d822      	bhi.n	4095d2 <_malloc_r+0x4fa>
  40958c:	0cb3      	lsrs	r3, r6, #18
  40958e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  409592:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  409596:	00c3      	lsls	r3, r0, #3
  409598:	e5c0      	b.n	40911c <_malloc_r+0x44>
  40959a:	f103 0b10 	add.w	fp, r3, #16
  40959e:	e6ae      	b.n	4092fe <_malloc_r+0x226>
  4095a0:	2a54      	cmp	r2, #84	; 0x54
  4095a2:	d829      	bhi.n	4095f8 <_malloc_r+0x520>
  4095a4:	0b1a      	lsrs	r2, r3, #12
  4095a6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4095aa:	00c9      	lsls	r1, r1, #3
  4095ac:	326e      	adds	r2, #110	; 0x6e
  4095ae:	e74d      	b.n	40944c <_malloc_r+0x374>
  4095b0:	4b20      	ldr	r3, [pc, #128]	; (409634 <_malloc_r+0x55c>)
  4095b2:	6819      	ldr	r1, [r3, #0]
  4095b4:	4459      	add	r1, fp
  4095b6:	6019      	str	r1, [r3, #0]
  4095b8:	e6b2      	b.n	409320 <_malloc_r+0x248>
  4095ba:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4095be:	2800      	cmp	r0, #0
  4095c0:	f47f aeae 	bne.w	409320 <_malloc_r+0x248>
  4095c4:	eb08 030b 	add.w	r3, r8, fp
  4095c8:	68ba      	ldr	r2, [r7, #8]
  4095ca:	f043 0301 	orr.w	r3, r3, #1
  4095ce:	6053      	str	r3, [r2, #4]
  4095d0:	e6ee      	b.n	4093b0 <_malloc_r+0x2d8>
  4095d2:	207f      	movs	r0, #127	; 0x7f
  4095d4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4095d8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4095dc:	e59e      	b.n	40911c <_malloc_r+0x44>
  4095de:	f104 0108 	add.w	r1, r4, #8
  4095e2:	4628      	mov	r0, r5
  4095e4:	9300      	str	r3, [sp, #0]
  4095e6:	f7ff fc7f 	bl	408ee8 <_free_r>
  4095ea:	9b00      	ldr	r3, [sp, #0]
  4095ec:	6819      	ldr	r1, [r3, #0]
  4095ee:	e6df      	b.n	4093b0 <_malloc_r+0x2d8>
  4095f0:	2001      	movs	r0, #1
  4095f2:	f04f 0900 	mov.w	r9, #0
  4095f6:	e6bc      	b.n	409372 <_malloc_r+0x29a>
  4095f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4095fc:	d805      	bhi.n	40960a <_malloc_r+0x532>
  4095fe:	0bda      	lsrs	r2, r3, #15
  409600:	f102 0178 	add.w	r1, r2, #120	; 0x78
  409604:	00c9      	lsls	r1, r1, #3
  409606:	3277      	adds	r2, #119	; 0x77
  409608:	e720      	b.n	40944c <_malloc_r+0x374>
  40960a:	f240 5154 	movw	r1, #1364	; 0x554
  40960e:	428a      	cmp	r2, r1
  409610:	d805      	bhi.n	40961e <_malloc_r+0x546>
  409612:	0c9a      	lsrs	r2, r3, #18
  409614:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  409618:	00c9      	lsls	r1, r1, #3
  40961a:	327c      	adds	r2, #124	; 0x7c
  40961c:	e716      	b.n	40944c <_malloc_r+0x374>
  40961e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  409622:	227e      	movs	r2, #126	; 0x7e
  409624:	e712      	b.n	40944c <_malloc_r+0x374>
  409626:	687b      	ldr	r3, [r7, #4]
  409628:	e780      	b.n	40952c <_malloc_r+0x454>
  40962a:	08f0      	lsrs	r0, r6, #3
  40962c:	f106 0308 	add.w	r3, r6, #8
  409630:	e600      	b.n	409234 <_malloc_r+0x15c>
  409632:	bf00      	nop
  409634:	200061c8 	.word	0x200061c8

00409638 <__ascii_mbtowc>:
  409638:	b082      	sub	sp, #8
  40963a:	b149      	cbz	r1, 409650 <__ascii_mbtowc+0x18>
  40963c:	b15a      	cbz	r2, 409656 <__ascii_mbtowc+0x1e>
  40963e:	b16b      	cbz	r3, 40965c <__ascii_mbtowc+0x24>
  409640:	7813      	ldrb	r3, [r2, #0]
  409642:	600b      	str	r3, [r1, #0]
  409644:	7812      	ldrb	r2, [r2, #0]
  409646:	1c10      	adds	r0, r2, #0
  409648:	bf18      	it	ne
  40964a:	2001      	movne	r0, #1
  40964c:	b002      	add	sp, #8
  40964e:	4770      	bx	lr
  409650:	a901      	add	r1, sp, #4
  409652:	2a00      	cmp	r2, #0
  409654:	d1f3      	bne.n	40963e <__ascii_mbtowc+0x6>
  409656:	4610      	mov	r0, r2
  409658:	b002      	add	sp, #8
  40965a:	4770      	bx	lr
  40965c:	f06f 0001 	mvn.w	r0, #1
  409660:	e7f4      	b.n	40964c <__ascii_mbtowc+0x14>
  409662:	bf00      	nop
	...

00409670 <memchr>:
  409670:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409674:	2a10      	cmp	r2, #16
  409676:	db2b      	blt.n	4096d0 <memchr+0x60>
  409678:	f010 0f07 	tst.w	r0, #7
  40967c:	d008      	beq.n	409690 <memchr+0x20>
  40967e:	f810 3b01 	ldrb.w	r3, [r0], #1
  409682:	3a01      	subs	r2, #1
  409684:	428b      	cmp	r3, r1
  409686:	d02d      	beq.n	4096e4 <memchr+0x74>
  409688:	f010 0f07 	tst.w	r0, #7
  40968c:	b342      	cbz	r2, 4096e0 <memchr+0x70>
  40968e:	d1f6      	bne.n	40967e <memchr+0xe>
  409690:	b4f0      	push	{r4, r5, r6, r7}
  409692:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409696:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40969a:	f022 0407 	bic.w	r4, r2, #7
  40969e:	f07f 0700 	mvns.w	r7, #0
  4096a2:	2300      	movs	r3, #0
  4096a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4096a8:	3c08      	subs	r4, #8
  4096aa:	ea85 0501 	eor.w	r5, r5, r1
  4096ae:	ea86 0601 	eor.w	r6, r6, r1
  4096b2:	fa85 f547 	uadd8	r5, r5, r7
  4096b6:	faa3 f587 	sel	r5, r3, r7
  4096ba:	fa86 f647 	uadd8	r6, r6, r7
  4096be:	faa5 f687 	sel	r6, r5, r7
  4096c2:	b98e      	cbnz	r6, 4096e8 <memchr+0x78>
  4096c4:	d1ee      	bne.n	4096a4 <memchr+0x34>
  4096c6:	bcf0      	pop	{r4, r5, r6, r7}
  4096c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4096cc:	f002 0207 	and.w	r2, r2, #7
  4096d0:	b132      	cbz	r2, 4096e0 <memchr+0x70>
  4096d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4096d6:	3a01      	subs	r2, #1
  4096d8:	ea83 0301 	eor.w	r3, r3, r1
  4096dc:	b113      	cbz	r3, 4096e4 <memchr+0x74>
  4096de:	d1f8      	bne.n	4096d2 <memchr+0x62>
  4096e0:	2000      	movs	r0, #0
  4096e2:	4770      	bx	lr
  4096e4:	3801      	subs	r0, #1
  4096e6:	4770      	bx	lr
  4096e8:	2d00      	cmp	r5, #0
  4096ea:	bf06      	itte	eq
  4096ec:	4635      	moveq	r5, r6
  4096ee:	3803      	subeq	r0, #3
  4096f0:	3807      	subne	r0, #7
  4096f2:	f015 0f01 	tst.w	r5, #1
  4096f6:	d107      	bne.n	409708 <memchr+0x98>
  4096f8:	3001      	adds	r0, #1
  4096fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4096fe:	bf02      	ittt	eq
  409700:	3001      	addeq	r0, #1
  409702:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409706:	3001      	addeq	r0, #1
  409708:	bcf0      	pop	{r4, r5, r6, r7}
  40970a:	3801      	subs	r0, #1
  40970c:	4770      	bx	lr
  40970e:	bf00      	nop

00409710 <memcpy>:
  409710:	4684      	mov	ip, r0
  409712:	ea41 0300 	orr.w	r3, r1, r0
  409716:	f013 0303 	ands.w	r3, r3, #3
  40971a:	d16d      	bne.n	4097f8 <memcpy+0xe8>
  40971c:	3a40      	subs	r2, #64	; 0x40
  40971e:	d341      	bcc.n	4097a4 <memcpy+0x94>
  409720:	f851 3b04 	ldr.w	r3, [r1], #4
  409724:	f840 3b04 	str.w	r3, [r0], #4
  409728:	f851 3b04 	ldr.w	r3, [r1], #4
  40972c:	f840 3b04 	str.w	r3, [r0], #4
  409730:	f851 3b04 	ldr.w	r3, [r1], #4
  409734:	f840 3b04 	str.w	r3, [r0], #4
  409738:	f851 3b04 	ldr.w	r3, [r1], #4
  40973c:	f840 3b04 	str.w	r3, [r0], #4
  409740:	f851 3b04 	ldr.w	r3, [r1], #4
  409744:	f840 3b04 	str.w	r3, [r0], #4
  409748:	f851 3b04 	ldr.w	r3, [r1], #4
  40974c:	f840 3b04 	str.w	r3, [r0], #4
  409750:	f851 3b04 	ldr.w	r3, [r1], #4
  409754:	f840 3b04 	str.w	r3, [r0], #4
  409758:	f851 3b04 	ldr.w	r3, [r1], #4
  40975c:	f840 3b04 	str.w	r3, [r0], #4
  409760:	f851 3b04 	ldr.w	r3, [r1], #4
  409764:	f840 3b04 	str.w	r3, [r0], #4
  409768:	f851 3b04 	ldr.w	r3, [r1], #4
  40976c:	f840 3b04 	str.w	r3, [r0], #4
  409770:	f851 3b04 	ldr.w	r3, [r1], #4
  409774:	f840 3b04 	str.w	r3, [r0], #4
  409778:	f851 3b04 	ldr.w	r3, [r1], #4
  40977c:	f840 3b04 	str.w	r3, [r0], #4
  409780:	f851 3b04 	ldr.w	r3, [r1], #4
  409784:	f840 3b04 	str.w	r3, [r0], #4
  409788:	f851 3b04 	ldr.w	r3, [r1], #4
  40978c:	f840 3b04 	str.w	r3, [r0], #4
  409790:	f851 3b04 	ldr.w	r3, [r1], #4
  409794:	f840 3b04 	str.w	r3, [r0], #4
  409798:	f851 3b04 	ldr.w	r3, [r1], #4
  40979c:	f840 3b04 	str.w	r3, [r0], #4
  4097a0:	3a40      	subs	r2, #64	; 0x40
  4097a2:	d2bd      	bcs.n	409720 <memcpy+0x10>
  4097a4:	3230      	adds	r2, #48	; 0x30
  4097a6:	d311      	bcc.n	4097cc <memcpy+0xbc>
  4097a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4097ac:	f840 3b04 	str.w	r3, [r0], #4
  4097b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4097b4:	f840 3b04 	str.w	r3, [r0], #4
  4097b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4097bc:	f840 3b04 	str.w	r3, [r0], #4
  4097c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4097c4:	f840 3b04 	str.w	r3, [r0], #4
  4097c8:	3a10      	subs	r2, #16
  4097ca:	d2ed      	bcs.n	4097a8 <memcpy+0x98>
  4097cc:	320c      	adds	r2, #12
  4097ce:	d305      	bcc.n	4097dc <memcpy+0xcc>
  4097d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4097d4:	f840 3b04 	str.w	r3, [r0], #4
  4097d8:	3a04      	subs	r2, #4
  4097da:	d2f9      	bcs.n	4097d0 <memcpy+0xc0>
  4097dc:	3204      	adds	r2, #4
  4097de:	d008      	beq.n	4097f2 <memcpy+0xe2>
  4097e0:	07d2      	lsls	r2, r2, #31
  4097e2:	bf1c      	itt	ne
  4097e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4097e8:	f800 3b01 	strbne.w	r3, [r0], #1
  4097ec:	d301      	bcc.n	4097f2 <memcpy+0xe2>
  4097ee:	880b      	ldrh	r3, [r1, #0]
  4097f0:	8003      	strh	r3, [r0, #0]
  4097f2:	4660      	mov	r0, ip
  4097f4:	4770      	bx	lr
  4097f6:	bf00      	nop
  4097f8:	2a08      	cmp	r2, #8
  4097fa:	d313      	bcc.n	409824 <memcpy+0x114>
  4097fc:	078b      	lsls	r3, r1, #30
  4097fe:	d08d      	beq.n	40971c <memcpy+0xc>
  409800:	f010 0303 	ands.w	r3, r0, #3
  409804:	d08a      	beq.n	40971c <memcpy+0xc>
  409806:	f1c3 0304 	rsb	r3, r3, #4
  40980a:	1ad2      	subs	r2, r2, r3
  40980c:	07db      	lsls	r3, r3, #31
  40980e:	bf1c      	itt	ne
  409810:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409814:	f800 3b01 	strbne.w	r3, [r0], #1
  409818:	d380      	bcc.n	40971c <memcpy+0xc>
  40981a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40981e:	f820 3b02 	strh.w	r3, [r0], #2
  409822:	e77b      	b.n	40971c <memcpy+0xc>
  409824:	3a04      	subs	r2, #4
  409826:	d3d9      	bcc.n	4097dc <memcpy+0xcc>
  409828:	3a01      	subs	r2, #1
  40982a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40982e:	f800 3b01 	strb.w	r3, [r0], #1
  409832:	d2f9      	bcs.n	409828 <memcpy+0x118>
  409834:	780b      	ldrb	r3, [r1, #0]
  409836:	7003      	strb	r3, [r0, #0]
  409838:	784b      	ldrb	r3, [r1, #1]
  40983a:	7043      	strb	r3, [r0, #1]
  40983c:	788b      	ldrb	r3, [r1, #2]
  40983e:	7083      	strb	r3, [r0, #2]
  409840:	4660      	mov	r0, ip
  409842:	4770      	bx	lr

00409844 <memmove>:
  409844:	4288      	cmp	r0, r1
  409846:	b5f0      	push	{r4, r5, r6, r7, lr}
  409848:	d90d      	bls.n	409866 <memmove+0x22>
  40984a:	188b      	adds	r3, r1, r2
  40984c:	4298      	cmp	r0, r3
  40984e:	d20a      	bcs.n	409866 <memmove+0x22>
  409850:	1884      	adds	r4, r0, r2
  409852:	2a00      	cmp	r2, #0
  409854:	d051      	beq.n	4098fa <memmove+0xb6>
  409856:	4622      	mov	r2, r4
  409858:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40985c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  409860:	4299      	cmp	r1, r3
  409862:	d1f9      	bne.n	409858 <memmove+0x14>
  409864:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409866:	2a0f      	cmp	r2, #15
  409868:	d948      	bls.n	4098fc <memmove+0xb8>
  40986a:	ea41 0300 	orr.w	r3, r1, r0
  40986e:	079b      	lsls	r3, r3, #30
  409870:	d146      	bne.n	409900 <memmove+0xbc>
  409872:	f100 0410 	add.w	r4, r0, #16
  409876:	f101 0310 	add.w	r3, r1, #16
  40987a:	4615      	mov	r5, r2
  40987c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  409880:	f844 6c10 	str.w	r6, [r4, #-16]
  409884:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409888:	f844 6c0c 	str.w	r6, [r4, #-12]
  40988c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  409890:	f844 6c08 	str.w	r6, [r4, #-8]
  409894:	3d10      	subs	r5, #16
  409896:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40989a:	f844 6c04 	str.w	r6, [r4, #-4]
  40989e:	2d0f      	cmp	r5, #15
  4098a0:	f103 0310 	add.w	r3, r3, #16
  4098a4:	f104 0410 	add.w	r4, r4, #16
  4098a8:	d8e8      	bhi.n	40987c <memmove+0x38>
  4098aa:	f1a2 0310 	sub.w	r3, r2, #16
  4098ae:	f023 030f 	bic.w	r3, r3, #15
  4098b2:	f002 0e0f 	and.w	lr, r2, #15
  4098b6:	3310      	adds	r3, #16
  4098b8:	f1be 0f03 	cmp.w	lr, #3
  4098bc:	4419      	add	r1, r3
  4098be:	4403      	add	r3, r0
  4098c0:	d921      	bls.n	409906 <memmove+0xc2>
  4098c2:	1f1e      	subs	r6, r3, #4
  4098c4:	460d      	mov	r5, r1
  4098c6:	4674      	mov	r4, lr
  4098c8:	3c04      	subs	r4, #4
  4098ca:	f855 7b04 	ldr.w	r7, [r5], #4
  4098ce:	f846 7f04 	str.w	r7, [r6, #4]!
  4098d2:	2c03      	cmp	r4, #3
  4098d4:	d8f8      	bhi.n	4098c8 <memmove+0x84>
  4098d6:	f1ae 0404 	sub.w	r4, lr, #4
  4098da:	f024 0403 	bic.w	r4, r4, #3
  4098de:	3404      	adds	r4, #4
  4098e0:	4421      	add	r1, r4
  4098e2:	4423      	add	r3, r4
  4098e4:	f002 0203 	and.w	r2, r2, #3
  4098e8:	b162      	cbz	r2, 409904 <memmove+0xc0>
  4098ea:	3b01      	subs	r3, #1
  4098ec:	440a      	add	r2, r1
  4098ee:	f811 4b01 	ldrb.w	r4, [r1], #1
  4098f2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4098f6:	428a      	cmp	r2, r1
  4098f8:	d1f9      	bne.n	4098ee <memmove+0xaa>
  4098fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4098fc:	4603      	mov	r3, r0
  4098fe:	e7f3      	b.n	4098e8 <memmove+0xa4>
  409900:	4603      	mov	r3, r0
  409902:	e7f2      	b.n	4098ea <memmove+0xa6>
  409904:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409906:	4672      	mov	r2, lr
  409908:	e7ee      	b.n	4098e8 <memmove+0xa4>
  40990a:	bf00      	nop

0040990c <__malloc_lock>:
  40990c:	4801      	ldr	r0, [pc, #4]	; (409914 <__malloc_lock+0x8>)
  40990e:	f7ff bbdf 	b.w	4090d0 <__retarget_lock_acquire_recursive>
  409912:	bf00      	nop
  409914:	20006244 	.word	0x20006244

00409918 <__malloc_unlock>:
  409918:	4801      	ldr	r0, [pc, #4]	; (409920 <__malloc_unlock+0x8>)
  40991a:	f7ff bbdb 	b.w	4090d4 <__retarget_lock_release_recursive>
  40991e:	bf00      	nop
  409920:	20006244 	.word	0x20006244

00409924 <_Balloc>:
  409924:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409926:	b570      	push	{r4, r5, r6, lr}
  409928:	4605      	mov	r5, r0
  40992a:	460c      	mov	r4, r1
  40992c:	b14b      	cbz	r3, 409942 <_Balloc+0x1e>
  40992e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409932:	b180      	cbz	r0, 409956 <_Balloc+0x32>
  409934:	6802      	ldr	r2, [r0, #0]
  409936:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40993a:	2300      	movs	r3, #0
  40993c:	6103      	str	r3, [r0, #16]
  40993e:	60c3      	str	r3, [r0, #12]
  409940:	bd70      	pop	{r4, r5, r6, pc}
  409942:	2221      	movs	r2, #33	; 0x21
  409944:	2104      	movs	r1, #4
  409946:	f000 fd8d 	bl	40a464 <_calloc_r>
  40994a:	64e8      	str	r0, [r5, #76]	; 0x4c
  40994c:	4603      	mov	r3, r0
  40994e:	2800      	cmp	r0, #0
  409950:	d1ed      	bne.n	40992e <_Balloc+0xa>
  409952:	2000      	movs	r0, #0
  409954:	bd70      	pop	{r4, r5, r6, pc}
  409956:	2101      	movs	r1, #1
  409958:	fa01 f604 	lsl.w	r6, r1, r4
  40995c:	1d72      	adds	r2, r6, #5
  40995e:	4628      	mov	r0, r5
  409960:	0092      	lsls	r2, r2, #2
  409962:	f000 fd7f 	bl	40a464 <_calloc_r>
  409966:	2800      	cmp	r0, #0
  409968:	d0f3      	beq.n	409952 <_Balloc+0x2e>
  40996a:	6044      	str	r4, [r0, #4]
  40996c:	6086      	str	r6, [r0, #8]
  40996e:	e7e4      	b.n	40993a <_Balloc+0x16>

00409970 <_Bfree>:
  409970:	b131      	cbz	r1, 409980 <_Bfree+0x10>
  409972:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409974:	684a      	ldr	r2, [r1, #4]
  409976:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40997a:	6008      	str	r0, [r1, #0]
  40997c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  409980:	4770      	bx	lr
  409982:	bf00      	nop

00409984 <__multadd>:
  409984:	b5f0      	push	{r4, r5, r6, r7, lr}
  409986:	690c      	ldr	r4, [r1, #16]
  409988:	b083      	sub	sp, #12
  40998a:	460d      	mov	r5, r1
  40998c:	4606      	mov	r6, r0
  40998e:	f101 0e14 	add.w	lr, r1, #20
  409992:	2700      	movs	r7, #0
  409994:	f8de 0000 	ldr.w	r0, [lr]
  409998:	b281      	uxth	r1, r0
  40999a:	fb02 3301 	mla	r3, r2, r1, r3
  40999e:	0c01      	lsrs	r1, r0, #16
  4099a0:	0c18      	lsrs	r0, r3, #16
  4099a2:	fb02 0101 	mla	r1, r2, r1, r0
  4099a6:	b29b      	uxth	r3, r3
  4099a8:	3701      	adds	r7, #1
  4099aa:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4099ae:	42bc      	cmp	r4, r7
  4099b0:	f84e 3b04 	str.w	r3, [lr], #4
  4099b4:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4099b8:	dcec      	bgt.n	409994 <__multadd+0x10>
  4099ba:	b13b      	cbz	r3, 4099cc <__multadd+0x48>
  4099bc:	68aa      	ldr	r2, [r5, #8]
  4099be:	4294      	cmp	r4, r2
  4099c0:	da07      	bge.n	4099d2 <__multadd+0x4e>
  4099c2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4099c6:	3401      	adds	r4, #1
  4099c8:	6153      	str	r3, [r2, #20]
  4099ca:	612c      	str	r4, [r5, #16]
  4099cc:	4628      	mov	r0, r5
  4099ce:	b003      	add	sp, #12
  4099d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4099d2:	6869      	ldr	r1, [r5, #4]
  4099d4:	9301      	str	r3, [sp, #4]
  4099d6:	3101      	adds	r1, #1
  4099d8:	4630      	mov	r0, r6
  4099da:	f7ff ffa3 	bl	409924 <_Balloc>
  4099de:	692a      	ldr	r2, [r5, #16]
  4099e0:	3202      	adds	r2, #2
  4099e2:	f105 010c 	add.w	r1, r5, #12
  4099e6:	4607      	mov	r7, r0
  4099e8:	0092      	lsls	r2, r2, #2
  4099ea:	300c      	adds	r0, #12
  4099ec:	f7ff fe90 	bl	409710 <memcpy>
  4099f0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4099f2:	6869      	ldr	r1, [r5, #4]
  4099f4:	9b01      	ldr	r3, [sp, #4]
  4099f6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4099fa:	6028      	str	r0, [r5, #0]
  4099fc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409a00:	463d      	mov	r5, r7
  409a02:	e7de      	b.n	4099c2 <__multadd+0x3e>

00409a04 <__hi0bits>:
  409a04:	0c02      	lsrs	r2, r0, #16
  409a06:	0412      	lsls	r2, r2, #16
  409a08:	4603      	mov	r3, r0
  409a0a:	b9b2      	cbnz	r2, 409a3a <__hi0bits+0x36>
  409a0c:	0403      	lsls	r3, r0, #16
  409a0e:	2010      	movs	r0, #16
  409a10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409a14:	bf04      	itt	eq
  409a16:	021b      	lsleq	r3, r3, #8
  409a18:	3008      	addeq	r0, #8
  409a1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  409a1e:	bf04      	itt	eq
  409a20:	011b      	lsleq	r3, r3, #4
  409a22:	3004      	addeq	r0, #4
  409a24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  409a28:	bf04      	itt	eq
  409a2a:	009b      	lsleq	r3, r3, #2
  409a2c:	3002      	addeq	r0, #2
  409a2e:	2b00      	cmp	r3, #0
  409a30:	db02      	blt.n	409a38 <__hi0bits+0x34>
  409a32:	005b      	lsls	r3, r3, #1
  409a34:	d403      	bmi.n	409a3e <__hi0bits+0x3a>
  409a36:	2020      	movs	r0, #32
  409a38:	4770      	bx	lr
  409a3a:	2000      	movs	r0, #0
  409a3c:	e7e8      	b.n	409a10 <__hi0bits+0xc>
  409a3e:	3001      	adds	r0, #1
  409a40:	4770      	bx	lr
  409a42:	bf00      	nop

00409a44 <__lo0bits>:
  409a44:	6803      	ldr	r3, [r0, #0]
  409a46:	f013 0207 	ands.w	r2, r3, #7
  409a4a:	4601      	mov	r1, r0
  409a4c:	d007      	beq.n	409a5e <__lo0bits+0x1a>
  409a4e:	07da      	lsls	r2, r3, #31
  409a50:	d421      	bmi.n	409a96 <__lo0bits+0x52>
  409a52:	0798      	lsls	r0, r3, #30
  409a54:	d421      	bmi.n	409a9a <__lo0bits+0x56>
  409a56:	089b      	lsrs	r3, r3, #2
  409a58:	600b      	str	r3, [r1, #0]
  409a5a:	2002      	movs	r0, #2
  409a5c:	4770      	bx	lr
  409a5e:	b298      	uxth	r0, r3
  409a60:	b198      	cbz	r0, 409a8a <__lo0bits+0x46>
  409a62:	4610      	mov	r0, r2
  409a64:	f013 0fff 	tst.w	r3, #255	; 0xff
  409a68:	bf04      	itt	eq
  409a6a:	0a1b      	lsreq	r3, r3, #8
  409a6c:	3008      	addeq	r0, #8
  409a6e:	071a      	lsls	r2, r3, #28
  409a70:	bf04      	itt	eq
  409a72:	091b      	lsreq	r3, r3, #4
  409a74:	3004      	addeq	r0, #4
  409a76:	079a      	lsls	r2, r3, #30
  409a78:	bf04      	itt	eq
  409a7a:	089b      	lsreq	r3, r3, #2
  409a7c:	3002      	addeq	r0, #2
  409a7e:	07da      	lsls	r2, r3, #31
  409a80:	d407      	bmi.n	409a92 <__lo0bits+0x4e>
  409a82:	085b      	lsrs	r3, r3, #1
  409a84:	d104      	bne.n	409a90 <__lo0bits+0x4c>
  409a86:	2020      	movs	r0, #32
  409a88:	4770      	bx	lr
  409a8a:	0c1b      	lsrs	r3, r3, #16
  409a8c:	2010      	movs	r0, #16
  409a8e:	e7e9      	b.n	409a64 <__lo0bits+0x20>
  409a90:	3001      	adds	r0, #1
  409a92:	600b      	str	r3, [r1, #0]
  409a94:	4770      	bx	lr
  409a96:	2000      	movs	r0, #0
  409a98:	4770      	bx	lr
  409a9a:	085b      	lsrs	r3, r3, #1
  409a9c:	600b      	str	r3, [r1, #0]
  409a9e:	2001      	movs	r0, #1
  409aa0:	4770      	bx	lr
  409aa2:	bf00      	nop

00409aa4 <__i2b>:
  409aa4:	b510      	push	{r4, lr}
  409aa6:	460c      	mov	r4, r1
  409aa8:	2101      	movs	r1, #1
  409aaa:	f7ff ff3b 	bl	409924 <_Balloc>
  409aae:	2201      	movs	r2, #1
  409ab0:	6144      	str	r4, [r0, #20]
  409ab2:	6102      	str	r2, [r0, #16]
  409ab4:	bd10      	pop	{r4, pc}
  409ab6:	bf00      	nop

00409ab8 <__multiply>:
  409ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409abc:	690c      	ldr	r4, [r1, #16]
  409abe:	6915      	ldr	r5, [r2, #16]
  409ac0:	42ac      	cmp	r4, r5
  409ac2:	b083      	sub	sp, #12
  409ac4:	468b      	mov	fp, r1
  409ac6:	4616      	mov	r6, r2
  409ac8:	da04      	bge.n	409ad4 <__multiply+0x1c>
  409aca:	4622      	mov	r2, r4
  409acc:	46b3      	mov	fp, r6
  409ace:	462c      	mov	r4, r5
  409ad0:	460e      	mov	r6, r1
  409ad2:	4615      	mov	r5, r2
  409ad4:	f8db 3008 	ldr.w	r3, [fp, #8]
  409ad8:	f8db 1004 	ldr.w	r1, [fp, #4]
  409adc:	eb04 0805 	add.w	r8, r4, r5
  409ae0:	4598      	cmp	r8, r3
  409ae2:	bfc8      	it	gt
  409ae4:	3101      	addgt	r1, #1
  409ae6:	f7ff ff1d 	bl	409924 <_Balloc>
  409aea:	f100 0914 	add.w	r9, r0, #20
  409aee:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  409af2:	45d1      	cmp	r9, sl
  409af4:	9000      	str	r0, [sp, #0]
  409af6:	d205      	bcs.n	409b04 <__multiply+0x4c>
  409af8:	464b      	mov	r3, r9
  409afa:	2100      	movs	r1, #0
  409afc:	f843 1b04 	str.w	r1, [r3], #4
  409b00:	459a      	cmp	sl, r3
  409b02:	d8fb      	bhi.n	409afc <__multiply+0x44>
  409b04:	f106 0c14 	add.w	ip, r6, #20
  409b08:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  409b0c:	f10b 0b14 	add.w	fp, fp, #20
  409b10:	459c      	cmp	ip, r3
  409b12:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  409b16:	d24c      	bcs.n	409bb2 <__multiply+0xfa>
  409b18:	f8cd a004 	str.w	sl, [sp, #4]
  409b1c:	469a      	mov	sl, r3
  409b1e:	f8dc 5000 	ldr.w	r5, [ip]
  409b22:	b2af      	uxth	r7, r5
  409b24:	b1ef      	cbz	r7, 409b62 <__multiply+0xaa>
  409b26:	2100      	movs	r1, #0
  409b28:	464d      	mov	r5, r9
  409b2a:	465e      	mov	r6, fp
  409b2c:	460c      	mov	r4, r1
  409b2e:	f856 2b04 	ldr.w	r2, [r6], #4
  409b32:	6828      	ldr	r0, [r5, #0]
  409b34:	b293      	uxth	r3, r2
  409b36:	b281      	uxth	r1, r0
  409b38:	fb07 1303 	mla	r3, r7, r3, r1
  409b3c:	0c12      	lsrs	r2, r2, #16
  409b3e:	0c01      	lsrs	r1, r0, #16
  409b40:	4423      	add	r3, r4
  409b42:	fb07 1102 	mla	r1, r7, r2, r1
  409b46:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  409b4a:	b29b      	uxth	r3, r3
  409b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  409b50:	45b6      	cmp	lr, r6
  409b52:	f845 3b04 	str.w	r3, [r5], #4
  409b56:	ea4f 4411 	mov.w	r4, r1, lsr #16
  409b5a:	d8e8      	bhi.n	409b2e <__multiply+0x76>
  409b5c:	602c      	str	r4, [r5, #0]
  409b5e:	f8dc 5000 	ldr.w	r5, [ip]
  409b62:	0c2d      	lsrs	r5, r5, #16
  409b64:	d01d      	beq.n	409ba2 <__multiply+0xea>
  409b66:	f8d9 3000 	ldr.w	r3, [r9]
  409b6a:	4648      	mov	r0, r9
  409b6c:	461c      	mov	r4, r3
  409b6e:	4659      	mov	r1, fp
  409b70:	2200      	movs	r2, #0
  409b72:	880e      	ldrh	r6, [r1, #0]
  409b74:	0c24      	lsrs	r4, r4, #16
  409b76:	fb05 4406 	mla	r4, r5, r6, r4
  409b7a:	4422      	add	r2, r4
  409b7c:	b29b      	uxth	r3, r3
  409b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  409b82:	f840 3b04 	str.w	r3, [r0], #4
  409b86:	f851 3b04 	ldr.w	r3, [r1], #4
  409b8a:	6804      	ldr	r4, [r0, #0]
  409b8c:	0c1b      	lsrs	r3, r3, #16
  409b8e:	b2a6      	uxth	r6, r4
  409b90:	fb05 6303 	mla	r3, r5, r3, r6
  409b94:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  409b98:	458e      	cmp	lr, r1
  409b9a:	ea4f 4213 	mov.w	r2, r3, lsr #16
  409b9e:	d8e8      	bhi.n	409b72 <__multiply+0xba>
  409ba0:	6003      	str	r3, [r0, #0]
  409ba2:	f10c 0c04 	add.w	ip, ip, #4
  409ba6:	45e2      	cmp	sl, ip
  409ba8:	f109 0904 	add.w	r9, r9, #4
  409bac:	d8b7      	bhi.n	409b1e <__multiply+0x66>
  409bae:	f8dd a004 	ldr.w	sl, [sp, #4]
  409bb2:	f1b8 0f00 	cmp.w	r8, #0
  409bb6:	dd0b      	ble.n	409bd0 <__multiply+0x118>
  409bb8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  409bbc:	f1aa 0a04 	sub.w	sl, sl, #4
  409bc0:	b11b      	cbz	r3, 409bca <__multiply+0x112>
  409bc2:	e005      	b.n	409bd0 <__multiply+0x118>
  409bc4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  409bc8:	b913      	cbnz	r3, 409bd0 <__multiply+0x118>
  409bca:	f1b8 0801 	subs.w	r8, r8, #1
  409bce:	d1f9      	bne.n	409bc4 <__multiply+0x10c>
  409bd0:	9800      	ldr	r0, [sp, #0]
  409bd2:	f8c0 8010 	str.w	r8, [r0, #16]
  409bd6:	b003      	add	sp, #12
  409bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409bdc <__pow5mult>:
  409bdc:	f012 0303 	ands.w	r3, r2, #3
  409be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409be4:	4614      	mov	r4, r2
  409be6:	4607      	mov	r7, r0
  409be8:	d12e      	bne.n	409c48 <__pow5mult+0x6c>
  409bea:	460d      	mov	r5, r1
  409bec:	10a4      	asrs	r4, r4, #2
  409bee:	d01c      	beq.n	409c2a <__pow5mult+0x4e>
  409bf0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  409bf2:	b396      	cbz	r6, 409c5a <__pow5mult+0x7e>
  409bf4:	07e3      	lsls	r3, r4, #31
  409bf6:	f04f 0800 	mov.w	r8, #0
  409bfa:	d406      	bmi.n	409c0a <__pow5mult+0x2e>
  409bfc:	1064      	asrs	r4, r4, #1
  409bfe:	d014      	beq.n	409c2a <__pow5mult+0x4e>
  409c00:	6830      	ldr	r0, [r6, #0]
  409c02:	b1a8      	cbz	r0, 409c30 <__pow5mult+0x54>
  409c04:	4606      	mov	r6, r0
  409c06:	07e3      	lsls	r3, r4, #31
  409c08:	d5f8      	bpl.n	409bfc <__pow5mult+0x20>
  409c0a:	4632      	mov	r2, r6
  409c0c:	4629      	mov	r1, r5
  409c0e:	4638      	mov	r0, r7
  409c10:	f7ff ff52 	bl	409ab8 <__multiply>
  409c14:	b1b5      	cbz	r5, 409c44 <__pow5mult+0x68>
  409c16:	686a      	ldr	r2, [r5, #4]
  409c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409c1a:	1064      	asrs	r4, r4, #1
  409c1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409c20:	6029      	str	r1, [r5, #0]
  409c22:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  409c26:	4605      	mov	r5, r0
  409c28:	d1ea      	bne.n	409c00 <__pow5mult+0x24>
  409c2a:	4628      	mov	r0, r5
  409c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409c30:	4632      	mov	r2, r6
  409c32:	4631      	mov	r1, r6
  409c34:	4638      	mov	r0, r7
  409c36:	f7ff ff3f 	bl	409ab8 <__multiply>
  409c3a:	6030      	str	r0, [r6, #0]
  409c3c:	f8c0 8000 	str.w	r8, [r0]
  409c40:	4606      	mov	r6, r0
  409c42:	e7e0      	b.n	409c06 <__pow5mult+0x2a>
  409c44:	4605      	mov	r5, r0
  409c46:	e7d9      	b.n	409bfc <__pow5mult+0x20>
  409c48:	1e5a      	subs	r2, r3, #1
  409c4a:	4d0b      	ldr	r5, [pc, #44]	; (409c78 <__pow5mult+0x9c>)
  409c4c:	2300      	movs	r3, #0
  409c4e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  409c52:	f7ff fe97 	bl	409984 <__multadd>
  409c56:	4605      	mov	r5, r0
  409c58:	e7c8      	b.n	409bec <__pow5mult+0x10>
  409c5a:	2101      	movs	r1, #1
  409c5c:	4638      	mov	r0, r7
  409c5e:	f7ff fe61 	bl	409924 <_Balloc>
  409c62:	f240 2171 	movw	r1, #625	; 0x271
  409c66:	2201      	movs	r2, #1
  409c68:	2300      	movs	r3, #0
  409c6a:	6141      	str	r1, [r0, #20]
  409c6c:	6102      	str	r2, [r0, #16]
  409c6e:	4606      	mov	r6, r0
  409c70:	64b8      	str	r0, [r7, #72]	; 0x48
  409c72:	6003      	str	r3, [r0, #0]
  409c74:	e7be      	b.n	409bf4 <__pow5mult+0x18>
  409c76:	bf00      	nop
  409c78:	0040b2b8 	.word	0x0040b2b8

00409c7c <__lshift>:
  409c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409c80:	4691      	mov	r9, r2
  409c82:	690a      	ldr	r2, [r1, #16]
  409c84:	688b      	ldr	r3, [r1, #8]
  409c86:	ea4f 1469 	mov.w	r4, r9, asr #5
  409c8a:	eb04 0802 	add.w	r8, r4, r2
  409c8e:	f108 0501 	add.w	r5, r8, #1
  409c92:	429d      	cmp	r5, r3
  409c94:	460e      	mov	r6, r1
  409c96:	4607      	mov	r7, r0
  409c98:	6849      	ldr	r1, [r1, #4]
  409c9a:	dd04      	ble.n	409ca6 <__lshift+0x2a>
  409c9c:	005b      	lsls	r3, r3, #1
  409c9e:	429d      	cmp	r5, r3
  409ca0:	f101 0101 	add.w	r1, r1, #1
  409ca4:	dcfa      	bgt.n	409c9c <__lshift+0x20>
  409ca6:	4638      	mov	r0, r7
  409ca8:	f7ff fe3c 	bl	409924 <_Balloc>
  409cac:	2c00      	cmp	r4, #0
  409cae:	f100 0314 	add.w	r3, r0, #20
  409cb2:	dd06      	ble.n	409cc2 <__lshift+0x46>
  409cb4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  409cb8:	2100      	movs	r1, #0
  409cba:	f843 1b04 	str.w	r1, [r3], #4
  409cbe:	429a      	cmp	r2, r3
  409cc0:	d1fb      	bne.n	409cba <__lshift+0x3e>
  409cc2:	6934      	ldr	r4, [r6, #16]
  409cc4:	f106 0114 	add.w	r1, r6, #20
  409cc8:	f019 091f 	ands.w	r9, r9, #31
  409ccc:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  409cd0:	d01d      	beq.n	409d0e <__lshift+0x92>
  409cd2:	f1c9 0c20 	rsb	ip, r9, #32
  409cd6:	2200      	movs	r2, #0
  409cd8:	680c      	ldr	r4, [r1, #0]
  409cda:	fa04 f409 	lsl.w	r4, r4, r9
  409cde:	4314      	orrs	r4, r2
  409ce0:	f843 4b04 	str.w	r4, [r3], #4
  409ce4:	f851 2b04 	ldr.w	r2, [r1], #4
  409ce8:	458e      	cmp	lr, r1
  409cea:	fa22 f20c 	lsr.w	r2, r2, ip
  409cee:	d8f3      	bhi.n	409cd8 <__lshift+0x5c>
  409cf0:	601a      	str	r2, [r3, #0]
  409cf2:	b10a      	cbz	r2, 409cf8 <__lshift+0x7c>
  409cf4:	f108 0502 	add.w	r5, r8, #2
  409cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409cfa:	6872      	ldr	r2, [r6, #4]
  409cfc:	3d01      	subs	r5, #1
  409cfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409d02:	6105      	str	r5, [r0, #16]
  409d04:	6031      	str	r1, [r6, #0]
  409d06:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  409d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409d0e:	3b04      	subs	r3, #4
  409d10:	f851 2b04 	ldr.w	r2, [r1], #4
  409d14:	f843 2f04 	str.w	r2, [r3, #4]!
  409d18:	458e      	cmp	lr, r1
  409d1a:	d8f9      	bhi.n	409d10 <__lshift+0x94>
  409d1c:	e7ec      	b.n	409cf8 <__lshift+0x7c>
  409d1e:	bf00      	nop

00409d20 <__mcmp>:
  409d20:	b430      	push	{r4, r5}
  409d22:	690b      	ldr	r3, [r1, #16]
  409d24:	4605      	mov	r5, r0
  409d26:	6900      	ldr	r0, [r0, #16]
  409d28:	1ac0      	subs	r0, r0, r3
  409d2a:	d10f      	bne.n	409d4c <__mcmp+0x2c>
  409d2c:	009b      	lsls	r3, r3, #2
  409d2e:	3514      	adds	r5, #20
  409d30:	3114      	adds	r1, #20
  409d32:	4419      	add	r1, r3
  409d34:	442b      	add	r3, r5
  409d36:	e001      	b.n	409d3c <__mcmp+0x1c>
  409d38:	429d      	cmp	r5, r3
  409d3a:	d207      	bcs.n	409d4c <__mcmp+0x2c>
  409d3c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  409d40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  409d44:	4294      	cmp	r4, r2
  409d46:	d0f7      	beq.n	409d38 <__mcmp+0x18>
  409d48:	d302      	bcc.n	409d50 <__mcmp+0x30>
  409d4a:	2001      	movs	r0, #1
  409d4c:	bc30      	pop	{r4, r5}
  409d4e:	4770      	bx	lr
  409d50:	f04f 30ff 	mov.w	r0, #4294967295
  409d54:	e7fa      	b.n	409d4c <__mcmp+0x2c>
  409d56:	bf00      	nop

00409d58 <__mdiff>:
  409d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409d5c:	690f      	ldr	r7, [r1, #16]
  409d5e:	460e      	mov	r6, r1
  409d60:	6911      	ldr	r1, [r2, #16]
  409d62:	1a7f      	subs	r7, r7, r1
  409d64:	2f00      	cmp	r7, #0
  409d66:	4690      	mov	r8, r2
  409d68:	d117      	bne.n	409d9a <__mdiff+0x42>
  409d6a:	0089      	lsls	r1, r1, #2
  409d6c:	f106 0514 	add.w	r5, r6, #20
  409d70:	f102 0e14 	add.w	lr, r2, #20
  409d74:	186b      	adds	r3, r5, r1
  409d76:	4471      	add	r1, lr
  409d78:	e001      	b.n	409d7e <__mdiff+0x26>
  409d7a:	429d      	cmp	r5, r3
  409d7c:	d25c      	bcs.n	409e38 <__mdiff+0xe0>
  409d7e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  409d82:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  409d86:	42a2      	cmp	r2, r4
  409d88:	d0f7      	beq.n	409d7a <__mdiff+0x22>
  409d8a:	d25e      	bcs.n	409e4a <__mdiff+0xf2>
  409d8c:	4633      	mov	r3, r6
  409d8e:	462c      	mov	r4, r5
  409d90:	4646      	mov	r6, r8
  409d92:	4675      	mov	r5, lr
  409d94:	4698      	mov	r8, r3
  409d96:	2701      	movs	r7, #1
  409d98:	e005      	b.n	409da6 <__mdiff+0x4e>
  409d9a:	db58      	blt.n	409e4e <__mdiff+0xf6>
  409d9c:	f106 0514 	add.w	r5, r6, #20
  409da0:	f108 0414 	add.w	r4, r8, #20
  409da4:	2700      	movs	r7, #0
  409da6:	6871      	ldr	r1, [r6, #4]
  409da8:	f7ff fdbc 	bl	409924 <_Balloc>
  409dac:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409db0:	6936      	ldr	r6, [r6, #16]
  409db2:	60c7      	str	r7, [r0, #12]
  409db4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  409db8:	46a6      	mov	lr, r4
  409dba:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  409dbe:	f100 0414 	add.w	r4, r0, #20
  409dc2:	2300      	movs	r3, #0
  409dc4:	f85e 1b04 	ldr.w	r1, [lr], #4
  409dc8:	f855 8b04 	ldr.w	r8, [r5], #4
  409dcc:	b28a      	uxth	r2, r1
  409dce:	fa13 f388 	uxtah	r3, r3, r8
  409dd2:	0c09      	lsrs	r1, r1, #16
  409dd4:	1a9a      	subs	r2, r3, r2
  409dd6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  409dda:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409dde:	b292      	uxth	r2, r2
  409de0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409de4:	45f4      	cmp	ip, lr
  409de6:	f844 2b04 	str.w	r2, [r4], #4
  409dea:	ea4f 4323 	mov.w	r3, r3, asr #16
  409dee:	d8e9      	bhi.n	409dc4 <__mdiff+0x6c>
  409df0:	42af      	cmp	r7, r5
  409df2:	d917      	bls.n	409e24 <__mdiff+0xcc>
  409df4:	46a4      	mov	ip, r4
  409df6:	46ae      	mov	lr, r5
  409df8:	f85e 2b04 	ldr.w	r2, [lr], #4
  409dfc:	fa13 f382 	uxtah	r3, r3, r2
  409e00:	1419      	asrs	r1, r3, #16
  409e02:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  409e06:	b29b      	uxth	r3, r3
  409e08:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409e0c:	4577      	cmp	r7, lr
  409e0e:	f84c 2b04 	str.w	r2, [ip], #4
  409e12:	ea4f 4321 	mov.w	r3, r1, asr #16
  409e16:	d8ef      	bhi.n	409df8 <__mdiff+0xa0>
  409e18:	43ed      	mvns	r5, r5
  409e1a:	442f      	add	r7, r5
  409e1c:	f027 0703 	bic.w	r7, r7, #3
  409e20:	3704      	adds	r7, #4
  409e22:	443c      	add	r4, r7
  409e24:	3c04      	subs	r4, #4
  409e26:	b922      	cbnz	r2, 409e32 <__mdiff+0xda>
  409e28:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409e2c:	3e01      	subs	r6, #1
  409e2e:	2b00      	cmp	r3, #0
  409e30:	d0fa      	beq.n	409e28 <__mdiff+0xd0>
  409e32:	6106      	str	r6, [r0, #16]
  409e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409e38:	2100      	movs	r1, #0
  409e3a:	f7ff fd73 	bl	409924 <_Balloc>
  409e3e:	2201      	movs	r2, #1
  409e40:	2300      	movs	r3, #0
  409e42:	6102      	str	r2, [r0, #16]
  409e44:	6143      	str	r3, [r0, #20]
  409e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409e4a:	4674      	mov	r4, lr
  409e4c:	e7ab      	b.n	409da6 <__mdiff+0x4e>
  409e4e:	4633      	mov	r3, r6
  409e50:	f106 0414 	add.w	r4, r6, #20
  409e54:	f102 0514 	add.w	r5, r2, #20
  409e58:	4616      	mov	r6, r2
  409e5a:	2701      	movs	r7, #1
  409e5c:	4698      	mov	r8, r3
  409e5e:	e7a2      	b.n	409da6 <__mdiff+0x4e>

00409e60 <__d2b>:
  409e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409e64:	b082      	sub	sp, #8
  409e66:	2101      	movs	r1, #1
  409e68:	461c      	mov	r4, r3
  409e6a:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409e6e:	4615      	mov	r5, r2
  409e70:	9e08      	ldr	r6, [sp, #32]
  409e72:	f7ff fd57 	bl	409924 <_Balloc>
  409e76:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409e7a:	4680      	mov	r8, r0
  409e7c:	b10f      	cbz	r7, 409e82 <__d2b+0x22>
  409e7e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409e82:	9401      	str	r4, [sp, #4]
  409e84:	b31d      	cbz	r5, 409ece <__d2b+0x6e>
  409e86:	a802      	add	r0, sp, #8
  409e88:	f840 5d08 	str.w	r5, [r0, #-8]!
  409e8c:	f7ff fdda 	bl	409a44 <__lo0bits>
  409e90:	2800      	cmp	r0, #0
  409e92:	d134      	bne.n	409efe <__d2b+0x9e>
  409e94:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409e98:	f8c8 2014 	str.w	r2, [r8, #20]
  409e9c:	2b00      	cmp	r3, #0
  409e9e:	bf0c      	ite	eq
  409ea0:	2101      	moveq	r1, #1
  409ea2:	2102      	movne	r1, #2
  409ea4:	f8c8 3018 	str.w	r3, [r8, #24]
  409ea8:	f8c8 1010 	str.w	r1, [r8, #16]
  409eac:	b9df      	cbnz	r7, 409ee6 <__d2b+0x86>
  409eae:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409eb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409eb6:	6030      	str	r0, [r6, #0]
  409eb8:	6918      	ldr	r0, [r3, #16]
  409eba:	f7ff fda3 	bl	409a04 <__hi0bits>
  409ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409ec0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409ec4:	6018      	str	r0, [r3, #0]
  409ec6:	4640      	mov	r0, r8
  409ec8:	b002      	add	sp, #8
  409eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409ece:	a801      	add	r0, sp, #4
  409ed0:	f7ff fdb8 	bl	409a44 <__lo0bits>
  409ed4:	9b01      	ldr	r3, [sp, #4]
  409ed6:	f8c8 3014 	str.w	r3, [r8, #20]
  409eda:	2101      	movs	r1, #1
  409edc:	3020      	adds	r0, #32
  409ede:	f8c8 1010 	str.w	r1, [r8, #16]
  409ee2:	2f00      	cmp	r7, #0
  409ee4:	d0e3      	beq.n	409eae <__d2b+0x4e>
  409ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409ee8:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409eec:	4407      	add	r7, r0
  409eee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409ef2:	6037      	str	r7, [r6, #0]
  409ef4:	6018      	str	r0, [r3, #0]
  409ef6:	4640      	mov	r0, r8
  409ef8:	b002      	add	sp, #8
  409efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409efe:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409f02:	f1c0 0220 	rsb	r2, r0, #32
  409f06:	fa03 f202 	lsl.w	r2, r3, r2
  409f0a:	430a      	orrs	r2, r1
  409f0c:	40c3      	lsrs	r3, r0
  409f0e:	9301      	str	r3, [sp, #4]
  409f10:	f8c8 2014 	str.w	r2, [r8, #20]
  409f14:	e7c2      	b.n	409e9c <__d2b+0x3c>
  409f16:	bf00      	nop

00409f18 <_realloc_r>:
  409f18:	2900      	cmp	r1, #0
  409f1a:	f000 8095 	beq.w	40a048 <_realloc_r+0x130>
  409f1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409f22:	460d      	mov	r5, r1
  409f24:	4616      	mov	r6, r2
  409f26:	b083      	sub	sp, #12
  409f28:	4680      	mov	r8, r0
  409f2a:	f106 070b 	add.w	r7, r6, #11
  409f2e:	f7ff fced 	bl	40990c <__malloc_lock>
  409f32:	f855 ec04 	ldr.w	lr, [r5, #-4]
  409f36:	2f16      	cmp	r7, #22
  409f38:	f02e 0403 	bic.w	r4, lr, #3
  409f3c:	f1a5 0908 	sub.w	r9, r5, #8
  409f40:	d83c      	bhi.n	409fbc <_realloc_r+0xa4>
  409f42:	2210      	movs	r2, #16
  409f44:	4617      	mov	r7, r2
  409f46:	42be      	cmp	r6, r7
  409f48:	d83d      	bhi.n	409fc6 <_realloc_r+0xae>
  409f4a:	4294      	cmp	r4, r2
  409f4c:	da43      	bge.n	409fd6 <_realloc_r+0xbe>
  409f4e:	4bc4      	ldr	r3, [pc, #784]	; (40a260 <_realloc_r+0x348>)
  409f50:	6899      	ldr	r1, [r3, #8]
  409f52:	eb09 0004 	add.w	r0, r9, r4
  409f56:	4288      	cmp	r0, r1
  409f58:	f000 80b4 	beq.w	40a0c4 <_realloc_r+0x1ac>
  409f5c:	6843      	ldr	r3, [r0, #4]
  409f5e:	f023 0101 	bic.w	r1, r3, #1
  409f62:	4401      	add	r1, r0
  409f64:	6849      	ldr	r1, [r1, #4]
  409f66:	07c9      	lsls	r1, r1, #31
  409f68:	d54c      	bpl.n	40a004 <_realloc_r+0xec>
  409f6a:	f01e 0f01 	tst.w	lr, #1
  409f6e:	f000 809b 	beq.w	40a0a8 <_realloc_r+0x190>
  409f72:	4631      	mov	r1, r6
  409f74:	4640      	mov	r0, r8
  409f76:	f7ff f8af 	bl	4090d8 <_malloc_r>
  409f7a:	4606      	mov	r6, r0
  409f7c:	2800      	cmp	r0, #0
  409f7e:	d03a      	beq.n	409ff6 <_realloc_r+0xde>
  409f80:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409f84:	f023 0301 	bic.w	r3, r3, #1
  409f88:	444b      	add	r3, r9
  409f8a:	f1a0 0208 	sub.w	r2, r0, #8
  409f8e:	429a      	cmp	r2, r3
  409f90:	f000 8121 	beq.w	40a1d6 <_realloc_r+0x2be>
  409f94:	1f22      	subs	r2, r4, #4
  409f96:	2a24      	cmp	r2, #36	; 0x24
  409f98:	f200 8107 	bhi.w	40a1aa <_realloc_r+0x292>
  409f9c:	2a13      	cmp	r2, #19
  409f9e:	f200 80db 	bhi.w	40a158 <_realloc_r+0x240>
  409fa2:	4603      	mov	r3, r0
  409fa4:	462a      	mov	r2, r5
  409fa6:	6811      	ldr	r1, [r2, #0]
  409fa8:	6019      	str	r1, [r3, #0]
  409faa:	6851      	ldr	r1, [r2, #4]
  409fac:	6059      	str	r1, [r3, #4]
  409fae:	6892      	ldr	r2, [r2, #8]
  409fb0:	609a      	str	r2, [r3, #8]
  409fb2:	4629      	mov	r1, r5
  409fb4:	4640      	mov	r0, r8
  409fb6:	f7fe ff97 	bl	408ee8 <_free_r>
  409fba:	e01c      	b.n	409ff6 <_realloc_r+0xde>
  409fbc:	f027 0707 	bic.w	r7, r7, #7
  409fc0:	2f00      	cmp	r7, #0
  409fc2:	463a      	mov	r2, r7
  409fc4:	dabf      	bge.n	409f46 <_realloc_r+0x2e>
  409fc6:	2600      	movs	r6, #0
  409fc8:	230c      	movs	r3, #12
  409fca:	4630      	mov	r0, r6
  409fcc:	f8c8 3000 	str.w	r3, [r8]
  409fd0:	b003      	add	sp, #12
  409fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409fd6:	462e      	mov	r6, r5
  409fd8:	1be3      	subs	r3, r4, r7
  409fda:	2b0f      	cmp	r3, #15
  409fdc:	d81e      	bhi.n	40a01c <_realloc_r+0x104>
  409fde:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409fe2:	f003 0301 	and.w	r3, r3, #1
  409fe6:	4323      	orrs	r3, r4
  409fe8:	444c      	add	r4, r9
  409fea:	f8c9 3004 	str.w	r3, [r9, #4]
  409fee:	6863      	ldr	r3, [r4, #4]
  409ff0:	f043 0301 	orr.w	r3, r3, #1
  409ff4:	6063      	str	r3, [r4, #4]
  409ff6:	4640      	mov	r0, r8
  409ff8:	f7ff fc8e 	bl	409918 <__malloc_unlock>
  409ffc:	4630      	mov	r0, r6
  409ffe:	b003      	add	sp, #12
  40a000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a004:	f023 0303 	bic.w	r3, r3, #3
  40a008:	18e1      	adds	r1, r4, r3
  40a00a:	4291      	cmp	r1, r2
  40a00c:	db1f      	blt.n	40a04e <_realloc_r+0x136>
  40a00e:	68c3      	ldr	r3, [r0, #12]
  40a010:	6882      	ldr	r2, [r0, #8]
  40a012:	462e      	mov	r6, r5
  40a014:	60d3      	str	r3, [r2, #12]
  40a016:	460c      	mov	r4, r1
  40a018:	609a      	str	r2, [r3, #8]
  40a01a:	e7dd      	b.n	409fd8 <_realloc_r+0xc0>
  40a01c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40a020:	eb09 0107 	add.w	r1, r9, r7
  40a024:	f002 0201 	and.w	r2, r2, #1
  40a028:	444c      	add	r4, r9
  40a02a:	f043 0301 	orr.w	r3, r3, #1
  40a02e:	4317      	orrs	r7, r2
  40a030:	f8c9 7004 	str.w	r7, [r9, #4]
  40a034:	604b      	str	r3, [r1, #4]
  40a036:	6863      	ldr	r3, [r4, #4]
  40a038:	f043 0301 	orr.w	r3, r3, #1
  40a03c:	3108      	adds	r1, #8
  40a03e:	6063      	str	r3, [r4, #4]
  40a040:	4640      	mov	r0, r8
  40a042:	f7fe ff51 	bl	408ee8 <_free_r>
  40a046:	e7d6      	b.n	409ff6 <_realloc_r+0xde>
  40a048:	4611      	mov	r1, r2
  40a04a:	f7ff b845 	b.w	4090d8 <_malloc_r>
  40a04e:	f01e 0f01 	tst.w	lr, #1
  40a052:	d18e      	bne.n	409f72 <_realloc_r+0x5a>
  40a054:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40a058:	eba9 0a01 	sub.w	sl, r9, r1
  40a05c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a060:	f021 0103 	bic.w	r1, r1, #3
  40a064:	440b      	add	r3, r1
  40a066:	4423      	add	r3, r4
  40a068:	4293      	cmp	r3, r2
  40a06a:	db25      	blt.n	40a0b8 <_realloc_r+0x1a0>
  40a06c:	68c2      	ldr	r2, [r0, #12]
  40a06e:	6881      	ldr	r1, [r0, #8]
  40a070:	4656      	mov	r6, sl
  40a072:	60ca      	str	r2, [r1, #12]
  40a074:	6091      	str	r1, [r2, #8]
  40a076:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a07a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40a07e:	1f22      	subs	r2, r4, #4
  40a080:	2a24      	cmp	r2, #36	; 0x24
  40a082:	60c1      	str	r1, [r0, #12]
  40a084:	6088      	str	r0, [r1, #8]
  40a086:	f200 8094 	bhi.w	40a1b2 <_realloc_r+0x29a>
  40a08a:	2a13      	cmp	r2, #19
  40a08c:	d96f      	bls.n	40a16e <_realloc_r+0x256>
  40a08e:	6829      	ldr	r1, [r5, #0]
  40a090:	f8ca 1008 	str.w	r1, [sl, #8]
  40a094:	6869      	ldr	r1, [r5, #4]
  40a096:	f8ca 100c 	str.w	r1, [sl, #12]
  40a09a:	2a1b      	cmp	r2, #27
  40a09c:	f200 80a2 	bhi.w	40a1e4 <_realloc_r+0x2cc>
  40a0a0:	3508      	adds	r5, #8
  40a0a2:	f10a 0210 	add.w	r2, sl, #16
  40a0a6:	e063      	b.n	40a170 <_realloc_r+0x258>
  40a0a8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40a0ac:	eba9 0a03 	sub.w	sl, r9, r3
  40a0b0:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a0b4:	f021 0103 	bic.w	r1, r1, #3
  40a0b8:	1863      	adds	r3, r4, r1
  40a0ba:	4293      	cmp	r3, r2
  40a0bc:	f6ff af59 	blt.w	409f72 <_realloc_r+0x5a>
  40a0c0:	4656      	mov	r6, sl
  40a0c2:	e7d8      	b.n	40a076 <_realloc_r+0x15e>
  40a0c4:	6841      	ldr	r1, [r0, #4]
  40a0c6:	f021 0b03 	bic.w	fp, r1, #3
  40a0ca:	44a3      	add	fp, r4
  40a0cc:	f107 0010 	add.w	r0, r7, #16
  40a0d0:	4583      	cmp	fp, r0
  40a0d2:	da56      	bge.n	40a182 <_realloc_r+0x26a>
  40a0d4:	f01e 0f01 	tst.w	lr, #1
  40a0d8:	f47f af4b 	bne.w	409f72 <_realloc_r+0x5a>
  40a0dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40a0e0:	eba9 0a01 	sub.w	sl, r9, r1
  40a0e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a0e8:	f021 0103 	bic.w	r1, r1, #3
  40a0ec:	448b      	add	fp, r1
  40a0ee:	4558      	cmp	r0, fp
  40a0f0:	dce2      	bgt.n	40a0b8 <_realloc_r+0x1a0>
  40a0f2:	4656      	mov	r6, sl
  40a0f4:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a0f8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40a0fc:	1f22      	subs	r2, r4, #4
  40a0fe:	2a24      	cmp	r2, #36	; 0x24
  40a100:	60c1      	str	r1, [r0, #12]
  40a102:	6088      	str	r0, [r1, #8]
  40a104:	f200 808f 	bhi.w	40a226 <_realloc_r+0x30e>
  40a108:	2a13      	cmp	r2, #19
  40a10a:	f240 808a 	bls.w	40a222 <_realloc_r+0x30a>
  40a10e:	6829      	ldr	r1, [r5, #0]
  40a110:	f8ca 1008 	str.w	r1, [sl, #8]
  40a114:	6869      	ldr	r1, [r5, #4]
  40a116:	f8ca 100c 	str.w	r1, [sl, #12]
  40a11a:	2a1b      	cmp	r2, #27
  40a11c:	f200 808a 	bhi.w	40a234 <_realloc_r+0x31c>
  40a120:	3508      	adds	r5, #8
  40a122:	f10a 0210 	add.w	r2, sl, #16
  40a126:	6829      	ldr	r1, [r5, #0]
  40a128:	6011      	str	r1, [r2, #0]
  40a12a:	6869      	ldr	r1, [r5, #4]
  40a12c:	6051      	str	r1, [r2, #4]
  40a12e:	68a9      	ldr	r1, [r5, #8]
  40a130:	6091      	str	r1, [r2, #8]
  40a132:	eb0a 0107 	add.w	r1, sl, r7
  40a136:	ebab 0207 	sub.w	r2, fp, r7
  40a13a:	f042 0201 	orr.w	r2, r2, #1
  40a13e:	6099      	str	r1, [r3, #8]
  40a140:	604a      	str	r2, [r1, #4]
  40a142:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a146:	f003 0301 	and.w	r3, r3, #1
  40a14a:	431f      	orrs	r7, r3
  40a14c:	4640      	mov	r0, r8
  40a14e:	f8ca 7004 	str.w	r7, [sl, #4]
  40a152:	f7ff fbe1 	bl	409918 <__malloc_unlock>
  40a156:	e751      	b.n	409ffc <_realloc_r+0xe4>
  40a158:	682b      	ldr	r3, [r5, #0]
  40a15a:	6003      	str	r3, [r0, #0]
  40a15c:	686b      	ldr	r3, [r5, #4]
  40a15e:	6043      	str	r3, [r0, #4]
  40a160:	2a1b      	cmp	r2, #27
  40a162:	d82d      	bhi.n	40a1c0 <_realloc_r+0x2a8>
  40a164:	f100 0308 	add.w	r3, r0, #8
  40a168:	f105 0208 	add.w	r2, r5, #8
  40a16c:	e71b      	b.n	409fa6 <_realloc_r+0x8e>
  40a16e:	4632      	mov	r2, r6
  40a170:	6829      	ldr	r1, [r5, #0]
  40a172:	6011      	str	r1, [r2, #0]
  40a174:	6869      	ldr	r1, [r5, #4]
  40a176:	6051      	str	r1, [r2, #4]
  40a178:	68a9      	ldr	r1, [r5, #8]
  40a17a:	6091      	str	r1, [r2, #8]
  40a17c:	461c      	mov	r4, r3
  40a17e:	46d1      	mov	r9, sl
  40a180:	e72a      	b.n	409fd8 <_realloc_r+0xc0>
  40a182:	eb09 0107 	add.w	r1, r9, r7
  40a186:	ebab 0b07 	sub.w	fp, fp, r7
  40a18a:	f04b 0201 	orr.w	r2, fp, #1
  40a18e:	6099      	str	r1, [r3, #8]
  40a190:	604a      	str	r2, [r1, #4]
  40a192:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40a196:	f003 0301 	and.w	r3, r3, #1
  40a19a:	431f      	orrs	r7, r3
  40a19c:	4640      	mov	r0, r8
  40a19e:	f845 7c04 	str.w	r7, [r5, #-4]
  40a1a2:	f7ff fbb9 	bl	409918 <__malloc_unlock>
  40a1a6:	462e      	mov	r6, r5
  40a1a8:	e728      	b.n	409ffc <_realloc_r+0xe4>
  40a1aa:	4629      	mov	r1, r5
  40a1ac:	f7ff fb4a 	bl	409844 <memmove>
  40a1b0:	e6ff      	b.n	409fb2 <_realloc_r+0x9a>
  40a1b2:	4629      	mov	r1, r5
  40a1b4:	4630      	mov	r0, r6
  40a1b6:	461c      	mov	r4, r3
  40a1b8:	46d1      	mov	r9, sl
  40a1ba:	f7ff fb43 	bl	409844 <memmove>
  40a1be:	e70b      	b.n	409fd8 <_realloc_r+0xc0>
  40a1c0:	68ab      	ldr	r3, [r5, #8]
  40a1c2:	6083      	str	r3, [r0, #8]
  40a1c4:	68eb      	ldr	r3, [r5, #12]
  40a1c6:	60c3      	str	r3, [r0, #12]
  40a1c8:	2a24      	cmp	r2, #36	; 0x24
  40a1ca:	d017      	beq.n	40a1fc <_realloc_r+0x2e4>
  40a1cc:	f100 0310 	add.w	r3, r0, #16
  40a1d0:	f105 0210 	add.w	r2, r5, #16
  40a1d4:	e6e7      	b.n	409fa6 <_realloc_r+0x8e>
  40a1d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40a1da:	f023 0303 	bic.w	r3, r3, #3
  40a1de:	441c      	add	r4, r3
  40a1e0:	462e      	mov	r6, r5
  40a1e2:	e6f9      	b.n	409fd8 <_realloc_r+0xc0>
  40a1e4:	68a9      	ldr	r1, [r5, #8]
  40a1e6:	f8ca 1010 	str.w	r1, [sl, #16]
  40a1ea:	68e9      	ldr	r1, [r5, #12]
  40a1ec:	f8ca 1014 	str.w	r1, [sl, #20]
  40a1f0:	2a24      	cmp	r2, #36	; 0x24
  40a1f2:	d00c      	beq.n	40a20e <_realloc_r+0x2f6>
  40a1f4:	3510      	adds	r5, #16
  40a1f6:	f10a 0218 	add.w	r2, sl, #24
  40a1fa:	e7b9      	b.n	40a170 <_realloc_r+0x258>
  40a1fc:	692b      	ldr	r3, [r5, #16]
  40a1fe:	6103      	str	r3, [r0, #16]
  40a200:	696b      	ldr	r3, [r5, #20]
  40a202:	6143      	str	r3, [r0, #20]
  40a204:	f105 0218 	add.w	r2, r5, #24
  40a208:	f100 0318 	add.w	r3, r0, #24
  40a20c:	e6cb      	b.n	409fa6 <_realloc_r+0x8e>
  40a20e:	692a      	ldr	r2, [r5, #16]
  40a210:	f8ca 2018 	str.w	r2, [sl, #24]
  40a214:	696a      	ldr	r2, [r5, #20]
  40a216:	f8ca 201c 	str.w	r2, [sl, #28]
  40a21a:	3518      	adds	r5, #24
  40a21c:	f10a 0220 	add.w	r2, sl, #32
  40a220:	e7a6      	b.n	40a170 <_realloc_r+0x258>
  40a222:	4632      	mov	r2, r6
  40a224:	e77f      	b.n	40a126 <_realloc_r+0x20e>
  40a226:	4629      	mov	r1, r5
  40a228:	4630      	mov	r0, r6
  40a22a:	9301      	str	r3, [sp, #4]
  40a22c:	f7ff fb0a 	bl	409844 <memmove>
  40a230:	9b01      	ldr	r3, [sp, #4]
  40a232:	e77e      	b.n	40a132 <_realloc_r+0x21a>
  40a234:	68a9      	ldr	r1, [r5, #8]
  40a236:	f8ca 1010 	str.w	r1, [sl, #16]
  40a23a:	68e9      	ldr	r1, [r5, #12]
  40a23c:	f8ca 1014 	str.w	r1, [sl, #20]
  40a240:	2a24      	cmp	r2, #36	; 0x24
  40a242:	d003      	beq.n	40a24c <_realloc_r+0x334>
  40a244:	3510      	adds	r5, #16
  40a246:	f10a 0218 	add.w	r2, sl, #24
  40a24a:	e76c      	b.n	40a126 <_realloc_r+0x20e>
  40a24c:	692a      	ldr	r2, [r5, #16]
  40a24e:	f8ca 2018 	str.w	r2, [sl, #24]
  40a252:	696a      	ldr	r2, [r5, #20]
  40a254:	f8ca 201c 	str.w	r2, [sl, #28]
  40a258:	3518      	adds	r5, #24
  40a25a:	f10a 0220 	add.w	r2, sl, #32
  40a25e:	e762      	b.n	40a126 <_realloc_r+0x20e>
  40a260:	20000a20 	.word	0x20000a20

0040a264 <_sbrk_r>:
  40a264:	b538      	push	{r3, r4, r5, lr}
  40a266:	4c07      	ldr	r4, [pc, #28]	; (40a284 <_sbrk_r+0x20>)
  40a268:	2300      	movs	r3, #0
  40a26a:	4605      	mov	r5, r0
  40a26c:	4608      	mov	r0, r1
  40a26e:	6023      	str	r3, [r4, #0]
  40a270:	f7f9 fcd8 	bl	403c24 <_sbrk>
  40a274:	1c43      	adds	r3, r0, #1
  40a276:	d000      	beq.n	40a27a <_sbrk_r+0x16>
  40a278:	bd38      	pop	{r3, r4, r5, pc}
  40a27a:	6823      	ldr	r3, [r4, #0]
  40a27c:	2b00      	cmp	r3, #0
  40a27e:	d0fb      	beq.n	40a278 <_sbrk_r+0x14>
  40a280:	602b      	str	r3, [r5, #0]
  40a282:	bd38      	pop	{r3, r4, r5, pc}
  40a284:	20006258 	.word	0x20006258

0040a288 <__ssprint_r>:
  40a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a28c:	6893      	ldr	r3, [r2, #8]
  40a28e:	b083      	sub	sp, #12
  40a290:	4690      	mov	r8, r2
  40a292:	2b00      	cmp	r3, #0
  40a294:	d070      	beq.n	40a378 <__ssprint_r+0xf0>
  40a296:	4682      	mov	sl, r0
  40a298:	460c      	mov	r4, r1
  40a29a:	6817      	ldr	r7, [r2, #0]
  40a29c:	688d      	ldr	r5, [r1, #8]
  40a29e:	6808      	ldr	r0, [r1, #0]
  40a2a0:	e042      	b.n	40a328 <__ssprint_r+0xa0>
  40a2a2:	89a3      	ldrh	r3, [r4, #12]
  40a2a4:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40a2a8:	d02e      	beq.n	40a308 <__ssprint_r+0x80>
  40a2aa:	6965      	ldr	r5, [r4, #20]
  40a2ac:	6921      	ldr	r1, [r4, #16]
  40a2ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40a2b2:	eba0 0b01 	sub.w	fp, r0, r1
  40a2b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40a2ba:	f10b 0001 	add.w	r0, fp, #1
  40a2be:	106d      	asrs	r5, r5, #1
  40a2c0:	4430      	add	r0, r6
  40a2c2:	42a8      	cmp	r0, r5
  40a2c4:	462a      	mov	r2, r5
  40a2c6:	bf84      	itt	hi
  40a2c8:	4605      	movhi	r5, r0
  40a2ca:	462a      	movhi	r2, r5
  40a2cc:	055b      	lsls	r3, r3, #21
  40a2ce:	d538      	bpl.n	40a342 <__ssprint_r+0xba>
  40a2d0:	4611      	mov	r1, r2
  40a2d2:	4650      	mov	r0, sl
  40a2d4:	f7fe ff00 	bl	4090d8 <_malloc_r>
  40a2d8:	2800      	cmp	r0, #0
  40a2da:	d03c      	beq.n	40a356 <__ssprint_r+0xce>
  40a2dc:	465a      	mov	r2, fp
  40a2de:	6921      	ldr	r1, [r4, #16]
  40a2e0:	9001      	str	r0, [sp, #4]
  40a2e2:	f7ff fa15 	bl	409710 <memcpy>
  40a2e6:	89a2      	ldrh	r2, [r4, #12]
  40a2e8:	9b01      	ldr	r3, [sp, #4]
  40a2ea:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40a2ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40a2f2:	81a2      	strh	r2, [r4, #12]
  40a2f4:	eba5 020b 	sub.w	r2, r5, fp
  40a2f8:	eb03 000b 	add.w	r0, r3, fp
  40a2fc:	6165      	str	r5, [r4, #20]
  40a2fe:	6123      	str	r3, [r4, #16]
  40a300:	6020      	str	r0, [r4, #0]
  40a302:	60a2      	str	r2, [r4, #8]
  40a304:	4635      	mov	r5, r6
  40a306:	46b3      	mov	fp, r6
  40a308:	465a      	mov	r2, fp
  40a30a:	4649      	mov	r1, r9
  40a30c:	f7ff fa9a 	bl	409844 <memmove>
  40a310:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40a314:	68a2      	ldr	r2, [r4, #8]
  40a316:	6820      	ldr	r0, [r4, #0]
  40a318:	1b55      	subs	r5, r2, r5
  40a31a:	4458      	add	r0, fp
  40a31c:	1b9e      	subs	r6, r3, r6
  40a31e:	60a5      	str	r5, [r4, #8]
  40a320:	6020      	str	r0, [r4, #0]
  40a322:	f8c8 6008 	str.w	r6, [r8, #8]
  40a326:	b33e      	cbz	r6, 40a378 <__ssprint_r+0xf0>
  40a328:	687e      	ldr	r6, [r7, #4]
  40a32a:	463b      	mov	r3, r7
  40a32c:	3708      	adds	r7, #8
  40a32e:	2e00      	cmp	r6, #0
  40a330:	d0fa      	beq.n	40a328 <__ssprint_r+0xa0>
  40a332:	42ae      	cmp	r6, r5
  40a334:	f8d3 9000 	ldr.w	r9, [r3]
  40a338:	46ab      	mov	fp, r5
  40a33a:	d2b2      	bcs.n	40a2a2 <__ssprint_r+0x1a>
  40a33c:	4635      	mov	r5, r6
  40a33e:	46b3      	mov	fp, r6
  40a340:	e7e2      	b.n	40a308 <__ssprint_r+0x80>
  40a342:	4650      	mov	r0, sl
  40a344:	f7ff fde8 	bl	409f18 <_realloc_r>
  40a348:	4603      	mov	r3, r0
  40a34a:	2800      	cmp	r0, #0
  40a34c:	d1d2      	bne.n	40a2f4 <__ssprint_r+0x6c>
  40a34e:	6921      	ldr	r1, [r4, #16]
  40a350:	4650      	mov	r0, sl
  40a352:	f7fe fdc9 	bl	408ee8 <_free_r>
  40a356:	230c      	movs	r3, #12
  40a358:	f8ca 3000 	str.w	r3, [sl]
  40a35c:	89a3      	ldrh	r3, [r4, #12]
  40a35e:	2200      	movs	r2, #0
  40a360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a364:	f04f 30ff 	mov.w	r0, #4294967295
  40a368:	81a3      	strh	r3, [r4, #12]
  40a36a:	f8c8 2008 	str.w	r2, [r8, #8]
  40a36e:	f8c8 2004 	str.w	r2, [r8, #4]
  40a372:	b003      	add	sp, #12
  40a374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a378:	2000      	movs	r0, #0
  40a37a:	f8c8 0004 	str.w	r0, [r8, #4]
  40a37e:	b003      	add	sp, #12
  40a380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a384 <__ascii_wctomb>:
  40a384:	b121      	cbz	r1, 40a390 <__ascii_wctomb+0xc>
  40a386:	2aff      	cmp	r2, #255	; 0xff
  40a388:	d804      	bhi.n	40a394 <__ascii_wctomb+0x10>
  40a38a:	700a      	strb	r2, [r1, #0]
  40a38c:	2001      	movs	r0, #1
  40a38e:	4770      	bx	lr
  40a390:	4608      	mov	r0, r1
  40a392:	4770      	bx	lr
  40a394:	238a      	movs	r3, #138	; 0x8a
  40a396:	6003      	str	r3, [r0, #0]
  40a398:	f04f 30ff 	mov.w	r0, #4294967295
  40a39c:	4770      	bx	lr
  40a39e:	bf00      	nop

0040a3a0 <__register_exitproc>:
  40a3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a3a4:	4d2c      	ldr	r5, [pc, #176]	; (40a458 <__register_exitproc+0xb8>)
  40a3a6:	4606      	mov	r6, r0
  40a3a8:	6828      	ldr	r0, [r5, #0]
  40a3aa:	4698      	mov	r8, r3
  40a3ac:	460f      	mov	r7, r1
  40a3ae:	4691      	mov	r9, r2
  40a3b0:	f7fe fe8e 	bl	4090d0 <__retarget_lock_acquire_recursive>
  40a3b4:	4b29      	ldr	r3, [pc, #164]	; (40a45c <__register_exitproc+0xbc>)
  40a3b6:	681c      	ldr	r4, [r3, #0]
  40a3b8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40a3bc:	2b00      	cmp	r3, #0
  40a3be:	d03e      	beq.n	40a43e <__register_exitproc+0x9e>
  40a3c0:	685a      	ldr	r2, [r3, #4]
  40a3c2:	2a1f      	cmp	r2, #31
  40a3c4:	dc1c      	bgt.n	40a400 <__register_exitproc+0x60>
  40a3c6:	f102 0e01 	add.w	lr, r2, #1
  40a3ca:	b176      	cbz	r6, 40a3ea <__register_exitproc+0x4a>
  40a3cc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40a3d0:	2401      	movs	r4, #1
  40a3d2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40a3d6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40a3da:	4094      	lsls	r4, r2
  40a3dc:	4320      	orrs	r0, r4
  40a3de:	2e02      	cmp	r6, #2
  40a3e0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40a3e4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40a3e8:	d023      	beq.n	40a432 <__register_exitproc+0x92>
  40a3ea:	3202      	adds	r2, #2
  40a3ec:	f8c3 e004 	str.w	lr, [r3, #4]
  40a3f0:	6828      	ldr	r0, [r5, #0]
  40a3f2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40a3f6:	f7fe fe6d 	bl	4090d4 <__retarget_lock_release_recursive>
  40a3fa:	2000      	movs	r0, #0
  40a3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a400:	4b17      	ldr	r3, [pc, #92]	; (40a460 <__register_exitproc+0xc0>)
  40a402:	b30b      	cbz	r3, 40a448 <__register_exitproc+0xa8>
  40a404:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40a408:	f3af 8000 	nop.w
  40a40c:	4603      	mov	r3, r0
  40a40e:	b1d8      	cbz	r0, 40a448 <__register_exitproc+0xa8>
  40a410:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40a414:	6002      	str	r2, [r0, #0]
  40a416:	2100      	movs	r1, #0
  40a418:	6041      	str	r1, [r0, #4]
  40a41a:	460a      	mov	r2, r1
  40a41c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40a420:	f04f 0e01 	mov.w	lr, #1
  40a424:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40a428:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40a42c:	2e00      	cmp	r6, #0
  40a42e:	d0dc      	beq.n	40a3ea <__register_exitproc+0x4a>
  40a430:	e7cc      	b.n	40a3cc <__register_exitproc+0x2c>
  40a432:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40a436:	430c      	orrs	r4, r1
  40a438:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40a43c:	e7d5      	b.n	40a3ea <__register_exitproc+0x4a>
  40a43e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40a442:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40a446:	e7bb      	b.n	40a3c0 <__register_exitproc+0x20>
  40a448:	6828      	ldr	r0, [r5, #0]
  40a44a:	f7fe fe43 	bl	4090d4 <__retarget_lock_release_recursive>
  40a44e:	f04f 30ff 	mov.w	r0, #4294967295
  40a452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a456:	bf00      	nop
  40a458:	200008b0 	.word	0x200008b0
  40a45c:	0040b13c 	.word	0x0040b13c
  40a460:	00000000 	.word	0x00000000

0040a464 <_calloc_r>:
  40a464:	b510      	push	{r4, lr}
  40a466:	fb02 f101 	mul.w	r1, r2, r1
  40a46a:	f7fe fe35 	bl	4090d8 <_malloc_r>
  40a46e:	4604      	mov	r4, r0
  40a470:	b1d8      	cbz	r0, 40a4aa <_calloc_r+0x46>
  40a472:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a476:	f022 0203 	bic.w	r2, r2, #3
  40a47a:	3a04      	subs	r2, #4
  40a47c:	2a24      	cmp	r2, #36	; 0x24
  40a47e:	d818      	bhi.n	40a4b2 <_calloc_r+0x4e>
  40a480:	2a13      	cmp	r2, #19
  40a482:	d914      	bls.n	40a4ae <_calloc_r+0x4a>
  40a484:	2300      	movs	r3, #0
  40a486:	2a1b      	cmp	r2, #27
  40a488:	6003      	str	r3, [r0, #0]
  40a48a:	6043      	str	r3, [r0, #4]
  40a48c:	d916      	bls.n	40a4bc <_calloc_r+0x58>
  40a48e:	2a24      	cmp	r2, #36	; 0x24
  40a490:	6083      	str	r3, [r0, #8]
  40a492:	60c3      	str	r3, [r0, #12]
  40a494:	bf11      	iteee	ne
  40a496:	f100 0210 	addne.w	r2, r0, #16
  40a49a:	6103      	streq	r3, [r0, #16]
  40a49c:	6143      	streq	r3, [r0, #20]
  40a49e:	f100 0218 	addeq.w	r2, r0, #24
  40a4a2:	2300      	movs	r3, #0
  40a4a4:	6013      	str	r3, [r2, #0]
  40a4a6:	6053      	str	r3, [r2, #4]
  40a4a8:	6093      	str	r3, [r2, #8]
  40a4aa:	4620      	mov	r0, r4
  40a4ac:	bd10      	pop	{r4, pc}
  40a4ae:	4602      	mov	r2, r0
  40a4b0:	e7f7      	b.n	40a4a2 <_calloc_r+0x3e>
  40a4b2:	2100      	movs	r1, #0
  40a4b4:	f7fb ffee 	bl	406494 <memset>
  40a4b8:	4620      	mov	r0, r4
  40a4ba:	bd10      	pop	{r4, pc}
  40a4bc:	f100 0208 	add.w	r2, r0, #8
  40a4c0:	e7ef      	b.n	40a4a2 <_calloc_r+0x3e>
  40a4c2:	bf00      	nop

0040a4c4 <__gedf2>:
  40a4c4:	f04f 3cff 	mov.w	ip, #4294967295
  40a4c8:	e006      	b.n	40a4d8 <__cmpdf2+0x4>
  40a4ca:	bf00      	nop

0040a4cc <__ledf2>:
  40a4cc:	f04f 0c01 	mov.w	ip, #1
  40a4d0:	e002      	b.n	40a4d8 <__cmpdf2+0x4>
  40a4d2:	bf00      	nop

0040a4d4 <__cmpdf2>:
  40a4d4:	f04f 0c01 	mov.w	ip, #1
  40a4d8:	f84d cd04 	str.w	ip, [sp, #-4]!
  40a4dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a4e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a4e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a4e8:	bf18      	it	ne
  40a4ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40a4ee:	d01b      	beq.n	40a528 <__cmpdf2+0x54>
  40a4f0:	b001      	add	sp, #4
  40a4f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40a4f6:	bf0c      	ite	eq
  40a4f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40a4fc:	ea91 0f03 	teqne	r1, r3
  40a500:	bf02      	ittt	eq
  40a502:	ea90 0f02 	teqeq	r0, r2
  40a506:	2000      	moveq	r0, #0
  40a508:	4770      	bxeq	lr
  40a50a:	f110 0f00 	cmn.w	r0, #0
  40a50e:	ea91 0f03 	teq	r1, r3
  40a512:	bf58      	it	pl
  40a514:	4299      	cmppl	r1, r3
  40a516:	bf08      	it	eq
  40a518:	4290      	cmpeq	r0, r2
  40a51a:	bf2c      	ite	cs
  40a51c:	17d8      	asrcs	r0, r3, #31
  40a51e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40a522:	f040 0001 	orr.w	r0, r0, #1
  40a526:	4770      	bx	lr
  40a528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a52c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a530:	d102      	bne.n	40a538 <__cmpdf2+0x64>
  40a532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a536:	d107      	bne.n	40a548 <__cmpdf2+0x74>
  40a538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a53c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a540:	d1d6      	bne.n	40a4f0 <__cmpdf2+0x1c>
  40a542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a546:	d0d3      	beq.n	40a4f0 <__cmpdf2+0x1c>
  40a548:	f85d 0b04 	ldr.w	r0, [sp], #4
  40a54c:	4770      	bx	lr
  40a54e:	bf00      	nop

0040a550 <__aeabi_cdrcmple>:
  40a550:	4684      	mov	ip, r0
  40a552:	4610      	mov	r0, r2
  40a554:	4662      	mov	r2, ip
  40a556:	468c      	mov	ip, r1
  40a558:	4619      	mov	r1, r3
  40a55a:	4663      	mov	r3, ip
  40a55c:	e000      	b.n	40a560 <__aeabi_cdcmpeq>
  40a55e:	bf00      	nop

0040a560 <__aeabi_cdcmpeq>:
  40a560:	b501      	push	{r0, lr}
  40a562:	f7ff ffb7 	bl	40a4d4 <__cmpdf2>
  40a566:	2800      	cmp	r0, #0
  40a568:	bf48      	it	mi
  40a56a:	f110 0f00 	cmnmi.w	r0, #0
  40a56e:	bd01      	pop	{r0, pc}

0040a570 <__aeabi_dcmpeq>:
  40a570:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a574:	f7ff fff4 	bl	40a560 <__aeabi_cdcmpeq>
  40a578:	bf0c      	ite	eq
  40a57a:	2001      	moveq	r0, #1
  40a57c:	2000      	movne	r0, #0
  40a57e:	f85d fb08 	ldr.w	pc, [sp], #8
  40a582:	bf00      	nop

0040a584 <__aeabi_dcmplt>:
  40a584:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a588:	f7ff ffea 	bl	40a560 <__aeabi_cdcmpeq>
  40a58c:	bf34      	ite	cc
  40a58e:	2001      	movcc	r0, #1
  40a590:	2000      	movcs	r0, #0
  40a592:	f85d fb08 	ldr.w	pc, [sp], #8
  40a596:	bf00      	nop

0040a598 <__aeabi_dcmple>:
  40a598:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a59c:	f7ff ffe0 	bl	40a560 <__aeabi_cdcmpeq>
  40a5a0:	bf94      	ite	ls
  40a5a2:	2001      	movls	r0, #1
  40a5a4:	2000      	movhi	r0, #0
  40a5a6:	f85d fb08 	ldr.w	pc, [sp], #8
  40a5aa:	bf00      	nop

0040a5ac <__aeabi_dcmpge>:
  40a5ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a5b0:	f7ff ffce 	bl	40a550 <__aeabi_cdrcmple>
  40a5b4:	bf94      	ite	ls
  40a5b6:	2001      	movls	r0, #1
  40a5b8:	2000      	movhi	r0, #0
  40a5ba:	f85d fb08 	ldr.w	pc, [sp], #8
  40a5be:	bf00      	nop

0040a5c0 <__aeabi_dcmpgt>:
  40a5c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a5c4:	f7ff ffc4 	bl	40a550 <__aeabi_cdrcmple>
  40a5c8:	bf34      	ite	cc
  40a5ca:	2001      	movcc	r0, #1
  40a5cc:	2000      	movcs	r0, #0
  40a5ce:	f85d fb08 	ldr.w	pc, [sp], #8
  40a5d2:	bf00      	nop

0040a5d4 <__aeabi_dcmpun>:
  40a5d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a5d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a5dc:	d102      	bne.n	40a5e4 <__aeabi_dcmpun+0x10>
  40a5de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a5e2:	d10a      	bne.n	40a5fa <__aeabi_dcmpun+0x26>
  40a5e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a5e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a5ec:	d102      	bne.n	40a5f4 <__aeabi_dcmpun+0x20>
  40a5ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a5f2:	d102      	bne.n	40a5fa <__aeabi_dcmpun+0x26>
  40a5f4:	f04f 0000 	mov.w	r0, #0
  40a5f8:	4770      	bx	lr
  40a5fa:	f04f 0001 	mov.w	r0, #1
  40a5fe:	4770      	bx	lr

0040a600 <__aeabi_d2iz>:
  40a600:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a604:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40a608:	d215      	bcs.n	40a636 <__aeabi_d2iz+0x36>
  40a60a:	d511      	bpl.n	40a630 <__aeabi_d2iz+0x30>
  40a60c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40a610:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40a614:	d912      	bls.n	40a63c <__aeabi_d2iz+0x3c>
  40a616:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a61a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a61e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40a622:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a626:	fa23 f002 	lsr.w	r0, r3, r2
  40a62a:	bf18      	it	ne
  40a62c:	4240      	negne	r0, r0
  40a62e:	4770      	bx	lr
  40a630:	f04f 0000 	mov.w	r0, #0
  40a634:	4770      	bx	lr
  40a636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40a63a:	d105      	bne.n	40a648 <__aeabi_d2iz+0x48>
  40a63c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40a640:	bf08      	it	eq
  40a642:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40a646:	4770      	bx	lr
  40a648:	f04f 0000 	mov.w	r0, #0
  40a64c:	4770      	bx	lr
  40a64e:	bf00      	nop
  40a650:	0040a6e4 	.word	0x0040a6e4
  40a654:	0040a6ec 	.word	0x0040a6ec
  40a658:	0040a6f8 	.word	0x0040a6f8
  40a65c:	0040a700 	.word	0x0040a700
  40a660:	0040a708 	.word	0x0040a708
  40a664:	0040a70c 	.word	0x0040a70c
  40a668:	0040a714 	.word	0x0040a714
  40a66c:	0040a71c 	.word	0x0040a71c
  40a670:	0040a724 	.word	0x0040a724
  40a674:	0040a730 	.word	0x0040a730
  40a678:	0040a738 	.word	0x0040a738
  40a67c:	0040a744 	.word	0x0040a744
  40a680:	63657053 	.word	0x63657053
  40a684:	20796669 	.word	0x20796669
  40a688:	656c6966 	.word	0x656c6966
  40a68c:	00000000 	.word	0x00000000
  40a690:	25207325 	.word	0x25207325
  40a694:	25202c64 	.word	0x25202c64
  40a698:	30252064 	.word	0x30252064
  40a69c:	253a6432 	.word	0x253a6432
  40a6a0:	3a643230 	.word	0x3a643230
  40a6a4:	64323025 	.word	0x64323025
  40a6a8:	00000000 	.word	0x00000000
  40a6ac:	20207325 	.word	0x20207325
  40a6b0:	20202020 	.word	0x20202020
  40a6b4:	2e322520 	.word	0x2e322520
  40a6b8:	4b206631 	.word	0x4b206631
  40a6bc:	00000042 	.word	0x00000042
  40a6c0:	66206f4e 	.word	0x66206f4e
  40a6c4:	73656c69 	.word	0x73656c69
  40a6c8:	756f6620 	.word	0x756f6620
  40a6cc:	0000646e 	.word	0x0000646e
  40a6d0:	00000033 	.word	0x00000033
  40a6d4:	696e694d 	.word	0x696e694d
  40a6d8:	0000534f 	.word	0x0000534f
  40a6dc:	25767325 	.word	0x25767325
  40a6e0:	00000073 	.word	0x00000073
  40a6e4:	756e614a 	.word	0x756e614a
  40a6e8:	00797261 	.word	0x00797261
  40a6ec:	72626546 	.word	0x72626546
  40a6f0:	79726175 	.word	0x79726175
  40a6f4:	00000000 	.word	0x00000000
  40a6f8:	6372614d 	.word	0x6372614d
  40a6fc:	00000068 	.word	0x00000068
  40a700:	69727041 	.word	0x69727041
  40a704:	0000006c 	.word	0x0000006c
  40a708:	0079614d 	.word	0x0079614d
  40a70c:	656e754a 	.word	0x656e754a
  40a710:	00000000 	.word	0x00000000
  40a714:	796c754a 	.word	0x796c754a
  40a718:	00000000 	.word	0x00000000
  40a71c:	75677541 	.word	0x75677541
  40a720:	00007473 	.word	0x00007473
  40a724:	74706553 	.word	0x74706553
  40a728:	65626d65 	.word	0x65626d65
  40a72c:	00000072 	.word	0x00000072
  40a730:	6f74634f 	.word	0x6f74634f
  40a734:	00726562 	.word	0x00726562
  40a738:	65766f4e 	.word	0x65766f4e
  40a73c:	7265626d 	.word	0x7265626d
  40a740:	00000000 	.word	0x00000000
  40a744:	65636544 	.word	0x65636544
  40a748:	7265626d 	.word	0x7265626d
  40a74c:	00000000 	.word	0x00000000

0040a750 <cmd_ptrs>:
  40a750:	004001a5 00400229 00400265 004002c9     ..@.).@.e.@...@.
  40a760:	636c6557 20656d6f 25206f74 73257673     Welcome to %sv%s
  40a770:	00000000 25207325 64252064 2520202c     ....%s %d %d,  %
  40a780:	72682064 64252073 6e696d20 00000073     d hrs %d mins...
  40a790:	752d6f6e 00726573 25407325 73253a73     no-user.%s@%s:%s
  40a7a0:	00207325 00000024 0000007e 5d5d5b5b     %s .$...~...[[]]
  40a7b0:	00000000 6d6d6f43 20646e61 20746f6e     ....Command not 
  40a7c0:	6f636572 7a696e67 00006465 6c707041     recognized..Appl
  40a7d0:	74616369 206e6f69 74207369 6c206f6f     ication is too l
  40a7e0:	65677261 00000000 00000d0a 006e614a     arge........Jan.
  40a7f0:	00626546 0072614d 00727041 006e754a     Feb.Mar.Apr.Jun.
  40a800:	006c754a 00677541 00706553 0074634f     Jul.Aug.Sep.Oct.
  40a810:	00766f4e 00636544 0000736c 00746163     Nov.Dec.ls..cat.
  40a820:	65746164 00000000 69737973 006f666e     date....sysinfo.
  40a830:	74736e49 74637572 206e6f69 65636341     Instruction Acce
  40a840:	00007373 61746144 63634120 00737365     ss..Data Access.
  40a850:	206d654d 2072676d 55206e6f 6174736e     Mem mgr on Unsta
  40a860:	6e696b63 00000067 206d654d 2072676d     cking...Mem mgr 
  40a870:	53206e6f 6b636174 00676e69 206d654d     on Stacking.Mem 
  40a880:	2072676d 20524146 696c6156 41462064     mgr FAR Valid FA
  40a890:	67655220 65747369 61562072 0064696c      Register Valid.
  40a8a0:	74736e49 74637572 206e6f69 00737542     Instruction Bus.
  40a8b0:	63657250 20657369 61746144 73754220     Precise Data Bus
  40a8c0:	00000000 72706d49 73696365 61442065     ....Imprecise Da
  40a8d0:	42206174 00007375 20737542 6c756146     ta Bus..Bus Faul
  40a8e0:	6e4f2074 736e5520 6b636174 00676e69     t On Unstacking.
  40a8f0:	20737542 6c756146 6e4f2074 61745320     Bus Fault On Sta
  40a900:	6e696b63 00000067 20737542 6c756146     cking...Bus Faul
  40a910:	52412074 6c615620 00006469 65646e55     t AR Valid..Unde
  40a920:	656e6966 6e492064 75727473 6f697463     fined Instructio
  40a930:	0000006e 61766e49 2064696c 74617453     n...Invalid Stat
  40a940:	00000065 766e4920 64696c61 20435020     e... Invalid PC 
  40a950:	64616f4c 00000000 43206f4e 6f72706f     Load....No Copro
  40a960:	73736563 0000726f 6c616e55 656e6769     cessor..Unaligne
  40a970:	63412064 73736563 00000000 69766944     d Access....Divi
  40a980:	62206564 655a2079 00006f72 6e6f7257     de by Zero..Wron
  40a990:	72452067 20726f72 65646f43 00000000     g Error Code....
  40a9a0:	65646f43 20642520 29732528 00000000     Code %d (%s)....
  40a9b0:	656c6966 6d616e20 6f742065 616c206f     file name too la
  40a9c0:	00656772 00003a30 6c6c756e 00000000     rge.0:..null....
  40a9d0:	00000000 0000000d 00000000 0000000e     ................
  40a9e0:	00000007 000007c7 72617453 676e6974     ........Starting
  40a9f0:	73694420 79616c70 00000000 72617453      Display....Star
  40aa00:	676e6974 72655320 426c6169 00000000     ting SerialB....
  40aa10:	72617453 676e6974 67694c20 53207468     Starting Light S
  40aa20:	6f736e65 00000072 72617453 676e6974     ensor...Starting
  40aa30:	6d655420 65532070 726f736e 00000000      Temp Sensor....
  40aa40:	72617453 676e6974 44454c20 00000073     Starting LEDs...
  40aa50:	72617453 676e6974 6f6c4320 00006b63     Starting Clock..
  40aa60:	72617453 676e6974 6e6f4e20 6c6f762d     Starting Non-vol
  40aa70:	6c697461 654d2065 79726f6d 00000000     atile Memory....
  40aa80:	66205346 656c6961 6f742064 756f6d20     FS failed to mou
  40aa90:	0000746e 74696e49 696c6169 676e697a     nt..Initializing
  40aaa0:	75614620 0073746c 74696e49 696c6169      Faults.Initiali
  40aab0:	676e697a 73795320 6c6c6163 00000073     zing Syscalls...
  40aac0:	74696e49 696c6169 676e697a 616f4c20     Initializing Loa
  40aad0:	00726564 74696e49 696c6169 676e697a     der.Initializing
  40aae0:	68635320 6c756465 00007265 5320283a      Scheduler..:( S
  40aaf0:	74656d6f 676e6968 6e657720 72772074     omething went wr
  40ab00:	2e676e6f 00002e2e 6f6c6c41 69746163     ong.....Allocati
  40ab10:	6f206e6f 6e75206e 74696e69 61747320     on on uninit sta
  40ab20:	00006b63 64616552 20676e69 6e696e75     ck..Reading unin
  40ab30:	73207469 6b636174 00000000              it stack....

0040ab3c <mmc_trans_multipliers>:
  40ab3c:	00000000 0000000a 0000000c 0000000d     ................
  40ab4c:	0000000f 00000014 0000001a 0000001e     ................
  40ab5c:	00000023 00000028 0000002d 00000034     #...(...-...4...
  40ab6c:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040ab7c <sd_mmc_trans_units>:
  40ab7c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0040ab98 <sd_trans_multipliers>:
  40ab98:	00000000 0000000a 0000000c 0000000d     ................
  40aba8:	0000000f 00000014 00000019 0000001e     ................
  40abb8:	00000023 00000028 0000002d 00000032     #...(...-...2...
  40abc8:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040abd8 <LfnOfs>:
  40abd8:	07050301 12100e09 1c181614 0000001e     ................

0040abe8 <excvt.4558>:
  40abe8:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
  40abf8:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
  40ac08:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
  40ac18:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  40ac28:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
  40ac38:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  40ac48:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
  40ac58:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
  40ac68:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  40ac78:	00005d5b                                []..

0040ac7c <Tbl>:
  40ac7c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  40ac8c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  40ac9c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  40acac:	00d600ff 00f800dc 00d800a3 019200d7     ................
  40acbc:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  40accc:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
  40acdc:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
  40acec:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
  40acfc:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
  40ad0c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
  40ad1c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
  40ad2c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
  40ad3c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
  40ad4c:	00da00de 00d900db 00dd00fd 00b400af     ................
  40ad5c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
  40ad6c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0040ad7c <tbl_lower.4308>:
  40ad7c:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
  40ad8c:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
  40ad9c:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
  40adac:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
  40adbc:	00e100e0 00e300e2 00e500e4 00e700e6     ................
  40adcc:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
  40addc:	00f100f0 00f300f2 00f500f4 00f800f6     ................
  40adec:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
  40adfc:	01050103 01090107 010d010b 0111010f     ................
  40ae0c:	01150113 01190117 011d011b 0121011f     ..............!.
  40ae1c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
  40ae2c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
  40ae3c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
  40ae4c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
  40ae5c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
  40ae6c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
  40ae7c:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
  40ae8c:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
  40ae9c:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
  40aeac:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
  40aebc:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
  40aecc:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
  40aedc:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
  40aeec:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
  40aefc:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
  40af0c:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
  40af1c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
  40af2c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
  40af3c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
  40af4c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0040af5c <tbl_upper.4309>:
  40af5c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
  40af6c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
  40af7c:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
  40af8c:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
  40af9c:	00c100c0 00c300c2 00c500c4 00c700c6     ................
  40afac:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
  40afbc:	00d100d0 00d300d2 00d500d4 00d800d6     ................
  40afcc:	00da00d9 00dc00db 00de00dd 01000178     ............x...
  40afdc:	01040102 01080106 010c010a 0110010e     ................
  40afec:	01140112 01180116 011c011a 0120011e     .............. .
  40affc:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
  40b00c:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
  40b01c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
  40b02c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
  40b03c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
  40b04c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
  40b05c:	03940393 03960395 03980397 039a0399     ................
  40b06c:	039c039b 039e039d 03a0039f 03a303a1     ................
  40b07c:	03a503a4 03a703a6 03a903a8 041003aa     ................
  40b08c:	04120411 04140413 04160415 04180417     ................
  40b09c:	041a0419 041c041b 041e041d 0420041f     .............. .
  40b0ac:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
  40b0bc:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
  40b0cc:	04030402 04050404 04070406 04090408     ................
  40b0dc:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
  40b0ec:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
  40b0fc:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
  40b10c:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
  40b11c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
  40b12c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...

0040b13c <_global_impure_ptr>:
  40b13c:	20000488 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  40b14c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40b15c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40b16c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40b17c:	0000296c 00000030                       l)..0...

0040b184 <blanks.7223>:
  40b184:	20202020 20202020 20202020 20202020                     

0040b194 <zeroes.7224>:
  40b194:	30303030 30303030 30303030 30303030     0000000000000000
  40b1a4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40b1b4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  40b1c4:	00000000                                ....

0040b1c8 <__mprec_bigtens>:
  40b1c8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40b1d8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40b1e8:	7f73bf3c 75154fdd                       <.s..O.u

0040b1f0 <__mprec_tens>:
  40b1f0:	00000000 3ff00000 00000000 40240000     .......?......$@
  40b200:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40b210:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40b220:	00000000 412e8480 00000000 416312d0     .......A......cA
  40b230:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40b240:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40b250:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40b260:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40b270:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40b280:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40b290:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40b2a0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40b2b0:	79d99db4 44ea7843                       ...yCx.D

0040b2b8 <p05.6055>:
  40b2b8:	00000005 00000019 0000007d              ........}...

0040b2c4 <_ctype_>:
  40b2c4:	20202000 20202020 28282020 20282828     .         ((((( 
  40b2d4:	20202020 20202020 20202020 20202020                     
  40b2e4:	10108820 10101010 10101010 10101010      ...............
  40b2f4:	04040410 04040404 10040404 10101010     ................
  40b304:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40b314:	01010101 01010101 01010101 10101010     ................
  40b324:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40b334:	02020202 02020202 02020202 10101010     ................
  40b344:	00000020 00000000 00000000 00000000      ...............
	...

0040b3c8 <_init>:
  40b3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b3ca:	bf00      	nop
  40b3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b3ce:	bc08      	pop	{r3}
  40b3d0:	469e      	mov	lr, r3
  40b3d2:	4770      	bx	lr

0040b3d4 <__init_array_start>:
  40b3d4:	00407e79 	.word	0x00407e79

0040b3d8 <__frame_dummy_init_array_entry>:
  40b3d8:	004000f1                                ..@.

0040b3dc <_fini>:
  40b3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b3de:	bf00      	nop
  40b3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b3e2:	bc08      	pop	{r3}
  40b3e4:	469e      	mov	lr, r3
  40b3e6:	4770      	bx	lr

0040b3e8 <__fini_array_start>:
  40b3e8:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <cmd_names>:
2000000c:	a818 0040 a81c 0040 a820 0040 a828 0040     ..@...@. .@.(.@.
2000001c:	a7ac 0040                                   ..@.

20000020 <day_to_month>:
20000020:	a7ec 0040 a7f0 0040 a7f4 0040 a7f8 0040     ..@...@...@...@.
20000030:	a708 0040 a7fc 0040 a800 0040 a804 0040     ..@...@...@...@.
20000040:	a808 0040 a80c 0040 a810 0040 a814 0040     ..@...@...@...@.

20000050 <null_proc>:
20000050:	a9c8 0040 0000 0000 0002 0000               ..@.........

2000005c <Font08px_123>:
2000005c:	1003 826c                                   ..l.

20000060 <Font08px_124>:
20000060:	fe01 0000                                   ....

20000064 <Font08px_125>:
20000064:	8203 106c                                   ..l.

20000068 <Font08px_126>:
20000068:	1005 1008 1020 0000                         .... ...

20000070 <Font08px_32>:
20000070:	0002 0000                                   ....

20000074 <Font08px_33>:
20000074:	be01 0000                                   ....

20000078 <Font08px_34>:
20000078:	0603 0600                                   ....

2000007c <Font08px_35>:
2000007c:	2805 28fe 28fe 0000                         .(.(.(..

20000084 <Font08px_36>:
20000084:	4805 fe54 2454 0000                         .HT.T$..

2000008c <Font08px_37>:
2000008c:	4605 1026 c4c8 0000                         .F&.....

20000094 <Font08px_38>:
20000094:	6c05 ac92 a040 0000                         .l..@...

2000009c <Font08px_39>:
2000009c:	0601 0000                                   ....

200000a0 <Font08px_40>:
200000a0:	3803 8244                                   .8D.

200000a4 <Font08px_41>:
200000a4:	8203 3844                                   ..D8

200000a8 <Font08px_42>:
200000a8:	2803 2810                                   .(.(

200000ac <Font08px_43>:
200000ac:	1003 1038                                   ..8.

200000b0 <Font08px_44>:
200000b0:	c001 0000                                   ....

200000b4 <Font08px_45>:
200000b4:	1003 1010                                   ....

200000b8 <Font08px_46>:
200000b8:	8001 0000                                   ....

200000bc <Font08px_47>:
200000bc:	c003 0638                                   ..8.

200000c0 <Font08px_58>:
200000c0:	4401 0000                                   .D..

200000c4 <Font08px_59>:
200000c4:	c401 0000                                   ....

200000c8 <Font08px_60>:
200000c8:	1004 4428 0082 0000                         ..(D....

200000d0 <Font08px_61>:
200000d0:	2804 2828 0028 0000                         .((((...

200000d8 <Font08px_62>:
200000d8:	8204 2844 0010 0000                         ..D(....

200000e0 <Font08px_63>:
200000e0:	0405 a202 0c12 0000                         ........

200000e8 <Font08px_64>:
200000e8:	3808 9244 aaaa 24ba 0018 0000               .8D....$....

200000f4 <Font08px_91>:
200000f4:	fe03 8282                                   ....

200000f8 <Font08px_92>:
200000f8:	0603 c038                                   ..8.

200000fc <Font08px_93>:
200000fc:	8203 fe82                                   ....

20000100 <Font08px_94>:
20000100:	0403 0402                                   ....

20000104 <Font08px_95>:
20000104:	8003 8080                                   ....

20000108 <Font08px_96>:
20000108:	0202 0004                                   ....

2000010c <Font08px_N0>:
2000010c:	7c05 92a2 7c8a 0000                         .|...|..

20000114 <Font08px_N1>:
20000114:	0005 fe84 0080 0000                         ........

2000011c <Font08px_N2>:
2000011c:	8405 a2c2 8c92 0000                         ........

20000124 <Font08px_N3>:
20000124:	4405 9282 6c92 0000                         .D...l..

2000012c <Font08px_N4>:
2000012c:	3005 2428 20fe 0000                         .0($. ..

20000134 <Font08px_N5>:
20000134:	5e05 8a8a 728a 0000                         .^...r..

2000013c <Font08px_N6>:
2000013c:	7c05 9292 6492 0000                         .|...d..

20000144 <Font08px_N7>:
20000144:	0205 f202 060a 0000                         ........

2000014c <Font08px_N8>:
2000014c:	6c05 9292 6c92 0000                         .l...l..

20000154 <Font08px_N9>:
20000154:	4c05 9292 7c92 0000                         .L...|..

2000015c <Font08px_UA>:
2000015c:	f805 1214 f814 0000                         ........

20000164 <Font08px_UB>:
20000164:	fe04 9292 006c 0000                         ....l...

2000016c <Font08px_UC>:
2000016c:	7c04 8282 0044 0000                         .|..D...

20000174 <Font08px_UD>:
20000174:	fe04 8282 007c 0000                         ....|...

2000017c <Font08px_UE>:
2000017c:	fe04 9292 0082 0000                         ........

20000184 <Font08px_UF>:
20000184:	fe04 1212 0002 0000                         ........

2000018c <Font08px_UG>:
2000018c:	7c05 9282 f492 0000                         .|......

20000194 <Font08px_UH>:
20000194:	fe04 1010 00fe 0000                         ........

2000019c <Font08px_UI>:
2000019c:	8203 82fe                                   ....

200001a0 <Font08px_UJ>:
200001a0:	4004 8080 007e 0000                         .@..~...

200001a8 <Font08px_UK>:
200001a8:	fe05 2810 8244 0000                         ...(D...

200001b0 <Font08px_UL>:
200001b0:	fe04 8080 0080 0000                         ........

200001b8 <Font08px_UM>:
200001b8:	fe05 0804 fe04 0000                         ........

200001c0 <Font08px_UN>:
200001c0:	fe05 1804 fe60 0000                         ....`...

200001c8 <Font08px_UO>:
200001c8:	7c04 8282 007c 0000                         .|..|...

200001d0 <Font08px_UP>:
200001d0:	fe04 1212 000c 0000                         ........

200001d8 <Font08px_UQ>:
200001d8:	7c05 a282 bc42 0000                         .|..B...

200001e0 <Font08px_UR>:
200001e0:	fe04 3212 00cc 0000                         ...2....

200001e8 <Font08px_US>:
200001e8:	4c04 9292 0064 0000                         .L..d...

200001f0 <Font08px_UT>:
200001f0:	0205 fe02 0202 0000                         ........

200001f8 <Font08px_UU>:
200001f8:	7e04 8080 007e 0000                         .~..~...

20000200 <Font08px_UV>:
20000200:	0e05 c030 0e30 0000                         ..0.0...

20000208 <Font08px_UW>:
20000208:	3e05 38c0 3ec0 0000                         .>.8.>..

20000210 <Font08px_UX>:
20000210:	c605 1028 c628 0000                         ..(.(...

20000218 <Font08px_UY>:
20000218:	0605 f008 0608 0000                         ........

20000220 <Font08px_UZ>:
20000220:	c205 92a2 868a 0000                         ........

20000228 <Font08px_la>:
20000228:	7004 8888 00f8 0000                         .p......

20000230 <Font08px_lb>:
20000230:	fe04 8888 0070 0000                         ....p...

20000238 <Font08px_lc>:
20000238:	7004 8888 0088 0000                         .p......

20000240 <Font08px_ld>:
20000240:	7004 8888 00fe 0000                         .p......

20000248 <Font08px_le>:
20000248:	7004 a8a8 0030 0000                         .p..0...

20000250 <Font08px_lf>:
20000250:	fc03 0212                                   ....

20000254 <Font08px_lg>:
20000254:	1004 a8a8 0078 0000                         ....x...

2000025c <Font08px_lh>:
2000025c:	fe04 0810 00f0 0000                         ........

20000264 <Font08px_li>:
20000264:	fa01 0000                                   ....

20000268 <Font08px_lj>:
20000268:	8002 007a                                   ..z.

2000026c <Font08px_lk>:
2000026c:	fe04 5020 0088 0000                         .. P....

20000274 <Font08px_ll>:
20000274:	fe01 0000                                   ....

20000278 <Font08px_lm>:
20000278:	f805 f008 f008 0000                         ........

20000280 <Font08px_ln>:
20000280:	f804 0810 00f0 0000                         ........

20000288 <Font08px_lo>:
20000288:	7004 8888 0070 0000                         .p..p...

20000290 <Font08px_lp>:
20000290:	f804 2828 0010 0000                         ..((....

20000298 <Font08px_lq>:
20000298:	1004 2828 00f8 0000                         ..((....

200002a0 <Font08px_lr>:
200002a0:	f803 0810                                   ....

200002a4 <Font08px_ls>:
200002a4:	9004 a8a8 0048 0000                         ....H...

200002ac <Font08px_lt>:
200002ac:	0803 887c                                   ..|.

200002b0 <Font08px_lu>:
200002b0:	7804 8080 00f8 0000                         .x......

200002b8 <Font08px_lv>:
200002b8:	1805 8060 1860 0000                         ..`.`...

200002c0 <Font08px_lw>:
200002c0:	3805 30c0 38c0 0000                         .8.0.8..

200002c8 <Font08px_lx>:
200002c8:	8805 2050 8850 0000                         ..P P...

200002d0 <Font08px_ly>:
200002d0:	1804 a0a0 0078 0000                         ....x...

200002d8 <Font08px_lz>:
200002d8:	c803 98a8                                   ....

200002dc <font_table>:
200002dc:	0070 2000 0074 2000 0078 2000 007c 2000     p.. t.. x.. |.. 
200002ec:	0084 2000 008c 2000 0094 2000 009c 2000     ... ... ... ... 
200002fc:	00a0 2000 00a4 2000 00a8 2000 00ac 2000     ... ... ... ... 
2000030c:	00b0 2000 00b4 2000 00b8 2000 00bc 2000     ... ... ... ... 
2000031c:	010c 2000 0114 2000 011c 2000 0124 2000     ... ... ... $.. 
2000032c:	012c 2000 0134 2000 013c 2000 0144 2000     ,.. 4.. <.. D.. 
2000033c:	014c 2000 0154 2000 00c0 2000 00c4 2000     L.. T.. ... ... 
2000034c:	00c8 2000 00d0 2000 00d8 2000 00e0 2000     ... ... ... ... 
2000035c:	00e8 2000 015c 2000 0164 2000 016c 2000     ... \.. d.. l.. 
2000036c:	0174 2000 017c 2000 0184 2000 018c 2000     t.. |.. ... ... 
2000037c:	0194 2000 019c 2000 01a0 2000 01a8 2000     ... ... ... ... 
2000038c:	01b0 2000 01b8 2000 01c0 2000 01c8 2000     ... ... ... ... 
2000039c:	01d0 2000 01d8 2000 01e0 2000 01e8 2000     ... ... ... ... 
200003ac:	01f0 2000 01f8 2000 0200 2000 0208 2000     ... ... ... ... 
200003bc:	0210 2000 0218 2000 0220 2000 00f4 2000     ... ...  .. ... 
200003cc:	00f8 2000 00fc 2000 0100 2000 0104 2000     ... ... ... ... 
200003dc:	0108 2000 0228 2000 0230 2000 0238 2000     ... (.. 0.. 8.. 
200003ec:	0240 2000 0248 2000 0250 2000 0254 2000     @.. H.. P.. T.. 
200003fc:	025c 2000 0264 2000 0268 2000 026c 2000     \.. d.. h.. l.. 
2000040c:	0274 2000 0278 2000 0280 2000 0288 2000     t.. x.. ... ... 
2000041c:	0290 2000 0298 2000 02a0 2000 02a4 2000     ... ... ... ... 
2000042c:	02ac 2000 02b0 2000 02b8 2000 02c0 2000     ... ... ... ... 
2000043c:	02c8 2000 02d0 2000 02d8 2000 005c 2000     ... ... ... \.. 
2000044c:	0060 2000 0064 2000 0068 2000               `.. d.. h.. 

20000458 <sd_mmc_cards>:
	...
20000460:	004c 0000 0000 0000 0000 0000 0000 0000     L...............
	...

2000047c <sd_mmc_spi_devices>:
2000047c:	0001 0000                                   ....

20000480 <SystemCoreClock>:
20000480:	0900 003d                                   ..=.

20000484 <_impure_ptr>:
20000484:	0488 2000                                   ... 

20000488 <impure_data>:
20000488:	0000 0000 0774 2000 07dc 2000 0844 2000     ....t.. ... D.. 
	...
20000530:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000540:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200008b0 <__atexit_recursive_mutex>:
200008b0:	6234 2000                                   4b. 

200008b4 <__global_locale>:
200008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000934:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000954:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000974:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000994:	a385 0040 9639 0040 0000 0000 b2c4 0040     ..@.9.@.......@.
200009a4:	b1c0 0040 a9ac 0040 a9ac 0040 a9ac 0040     ..@...@...@...@.
200009b4:	a9ac 0040 a9ac 0040 a9ac 0040 a9ac 0040     ..@...@...@...@.
200009c4:	a9ac 0040 a9ac 0040 ffff ffff ffff ffff     ..@...@.........
200009d4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200009fc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20000a20 <__malloc_av_>:
	...
20000a28:	0a20 2000 0a20 2000 0a28 2000 0a28 2000      ..  .. (.. (.. 
20000a38:	0a30 2000 0a30 2000 0a38 2000 0a38 2000     0.. 0.. 8.. 8.. 
20000a48:	0a40 2000 0a40 2000 0a48 2000 0a48 2000     @.. @.. H.. H.. 
20000a58:	0a50 2000 0a50 2000 0a58 2000 0a58 2000     P.. P.. X.. X.. 
20000a68:	0a60 2000 0a60 2000 0a68 2000 0a68 2000     `.. `.. h.. h.. 
20000a78:	0a70 2000 0a70 2000 0a78 2000 0a78 2000     p.. p.. x.. x.. 
20000a88:	0a80 2000 0a80 2000 0a88 2000 0a88 2000     ... ... ... ... 
20000a98:	0a90 2000 0a90 2000 0a98 2000 0a98 2000     ... ... ... ... 
20000aa8:	0aa0 2000 0aa0 2000 0aa8 2000 0aa8 2000     ... ... ... ... 
20000ab8:	0ab0 2000 0ab0 2000 0ab8 2000 0ab8 2000     ... ... ... ... 
20000ac8:	0ac0 2000 0ac0 2000 0ac8 2000 0ac8 2000     ... ... ... ... 
20000ad8:	0ad0 2000 0ad0 2000 0ad8 2000 0ad8 2000     ... ... ... ... 
20000ae8:	0ae0 2000 0ae0 2000 0ae8 2000 0ae8 2000     ... ... ... ... 
20000af8:	0af0 2000 0af0 2000 0af8 2000 0af8 2000     ... ... ... ... 
20000b08:	0b00 2000 0b00 2000 0b08 2000 0b08 2000     ... ... ... ... 
20000b18:	0b10 2000 0b10 2000 0b18 2000 0b18 2000     ... ... ... ... 
20000b28:	0b20 2000 0b20 2000 0b28 2000 0b28 2000      ..  .. (.. (.. 
20000b38:	0b30 2000 0b30 2000 0b38 2000 0b38 2000     0.. 0.. 8.. 8.. 
20000b48:	0b40 2000 0b40 2000 0b48 2000 0b48 2000     @.. @.. H.. H.. 
20000b58:	0b50 2000 0b50 2000 0b58 2000 0b58 2000     P.. P.. X.. X.. 
20000b68:	0b60 2000 0b60 2000 0b68 2000 0b68 2000     `.. `.. h.. h.. 
20000b78:	0b70 2000 0b70 2000 0b78 2000 0b78 2000     p.. p.. x.. x.. 
20000b88:	0b80 2000 0b80 2000 0b88 2000 0b88 2000     ... ... ... ... 
20000b98:	0b90 2000 0b90 2000 0b98 2000 0b98 2000     ... ... ... ... 
20000ba8:	0ba0 2000 0ba0 2000 0ba8 2000 0ba8 2000     ... ... ... ... 
20000bb8:	0bb0 2000 0bb0 2000 0bb8 2000 0bb8 2000     ... ... ... ... 
20000bc8:	0bc0 2000 0bc0 2000 0bc8 2000 0bc8 2000     ... ... ... ... 
20000bd8:	0bd0 2000 0bd0 2000 0bd8 2000 0bd8 2000     ... ... ... ... 
20000be8:	0be0 2000 0be0 2000 0be8 2000 0be8 2000     ... ... ... ... 
20000bf8:	0bf0 2000 0bf0 2000 0bf8 2000 0bf8 2000     ... ... ... ... 
20000c08:	0c00 2000 0c00 2000 0c08 2000 0c08 2000     ... ... ... ... 
20000c18:	0c10 2000 0c10 2000 0c18 2000 0c18 2000     ... ... ... ... 
20000c28:	0c20 2000 0c20 2000 0c28 2000 0c28 2000      ..  .. (.. (.. 
20000c38:	0c30 2000 0c30 2000 0c38 2000 0c38 2000     0.. 0.. 8.. 8.. 
20000c48:	0c40 2000 0c40 2000 0c48 2000 0c48 2000     @.. @.. H.. H.. 
20000c58:	0c50 2000 0c50 2000 0c58 2000 0c58 2000     P.. P.. X.. X.. 
20000c68:	0c60 2000 0c60 2000 0c68 2000 0c68 2000     `.. `.. h.. h.. 
20000c78:	0c70 2000 0c70 2000 0c78 2000 0c78 2000     p.. p.. x.. x.. 
20000c88:	0c80 2000 0c80 2000 0c88 2000 0c88 2000     ... ... ... ... 
20000c98:	0c90 2000 0c90 2000 0c98 2000 0c98 2000     ... ... ... ... 
20000ca8:	0ca0 2000 0ca0 2000 0ca8 2000 0ca8 2000     ... ... ... ... 
20000cb8:	0cb0 2000 0cb0 2000 0cb8 2000 0cb8 2000     ... ... ... ... 
20000cc8:	0cc0 2000 0cc0 2000 0cc8 2000 0cc8 2000     ... ... ... ... 
20000cd8:	0cd0 2000 0cd0 2000 0cd8 2000 0cd8 2000     ... ... ... ... 
20000ce8:	0ce0 2000 0ce0 2000 0ce8 2000 0ce8 2000     ... ... ... ... 
20000cf8:	0cf0 2000 0cf0 2000 0cf8 2000 0cf8 2000     ... ... ... ... 
20000d08:	0d00 2000 0d00 2000 0d08 2000 0d08 2000     ... ... ... ... 
20000d18:	0d10 2000 0d10 2000 0d18 2000 0d18 2000     ... ... ... ... 
20000d28:	0d20 2000 0d20 2000 0d28 2000 0d28 2000      ..  .. (.. (.. 
20000d38:	0d30 2000 0d30 2000 0d38 2000 0d38 2000     0.. 0.. 8.. 8.. 
20000d48:	0d40 2000 0d40 2000 0d48 2000 0d48 2000     @.. @.. H.. H.. 
20000d58:	0d50 2000 0d50 2000 0d58 2000 0d58 2000     P.. P.. X.. X.. 
20000d68:	0d60 2000 0d60 2000 0d68 2000 0d68 2000     `.. `.. h.. h.. 
20000d78:	0d70 2000 0d70 2000 0d78 2000 0d78 2000     p.. p.. x.. x.. 
20000d88:	0d80 2000 0d80 2000 0d88 2000 0d88 2000     ... ... ... ... 
20000d98:	0d90 2000 0d90 2000 0d98 2000 0d98 2000     ... ... ... ... 
20000da8:	0da0 2000 0da0 2000 0da8 2000 0da8 2000     ... ... ... ... 
20000db8:	0db0 2000 0db0 2000 0db8 2000 0db8 2000     ... ... ... ... 
20000dc8:	0dc0 2000 0dc0 2000 0dc8 2000 0dc8 2000     ... ... ... ... 
20000dd8:	0dd0 2000 0dd0 2000 0dd8 2000 0dd8 2000     ... ... ... ... 
20000de8:	0de0 2000 0de0 2000 0de8 2000 0de8 2000     ... ... ... ... 
20000df8:	0df0 2000 0df0 2000 0df8 2000 0df8 2000     ... ... ... ... 
20000e08:	0e00 2000 0e00 2000 0e08 2000 0e08 2000     ... ... ... ... 
20000e18:	0e10 2000 0e10 2000 0e18 2000 0e18 2000     ... ... ... ... 

20000e28 <__malloc_sbrk_base>:
20000e28:	ffff ffff                                   ....

20000e2c <__malloc_trim_threshold>:
20000e2c:	0000 0002                                   ....

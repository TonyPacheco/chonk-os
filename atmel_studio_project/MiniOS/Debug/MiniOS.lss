
MiniOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b25c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b25c  0040b25c  0001b25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000e30  20000000  0040b264  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000542c  20000e30  0040c094  00020e30  2**2
                  ALLOC
  4 .stack        00003004  2000625c  004114c0  00020e30  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020e30  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020e5a  2**0
                  CONTENTS, READONLY
  7 .debug_info   000303bd  00000000  00000000  00020eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006f4f  00000000  00000000  00051270  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00012488  00000000  00000000  000581bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000015a8  00000000  00000000  0006a648  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001730  00000000  00000000  0006bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d5ad  00000000  00000000  0006d320  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001bb4e  00000000  00000000  0008a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005fbea  00000000  00000000  000a641b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004090  00000000  00000000  00106008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 92 00 20 5d 38 40 00 59 38 40 00 6f 07 40 00     `.. ]8@.Y8@.o.@.
  400010:	6d 07 40 00 69 07 40 00 6b 07 40 00 00 00 00 00     m.@.i.@.k.@.....
	...
  40002c:	9f 07 40 00 59 38 40 00 00 00 00 00 5d 07 40 00     ..@.Y8@.....].@.
  40003c:	63 07 40 00 59 38 40 00 59 38 40 00 59 38 40 00     c.@.Y8@.Y8@.Y8@.
  40004c:	65 09 40 00 59 38 40 00 59 38 40 00 59 38 40 00     e.@.Y8@.Y8@.Y8@.
  40005c:	59 38 40 00 59 38 40 00 21 0e 40 00 00 00 00 00     Y8@.Y8@.!.@.....
  40006c:	e1 2f 40 00 f5 2f 40 00 09 30 40 00 59 38 40 00     ./@../@..0@.Y8@.
  40007c:	5d 0e 40 00 00 00 00 00 00 00 00 00 59 38 40 00     ].@.........Y8@.
  40008c:	59 38 40 00 59 38 40 00 59 38 40 00 59 38 40 00     Y8@.Y8@.Y8@.Y8@.
  40009c:	59 38 40 00 59 38 40 00 59 38 40 00 59 38 40 00     Y8@.Y8@.Y8@.Y8@.
  4000ac:	59 38 40 00 59 38 40 00 59 38 40 00 59 38 40 00     Y8@.Y8@.Y8@.Y8@.
  4000bc:	59 38 40 00 59 38 40 00 59 38 40 00 59 38 40 00     Y8@.Y8@.Y8@.Y8@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000e30 	.word	0x20000e30
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040b264 	.word	0x0040b264

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	0040b264 	.word	0x0040b264
  40012c:	20000e34 	.word	0x20000e34
  400130:	0040b264 	.word	0x0040b264
  400134:	00000000 	.word	0x00000000

00400138 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400138:	4b03      	ldr	r3, [pc, #12]	; (400148 <rtt_init+0x10>)
  40013a:	681b      	ldr	r3, [r3, #0]
  40013c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400140:	4319      	orrs	r1, r3
  400142:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400144:	2000      	movs	r0, #0
  400146:	4770      	bx	lr
  400148:	20000e4c 	.word	0x20000e4c

0040014c <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  40014c:	b941      	cbnz	r1, 400160 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40014e:	4a09      	ldr	r2, [pc, #36]	; (400174 <rtt_sel_source+0x28>)
  400150:	6813      	ldr	r3, [r2, #0]
  400152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400156:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400158:	6802      	ldr	r2, [r0, #0]
  40015a:	4313      	orrs	r3, r2
  40015c:	6003      	str	r3, [r0, #0]
  40015e:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400160:	4a04      	ldr	r2, [pc, #16]	; (400174 <rtt_sel_source+0x28>)
  400162:	6813      	ldr	r3, [r2, #0]
  400164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400168:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40016a:	6802      	ldr	r2, [r0, #0]
  40016c:	4313      	orrs	r3, r2
  40016e:	6003      	str	r3, [r0, #0]
  400170:	4770      	bx	lr
  400172:	bf00      	nop
  400174:	20000e4c 	.word	0x20000e4c

00400178 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400178:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40017a:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40017e:	4b02      	ldr	r3, [pc, #8]	; (400188 <rtt_disable_interrupt+0x10>)
  400180:	681b      	ldr	r3, [r3, #0]
  400182:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400184:	6001      	str	r1, [r0, #0]
  400186:	4770      	bx	lr
  400188:	20000e4c 	.word	0x20000e4c

0040018c <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  40018c:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  40018e:	6883      	ldr	r3, [r0, #8]
  400190:	429a      	cmp	r2, r3
  400192:	d003      	beq.n	40019c <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400194:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  400196:	6883      	ldr	r3, [r0, #8]
  400198:	4293      	cmp	r3, r2
  40019a:	d1fb      	bne.n	400194 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  40019c:	4618      	mov	r0, r3
  40019e:	4770      	bx	lr

004001a0 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4001a0:	68c0      	ldr	r0, [r0, #12]
}
  4001a2:	4770      	bx	lr

004001a4 <commands_ls>:
#include "minios/system.h"

/*
*
*/
void commands_ls( uint8_t* param, uint32_t num_params ){
  4001a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4001a8:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
	uint8_t line_to_print[ MEM_FAT_MAX_FNAME_LENGTH + strlen("       ") + 9 + strlen( " Bytes" )  + 1 ];  //assuming a file cant have more than 9 digits of size in KB
	uint32_t num_files;
	double size_of_file;
	
	//print file list
	if( ( num_files = hal_nvmem_fat_file_list( file_list, NUM_OF_FILES_TO_READ ) ) > 0 ){
  4001ac:	2114      	movs	r1, #20
  4001ae:	a811      	add	r0, sp, #68	; 0x44
  4001b0:	4b14      	ldr	r3, [pc, #80]	; (400204 <commands_ls+0x60>)
  4001b2:	4798      	blx	r3
  4001b4:	b310      	cbz	r0, 4001fc <commands_ls+0x58>
  4001b6:	ac11      	add	r4, sp, #68	; 0x44
  4001b8:	ebc0 1540 	rsb	r5, r0, r0, lsl #5
  4001bc:	4425      	add	r5, r4
		
		for( uint32_t i=0; i<num_files; i++ ){
			//finds file size
			size_of_file = hal_nvmem_fat_file_size( file_list[i] );
  4001be:	4f12      	ldr	r7, [pc, #72]	; (400208 <commands_ls+0x64>)
  4001c0:	4e12      	ldr	r6, [pc, #72]	; (40020c <commands_ls+0x68>)
			size_of_file /= 1024;
  4001c2:	f04f 0800 	mov.w	r8, #0
  4001c6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 400220 <commands_ls+0x7c>
			size_of_file = hal_nvmem_fat_file_size( file_list[i] );
  4001ca:	4620      	mov	r0, r4
  4001cc:	47b8      	blx	r7
  4001ce:	47b0      	blx	r6
			size_of_file /= 1024;
  4001d0:	4642      	mov	r2, r8
  4001d2:	464b      	mov	r3, r9
  4001d4:	f8df a04c 	ldr.w	sl, [pc, #76]	; 400224 <commands_ls+0x80>
  4001d8:	47d0      	blx	sl
			
			//prepares line to be printed
			sprintf( line_to_print, "%s       %2.1f KB", file_list[i], size_of_file );
  4001da:	e9cd 0100 	strd	r0, r1, [sp]
  4001de:	4622      	mov	r2, r4
  4001e0:	490b      	ldr	r1, [pc, #44]	; (400210 <commands_ls+0x6c>)
  4001e2:	a803      	add	r0, sp, #12
  4001e4:	4b0b      	ldr	r3, [pc, #44]	; (400214 <commands_ls+0x70>)
  4001e6:	4798      	blx	r3
			
			//print
			console_puts( line_to_print );
  4001e8:	a803      	add	r0, sp, #12
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <commands_ls+0x74>)
  4001ec:	4798      	blx	r3
  4001ee:	341f      	adds	r4, #31
		for( uint32_t i=0; i<num_files; i++ ){
  4001f0:	42ac      	cmp	r4, r5
  4001f2:	d1ea      	bne.n	4001ca <commands_ls+0x26>
		}
	}
	else{
		console_puts( "No files found" );
	}
}
  4001f4:	f50d 7d2c 	add.w	sp, sp, #688	; 0x2b0
  4001f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		console_puts( "No files found" );
  4001fc:	4807      	ldr	r0, [pc, #28]	; (40021c <commands_ls+0x78>)
  4001fe:	4b06      	ldr	r3, [pc, #24]	; (400218 <commands_ls+0x74>)
  400200:	4798      	blx	r3
}
  400202:	e7f7      	b.n	4001f4 <commands_ls+0x50>
  400204:	00401001 	.word	0x00401001
  400208:	00400f6d 	.word	0x00400f6d
  40020c:	00405a6d 	.word	0x00405a6d
  400210:	0040a52c 	.word	0x0040a52c
  400214:	004063b9 	.word	0x004063b9
  400218:	00400329 	.word	0x00400329
  40021c:	0040a540 	.word	0x0040a540
  400220:	3f500000 	.word	0x3f500000
  400224:	00405b59 	.word	0x00405b59

00400228 <commands_cat>:

/*
*
*/
void commands_cat( uint8_t* param, uint32_t num_params ){
  400228:	b500      	push	{lr}
  40022a:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
	#define MAX_CHARS_IN_FILE	2048 //2Kb for now
	uint8_t buffer[MAX_CHARS_IN_FILE];
	
	//checks param
	if( num_params == 0){
  40022e:	b179      	cbz	r1, 400250 <commands_cat+0x28>
	else if( size > MAX_CHARS_IN_FILE ){
		 println( "Cat: Only files of size 2Kb or less are supported" );
	}*/
	
	//reads
	uint32_t bytes_read =  hal_nvmem_fat_file_read( param, buffer, MAX_CHARS_IN_FILE );
  400230:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400234:	4669      	mov	r1, sp
  400236:	4b08      	ldr	r3, [pc, #32]	; (400258 <commands_cat+0x30>)
  400238:	4798      	blx	r3
	
	//turns buffer into a string
	buffer[bytes_read-1] = '\0';
  40023a:	4468      	add	r0, sp
  40023c:	2300      	movs	r3, #0
  40023e:	f800 3c01 	strb.w	r3, [r0, #-1]
	
	//print
	console_puts( buffer );
  400242:	4668      	mov	r0, sp
  400244:	4b05      	ldr	r3, [pc, #20]	; (40025c <commands_cat+0x34>)
  400246:	4798      	blx	r3
}
  400248:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
  40024c:	f85d fb04 	ldr.w	pc, [sp], #4
		console_puts( "Specify file" );
  400250:	4803      	ldr	r0, [pc, #12]	; (400260 <commands_cat+0x38>)
  400252:	4b02      	ldr	r3, [pc, #8]	; (40025c <commands_cat+0x34>)
  400254:	4798      	blx	r3
  400256:	e7f7      	b.n	400248 <commands_cat+0x20>
  400258:	00400f99 	.word	0x00400f99
  40025c:	00400329 	.word	0x00400329
  400260:	0040a500 	.word	0x0040a500

00400264 <commands_date>:

/*
*
*/
void commands_date( uint8_t* param, uint32_t num_params  ){
  400264:	b530      	push	{r4, r5, lr}
  400266:	b09f      	sub	sp, #124	; 0x7c
	#define MAX_DATE_LENGTH	26
	tTime t;
	uint8_t* months[] = {	"January", "February", "March", "April", "May",
  400268:	ac0c      	add	r4, sp, #48	; 0x30
  40026a:	4d12      	ldr	r5, [pc, #72]	; (4002b4 <commands_date+0x50>)
  40026c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40026e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400274:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  400278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							"June", "July", "August", "September", "October",
							"November", "December"  };
							
	hal_io_clock_read(&t);
  40027c:	a818      	add	r0, sp, #96	; 0x60
  40027e:	4b0e      	ldr	r3, [pc, #56]	; (4002b8 <commands_date+0x54>)
  400280:	4798      	blx	r3
	
	uint8_t line[MAX_DATE_LENGTH + 1];
	sprintf( line, "%s %d, %d %02d:%02d:%02d", months[t.month-1], t.day, t.year, t.hours, t.minutes, t.seconds );
  400282:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  400284:	aa1e      	add	r2, sp, #120	; 0x78
  400286:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40028a:	f853 2c4c 	ldr.w	r2, [r3, #-76]
  40028e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  400290:	9303      	str	r3, [sp, #12]
  400292:	9b19      	ldr	r3, [sp, #100]	; 0x64
  400294:	9302      	str	r3, [sp, #8]
  400296:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  400298:	9301      	str	r3, [sp, #4]
  40029a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40029c:	9300      	str	r3, [sp, #0]
  40029e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4002a0:	4906      	ldr	r1, [pc, #24]	; (4002bc <commands_date+0x58>)
  4002a2:	a805      	add	r0, sp, #20
  4002a4:	4c06      	ldr	r4, [pc, #24]	; (4002c0 <commands_date+0x5c>)
  4002a6:	47a0      	blx	r4
	
	console_puts( line );
  4002a8:	a805      	add	r0, sp, #20
  4002aa:	4b06      	ldr	r3, [pc, #24]	; (4002c4 <commands_date+0x60>)
  4002ac:	4798      	blx	r3
}
  4002ae:	b01f      	add	sp, #124	; 0x7c
  4002b0:	bd30      	pop	{r4, r5, pc}
  4002b2:	bf00      	nop
  4002b4:	0040a4d0 	.word	0x0040a4d0
  4002b8:	00400a25 	.word	0x00400a25
  4002bc:	0040a510 	.word	0x0040a510
  4002c0:	004063b9 	.word	0x004063b9
  4002c4:	00400329 	.word	0x00400329

004002c8 <commands_sysinfo>:

/*
*
*/
void commands_sysinfo( uint8_t* param, uint32_t num_params  ){
  4002c8:	b510      	push	{r4, lr}
  4002ca:	b084      	sub	sp, #16
	#define MAX_INFO_LENGTH 15
	uint8_t line[MAX_INFO_LENGTH + 1];
	sprintf( line, "%sv%s", SYS_NAME, SYS_VERSION );
  4002cc:	4b05      	ldr	r3, [pc, #20]	; (4002e4 <commands_sysinfo+0x1c>)
  4002ce:	4a06      	ldr	r2, [pc, #24]	; (4002e8 <commands_sysinfo+0x20>)
  4002d0:	4906      	ldr	r1, [pc, #24]	; (4002ec <commands_sysinfo+0x24>)
  4002d2:	4668      	mov	r0, sp
  4002d4:	4c06      	ldr	r4, [pc, #24]	; (4002f0 <commands_sysinfo+0x28>)
  4002d6:	47a0      	blx	r4
	
	console_puts( line );
  4002d8:	4668      	mov	r0, sp
  4002da:	4b06      	ldr	r3, [pc, #24]	; (4002f4 <commands_sysinfo+0x2c>)
  4002dc:	4798      	blx	r3
}
  4002de:	b004      	add	sp, #16
  4002e0:	bd10      	pop	{r4, pc}
  4002e2:	bf00      	nop
  4002e4:	0040a550 	.word	0x0040a550
  4002e8:	0040a554 	.word	0x0040a554
  4002ec:	0040a55c 	.word	0x0040a55c
  4002f0:	004063b9 	.word	0x004063b9
  4002f4:	00400329 	.word	0x00400329

004002f8 <print>:
	print(string);
	print(newline);
}

static void print( uint8_t* string ){
	while( *string )
  4002f8:	7801      	ldrb	r1, [r0, #0]
  4002fa:	b151      	cbz	r1, 400312 <print+0x1a>
static void print( uint8_t* string ){
  4002fc:	b570      	push	{r4, r5, r6, lr}
  4002fe:	4604      	mov	r4, r0
		hal_io_serial_putc( SerialA, *string++ );
  400300:	2600      	movs	r6, #0
  400302:	4d04      	ldr	r5, [pc, #16]	; (400314 <print+0x1c>)
  400304:	4630      	mov	r0, r6
  400306:	47a8      	blx	r5
	while( *string )
  400308:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  40030c:	2900      	cmp	r1, #0
  40030e:	d1f9      	bne.n	400304 <print+0xc>
  400310:	bd70      	pop	{r4, r5, r6, pc}
  400312:	4770      	bx	lr
  400314:	00400d7d 	.word	0x00400d7d

00400318 <console_init>:
	newline = SYS_CONSOLE_NEWLINE;
  400318:	4a01      	ldr	r2, [pc, #4]	; (400320 <console_init+0x8>)
  40031a:	4b02      	ldr	r3, [pc, #8]	; (400324 <console_init+0xc>)
  40031c:	601a      	str	r2, [r3, #0]
  40031e:	4770      	bx	lr
  400320:	0040a668 	.word	0x0040a668
  400324:	20000e50 	.word	0x20000e50

00400328 <console_puts>:
void console_puts( uint8_t* string ){
  400328:	b510      	push	{r4, lr}
	print(string);
  40032a:	4c03      	ldr	r4, [pc, #12]	; (400338 <console_puts+0x10>)
  40032c:	47a0      	blx	r4
	print(newline);
  40032e:	4b03      	ldr	r3, [pc, #12]	; (40033c <console_puts+0x14>)
  400330:	6818      	ldr	r0, [r3, #0]
  400332:	47a0      	blx	r4
  400334:	bd10      	pop	{r4, pc}
  400336:	bf00      	nop
  400338:	004002f9 	.word	0x004002f9
  40033c:	20000e50 	.word	0x20000e50

00400340 <console_begin>:
* Begins the console
*
* Shows the prompt and waits for user input
*
*/
void console_begin( void ){
  400340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400344:	b0bf      	sub	sp, #252	; 0xfc
	}//end while
}

static void print_welcome_message(void){
	//line1, empty lines
	console_puts( "" );
  400346:	4f5b      	ldr	r7, [pc, #364]	; (4004b4 <console_begin+0x174>)
  400348:	4638      	mov	r0, r7
  40034a:	4c5b      	ldr	r4, [pc, #364]	; (4004b8 <console_begin+0x178>)
  40034c:	47a0      	blx	r4
	
	//line2, welcome
	uint8_t welcome_line[ MAX_LINE_LEN ];
	sprintf( welcome_line, "Welcome to %sv%s", SYS_NAME, SYS_VERSION );
  40034e:	4e5b      	ldr	r6, [pc, #364]	; (4004bc <console_begin+0x17c>)
  400350:	4b5b      	ldr	r3, [pc, #364]	; (4004c0 <console_begin+0x180>)
  400352:	4632      	mov	r2, r6
  400354:	495b      	ldr	r1, [pc, #364]	; (4004c4 <console_begin+0x184>)
  400356:	a80c      	add	r0, sp, #48	; 0x30
  400358:	4d5b      	ldr	r5, [pc, #364]	; (4004c8 <console_begin+0x188>)
  40035a:	47a8      	blx	r5
	console_puts( welcome_line );
  40035c:	a80c      	add	r0, sp, #48	; 0x30
  40035e:	47a0      	blx	r4
	
	//line3, time
	tTime clock;
	hal_io_clock_read( &clock );
  400360:	a806      	add	r0, sp, #24
  400362:	4b5a      	ldr	r3, [pc, #360]	; (4004cc <console_begin+0x18c>)
  400364:	4798      	blx	r3
	sprintf( welcome_line, "%s %d %d,  %d hrs %d mins", day_to_month[clock.month-1], clock.day, clock.year, clock.hours, clock.minutes );
  400366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  400368:	3b01      	subs	r3, #1
  40036a:	4a59      	ldr	r2, [pc, #356]	; (4004d0 <console_begin+0x190>)
  40036c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  400370:	9b07      	ldr	r3, [sp, #28]
  400372:	9302      	str	r3, [sp, #8]
  400374:	9b08      	ldr	r3, [sp, #32]
  400376:	9301      	str	r3, [sp, #4]
  400378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40037a:	9300      	str	r3, [sp, #0]
  40037c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40037e:	4955      	ldr	r1, [pc, #340]	; (4004d4 <console_begin+0x194>)
  400380:	a80c      	add	r0, sp, #48	; 0x30
  400382:	47a8      	blx	r5
	console_puts( welcome_line );
  400384:	a80c      	add	r0, sp, #48	; 0x30
  400386:	47a0      	blx	r4
	
	//line4, empty line
	console_puts( "" );
  400388:	4638      	mov	r0, r7
  40038a:	47a0      	blx	r4
	sprintf( prompt_message, "%s@%s:%s%s ", DUMMY_USER, SYS_NAME, DEFAULT_PATH, CONSOLE_SYMBOL );
  40038c:	4b52      	ldr	r3, [pc, #328]	; (4004d8 <console_begin+0x198>)
  40038e:	9301      	str	r3, [sp, #4]
  400390:	4b52      	ldr	r3, [pc, #328]	; (4004dc <console_begin+0x19c>)
  400392:	9300      	str	r3, [sp, #0]
  400394:	4633      	mov	r3, r6
  400396:	4a52      	ldr	r2, [pc, #328]	; (4004e0 <console_begin+0x1a0>)
  400398:	4952      	ldr	r1, [pc, #328]	; (4004e4 <console_begin+0x1a4>)
  40039a:	a838      	add	r0, sp, #224	; 0xe0
  40039c:	47a8      	blx	r5
		
		if( c != '\n' && c!= '\r')
			hal_io_serial_putc( SerialA, c );	//transmits most chars for visual feedback
		
		//filters non-alphanumeric(UNION)newline(UNION)' '(UNION)'.' characters
		if( is_alpha(c) || is_number(c) || c == '\n' || c == ' ' || c == '.'  ){
  40039e:	f8df b168 	ldr.w	fp, [pc, #360]	; 400508 <console_begin+0x1c8>
			hal_io_serial_putc( SerialA, c );	//transmits most chars for visual feedback
  4003a2:	f8df a168 	ldr.w	sl, [pc, #360]	; 40050c <console_begin+0x1cc>
		c = hal_io_serial_getc(SerialA);
  4003a6:	f04f 0800 	mov.w	r8, #0
  4003aa:	e047      	b.n	40043c <console_begin+0xfc>
		if( is_alpha(c) || is_number(c) || c == '\n' || c == ' ' || c == '.'  ){
  4003ac:	2c0a      	cmp	r4, #10
  4003ae:	d065      	beq.n	40047c <console_begin+0x13c>
  4003b0:	f1a4 0320 	sub.w	r3, r4, #32
  4003b4:	b2db      	uxtb	r3, r3
  4003b6:	2b19      	cmp	r3, #25
  4003b8:	d806      	bhi.n	4003c8 <console_begin+0x88>
  4003ba:	fa2b f303 	lsr.w	r3, fp, r3
  4003be:	f013 0f01 	tst.w	r3, #1
  4003c2:	d001      	beq.n	4003c8 <console_begin+0x88>
			 *buffer++ = c;
  4003c4:	702c      	strb	r4, [r5, #0]
  4003c6:	3501      	adds	r5, #1
		c = hal_io_serial_getc(SerialA);
  4003c8:	4640      	mov	r0, r8
  4003ca:	47b0      	blx	r6
  4003cc:	4604      	mov	r4, r0
		if( c != '\n' && c!= '\r')
  4003ce:	280a      	cmp	r0, #10
  4003d0:	d04e      	beq.n	400470 <console_begin+0x130>
  4003d2:	280d      	cmp	r0, #13
  4003d4:	d0ec      	beq.n	4003b0 <console_begin+0x70>
			hal_io_serial_putc( SerialA, c );	//transmits most chars for visual feedback
  4003d6:	4601      	mov	r1, r0
  4003d8:	4640      	mov	r0, r8
  4003da:	47d0      	blx	sl
	//go to newline
	console_puts("");
}

static bool is_alpha(uint8_t c){
	return ( c >= 'A' && c<='Z' ) || ( c>= 'a' && c<= 'z' );
  4003dc:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
  4003e0:	b2db      	uxtb	r3, r3
  4003e2:	2b19      	cmp	r3, #25
  4003e4:	d9ee      	bls.n	4003c4 <console_begin+0x84>
  4003e6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
		if( is_alpha(c) || is_number(c) || c == '\n' || c == ' ' || c == '.'  ){
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	2b19      	cmp	r3, #25
  4003ee:	d8dd      	bhi.n	4003ac <console_begin+0x6c>
			 *buffer++ = c;
  4003f0:	702c      	strb	r4, [r5, #0]
  4003f2:	3501      	adds	r5, #1
  4003f4:	e7e8      	b.n	4003c8 <console_begin+0x88>
  4003f6:	a91c      	add	r1, sp, #112	; 0x70
	while( *param++ = *line++ );
  4003f8:	f813 2b01 	ldrb.w	r2, [r3], #1
  4003fc:	f801 2b01 	strb.w	r2, [r1], #1
  400400:	2a00      	cmp	r2, #0
  400402:	d1f9      	bne.n	4003f8 <console_begin+0xb8>
	return 1; 
  400404:	2301      	movs	r3, #1
  400406:	9305      	str	r3, [sp, #20]
  400408:	4d37      	ldr	r5, [pc, #220]	; (4004e8 <console_begin+0x1a8>)
	int32_t index = 0;
  40040a:	2700      	movs	r7, #0
	while( strcmp( *all_cmds, SENTINEL_CMD ) != EQUAL ){
  40040c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 400510 <console_begin+0x1d0>
  400410:	4e36      	ldr	r6, [pc, #216]	; (4004ec <console_begin+0x1ac>)
  400412:	f855 4b04 	ldr.w	r4, [r5], #4
  400416:	4649      	mov	r1, r9
  400418:	4620      	mov	r0, r4
  40041a:	47b0      	blx	r6
  40041c:	b1a0      	cbz	r0, 400448 <console_begin+0x108>
		if( strcmp( *all_cmds, cmd ) == EQUAL ){
  40041e:	a922      	add	r1, sp, #136	; 0x88
  400420:	4620      	mov	r0, r4
  400422:	47b0      	blx	r6
  400424:	b108      	cbz	r0, 40042a <console_begin+0xea>
		index++;
  400426:	3701      	adds	r7, #1
  400428:	e7f3      	b.n	400412 <console_begin+0xd2>
		if( cmd_index != INVALID_CMD ){
  40042a:	f1b7 3fff 	cmp.w	r7, #4294967295
  40042e:	d00b      	beq.n	400448 <console_begin+0x108>
			((void(*)(uint8_t*, uint32_t))(cmd_ptrs[cmd_index]))( param, num_params ); 
  400430:	4b2f      	ldr	r3, [pc, #188]	; (4004f0 <console_begin+0x1b0>)
  400432:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
  400436:	9905      	ldr	r1, [sp, #20]
  400438:	a81c      	add	r0, sp, #112	; 0x70
  40043a:	4798      	blx	r3
		print( prompt_message );
  40043c:	a838      	add	r0, sp, #224	; 0xe0
  40043e:	4b2d      	ldr	r3, [pc, #180]	; (4004f4 <console_begin+0x1b4>)
  400440:	4798      	blx	r3
  400442:	ad28      	add	r5, sp, #160	; 0xa0
		c = hal_io_serial_getc(SerialA);
  400444:	4e2c      	ldr	r6, [pc, #176]	; (4004f8 <console_begin+0x1b8>)
  400446:	e7bf      	b.n	4003c8 <console_begin+0x88>
			sched_rval = scheduler_process_create( cmd, cmd, &loader_rval );
  400448:	aa0c      	add	r2, sp, #48	; 0x30
  40044a:	a922      	add	r1, sp, #136	; 0x88
  40044c:	4608      	mov	r0, r1
  40044e:	4b2b      	ldr	r3, [pc, #172]	; (4004fc <console_begin+0x1bc>)
  400450:	4798      	blx	r3
			if( sched_rval == SCHEDULER_PROCESS_CREATE_SUCCESS ){
  400452:	2801      	cmp	r0, #1
  400454:	d007      	beq.n	400466 <console_begin+0x126>
				if( loader_rval == LOADER_NO_APP_FOUND) 		console_puts( "Command not recognized" );
  400456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  400458:	b133      	cbz	r3, 400468 <console_begin+0x128>
				else if( loader_rval == LOADER_APP_TOO_LARGE )	console_puts( "Application is too large" );
  40045a:	2b01      	cmp	r3, #1
  40045c:	d1ee      	bne.n	40043c <console_begin+0xfc>
  40045e:	4828      	ldr	r0, [pc, #160]	; (400500 <console_begin+0x1c0>)
  400460:	4b15      	ldr	r3, [pc, #84]	; (4004b8 <console_begin+0x178>)
  400462:	4798      	blx	r3
  400464:	e7ea      	b.n	40043c <console_begin+0xfc>
  400466:	e7fe      	b.n	400466 <console_begin+0x126>
				if( loader_rval == LOADER_NO_APP_FOUND) 		console_puts( "Command not recognized" );
  400468:	4826      	ldr	r0, [pc, #152]	; (400504 <console_begin+0x1c4>)
  40046a:	4b13      	ldr	r3, [pc, #76]	; (4004b8 <console_begin+0x178>)
  40046c:	4798      	blx	r3
  40046e:	e7e5      	b.n	40043c <console_begin+0xfc>
			 *buffer++ = c;
  400470:	1c6b      	adds	r3, r5, #1
  400472:	7028      	strb	r0, [r5, #0]
	}while( c != '\n' );
  400474:	280a      	cmp	r0, #10
  400476:	d003      	beq.n	400480 <console_begin+0x140>
			 *buffer++ = c;
  400478:	461d      	mov	r5, r3
  40047a:	e7a5      	b.n	4003c8 <console_begin+0x88>
  40047c:	1c6b      	adds	r3, r5, #1
  40047e:	702c      	strb	r4, [r5, #0]
	buffer[-1] = '\0';
  400480:	f803 8c01 	strb.w	r8, [r3, #-1]
	console_puts("");
  400484:	480b      	ldr	r0, [pc, #44]	; (4004b4 <console_begin+0x174>)
  400486:	4b0c      	ldr	r3, [pc, #48]	; (4004b8 <console_begin+0x178>)
  400488:	4798      	blx	r3
  40048a:	aa22      	add	r2, sp, #136	; 0x88
  40048c:	a928      	add	r1, sp, #160	; 0xa0
		c = *cmd++ = *line++;
  40048e:	f811 3b01 	ldrb.w	r3, [r1], #1
  400492:	f802 3b01 	strb.w	r3, [r2], #1
	}while( c != ' ' && c != '\0' );
  400496:	f013 0fdf 	tst.w	r3, #223	; 0xdf
  40049a:	d1f8      	bne.n	40048e <console_begin+0x14e>
	cmd[-1] = '\0';
  40049c:	f802 8c01 	strb.w	r8, [r2, #-1]
  4004a0:	ab28      	add	r3, sp, #160	; 0xa0
		c = *line++;
  4004a2:	f813 2b01 	ldrb.w	r2, [r3], #1
	}while( c != ' ' && c != '\0' );		
  4004a6:	2a20      	cmp	r2, #32
  4004a8:	d0a5      	beq.n	4003f6 <console_begin+0xb6>
  4004aa:	2a00      	cmp	r2, #0
  4004ac:	d1f9      	bne.n	4004a2 <console_begin+0x162>
		return 0; //no parameters found
  4004ae:	f8cd 8014 	str.w	r8, [sp, #20]
  4004b2:	e7a9      	b.n	400408 <console_begin+0xc8>
  4004b4:	0040a82c 	.word	0x0040a82c
  4004b8:	00400329 	.word	0x00400329
  4004bc:	0040a554 	.word	0x0040a554
  4004c0:	0040a550 	.word	0x0040a550
  4004c4:	0040a5e0 	.word	0x0040a5e0
  4004c8:	004063b9 	.word	0x004063b9
  4004cc:	00400a25 	.word	0x00400a25
  4004d0:	20000020 	.word	0x20000020
  4004d4:	0040a5f4 	.word	0x0040a5f4
  4004d8:	0040a624 	.word	0x0040a624
  4004dc:	0040a628 	.word	0x0040a628
  4004e0:	0040a610 	.word	0x0040a610
  4004e4:	0040a618 	.word	0x0040a618
  4004e8:	2000000c 	.word	0x2000000c
  4004ec:	00406429 	.word	0x00406429
  4004f0:	0040a5d0 	.word	0x0040a5d0
  4004f4:	004002f9 	.word	0x004002f9
  4004f8:	00400dbd 	.word	0x00400dbd
  4004fc:	004011a9 	.word	0x004011a9
  400500:	0040a64c 	.word	0x0040a64c
  400504:	0040a634 	.word	0x0040a634
  400508:	03ff4001 	.word	0x03ff4001
  40050c:	00400d7d 	.word	0x00400d7d
  400510:	0040a62c 	.word	0x0040a62c

00400514 <get_error_code>:
*	Error codes are one to one mapped to whatever bit they occupy within the CFSR. For example,
*	DIVBYZERO flag is bit 25 in CFSR, so the code for division by zero is 25
*	See pg 223. in ATSAM4SD32C Documentation
*
*/
static uint32_t get_error_code(void){
  400514:	b508      	push	{r3, lr}
	
	uint32_t fault_status = hal_cpu_get_scb_cfsr();
  400516:	4b09      	ldr	r3, [pc, #36]	; (40053c <get_error_code+0x28>)
  400518:	4798      	blx	r3

	for(int i=0; i<31; i++){
		if( (fault_status & (1<<i)) )
  40051a:	f010 0f01 	tst.w	r0, #1
  40051e:	d109      	bne.n	400534 <get_error_code+0x20>
  400520:	2301      	movs	r3, #1
  400522:	4619      	mov	r1, r3
  400524:	fa01 f203 	lsl.w	r2, r1, r3
  400528:	4202      	tst	r2, r0
  40052a:	d104      	bne.n	400536 <get_error_code+0x22>
	for(int i=0; i<31; i++){
  40052c:	3301      	adds	r3, #1
  40052e:	2b1f      	cmp	r3, #31
  400530:	d1f8      	bne.n	400524 <get_error_code+0x10>
			return i;
	}
}
  400532:	bd08      	pop	{r3, pc}
	for(int i=0; i<31; i++){
  400534:	2300      	movs	r3, #0
			return i;
  400536:	4618      	mov	r0, r3
  400538:	bd08      	pop	{r3, pc}
  40053a:	bf00      	nop
  40053c:	00400799 	.word	0x00400799

00400540 <make_error_msg>:
*	
*	@return the string with the error message 
*/
static uint8_t error_msg[SYS_PANIC_MSG_MAX_LENGTH]; //the panic error message to be printed 

static uint8_t* make_error_msg(uint32_t code){
  400540:	b538      	push	{r3, r4, r5, lr}
  400542:	4602      	mov	r2, r0
*	
*	@return	a pointer to the message
*/
static uint8_t* code_to_msg(uint32_t code){
	
	switch(code){
  400544:	2819      	cmp	r0, #25
  400546:	d82e      	bhi.n	4005a6 <make_error_msg+0x66>
  400548:	e8df f000 	tbb	[pc, r0]
  40054c:	0f2d0d2f 	.word	0x0f2d0d2f
  400550:	132d2d11 	.word	0x132d2d11
  400554:	1b191715 	.word	0x1b191715
  400558:	1f2d2d1d 	.word	0x1f2d2d1d
  40055c:	27252321 	.word	0x27252321
  400560:	2d2d2d2d 	.word	0x2d2d2d2d
  400564:	2b29      	.short	0x2b29
		case 0: return "Instruction Access";
		case 1: return "Data Access";
  400566:	4b15      	ldr	r3, [pc, #84]	; (4005bc <make_error_msg+0x7c>)
  400568:	e020      	b.n	4005ac <make_error_msg+0x6c>
		case 3: return "Mem mgr on Unstacking";
  40056a:	4b15      	ldr	r3, [pc, #84]	; (4005c0 <make_error_msg+0x80>)
  40056c:	e01e      	b.n	4005ac <make_error_msg+0x6c>
		case 4: return "Mem mgr on Stacking";
  40056e:	4b15      	ldr	r3, [pc, #84]	; (4005c4 <make_error_msg+0x84>)
  400570:	e01c      	b.n	4005ac <make_error_msg+0x6c>
		case 7: return "Mem mgr FAR Valid FA Register Valid";
  400572:	4b15      	ldr	r3, [pc, #84]	; (4005c8 <make_error_msg+0x88>)
  400574:	e01a      	b.n	4005ac <make_error_msg+0x6c>
		case 8: return "Instruction Bus";
  400576:	4b15      	ldr	r3, [pc, #84]	; (4005cc <make_error_msg+0x8c>)
  400578:	e018      	b.n	4005ac <make_error_msg+0x6c>
		case 9: return "Precise Data Bus";
  40057a:	4b15      	ldr	r3, [pc, #84]	; (4005d0 <make_error_msg+0x90>)
  40057c:	e016      	b.n	4005ac <make_error_msg+0x6c>
		case 10: return "Imprecise Data Bus";
  40057e:	4b15      	ldr	r3, [pc, #84]	; (4005d4 <make_error_msg+0x94>)
  400580:	e014      	b.n	4005ac <make_error_msg+0x6c>
		case 11: return "Bus Fault On Unstacking";
  400582:	4b15      	ldr	r3, [pc, #84]	; (4005d8 <make_error_msg+0x98>)
  400584:	e012      	b.n	4005ac <make_error_msg+0x6c>
		case 12: return "Bus Fault On Stacking";
  400586:	4b15      	ldr	r3, [pc, #84]	; (4005dc <make_error_msg+0x9c>)
  400588:	e010      	b.n	4005ac <make_error_msg+0x6c>
		case 15: return "Bus Fault AR Valid";
  40058a:	4b15      	ldr	r3, [pc, #84]	; (4005e0 <make_error_msg+0xa0>)
  40058c:	e00e      	b.n	4005ac <make_error_msg+0x6c>
		case 16: return "Undefined Instruction";
  40058e:	4b15      	ldr	r3, [pc, #84]	; (4005e4 <make_error_msg+0xa4>)
  400590:	e00c      	b.n	4005ac <make_error_msg+0x6c>
		case 17: return "Invalid State";
  400592:	4b15      	ldr	r3, [pc, #84]	; (4005e8 <make_error_msg+0xa8>)
  400594:	e00a      	b.n	4005ac <make_error_msg+0x6c>
		case 18: return " Invalid PC Load";
  400596:	4b15      	ldr	r3, [pc, #84]	; (4005ec <make_error_msg+0xac>)
  400598:	e008      	b.n	4005ac <make_error_msg+0x6c>
		case 19: return "No Coprocessor";
  40059a:	4b15      	ldr	r3, [pc, #84]	; (4005f0 <make_error_msg+0xb0>)
  40059c:	e006      	b.n	4005ac <make_error_msg+0x6c>
		case 24: return "Unaligned Access";
  40059e:	4b15      	ldr	r3, [pc, #84]	; (4005f4 <make_error_msg+0xb4>)
  4005a0:	e004      	b.n	4005ac <make_error_msg+0x6c>
		case 25: return "Divide by Zero";
  4005a2:	4b15      	ldr	r3, [pc, #84]	; (4005f8 <make_error_msg+0xb8>)
  4005a4:	e002      	b.n	4005ac <make_error_msg+0x6c>
		default: return "Wrong Error Code";
  4005a6:	4b15      	ldr	r3, [pc, #84]	; (4005fc <make_error_msg+0xbc>)
  4005a8:	e000      	b.n	4005ac <make_error_msg+0x6c>
		case 0: return "Instruction Access";
  4005aa:	4b15      	ldr	r3, [pc, #84]	; (400600 <make_error_msg+0xc0>)
	sprintf(error_msg, "Code %d (%s)", code, code_to_msg(code));
  4005ac:	4c15      	ldr	r4, [pc, #84]	; (400604 <make_error_msg+0xc4>)
  4005ae:	4916      	ldr	r1, [pc, #88]	; (400608 <make_error_msg+0xc8>)
  4005b0:	4620      	mov	r0, r4
  4005b2:	4d16      	ldr	r5, [pc, #88]	; (40060c <make_error_msg+0xcc>)
  4005b4:	47a8      	blx	r5
}
  4005b6:	4620      	mov	r0, r4
  4005b8:	bd38      	pop	{r3, r4, r5, pc}
  4005ba:	bf00      	nop
  4005bc:	0040a6c4 	.word	0x0040a6c4
  4005c0:	0040a6d0 	.word	0x0040a6d0
  4005c4:	0040a6e8 	.word	0x0040a6e8
  4005c8:	0040a6fc 	.word	0x0040a6fc
  4005cc:	0040a720 	.word	0x0040a720
  4005d0:	0040a730 	.word	0x0040a730
  4005d4:	0040a744 	.word	0x0040a744
  4005d8:	0040a758 	.word	0x0040a758
  4005dc:	0040a770 	.word	0x0040a770
  4005e0:	0040a788 	.word	0x0040a788
  4005e4:	0040a79c 	.word	0x0040a79c
  4005e8:	0040a7b4 	.word	0x0040a7b4
  4005ec:	0040a7c4 	.word	0x0040a7c4
  4005f0:	0040a7d8 	.word	0x0040a7d8
  4005f4:	0040a7e8 	.word	0x0040a7e8
  4005f8:	0040a7fc 	.word	0x0040a7fc
  4005fc:	0040a80c 	.word	0x0040a80c
  400600:	0040a6b0 	.word	0x0040a6b0
  400604:	20000e54 	.word	0x20000e54
  400608:	0040a820 	.word	0x0040a820
  40060c:	004063b9 	.word	0x004063b9

00400610 <faults_system_entry_point>:
static void faults_system_entry_point(void){
  400610:	b508      	push	{r3, lr}
	system_panic( make_error_msg( get_error_code() ) );
  400612:	4b03      	ldr	r3, [pc, #12]	; (400620 <faults_system_entry_point+0x10>)
  400614:	4798      	blx	r3
  400616:	4b03      	ldr	r3, [pc, #12]	; (400624 <faults_system_entry_point+0x14>)
  400618:	4798      	blx	r3
  40061a:	4b03      	ldr	r3, [pc, #12]	; (400628 <faults_system_entry_point+0x18>)
  40061c:	4798      	blx	r3
  40061e:	bd08      	pop	{r3, pc}
  400620:	00400515 	.word	0x00400515
  400624:	00400541 	.word	0x00400541
  400628:	00401395 	.word	0x00401395

0040062c <faults_app_entry_point>:
static void faults_app_entry_point(void){
  40062c:	b508      	push	{r3, lr}
	system_panic( make_error_msg( get_error_code() ) );
  40062e:	4b03      	ldr	r3, [pc, #12]	; (40063c <faults_app_entry_point+0x10>)
  400630:	4798      	blx	r3
  400632:	4b03      	ldr	r3, [pc, #12]	; (400640 <faults_app_entry_point+0x14>)
  400634:	4798      	blx	r3
  400636:	4b03      	ldr	r3, [pc, #12]	; (400644 <faults_app_entry_point+0x18>)
  400638:	4798      	blx	r3
  40063a:	bd08      	pop	{r3, pc}
  40063c:	00400515 	.word	0x00400515
  400640:	00400541 	.word	0x00400541
  400644:	00401395 	.word	0x00401395

00400648 <faults_init>:
void faults_init(void){
  400648:	b510      	push	{r4, lr}
	uint32_t shcsr = 	hal_cpu_get_scb_shcsr();
  40064a:	4b0a      	ldr	r3, [pc, #40]	; (400674 <faults_init+0x2c>)
  40064c:	4798      	blx	r3
	hal_cpu_set_scb_shcsr( shcsr );
  40064e:	f440 20e0 	orr.w	r0, r0, #458752	; 0x70000
  400652:	4b09      	ldr	r3, [pc, #36]	; (400678 <faults_init+0x30>)
  400654:	4798      	blx	r3
	uint32_t ccr = 	hal_cpu_get_scb_ccr();
  400656:	4b09      	ldr	r3, [pc, #36]	; (40067c <faults_init+0x34>)
  400658:	4798      	blx	r3
	hal_cpu_set_scb_ccr( ccr );
  40065a:	f040 0010 	orr.w	r0, r0, #16
  40065e:	4b08      	ldr	r3, [pc, #32]	; (400680 <faults_init+0x38>)
  400660:	4798      	blx	r3
	hal_cpu_fault_register_callback( FaultApp, faults_app_entry_point );
  400662:	4908      	ldr	r1, [pc, #32]	; (400684 <faults_init+0x3c>)
  400664:	2000      	movs	r0, #0
  400666:	4c08      	ldr	r4, [pc, #32]	; (400688 <faults_init+0x40>)
  400668:	47a0      	blx	r4
	hal_cpu_fault_register_callback( FaultSystem, faults_system_entry_point );
  40066a:	4908      	ldr	r1, [pc, #32]	; (40068c <faults_init+0x44>)
  40066c:	2001      	movs	r0, #1
  40066e:	47a0      	blx	r4
  400670:	bd10      	pop	{r4, pc}
  400672:	bf00      	nop
  400674:	00400787 	.word	0x00400787
  400678:	00400781 	.word	0x00400781
  40067c:	00400793 	.word	0x00400793
  400680:	0040078d 	.word	0x0040078d
  400684:	0040062d 	.word	0x0040062d
  400688:	004006d5 	.word	0x004006d5
  40068c:	00400611 	.word	0x00400611

00400690 <hal_cpu_init>:
*	HAL CPU Init
*
*	Initializes the CPU. This function must be called before 
*	HAL IO Init. That is: hal_cpu_init(); hal_io_init(); 
*/
void hal_cpu_init(void){	
  400690:	b508      	push	{r3, lr}
	sysclk_init();  //initialize clocks
  400692:	4b01      	ldr	r3, [pc, #4]	; (400698 <hal_cpu_init+0x8>)
  400694:	4798      	blx	r3
  400696:	bd08      	pop	{r3, pc}
  400698:	004027f5 	.word	0x004027f5

0040069c <hal_cpu_systimer_start>:
*	@param tick_freq_in_ms the tick frequency in milliseconds
*	@param callback function to be called when a tick occurs
*/
void hal_cpu_systimer_start(uint32_t tick_freq_in_ms, void(*callback)(void)){
	//set callback first
	systick_callback = callback;
  40069c:	4b09      	ldr	r3, [pc, #36]	; (4006c4 <hal_cpu_systimer_start+0x28>)
  40069e:	6019      	str	r1, [r3, #0]
inline static uint32_t ms_to_ticks(uint32_t time_in_ms){ return (sysclk_get_cpu_hz()/1000)*(time_in_ms); }
  4006a0:	4b09      	ldr	r3, [pc, #36]	; (4006c8 <hal_cpu_systimer_start+0x2c>)
  4006a2:	fb03 f000 	mul.w	r0, r3, r0
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  4006a6:	3801      	subs	r0, #1
  4006a8:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  4006ac:	d209      	bcs.n	4006c2 <hal_cpu_systimer_start+0x26>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4006ae:	4b07      	ldr	r3, [pc, #28]	; (4006cc <hal_cpu_systimer_start+0x30>)
  4006b0:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4006b2:	21f0      	movs	r1, #240	; 0xf0
  4006b4:	4a06      	ldr	r2, [pc, #24]	; (4006d0 <hal_cpu_systimer_start+0x34>)
  4006b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4006ba:	2200      	movs	r2, #0
  4006bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4006be:	2207      	movs	r2, #7
  4006c0:	601a      	str	r2, [r3, #0]
  4006c2:	4770      	bx	lr
  4006c4:	200061fc 	.word	0x200061fc
  4006c8:	0001d4c0 	.word	0x0001d4c0
  4006cc:	e000e010 	.word	0xe000e010
  4006d0:	e000ed00 	.word	0xe000ed00

004006d4 <hal_cpu_fault_register_callback>:
*	Registers a generic callback function for CPU Fault Exceptions
*
*	@param callback the function that gets called on fault_type exception
*/
void hal_cpu_fault_register_callback( tFaultOrigin faultOrigin, void(*callback)(void)  ){
		switch(faultOrigin){
  4006d4:	b110      	cbz	r0, 4006dc <hal_cpu_fault_register_callback+0x8>
  4006d6:	2801      	cmp	r0, #1
  4006d8:	d003      	beq.n	4006e2 <hal_cpu_fault_register_callback+0xe>
  4006da:	4770      	bx	lr
			case FaultApp:		fault_app_callback = callback;		break;
  4006dc:	4b02      	ldr	r3, [pc, #8]	; (4006e8 <hal_cpu_fault_register_callback+0x14>)
  4006de:	6019      	str	r1, [r3, #0]
  4006e0:	4770      	bx	lr
			case FaultSystem:	fault_system_callback = callback;	break;
  4006e2:	4b02      	ldr	r3, [pc, #8]	; (4006ec <hal_cpu_fault_register_callback+0x18>)
  4006e4:	6019      	str	r1, [r3, #0]
  4006e6:	4770      	bx	lr
  4006e8:	20006204 	.word	0x20006204
  4006ec:	20006208 	.word	0x20006208

004006f0 <hal_cpu_svc_start>:
*	execution of an SVC instruction
*
*	@param callback the function that gets called on supervisor calls
*/
void hal_cpu_svc_start( void(*callback)(void) ){
	svc_callback = callback; //SVC Handler definition is in hal_cpu_asm.s
  4006f0:	4b01      	ldr	r3, [pc, #4]	; (4006f8 <hal_cpu_svc_start+0x8>)
  4006f2:	6018      	str	r0, [r3, #0]
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop
  4006f8:	2000620c 	.word	0x2000620c

004006fc <hal_cpu_delay>:
*
*	Busy-waiting delay
*
*	@param delay_in_ms delay in milliseconds
*/
void hal_cpu_delay(uint32_t delay_in_ms){
  4006fc:	b538      	push	{r3, r4, r5, lr}
	delay_ms(delay_in_ms);
  4006fe:	b918      	cbnz	r0, 400708 <hal_cpu_delay+0xc>
  400700:	2009      	movs	r0, #9
  400702:	4b0a      	ldr	r3, [pc, #40]	; (40072c <hal_cpu_delay+0x30>)
  400704:	4798      	blx	r3
  400706:	bd38      	pop	{r3, r4, r5, pc}
  400708:	4601      	mov	r1, r0
  40070a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40070e:	2300      	movs	r3, #0
  400710:	f243 64af 	movw	r4, #13999	; 0x36af
  400714:	2500      	movs	r5, #0
  400716:	4806      	ldr	r0, [pc, #24]	; (400730 <hal_cpu_delay+0x34>)
  400718:	fbe0 4501 	umlal	r4, r5, r0, r1
  40071c:	4620      	mov	r0, r4
  40071e:	4629      	mov	r1, r5
  400720:	4c04      	ldr	r4, [pc, #16]	; (400734 <hal_cpu_delay+0x38>)
  400722:	47a0      	blx	r4
  400724:	4b01      	ldr	r3, [pc, #4]	; (40072c <hal_cpu_delay+0x30>)
  400726:	4798      	blx	r3
  400728:	bd38      	pop	{r3, r4, r5, pc}
  40072a:	bf00      	nop
  40072c:	20000001 	.word	0x20000001
  400730:	07270e00 	.word	0x07270e00
  400734:	00405fbd 	.word	0x00405fbd

00400738 <hal_cpu_sleep>:
  400738:	bf30      	wfi
  40073a:	4770      	bx	lr

0040073c <hal_cpu_return_exception_user_mode>:
  40073c:	f8df f094 	ldr.w	pc, [pc, #148]	; 4007d4 <hal_cpu_set_psp+0x6>

00400740 <hal_cpu_save_context>:
  400740:	f3ef 8009 	mrs	r0, PSP
  400744:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  400748:	f380 8809 	msr	PSP, r0
  40074c:	4770      	bx	lr

0040074e <hal_cpu_restore_context>:
  40074e:	f3ef 8009 	mrs	r0, PSP
  400752:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  400756:	f380 8809 	msr	PSP, r0
  40075a:	4770      	bx	lr

0040075c <PendSV_Handler>:
  40075c:	4b1e      	ldr	r3, [pc, #120]	; (4007d8 <hal_cpu_set_psp+0xa>)
  40075e:	681b      	ldr	r3, [r3, #0]
  400760:	4718      	bx	r3

00400762 <SysTick_Handler>:
  400762:	4b1e      	ldr	r3, [pc, #120]	; (4007dc <hal_cpu_set_psp+0xe>)
  400764:	681b      	ldr	r3, [r3, #0]
  400766:	4718      	bx	r3

00400768 <BusFault_Handler>:
  400768:	e002      	b.n	400770 <faults_goto_right_callback>

0040076a <UsageFault_Handler>:
  40076a:	e001      	b.n	400770 <faults_goto_right_callback>

0040076c <MemManage_Handler>:
  40076c:	e000      	b.n	400770 <faults_goto_right_callback>

0040076e <HardFault_Handler>:
  40076e:	e7ff      	b.n	400770 <faults_goto_right_callback>

00400770 <faults_goto_right_callback>:
  400770:	f01e 0f04 	tst.w	lr, #4
  400774:	d001      	beq.n	40077a <faults_else>
  400776:	481a      	ldr	r0, [pc, #104]	; (4007e0 <hal_cpu_set_psp+0x12>)
  400778:	e000      	b.n	40077c <faults_end>

0040077a <faults_else>:
  40077a:	481a      	ldr	r0, [pc, #104]	; (4007e4 <hal_cpu_set_psp+0x16>)

0040077c <faults_end>:
  40077c:	6800      	ldr	r0, [r0, #0]
  40077e:	4700      	bx	r0

00400780 <hal_cpu_set_scb_shcsr>:
  400780:	4919      	ldr	r1, [pc, #100]	; (4007e8 <hal_cpu_set_psp+0x1a>)
  400782:	6008      	str	r0, [r1, #0]
  400784:	4770      	bx	lr

00400786 <hal_cpu_get_scb_shcsr>:
  400786:	4918      	ldr	r1, [pc, #96]	; (4007e8 <hal_cpu_set_psp+0x1a>)
  400788:	6808      	ldr	r0, [r1, #0]
  40078a:	4770      	bx	lr

0040078c <hal_cpu_set_scb_ccr>:
  40078c:	4917      	ldr	r1, [pc, #92]	; (4007ec <hal_cpu_set_psp+0x1e>)
  40078e:	6008      	str	r0, [r1, #0]
  400790:	4770      	bx	lr

00400792 <hal_cpu_get_scb_ccr>:
  400792:	4916      	ldr	r1, [pc, #88]	; (4007ec <hal_cpu_set_psp+0x1e>)
  400794:	6808      	ldr	r0, [r1, #0]
  400796:	4770      	bx	lr

00400798 <hal_cpu_get_scb_cfsr>:
  400798:	4915      	ldr	r1, [pc, #84]	; (4007f0 <hal_cpu_set_psp+0x22>)
  40079a:	6808      	ldr	r0, [r1, #0]
  40079c:	4770      	bx	lr

0040079e <SVC_Handler>:
  40079e:	4b15      	ldr	r3, [pc, #84]	; (4007f4 <hal_cpu_set_psp+0x26>)
  4007a0:	681b      	ldr	r3, [r3, #0]
  4007a2:	4718      	bx	r3

004007a4 <hal_cpu_get_psp>:
  4007a4:	f3ef 8009 	mrs	r0, PSP
  4007a8:	4770      	bx	lr

004007aa <hal_cpu_set_unprivileged>:
  4007aa:	f3ef 8314 	mrs	r3, CONTROL
  4007ae:	f043 0301 	orr.w	r3, r3, #1
  4007b2:	f383 8814 	msr	CONTROL, r3
  4007b6:	f3bf 8f6f 	isb	sy
  4007ba:	4770      	bx	lr

004007bc <hal_cpu_set_psp_active>:
  4007bc:	f3ef 8314 	mrs	r3, CONTROL
  4007c0:	f043 0302 	orr.w	r3, r3, #2
  4007c4:	f383 8814 	msr	CONTROL, r3
  4007c8:	f3bf 8f6f 	isb	sy
  4007cc:	4770      	bx	lr

004007ce <hal_cpu_set_psp>:
  4007ce:	f380 8809 	msr	PSP, r0
  4007d2:	4770      	bx	lr
  4007d4:	fffffffd 	.word	0xfffffffd
  4007d8:	20006200 	.word	0x20006200
  4007dc:	200061fc 	.word	0x200061fc
  4007e0:	20006204 	.word	0x20006204
  4007e4:	20006208 	.word	0x20006208
  4007e8:	e000ed24 	.word	0xe000ed24
  4007ec:	e000ed14 	.word	0xe000ed14
  4007f0:	e000ed28 	.word	0xe000ed28
  4007f4:	2000620c 	.word	0x2000620c

004007f8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  4007f8:	b570      	push	{r4, r5, r6, lr}
  4007fa:	b082      	sub	sp, #8
  4007fc:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4007fe:	ac02      	add	r4, sp, #8
  400800:	2302      	movs	r3, #2
  400802:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400806:	4d09      	ldr	r5, [pc, #36]	; (40082c <ssd1306_write_command+0x34>)
  400808:	4621      	mov	r1, r4
  40080a:	4628      	mov	r0, r5
  40080c:	4b08      	ldr	r3, [pc, #32]	; (400830 <ssd1306_write_command+0x38>)
  40080e:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400810:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400814:	4b07      	ldr	r3, [pc, #28]	; (400834 <ssd1306_write_command+0x3c>)
  400816:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400818:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  40081a:	2056      	movs	r0, #86	; 0x56
  40081c:	4b06      	ldr	r3, [pc, #24]	; (400838 <ssd1306_write_command+0x40>)
  40081e:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400820:	4621      	mov	r1, r4
  400822:	4628      	mov	r0, r5
  400824:	4b05      	ldr	r3, [pc, #20]	; (40083c <ssd1306_write_command+0x44>)
  400826:	4798      	blx	r3
#endif
}
  400828:	b002      	add	sp, #8
  40082a:	bd70      	pop	{r4, r5, r6, pc}
  40082c:	40008000 	.word	0x40008000
  400830:	0040292d 	.word	0x0040292d
  400834:	400e1200 	.word	0x400e1200
  400838:	20000001 	.word	0x20000001
  40083c:	0040295d 	.word	0x0040295d

00400840 <configure_uart1>:
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
	NVIC_EnableIRQ(USART1_IRQn);
}


void configure_uart1(uint32_t baudrate){
  400840:	b530      	push	{r4, r5, lr}
  400842:	b085      	sub	sp, #20
  400844:	4604      	mov	r4, r0
	pio_configure(PINS_UART1_PIO, PINS_UART1_TYPE, PINS_UART1_MASK, PINS_UART1_ATTR);
  400846:	2300      	movs	r3, #0
  400848:	220c      	movs	r2, #12
  40084a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40084e:	480c      	ldr	r0, [pc, #48]	; (400880 <configure_uart1+0x40>)
  400850:	4d0c      	ldr	r5, [pc, #48]	; (400884 <configure_uart1+0x44>)
  400852:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_UART1);
  400854:	2009      	movs	r0, #9
  400856:	4b0c      	ldr	r3, [pc, #48]	; (400888 <configure_uart1+0x48>)
  400858:	4798      	blx	r3
	
	const sam_uart_opt_t uart1_sett = { sysclk_get_cpu_hz(), baudrate, UART_SERIAL_MODE };
  40085a:	4b0c      	ldr	r3, [pc, #48]	; (40088c <configure_uart1+0x4c>)
  40085c:	9301      	str	r3, [sp, #4]
  40085e:	9402      	str	r4, [sp, #8]
  400860:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400864:	9303      	str	r3, [sp, #12]
	uart_init(UART1,&uart1_sett);
  400866:	4c0a      	ldr	r4, [pc, #40]	; (400890 <configure_uart1+0x50>)
  400868:	a901      	add	r1, sp, #4
  40086a:	4620      	mov	r0, r4
  40086c:	4b09      	ldr	r3, [pc, #36]	; (400894 <configure_uart1+0x54>)
  40086e:	4798      	blx	r3
	uart_enable_tx(UART1);
  400870:	4620      	mov	r0, r4
  400872:	4b09      	ldr	r3, [pc, #36]	; (400898 <configure_uart1+0x58>)
  400874:	4798      	blx	r3
	uart_enable_rx(UART1);
  400876:	4620      	mov	r0, r4
  400878:	4b08      	ldr	r3, [pc, #32]	; (40089c <configure_uart1+0x5c>)
  40087a:	4798      	blx	r3
}
  40087c:	b005      	add	sp, #20
  40087e:	bd30      	pop	{r4, r5, pc}
  400880:	400e1000 	.word	0x400e1000
  400884:	00402cd1 	.word	0x00402cd1
  400888:	00403149 	.word	0x00403149
  40088c:	07270e00 	.word	0x07270e00
  400890:	400e0800 	.word	0x400e0800
  400894:	004036d1 	.word	0x004036d1
  400898:	00403707 	.word	0x00403707
  40089c:	0040370d 	.word	0x0040370d

004008a0 <configure_usart1>:

void configure_usart1(uint32_t baudrate){
  4008a0:	b530      	push	{r4, r5, lr}
  4008a2:	b087      	sub	sp, #28
  4008a4:	4605      	mov	r5, r0
	pio_configure(PINS_USART1_PIO, PINS_USART1_TYPE, PINS_USART1_MASK, PINS_USART1_ATTR);
  4008a6:	2300      	movs	r3, #0
  4008a8:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  4008ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4008b0:	480f      	ldr	r0, [pc, #60]	; (4008f0 <configure_usart1+0x50>)
  4008b2:	4c10      	ldr	r4, [pc, #64]	; (4008f4 <configure_usart1+0x54>)
  4008b4:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_USART1);
  4008b6:	200f      	movs	r0, #15
  4008b8:	4c0f      	ldr	r4, [pc, #60]	; (4008f8 <configure_usart1+0x58>)
  4008ba:	47a0      	blx	r4

	const sam_usart_opt_t usart_console_settings = {
  4008bc:	2300      	movs	r3, #0
  4008be:	9303      	str	r3, [sp, #12]
  4008c0:	9304      	str	r3, [sp, #16]
  4008c2:	9305      	str	r3, [sp, #20]
  4008c4:	9500      	str	r5, [sp, #0]
  4008c6:	23c0      	movs	r3, #192	; 0xc0
  4008c8:	9301      	str	r3, [sp, #4]
  4008ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4008ce:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4008d0:	200f      	movs	r0, #15
  4008d2:	47a0      	blx	r4
		USART_SERIAL_STOP_BIT,
		US_MR_CHMODE_NORMAL
	};

	sysclk_enable_peripheral_clock(USART_SERIAL_ID);
	usart_init_rs232(USART_SERIAL, &usart_console_settings, sysclk_get_peripheral_hz());
  4008d4:	4c09      	ldr	r4, [pc, #36]	; (4008fc <configure_usart1+0x5c>)
  4008d6:	4a0a      	ldr	r2, [pc, #40]	; (400900 <configure_usart1+0x60>)
  4008d8:	4669      	mov	r1, sp
  4008da:	4620      	mov	r0, r4
  4008dc:	4b09      	ldr	r3, [pc, #36]	; (400904 <configure_usart1+0x64>)
  4008de:	4798      	blx	r3
	usart_enable_tx(USART_SERIAL);
  4008e0:	4620      	mov	r0, r4
  4008e2:	4b09      	ldr	r3, [pc, #36]	; (400908 <configure_usart1+0x68>)
  4008e4:	4798      	blx	r3
	usart_enable_rx(USART_SERIAL);
  4008e6:	4620      	mov	r0, r4
  4008e8:	4b08      	ldr	r3, [pc, #32]	; (40090c <configure_usart1+0x6c>)
  4008ea:	4798      	blx	r3
}
  4008ec:	b007      	add	sp, #28
  4008ee:	bd30      	pop	{r4, r5, pc}
  4008f0:	400e0e00 	.word	0x400e0e00
  4008f4:	00402cd1 	.word	0x00402cd1
  4008f8:	00403149 	.word	0x00403149
  4008fc:	40028000 	.word	0x40028000
  400900:	07270e00 	.word	0x07270e00
  400904:	004037c1 	.word	0x004037c1
  400908:	00403815 	.word	0x00403815
  40090c:	0040381b 	.word	0x0040381b

00400910 <hal_io_init>:
void hal_io_init(void){
  400910:	b510      	push	{r4, lr}
	board_init();		//initialize board pins
  400912:	4b05      	ldr	r3, [pc, #20]	; (400928 <hal_io_init+0x18>)
  400914:	4798      	blx	r3
  400916:	200b      	movs	r0, #11
  400918:	4c04      	ldr	r4, [pc, #16]	; (40092c <hal_io_init+0x1c>)
  40091a:	47a0      	blx	r4
  40091c:	200c      	movs	r0, #12
  40091e:	47a0      	blx	r4
  400920:	200d      	movs	r0, #13
  400922:	47a0      	blx	r4
  400924:	bd10      	pop	{r4, pc}
  400926:	bf00      	nop
  400928:	00402a79 	.word	0x00402a79
  40092c:	00403149 	.word	0x00403149

00400930 <hal_io_mtimer_start>:
void hal_io_mtimer_start( uint32_t ms_steps ){
  400930:	b538      	push	{r3, r4, r5, lr}
  400932:	4604      	mov	r4, r0
	rtt_sel_source(RTT, false);
  400934:	4d08      	ldr	r5, [pc, #32]	; (400958 <hal_io_mtimer_start+0x28>)
  400936:	2100      	movs	r1, #0
  400938:	4628      	mov	r0, r5
  40093a:	4b08      	ldr	r3, [pc, #32]	; (40095c <hal_io_mtimer_start+0x2c>)
  40093c:	4798      	blx	r3
	uint32_t steps = ms_steps*33 > RTT_MAX_VAL ? RTT_MAX_VAL : ms_steps*33; 
  40093e:	eb04 1444 	add.w	r4, r4, r4, lsl #5
  400942:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  400946:	bf28      	it	cs
  400948:	f44f 4400 	movcs.w	r4, #32768	; 0x8000
	rtt_init(RTT, steps ); 
  40094c:	b2a1      	uxth	r1, r4
  40094e:	4628      	mov	r0, r5
  400950:	4b03      	ldr	r3, [pc, #12]	; (400960 <hal_io_mtimer_start+0x30>)
  400952:	4798      	blx	r3
  400954:	bd38      	pop	{r3, r4, r5, pc}
  400956:	bf00      	nop
  400958:	400e1430 	.word	0x400e1430
  40095c:	0040014d 	.word	0x0040014d
  400960:	00400139 	.word	0x00400139

00400964 <RTT_Handler>:
void RTT_Handler(void){
  400964:	b508      	push	{r3, lr}
	uint32_t ul_status = rtt_get_status(RTT);
  400966:	4805      	ldr	r0, [pc, #20]	; (40097c <RTT_Handler+0x18>)
  400968:	4b05      	ldr	r3, [pc, #20]	; (400980 <RTT_Handler+0x1c>)
  40096a:	4798      	blx	r3
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC)
  40096c:	f010 0f02 	tst.w	r0, #2
  400970:	d100      	bne.n	400974 <RTT_Handler+0x10>
  400972:	bd08      	pop	{r3, pc}
		(*timer_callback)(); //call registered callback
  400974:	4b03      	ldr	r3, [pc, #12]	; (400984 <RTT_Handler+0x20>)
  400976:	681b      	ldr	r3, [r3, #0]
  400978:	4798      	blx	r3
}
  40097a:	e7fa      	b.n	400972 <RTT_Handler+0xe>
  40097c:	400e1430 	.word	0x400e1430
  400980:	004001a1 	.word	0x004001a1
  400984:	20000e8c 	.word	0x20000e8c

00400988 <hal_io_mtimer_stop>:
void hal_io_mtimer_stop(void){
  400988:	b508      	push	{r3, lr}
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40098a:	4b06      	ldr	r3, [pc, #24]	; (4009a4 <hal_io_mtimer_stop+0x1c>)
  40098c:	2208      	movs	r2, #8
  40098e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400992:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN);
  400996:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40099a:	4803      	ldr	r0, [pc, #12]	; (4009a8 <hal_io_mtimer_stop+0x20>)
  40099c:	4b03      	ldr	r3, [pc, #12]	; (4009ac <hal_io_mtimer_stop+0x24>)
  40099e:	4798      	blx	r3
  4009a0:	bd08      	pop	{r3, pc}
  4009a2:	bf00      	nop
  4009a4:	e000e100 	.word	0xe000e100
  4009a8:	400e1430 	.word	0x400e1430
  4009ac:	00400179 	.word	0x00400179

004009b0 <hal_io_mtimer_read>:
uint32_t hal_io_mtimer_read( void ){
  4009b0:	b508      	push	{r3, lr}
	return rtt_read_timer_value (RTT);
  4009b2:	4802      	ldr	r0, [pc, #8]	; (4009bc <hal_io_mtimer_read+0xc>)
  4009b4:	4b02      	ldr	r3, [pc, #8]	; (4009c0 <hal_io_mtimer_read+0x10>)
  4009b6:	4798      	blx	r3
}
  4009b8:	bd08      	pop	{r3, pc}
  4009ba:	bf00      	nop
  4009bc:	400e1430 	.word	0x400e1430
  4009c0:	0040018d 	.word	0x0040018d

004009c4 <hal_io_clock_start>:
void hal_io_clock_start( void ){
  4009c4:	b510      	push	{r4, lr}
	pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4009c6:	2000      	movs	r0, #0
  4009c8:	4b05      	ldr	r3, [pc, #20]	; (4009e0 <hal_io_clock_start+0x1c>)
  4009ca:	4798      	blx	r3
	while (!pmc_osc_is_ready_32kxtal());
  4009cc:	4c05      	ldr	r4, [pc, #20]	; (4009e4 <hal_io_clock_start+0x20>)
  4009ce:	47a0      	blx	r4
  4009d0:	2800      	cmp	r0, #0
  4009d2:	d0fc      	beq.n	4009ce <hal_io_clock_start+0xa>
	rtc_set_hour_mode(RTC, 0); //24-hrs mode by default
  4009d4:	2100      	movs	r1, #0
  4009d6:	4804      	ldr	r0, [pc, #16]	; (4009e8 <hal_io_clock_start+0x24>)
  4009d8:	4b04      	ldr	r3, [pc, #16]	; (4009ec <hal_io_clock_start+0x28>)
  4009da:	4798      	blx	r3
  4009dc:	bd10      	pop	{r4, pc}
  4009de:	bf00      	nop
  4009e0:	00403081 	.word	0x00403081
  4009e4:	004030a5 	.word	0x004030a5
  4009e8:	400e1460 	.word	0x400e1460
  4009ec:	0040319d 	.word	0x0040319d

004009f0 <hal_io_clock_write>:
void hal_io_clock_write( tTime* t ){
  4009f0:	b570      	push	{r4, r5, r6, lr}
  4009f2:	b082      	sub	sp, #8
  4009f4:	4604      	mov	r4, r0
	rtc_set_date( RTC, t->year, t->month, t->day, 1 );	//not too sure how week works, but if week is
  4009f6:	4d08      	ldr	r5, [pc, #32]	; (400a18 <hal_io_clock_write+0x28>)
  4009f8:	2301      	movs	r3, #1
  4009fa:	9300      	str	r3, [sp, #0]
  4009fc:	68c3      	ldr	r3, [r0, #12]
  4009fe:	6902      	ldr	r2, [r0, #16]
  400a00:	6941      	ldr	r1, [r0, #20]
  400a02:	4628      	mov	r0, r5
  400a04:	4e05      	ldr	r6, [pc, #20]	; (400a1c <hal_io_clock_write+0x2c>)
  400a06:	47b0      	blx	r6
	rtc_set_time( RTC, t->hours, t->minutes, t->seconds );
  400a08:	6823      	ldr	r3, [r4, #0]
  400a0a:	6862      	ldr	r2, [r4, #4]
  400a0c:	68a1      	ldr	r1, [r4, #8]
  400a0e:	4628      	mov	r0, r5
  400a10:	4c03      	ldr	r4, [pc, #12]	; (400a20 <hal_io_clock_write+0x30>)
  400a12:	47a0      	blx	r4
}
  400a14:	b002      	add	sp, #8
  400a16:	bd70      	pop	{r4, r5, r6, pc}
  400a18:	400e1460 	.word	0x400e1460
  400a1c:	00403315 	.word	0x00403315
  400a20:	0040320d 	.word	0x0040320d

00400a24 <hal_io_clock_read>:
void hal_io_clock_read( tTime* t ){
  400a24:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a26:	b085      	sub	sp, #20
  400a28:	4604      	mov	r4, r0
	uint32_t dummy_week = 0;
  400a2a:	ad04      	add	r5, sp, #16
  400a2c:	2300      	movs	r3, #0
  400a2e:	f845 3d04 	str.w	r3, [r5, #-4]!
	rtc_get_time(RTC, &(t->hours), &(t->minutes), &(t->seconds));
  400a32:	4e0a      	ldr	r6, [pc, #40]	; (400a5c <hal_io_clock_read+0x38>)
  400a34:	4603      	mov	r3, r0
  400a36:	1d02      	adds	r2, r0, #4
  400a38:	f100 0108 	add.w	r1, r0, #8
  400a3c:	4630      	mov	r0, r6
  400a3e:	4f08      	ldr	r7, [pc, #32]	; (400a60 <hal_io_clock_read+0x3c>)
  400a40:	47b8      	blx	r7
	rtc_get_date(RTC, &(t->year), &(t->month), &(t->day), &dummy_week);
  400a42:	9500      	str	r5, [sp, #0]
  400a44:	f104 030c 	add.w	r3, r4, #12
  400a48:	f104 0210 	add.w	r2, r4, #16
  400a4c:	f104 0114 	add.w	r1, r4, #20
  400a50:	4630      	mov	r0, r6
  400a52:	4c04      	ldr	r4, [pc, #16]	; (400a64 <hal_io_clock_read+0x40>)
  400a54:	47a0      	blx	r4
}
  400a56:	b005      	add	sp, #20
  400a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400a5a:	bf00      	nop
  400a5c:	400e1460 	.word	0x400e1460
  400a60:	004031b3 	.word	0x004031b3
  400a64:	004032a1 	.word	0x004032a1

00400a68 <hal_io_display_start>:
void hal_io_display_start(void){
  400a68:	b508      	push	{r3, lr}
	ssd1306_init();	//on-board OLED
  400a6a:	4b01      	ldr	r3, [pc, #4]	; (400a70 <hal_io_display_start+0x8>)
  400a6c:	4798      	blx	r3
  400a6e:	bd08      	pop	{r3, pc}
  400a70:	0040160d 	.word	0x0040160d

00400a74 <hal_io_display_putc>:
void hal_io_display_putc( uint8_t character ){
  400a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400a78:	b082      	sub	sp, #8
	char_ptr = font_table[character - 32];
  400a7a:	3820      	subs	r0, #32
  400a7c:	4b1f      	ldr	r3, [pc, #124]	; (400afc <hal_io_display_putc+0x88>)
  400a7e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
	for (i = 1; i <= char_ptr[0]; i++) {
  400a82:	783b      	ldrb	r3, [r7, #0]
  400a84:	b303      	cbz	r3, 400ac8 <hal_io_display_putc+0x54>
  400a86:	2401      	movs	r4, #1
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  400a88:	4e1d      	ldr	r6, [pc, #116]	; (400b00 <hal_io_display_putc+0x8c>)
  400a8a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 400b0c <hal_io_display_putc+0x98>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a8e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 400b10 <hal_io_display_putc+0x9c>
		ssd1306_write_data(char_ptr[i]);
  400a92:	f817 a004 	ldrb.w	sl, [r7, r4]
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400a96:	ad02      	add	r5, sp, #8
  400a98:	2302      	movs	r3, #2
  400a9a:	f845 3d04 	str.w	r3, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400a9e:	4629      	mov	r1, r5
  400aa0:	4630      	mov	r0, r6
  400aa2:	47c8      	blx	r9
  400aa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400aa8:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  400aac:	f8c6 a00c 	str.w	sl, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  400ab0:	2056      	movs	r0, #86	; 0x56
  400ab2:	4b14      	ldr	r3, [pc, #80]	; (400b04 <hal_io_display_putc+0x90>)
  400ab4:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400ab6:	4629      	mov	r1, r5
  400ab8:	4630      	mov	r0, r6
  400aba:	4b13      	ldr	r3, [pc, #76]	; (400b08 <hal_io_display_putc+0x94>)
  400abc:	4798      	blx	r3
	for (i = 1; i <= char_ptr[0]; i++) {
  400abe:	3401      	adds	r4, #1
  400ac0:	b2e4      	uxtb	r4, r4
  400ac2:	783b      	ldrb	r3, [r7, #0]
  400ac4:	42a3      	cmp	r3, r4
  400ac6:	d2e4      	bcs.n	400a92 <hal_io_display_putc+0x1e>
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400ac8:	ac02      	add	r4, sp, #8
  400aca:	2302      	movs	r3, #2
  400acc:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400ad0:	4d0b      	ldr	r5, [pc, #44]	; (400b00 <hal_io_display_putc+0x8c>)
  400ad2:	4621      	mov	r1, r4
  400ad4:	4628      	mov	r0, r5
  400ad6:	4b0d      	ldr	r3, [pc, #52]	; (400b0c <hal_io_display_putc+0x98>)
  400ad8:	4798      	blx	r3
  400ada:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400ade:	4b0c      	ldr	r3, [pc, #48]	; (400b10 <hal_io_display_putc+0x9c>)
  400ae0:	631a      	str	r2, [r3, #48]	; 0x30
  400ae2:	2300      	movs	r3, #0
  400ae4:	60eb      	str	r3, [r5, #12]
	delay_us(SSD1306_LATENCY); // At least 3us
  400ae6:	2056      	movs	r0, #86	; 0x56
  400ae8:	4b06      	ldr	r3, [pc, #24]	; (400b04 <hal_io_display_putc+0x90>)
  400aea:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400aec:	4621      	mov	r1, r4
  400aee:	4628      	mov	r0, r5
  400af0:	4b05      	ldr	r3, [pc, #20]	; (400b08 <hal_io_display_putc+0x94>)
  400af2:	4798      	blx	r3
}
  400af4:	b002      	add	sp, #8
  400af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400afa:	bf00      	nop
  400afc:	200002dc 	.word	0x200002dc
  400b00:	40008000 	.word	0x40008000
  400b04:	20000001 	.word	0x20000001
  400b08:	0040295d 	.word	0x0040295d
  400b0c:	0040292d 	.word	0x0040292d
  400b10:	400e1200 	.word	0x400e1200

00400b14 <hal_io_display_cls>:
void hal_io_display_cls(void){
  400b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b18:	b083      	sub	sp, #12
  400b1a:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400b1e:	f8df b080 	ldr.w	fp, [pc, #128]	; 400ba0 <hal_io_display_cls+0x8c>
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  400b22:	4657      	mov	r7, sl
  400b24:	f8df 907c 	ldr.w	r9, [pc, #124]	; 400ba4 <hal_io_display_cls+0x90>
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400b28:	f00a 0007 	and.w	r0, sl, #7
  400b2c:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400b30:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  400b32:	2010      	movs	r0, #16
  400b34:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  400b36:	4638      	mov	r0, r7
  400b38:	47d8      	blx	fp
  400b3a:	2680      	movs	r6, #128	; 0x80
	spi_select_device(SSD1306_SPI, &device);
  400b3c:	4d14      	ldr	r5, [pc, #80]	; (400b90 <hal_io_display_cls+0x7c>)
  400b3e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 400ba8 <hal_io_display_cls+0x94>
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400b42:	ac02      	add	r4, sp, #8
  400b44:	2302      	movs	r3, #2
  400b46:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400b4a:	4621      	mov	r1, r4
  400b4c:	4628      	mov	r0, r5
  400b4e:	47c0      	blx	r8
  400b50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400b54:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  400b58:	60ef      	str	r7, [r5, #12]
	delay_us(SSD1306_LATENCY); // At least 3us
  400b5a:	2056      	movs	r0, #86	; 0x56
  400b5c:	4b0d      	ldr	r3, [pc, #52]	; (400b94 <hal_io_display_cls+0x80>)
  400b5e:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400b60:	4621      	mov	r1, r4
  400b62:	4628      	mov	r0, r5
  400b64:	4b0c      	ldr	r3, [pc, #48]	; (400b98 <hal_io_display_cls+0x84>)
  400b66:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  400b68:	3e01      	subs	r6, #1
  400b6a:	d1ea      	bne.n	400b42 <hal_io_display_cls+0x2e>
  400b6c:	f10a 0a01 	add.w	sl, sl, #1
	for (page = 0; page < 4; ++page)
  400b70:	f1ba 0f04 	cmp.w	sl, #4
  400b74:	d1d8      	bne.n	400b28 <hal_io_display_cls+0x14>
	ssd1306_set_page_address( display_curr_line = 0 );
  400b76:	2500      	movs	r5, #0
  400b78:	4b08      	ldr	r3, [pc, #32]	; (400b9c <hal_io_display_cls+0x88>)
  400b7a:	601d      	str	r5, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400b7c:	20b0      	movs	r0, #176	; 0xb0
  400b7e:	4c08      	ldr	r4, [pc, #32]	; (400ba0 <hal_io_display_cls+0x8c>)
  400b80:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  400b82:	2010      	movs	r0, #16
  400b84:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  400b86:	4628      	mov	r0, r5
  400b88:	47a0      	blx	r4
}
  400b8a:	b003      	add	sp, #12
  400b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400b90:	40008000 	.word	0x40008000
  400b94:	20000001 	.word	0x20000001
  400b98:	0040295d 	.word	0x0040295d
  400b9c:	20000e88 	.word	0x20000e88
  400ba0:	004007f9 	.word	0x004007f9
  400ba4:	400e1200 	.word	0x400e1200
  400ba8:	0040292d 	.word	0x0040292d

00400bac <hal_io_display_gotoxy>:
void hal_io_display_gotoxy( uint32_t x, uint32_t y ){
  400bac:	b538      	push	{r3, r4, r5, lr}
  400bae:	460c      	mov	r4, r1
	ssd1306_set_page_address( display_curr_line = x);
  400bb0:	4b08      	ldr	r3, [pc, #32]	; (400bd4 <hal_io_display_gotoxy+0x28>)
  400bb2:	6018      	str	r0, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400bb4:	f000 0007 	and.w	r0, r0, #7
  400bb8:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400bbc:	4d06      	ldr	r5, [pc, #24]	; (400bd8 <hal_io_display_gotoxy+0x2c>)
  400bbe:	47a8      	blx	r5
	ssd1306_set_column_address(y);
  400bc0:	b2e4      	uxtb	r4, r4
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  400bc2:	f3c4 1002 	ubfx	r0, r4, #4, #3
  400bc6:	f040 0010 	orr.w	r0, r0, #16
  400bca:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  400bcc:	f004 000f 	and.w	r0, r4, #15
  400bd0:	47a8      	blx	r5
  400bd2:	bd38      	pop	{r3, r4, r5, pc}
  400bd4:	20000e88 	.word	0x20000e88
  400bd8:	004007f9 	.word	0x004007f9

00400bdc <hal_io_display_numlines>:
}
  400bdc:	2004      	movs	r0, #4
  400bde:	4770      	bx	lr

00400be0 <hal_io_display_currline>:
}
  400be0:	4b01      	ldr	r3, [pc, #4]	; (400be8 <hal_io_display_currline+0x8>)
  400be2:	6818      	ldr	r0, [r3, #0]
  400be4:	4770      	bx	lr
  400be6:	bf00      	nop
  400be8:	20000e88 	.word	0x20000e88

00400bec <hal_io_sensor_start_poll>:
void hal_io_sensor_start_poll( tSensorId sensor_id ){
  400bec:	b538      	push	{r3, r4, r5, lr}
	switch( sensor_id ){
  400bee:	b110      	cbz	r0, 400bf6 <hal_io_sensor_start_poll+0xa>
  400bf0:	2801      	cmp	r0, #1
  400bf2:	d01c      	beq.n	400c2e <hal_io_sensor_start_poll+0x42>
  400bf4:	bd38      	pop	{r3, r4, r5, pc}
	gpio_configure_pin(LIGHT_SENSOR_GPIO, LIGHT_SENSOR_FLAGS);
  400bf6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400bfa:	2020      	movs	r0, #32
  400bfc:	4b0d      	ldr	r3, [pc, #52]	; (400c34 <hal_io_sensor_start_poll+0x48>)
  400bfe:	4798      	blx	r3
	pmc_enable_periph_clk(ID_ADC);
  400c00:	201d      	movs	r0, #29
  400c02:	4b0d      	ldr	r3, [pc, #52]	; (400c38 <hal_io_sensor_start_poll+0x4c>)
  400c04:	4798      	blx	r3
	adc_init(ADC, sysclk_get_cpu_hz(), 1000000, ADC_MR_STARTUP_SUT0);
  400c06:	4c0d      	ldr	r4, [pc, #52]	; (400c3c <hal_io_sensor_start_poll+0x50>)
  400c08:	2300      	movs	r3, #0
  400c0a:	4a0d      	ldr	r2, [pc, #52]	; (400c40 <hal_io_sensor_start_poll+0x54>)
  400c0c:	490d      	ldr	r1, [pc, #52]	; (400c44 <hal_io_sensor_start_poll+0x58>)
  400c0e:	4620      	mov	r0, r4
  400c10:	4d0d      	ldr	r5, [pc, #52]	; (400c48 <hal_io_sensor_start_poll+0x5c>)
  400c12:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_4);		//ADC channel 4
  400c14:	2104      	movs	r1, #4
  400c16:	4620      	mov	r0, r4
  400c18:	4b0c      	ldr	r3, [pc, #48]	; (400c4c <hal_io_sensor_start_poll+0x60>)
  400c1a:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 1);	
  400c1c:	2201      	movs	r2, #1
  400c1e:	2100      	movs	r1, #0
  400c20:	4620      	mov	r0, r4
  400c22:	4b0b      	ldr	r3, [pc, #44]	; (400c50 <hal_io_sensor_start_poll+0x64>)
  400c24:	4798      	blx	r3
	adc_start(ADC);		
  400c26:	4620      	mov	r0, r4
  400c28:	4b0a      	ldr	r3, [pc, #40]	; (400c54 <hal_io_sensor_start_poll+0x68>)
  400c2a:	4798      	blx	r3
  400c2c:	bd38      	pop	{r3, r4, r5, pc}
	at30tse_init();	
  400c2e:	4b0a      	ldr	r3, [pc, #40]	; (400c58 <hal_io_sensor_start_poll+0x6c>)
  400c30:	4798      	blx	r3
  400c32:	bd38      	pop	{r3, r4, r5, pc}
  400c34:	00402d81 	.word	0x00402d81
  400c38:	00403149 	.word	0x00403149
  400c3c:	40038000 	.word	0x40038000
  400c40:	000f4240 	.word	0x000f4240
  400c44:	07270e00 	.word	0x07270e00
  400c48:	00402b89 	.word	0x00402b89
  400c4c:	00402bd1 	.word	0x00402bd1
  400c50:	00402bbd 	.word	0x00402bbd
  400c54:	00402bcb 	.word	0x00402bcb
  400c58:	004016c5 	.word	0x004016c5
  400c5c:	00000000 	.word	0x00000000

00400c60 <hal_io_sensor_read>:
uint32_t hal_io_sensor_read( tSensorId sensor_id ){
  400c60:	b510      	push	{r4, lr}
  400c62:	b084      	sub	sp, #16
	switch( sensor_id ){
  400c64:	b118      	cbz	r0, 400c6e <hal_io_sensor_read+0xe>
  400c66:	2801      	cmp	r0, #1
  400c68:	d01a      	beq.n	400ca0 <hal_io_sensor_read+0x40>
	uint32_t val = 0;
  400c6a:	2000      	movs	r0, #0
	return val;
  400c6c:	e016      	b.n	400c9c <hal_io_sensor_read+0x3c>
	return adc_get_channel_value(ADC, ADC_CHANNEL_4);
  400c6e:	2104      	movs	r1, #4
  400c70:	481b      	ldr	r0, [pc, #108]	; (400ce0 <hal_io_sensor_read+0x80>)
  400c72:	4b1c      	ldr	r3, [pc, #112]	; (400ce4 <hal_io_sensor_read+0x84>)
  400c74:	4798      	blx	r3
			val = 100 - ( val/4095.0 * 100 ); //normalize to 100, 0 being darkest
  400c76:	4b1c      	ldr	r3, [pc, #112]	; (400ce8 <hal_io_sensor_read+0x88>)
  400c78:	4798      	blx	r3
  400c7a:	a317      	add	r3, pc, #92	; (adr r3, 400cd8 <hal_io_sensor_read+0x78>)
  400c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400c80:	4c1a      	ldr	r4, [pc, #104]	; (400cec <hal_io_sensor_read+0x8c>)
  400c82:	47a0      	blx	r4
  400c84:	2200      	movs	r2, #0
  400c86:	4b1a      	ldr	r3, [pc, #104]	; (400cf0 <hal_io_sensor_read+0x90>)
  400c88:	4c1a      	ldr	r4, [pc, #104]	; (400cf4 <hal_io_sensor_read+0x94>)
  400c8a:	47a0      	blx	r4
  400c8c:	4602      	mov	r2, r0
  400c8e:	460b      	mov	r3, r1
  400c90:	2000      	movs	r0, #0
  400c92:	4917      	ldr	r1, [pc, #92]	; (400cf0 <hal_io_sensor_read+0x90>)
  400c94:	4c18      	ldr	r4, [pc, #96]	; (400cf8 <hal_io_sensor_read+0x98>)
  400c96:	47a0      	blx	r4
  400c98:	4b18      	ldr	r3, [pc, #96]	; (400cfc <hal_io_sensor_read+0x9c>)
  400c9a:	4798      	blx	r3
}
  400c9c:	b004      	add	sp, #16
  400c9e:	bd10      	pop	{r4, pc}
	volatile double ret_val = 0;
  400ca0:	2200      	movs	r2, #0
  400ca2:	2300      	movs	r3, #0
  400ca4:	e9cd 2300 	strd	r2, r3, [sp]
	volatile uint64_t tries = 3;
  400ca8:	2203      	movs	r2, #3
  400caa:	2300      	movs	r3, #0
  400cac:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while( at30tse_read_temperature(&ret_val) != TWI_SUCCESS && tries++ <= 3);
  400cb0:	4c13      	ldr	r4, [pc, #76]	; (400d00 <hal_io_sensor_read+0xa0>)
  400cb2:	4668      	mov	r0, sp
  400cb4:	47a0      	blx	r4
  400cb6:	b150      	cbz	r0, 400cce <hal_io_sensor_read+0x6e>
  400cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400cbc:	1c50      	adds	r0, r2, #1
  400cbe:	f143 0100 	adc.w	r1, r3, #0
  400cc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400cc6:	2b00      	cmp	r3, #0
  400cc8:	bf08      	it	eq
  400cca:	2a04      	cmpeq	r2, #4
  400ccc:	d3f1      	bcc.n	400cb2 <hal_io_sensor_read+0x52>
	return (uint32_t)ret_val; //return truncated temperature
  400cce:	e9dd 0100 	ldrd	r0, r1, [sp]
  400cd2:	4b0a      	ldr	r3, [pc, #40]	; (400cfc <hal_io_sensor_read+0x9c>)
  400cd4:	4798      	blx	r3
			break;
  400cd6:	e7e1      	b.n	400c9c <hal_io_sensor_read+0x3c>
  400cd8:	00000000 	.word	0x00000000
  400cdc:	40affe00 	.word	0x40affe00
  400ce0:	40038000 	.word	0x40038000
  400ce4:	00402bdb 	.word	0x00402bdb
  400ce8:	00405a6d 	.word	0x00405a6d
  400cec:	00405dad 	.word	0x00405dad
  400cf0:	40590000 	.word	0x40590000
  400cf4:	00405b59 	.word	0x00405b59
  400cf8:	004057f1 	.word	0x004057f1
  400cfc:	00405f7d 	.word	0x00405f7d
  400d00:	00401731 	.word	0x00401731

00400d04 <hal_io_button_startall_poll>:
void hal_io_button_startall_poll(){
  400d04:	4770      	bx	lr
	...

00400d08 <hal_io_button_read>:
	switch( button_num ){
  400d08:	2803      	cmp	r0, #3
  400d0a:	d81f      	bhi.n	400d4c <hal_io_button_read+0x44>
  400d0c:	e8df f000 	tbb	[pc, r0]
  400d10:	17100902 	.word	0x17100902
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400d14:	4b0e      	ldr	r3, [pc, #56]	; (400d50 <hal_io_button_read+0x48>)
  400d16:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		case 0: return !ioport_get_pin_level( BUTTON0_PIN );
  400d18:	f080 0004 	eor.w	r0, r0, #4
  400d1c:	f3c0 0080 	ubfx	r0, r0, #2, #1
  400d20:	4770      	bx	lr
  400d22:	4b0b      	ldr	r3, [pc, #44]	; (400d50 <hal_io_button_read+0x48>)
  400d24:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		case 1: return !ioport_get_pin_level( BUTTON1_PIN );
  400d26:	f080 0001 	eor.w	r0, r0, #1
  400d2a:	f000 0001 	and.w	r0, r0, #1
  400d2e:	4770      	bx	lr
  400d30:	4b08      	ldr	r3, [pc, #32]	; (400d54 <hal_io_button_read+0x4c>)
  400d32:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		case 2: return !ioport_get_pin_level( BUTTON2_PIN );
  400d34:	f080 5000 	eor.w	r0, r0, #536870912	; 0x20000000
  400d38:	f3c0 7040 	ubfx	r0, r0, #29, #1
  400d3c:	4770      	bx	lr
  400d3e:	4b05      	ldr	r3, [pc, #20]	; (400d54 <hal_io_button_read+0x4c>)
  400d40:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		case 3: return !ioport_get_pin_level( BUTTON3_PIN );
  400d42:	f080 4080 	eor.w	r0, r0, #1073741824	; 0x40000000
  400d46:	f3c0 7080 	ubfx	r0, r0, #30, #1
  400d4a:	4770      	bx	lr
		default: return ButtonUnpressed; //Button does not exist		
  400d4c:	2000      	movs	r0, #0
}
  400d4e:	4770      	bx	lr
  400d50:	400e0e00 	.word	0x400e0e00
  400d54:	400e1200 	.word	0x400e1200

00400d58 <hal_io_serial_start_poll>:
void hal_io_serial_start_poll( tSerialId serial_id, uint32_t baudrate ){
  400d58:	b508      	push	{r3, lr}
	switch( serial_id ){
  400d5a:	b110      	cbz	r0, 400d62 <hal_io_serial_start_poll+0xa>
  400d5c:	2801      	cmp	r0, #1
  400d5e:	d004      	beq.n	400d6a <hal_io_serial_start_poll+0x12>
  400d60:	bd08      	pop	{r3, pc}
		case SerialA:	configure_uart1(baudrate);	break;	//SerialA is UART1
  400d62:	4608      	mov	r0, r1
  400d64:	4b03      	ldr	r3, [pc, #12]	; (400d74 <hal_io_serial_start_poll+0x1c>)
  400d66:	4798      	blx	r3
  400d68:	bd08      	pop	{r3, pc}
		case SerialB:	configure_usart1(baudrate);	break;	//SerialB is USART1
  400d6a:	4608      	mov	r0, r1
  400d6c:	4b02      	ldr	r3, [pc, #8]	; (400d78 <hal_io_serial_start_poll+0x20>)
  400d6e:	4798      	blx	r3
  400d70:	bd08      	pop	{r3, pc}
  400d72:	bf00      	nop
  400d74:	00400841 	.word	0x00400841
  400d78:	004008a1 	.word	0x004008a1

00400d7c <hal_io_serial_putc>:
void hal_io_serial_putc( tSerialId serial_id, uint8_t c ){
  400d7c:	b508      	push	{r3, lr}
	switch( serial_id ){
  400d7e:	b110      	cbz	r0, 400d86 <hal_io_serial_putc+0xa>
  400d80:	2801      	cmp	r0, #1
  400d82:	d009      	beq.n	400d98 <hal_io_serial_putc+0x1c>
  400d84:	bd08      	pop	{r3, pc}

static void uart1_putc( uint8_t c ){
	while ( !(UART1->UART_SR & UART_SR_TXRDY) ); //wait for Tx to be available
  400d86:	4a09      	ldr	r2, [pc, #36]	; (400dac <hal_io_serial_putc+0x30>)
  400d88:	6953      	ldr	r3, [r2, #20]
  400d8a:	f013 0f02 	tst.w	r3, #2
  400d8e:	d0fb      	beq.n	400d88 <hal_io_serial_putc+0xc>
	uart_write( UART1, c );						 //transmit
  400d90:	4806      	ldr	r0, [pc, #24]	; (400dac <hal_io_serial_putc+0x30>)
  400d92:	4b07      	ldr	r3, [pc, #28]	; (400db0 <hal_io_serial_putc+0x34>)
  400d94:	4798      	blx	r3
  400d96:	bd08      	pop	{r3, pc}
}

static void usart1_putc( uint8_t c ){
	while( !(USART_SERIAL->US_CSR & US_CSR_TXRDY) ); //wait until TX is ready
  400d98:	4a06      	ldr	r2, [pc, #24]	; (400db4 <hal_io_serial_putc+0x38>)
  400d9a:	6953      	ldr	r3, [r2, #20]
  400d9c:	f013 0f02 	tst.w	r3, #2
  400da0:	d0fb      	beq.n	400d9a <hal_io_serial_putc+0x1e>
	usart_write( USART_SERIAL, c );					 //write
  400da2:	4804      	ldr	r0, [pc, #16]	; (400db4 <hal_io_serial_putc+0x38>)
  400da4:	4b04      	ldr	r3, [pc, #16]	; (400db8 <hal_io_serial_putc+0x3c>)
  400da6:	4798      	blx	r3
  400da8:	bd08      	pop	{r3, pc}
  400daa:	bf00      	nop
  400dac:	400e0800 	.word	0x400e0800
  400db0:	00403717 	.word	0x00403717
  400db4:	40028000 	.word	0x40028000
  400db8:	00403825 	.word	0x00403825

00400dbc <hal_io_serial_getc>:
uint8_t hal_io_serial_getc( tSerialId serial_id ){
  400dbc:	b530      	push	{r4, r5, lr}
  400dbe:	b083      	sub	sp, #12
	uint8_t buf = 0;
  400dc0:	2300      	movs	r3, #0
  400dc2:	f88d 3007 	strb.w	r3, [sp, #7]
	switch( serial_id ){
  400dc6:	b128      	cbz	r0, 400dd4 <hal_io_serial_getc+0x18>
  400dc8:	2801      	cmp	r0, #1
  400dca:	d010      	beq.n	400dee <hal_io_serial_getc+0x32>
}
  400dcc:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400dd0:	b003      	add	sp, #12
  400dd2:	bd30      	pop	{r4, r5, pc}
}

static void uart1_getc( uint8_t* buf ){
	while( !(uart_get_status(UART1) & UART_SR_RXRDY) ); //wait until a character is ready
  400dd4:	4d0c      	ldr	r5, [pc, #48]	; (400e08 <hal_io_serial_getc+0x4c>)
  400dd6:	4c0d      	ldr	r4, [pc, #52]	; (400e0c <hal_io_serial_getc+0x50>)
  400dd8:	4628      	mov	r0, r5
  400dda:	47a0      	blx	r4
  400ddc:	f010 0f01 	tst.w	r0, #1
  400de0:	d0fa      	beq.n	400dd8 <hal_io_serial_getc+0x1c>
	uart_read( UART1, buf );							//read
  400de2:	f10d 0107 	add.w	r1, sp, #7
  400de6:	4808      	ldr	r0, [pc, #32]	; (400e08 <hal_io_serial_getc+0x4c>)
  400de8:	4b09      	ldr	r3, [pc, #36]	; (400e10 <hal_io_serial_getc+0x54>)
  400dea:	4798      	blx	r3
  400dec:	e7ee      	b.n	400dcc <hal_io_serial_getc+0x10>
}

static void usart1_getc( uint8_t* buf ){
	while( !(usart_get_status(USART1) & US_CSR_RXRDY) ); //wait until a character is available
  400dee:	4d09      	ldr	r5, [pc, #36]	; (400e14 <hal_io_serial_getc+0x58>)
  400df0:	4c09      	ldr	r4, [pc, #36]	; (400e18 <hal_io_serial_getc+0x5c>)
  400df2:	4628      	mov	r0, r5
  400df4:	47a0      	blx	r4
  400df6:	f010 0f01 	tst.w	r0, #1
  400dfa:	d0fa      	beq.n	400df2 <hal_io_serial_getc+0x36>
	usart_read(USART1, buf);							 //read
  400dfc:	f10d 0107 	add.w	r1, sp, #7
  400e00:	4804      	ldr	r0, [pc, #16]	; (400e14 <hal_io_serial_getc+0x58>)
  400e02:	4b06      	ldr	r3, [pc, #24]	; (400e1c <hal_io_serial_getc+0x60>)
  400e04:	4798      	blx	r3
  400e06:	e7e1      	b.n	400dcc <hal_io_serial_getc+0x10>
  400e08:	400e0800 	.word	0x400e0800
  400e0c:	00403713 	.word	0x00403713
  400e10:	00403727 	.word	0x00403727
  400e14:	40028000 	.word	0x40028000
  400e18:	00403821 	.word	0x00403821
  400e1c:	00403839 	.word	0x00403839

00400e20 <UART1_Handler>:
}


//UART1 ISR
void UART1_Handler(){
  400e20:	b500      	push	{lr}
  400e22:	b083      	sub	sp, #12
	uint8_t rx_data;
	uint32_t status = uart_get_status(UART1);
  400e24:	4809      	ldr	r0, [pc, #36]	; (400e4c <UART1_Handler+0x2c>)
  400e26:	4b0a      	ldr	r3, [pc, #40]	; (400e50 <UART1_Handler+0x30>)
  400e28:	4798      	blx	r3
	
	if(status & UART_SR_RXRDY){
  400e2a:	f010 0f01 	tst.w	r0, #1
  400e2e:	d102      	bne.n	400e36 <UART1_Handler+0x16>
		uart_read(UART1, &rx_data);
		
		//pass to upper layer
		uart1_callback(rx_data);
	}
}
  400e30:	b003      	add	sp, #12
  400e32:	f85d fb04 	ldr.w	pc, [sp], #4
		uart_read(UART1, &rx_data);
  400e36:	f10d 0107 	add.w	r1, sp, #7
  400e3a:	4804      	ldr	r0, [pc, #16]	; (400e4c <UART1_Handler+0x2c>)
  400e3c:	4b05      	ldr	r3, [pc, #20]	; (400e54 <UART1_Handler+0x34>)
  400e3e:	4798      	blx	r3
		uart1_callback(rx_data);
  400e40:	4b05      	ldr	r3, [pc, #20]	; (400e58 <UART1_Handler+0x38>)
  400e42:	681b      	ldr	r3, [r3, #0]
  400e44:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400e48:	4798      	blx	r3
}
  400e4a:	e7f1      	b.n	400e30 <UART1_Handler+0x10>
  400e4c:	400e0800 	.word	0x400e0800
  400e50:	00403713 	.word	0x00403713
  400e54:	00403727 	.word	0x00403727
  400e58:	20000e90 	.word	0x20000e90

00400e5c <USART1_Handler>:

//USART1 ISR
void USART1_Handler(){
  400e5c:	b500      	push	{lr}
  400e5e:	b083      	sub	sp, #12
	uint8_t received_byte;
	uint32_t dw_status = usart_get_status(USART1);
  400e60:	4809      	ldr	r0, [pc, #36]	; (400e88 <USART1_Handler+0x2c>)
  400e62:	4b0a      	ldr	r3, [pc, #40]	; (400e8c <USART1_Handler+0x30>)
  400e64:	4798      	blx	r3
	
	if (dw_status & US_CSR_RXRDY) {
  400e66:	f010 0f01 	tst.w	r0, #1
  400e6a:	d102      	bne.n	400e72 <USART1_Handler+0x16>
		usart_read(USART1, &received_byte);
		
		//pass to upper layer
		usart1_callback(received_byte);
	}
}
  400e6c:	b003      	add	sp, #12
  400e6e:	f85d fb04 	ldr.w	pc, [sp], #4
		usart_read(USART1, &received_byte);
  400e72:	f10d 0107 	add.w	r1, sp, #7
  400e76:	4804      	ldr	r0, [pc, #16]	; (400e88 <USART1_Handler+0x2c>)
  400e78:	4b05      	ldr	r3, [pc, #20]	; (400e90 <USART1_Handler+0x34>)
  400e7a:	4798      	blx	r3
		usart1_callback(received_byte);
  400e7c:	4b05      	ldr	r3, [pc, #20]	; (400e94 <USART1_Handler+0x38>)
  400e7e:	681b      	ldr	r3, [r3, #0]
  400e80:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400e84:	4798      	blx	r3
}
  400e86:	e7f1      	b.n	400e6c <USART1_Handler+0x10>
  400e88:	40028000 	.word	0x40028000
  400e8c:	00403821 	.word	0x00403821
  400e90:	00403839 	.word	0x00403839
  400e94:	20000e94 	.word	0x20000e94

00400e98 <hal_memreg_init>:
*
*	Initializes Memory. This function must be called after
*	HAL CPU Init. That is: hal_cpu_init(); hal_mem_init();...
*
*/
void hal_memreg_init(void){
  400e98:	4770      	bx	lr
	...

00400e9c <hal_memreg_read>:
*
*	@param memid	the specified memory region
*	@param memreg	a pointer to the tMemRegion variable to be populated
*/
void hal_memreg_read( tMemRegionId memid, tMemRegion* memreg ){
	if( memreg == 0 ) return; //Error (null ptr)
  400e9c:	b1e9      	cbz	r1, 400eda <hal_memreg_read+0x3e>
	
	memreg->id = memid;
  400e9e:	6008      	str	r0, [r1, #0]
	
	switch( memid ){
  400ea0:	2803      	cmp	r0, #3
  400ea2:	d81a      	bhi.n	400eda <hal_memreg_read+0x3e>
  400ea4:	e8df f000 	tbb	[pc, r0]
  400ea8:	140f0902 	.word	0x140f0902
		case MemRegSystem:
			memreg->base = MEM_REGION_SYS_BASEPTR;
  400eac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400eb0:	604a      	str	r2, [r1, #4]
			memreg->size  = MEM_REGION_SYS_SIZE;
  400eb2:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
  400eb6:	608a      	str	r2, [r1, #8]
			break;
  400eb8:	4770      	bx	lr
		case MemRegApp:
			memreg->base = MEM_REGION_APP_BASEPTR;
  400eba:	4a08      	ldr	r2, [pc, #32]	; (400edc <hal_memreg_read+0x40>)
  400ebc:	604a      	str	r2, [r1, #4]
			memreg->size  = MEM_REGION_APP_SIZE;
  400ebe:	f644 72fc 	movw	r2, #20476	; 0x4ffc
  400ec2:	608a      	str	r2, [r1, #8]
			break;
  400ec4:	4770      	bx	lr
		case MemRegSystemStack:
			memreg->base = &_estack;				//base = stack's end address
  400ec6:	4a06      	ldr	r2, [pc, #24]	; (400ee0 <hal_memreg_read+0x44>)
  400ec8:	604a      	str	r2, [r1, #4]
			memreg->size = &__stack_size__;			
  400eca:	4a06      	ldr	r2, [pc, #24]	; (400ee4 <hal_memreg_read+0x48>)
  400ecc:	608a      	str	r2, [r1, #8]
			break;
  400ece:	4770      	bx	lr
		case MemRegUserStack:
			memreg->base = MEM_REGION_STACK_BASEPTR;				//base = stack's end address
  400ed0:	4a05      	ldr	r2, [pc, #20]	; (400ee8 <hal_memreg_read+0x4c>)
  400ed2:	604a      	str	r2, [r1, #4]
			memreg->size = MEM_REGION_STACK_SIZE;
  400ed4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  400ed8:	608a      	str	r2, [r1, #8]
  400eda:	4770      	bx	lr
  400edc:	20014004 	.word	0x20014004
  400ee0:	20009260 	.word	0x20009260
  400ee4:	00003000 	.word	0x00003000
  400ee8:	20019000 	.word	0x20019000

00400eec <hal_nvmem_init>:
*
*	Initializes Non-volatile memory. This function must be called after
*	HAL CPU Init. That is: hal_cpu_init(); hal_nvmem_init();...
*
*/
void hal_nvmem_init(void){
  400eec:	4770      	bx	lr
	...

00400ef0 <hal_nvmem_start>:
*	@param mem_id id of the memory to be initialized
*
*	@return true if the memory was initialized correctly, false otherwise.
*/
bool hal_nvmem_start( tNVMemId mem_id ){
	switch(mem_id){
  400ef0:	2801      	cmp	r0, #1
  400ef2:	d117      	bne.n	400f24 <hal_nvmem_start+0x34>
bool hal_nvmem_start( tNVMemId mem_id ){
  400ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		case NVMemSDCardFAT:				//SD Card + FAT
			sdcard_fat_init = true;
  400ef6:	2201      	movs	r2, #1
  400ef8:	4b13      	ldr	r3, [pc, #76]	; (400f48 <hal_nvmem_start+0x58>)
  400efa:	701a      	strb	r2, [r3, #0]
	return f_mount(LUN_ID_SD_MMC_0_MEM, &fs) == FR_OK;
}

static bool sdcard_init( uint32_t num_attempts ){
	//check for SD Card to be inserted
	if( !gpio_pin_is_low(SD_MMC_0_CD_GPIO) ){
  400efc:	204c      	movs	r0, #76	; 0x4c
  400efe:	4b13      	ldr	r3, [pc, #76]	; (400f4c <hal_nvmem_start+0x5c>)
  400f00:	4798      	blx	r3
  400f02:	b108      	cbz	r0, 400f08 <hal_nvmem_start+0x18>
			return sdcard_init(10) && fs_mount();	
  400f04:	2000      	movs	r0, #0
}
  400f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
	}
	
	//Init SD/MMC Stack
	sd_mmc_init();
  400f08:	4b11      	ldr	r3, [pc, #68]	; (400f50 <hal_nvmem_start+0x60>)
  400f0a:	4798      	blx	r3
  400f0c:	240b      	movs	r4, #11
	
	//Initializes Card
	while (	sd_mmc_check(0) != SD_MMC_OK ){
  400f0e:	4d11      	ldr	r5, [pc, #68]	; (400f54 <hal_nvmem_start+0x64>)
		if( num_attempts-- <= 0 ) return false;
		delay_ms(200);
  400f10:	4f11      	ldr	r7, [pc, #68]	; (400f58 <hal_nvmem_start+0x68>)
  400f12:	4e12      	ldr	r6, [pc, #72]	; (400f5c <hal_nvmem_start+0x6c>)
	while (	sd_mmc_check(0) != SD_MMC_OK ){
  400f14:	2000      	movs	r0, #0
  400f16:	47a8      	blx	r5
  400f18:	b130      	cbz	r0, 400f28 <hal_nvmem_start+0x38>
		if( num_attempts-- <= 0 ) return false;
  400f1a:	3c01      	subs	r4, #1
  400f1c:	d0f2      	beq.n	400f04 <hal_nvmem_start+0x14>
		delay_ms(200);
  400f1e:	4638      	mov	r0, r7
  400f20:	47b0      	blx	r6
  400f22:	e7f7      	b.n	400f14 <hal_nvmem_start+0x24>
		case NVMemSDCard:		return false;							//unimplemented (raw access to sd card)
  400f24:	2000      	movs	r0, #0
  400f26:	4770      	bx	lr
	memset(&fs, 0, sizeof(FATFS));
  400f28:	4c0d      	ldr	r4, [pc, #52]	; (400f60 <hal_nvmem_start+0x70>)
  400f2a:	f44f 720c 	mov.w	r2, #560	; 0x230
  400f2e:	2100      	movs	r1, #0
  400f30:	4620      	mov	r0, r4
  400f32:	4b0c      	ldr	r3, [pc, #48]	; (400f64 <hal_nvmem_start+0x74>)
  400f34:	4798      	blx	r3
	return f_mount(LUN_ID_SD_MMC_0_MEM, &fs) == FR_OK;
  400f36:	4621      	mov	r1, r4
  400f38:	2000      	movs	r0, #0
  400f3a:	4b0b      	ldr	r3, [pc, #44]	; (400f68 <hal_nvmem_start+0x78>)
  400f3c:	4798      	blx	r3
			return sdcard_init(10) && fs_mount();	
  400f3e:	fab0 f080 	clz	r0, r0
  400f42:	0940      	lsrs	r0, r0, #5
  400f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f46:	bf00      	nop
  400f48:	200010c8 	.word	0x200010c8
  400f4c:	00402d65 	.word	0x00402d65
  400f50:	004019cd 	.word	0x004019cd
  400f54:	004019f9 	.word	0x004019f9
  400f58:	001a286e 	.word	0x001a286e
  400f5c:	20000001 	.word	0x20000001
  400f60:	20000e98 	.word	0x20000e98
  400f64:	0040631d 	.word	0x0040631d
  400f68:	00405211 	.word	0x00405211

00400f6c <hal_nvmem_fat_file_size>:
uint32_t hal_nvmem_fat_file_size( uint8_t* fname ){
  400f6c:	b508      	push	{r3, lr}
	if( !sdcard_fat_init ) return 0;
  400f6e:	4b07      	ldr	r3, [pc, #28]	; (400f8c <hal_nvmem_fat_file_size+0x20>)
  400f70:	781b      	ldrb	r3, [r3, #0]
  400f72:	b90b      	cbnz	r3, 400f78 <hal_nvmem_fat_file_size+0xc>
  400f74:	2000      	movs	r0, #0
  400f76:	bd08      	pop	{r3, pc}
	return f_stat( fname, &fno ) == FR_OK ? fno.fsize : 0;
  400f78:	4905      	ldr	r1, [pc, #20]	; (400f90 <hal_nvmem_fat_file_size+0x24>)
  400f7a:	4b06      	ldr	r3, [pc, #24]	; (400f94 <hal_nvmem_fat_file_size+0x28>)
  400f7c:	4798      	blx	r3
  400f7e:	b910      	cbnz	r0, 400f86 <hal_nvmem_fat_file_size+0x1a>
  400f80:	4b03      	ldr	r3, [pc, #12]	; (400f90 <hal_nvmem_fat_file_size+0x24>)
  400f82:	6818      	ldr	r0, [r3, #0]
  400f84:	bd08      	pop	{r3, pc}
  400f86:	2000      	movs	r0, #0
}
  400f88:	bd08      	pop	{r3, pc}
  400f8a:	bf00      	nop
  400f8c:	200010c8 	.word	0x200010c8
  400f90:	20006210 	.word	0x20006210
  400f94:	0040570d 	.word	0x0040570d

00400f98 <hal_nvmem_fat_file_read>:
uint32_t hal_nvmem_fat_file_read( uint8_t* fname, uint8_t* buffer, uint32_t buf_size ){
  400f98:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f9a:	b08d      	sub	sp, #52	; 0x34
	if( !sdcard_fat_init ) return 0;
  400f9c:	4b14      	ldr	r3, [pc, #80]	; (400ff0 <hal_nvmem_fat_file_read+0x58>)
  400f9e:	781b      	ldrb	r3, [r3, #0]
  400fa0:	b91b      	cbnz	r3, 400faa <hal_nvmem_fat_file_read+0x12>
  400fa2:	2400      	movs	r4, #0
}
  400fa4:	4620      	mov	r0, r4
  400fa6:	b00d      	add	sp, #52	; 0x34
  400fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400faa:	460d      	mov	r5, r1
  400fac:	4616      	mov	r6, r2
	if( f_open(&fil, fname, FA_OPEN_EXISTING | FA_READ) != FR_OK ){
  400fae:	2201      	movs	r2, #1
  400fb0:	4601      	mov	r1, r0
  400fb2:	a803      	add	r0, sp, #12
  400fb4:	4b0f      	ldr	r3, [pc, #60]	; (400ff4 <hal_nvmem_fat_file_read+0x5c>)
  400fb6:	4798      	blx	r3
  400fb8:	b9b8      	cbnz	r0, 400fea <hal_nvmem_fat_file_read+0x52>
	while ( n < buf_size ) {
  400fba:	b1a6      	cbz	r6, 400fe6 <hal_nvmem_fat_file_read+0x4e>
  400fbc:	2400      	movs	r4, #0
		f_read(&fil, s, 1, &bytes_read);
  400fbe:	4f0e      	ldr	r7, [pc, #56]	; (400ff8 <hal_nvmem_fat_file_read+0x60>)
  400fc0:	ab02      	add	r3, sp, #8
  400fc2:	2201      	movs	r2, #1
  400fc4:	a901      	add	r1, sp, #4
  400fc6:	a803      	add	r0, sp, #12
  400fc8:	47b8      	blx	r7
		if ( bytes_read != 1 )
  400fca:	9b02      	ldr	r3, [sp, #8]
  400fcc:	2b01      	cmp	r3, #1
  400fce:	d106      	bne.n	400fde <hal_nvmem_fat_file_read+0x46>
		*p_buffer++ = s[0];
  400fd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400fd4:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
  400fd8:	3401      	adds	r4, #1
	while ( n < buf_size ) {
  400fda:	42a6      	cmp	r6, r4
  400fdc:	d1f0      	bne.n	400fc0 <hal_nvmem_fat_file_read+0x28>
	f_close(&fil);
  400fde:	a803      	add	r0, sp, #12
  400fe0:	4b06      	ldr	r3, [pc, #24]	; (400ffc <hal_nvmem_fat_file_read+0x64>)
  400fe2:	4798      	blx	r3
	return n;
  400fe4:	e7de      	b.n	400fa4 <hal_nvmem_fat_file_read+0xc>
	while ( n < buf_size ) {
  400fe6:	4634      	mov	r4, r6
  400fe8:	e7f9      	b.n	400fde <hal_nvmem_fat_file_read+0x46>
		return 0; //0 bytes read
  400fea:	2400      	movs	r4, #0
  400fec:	e7da      	b.n	400fa4 <hal_nvmem_fat_file_read+0xc>
  400fee:	bf00      	nop
  400ff0:	200010c8 	.word	0x200010c8
  400ff4:	00405239 	.word	0x00405239
  400ff8:	004053d1 	.word	0x004053d1
  400ffc:	004055fd 	.word	0x004055fd

00401000 <hal_nvmem_fat_file_list>:
uint32_t hal_nvmem_fat_file_list( uint8_t list[][MEM_FAT_MAX_FNAME_LENGTH+1], uint32_t max_num_files ){
  401000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401004:	b0d3      	sub	sp, #332	; 0x14c
	if( !sdcard_fat_init ) return 0;
  401006:	4b20      	ldr	r3, [pc, #128]	; (401088 <hal_nvmem_fat_file_list+0x88>)
  401008:	781b      	ldrb	r3, [r3, #0]
  40100a:	b923      	cbnz	r3, 401016 <hal_nvmem_fat_file_list+0x16>
  40100c:	2500      	movs	r5, #0
}
  40100e:	4628      	mov	r0, r5
  401010:	b053      	add	sp, #332	; 0x14c
  401012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401016:	460f      	mov	r7, r1
  401018:	4606      	mov	r6, r0
	fno.lfname = c_lfn;
  40101a:	ab01      	add	r3, sp, #4
  40101c:	9350      	str	r3, [sp, #320]	; 0x140
	fno.lfsize = sizeof(c_lfn);
  40101e:	f44f 7380 	mov.w	r3, #256	; 0x100
  401022:	9351      	str	r3, [sp, #324]	; 0x144
	if ( f_opendir( &dir, "0:" ) == FR_OK ){
  401024:	4919      	ldr	r1, [pc, #100]	; (40108c <hal_nvmem_fat_file_list+0x8c>)
  401026:	a841      	add	r0, sp, #260	; 0x104
  401028:	4b19      	ldr	r3, [pc, #100]	; (401090 <hal_nvmem_fat_file_list+0x90>)
  40102a:	4798      	blx	r3
  40102c:	bb50      	cbnz	r0, 401084 <hal_nvmem_fat_file_list+0x84>
  40102e:	2500      	movs	r5, #0
		while( num_files < max_num_files && f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0 ){
  401030:	f8df 8064 	ldr.w	r8, [pc, #100]	; 401098 <hal_nvmem_fat_file_list+0x98>
			strcpy( list[num_files++], strlen(pc_fn) < MEM_FAT_MAX_FNAME_LENGTH ? pc_fn : "file name too large" );
  401034:	f8df a064 	ldr.w	sl, [pc, #100]	; 40109c <hal_nvmem_fat_file_list+0x9c>
  401038:	f8df 9064 	ldr.w	r9, [pc, #100]	; 4010a0 <hal_nvmem_fat_file_list+0xa0>
		while( num_files < max_num_files && f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0 ){
  40103c:	42bd      	cmp	r5, r7
  40103e:	d0e6      	beq.n	40100e <hal_nvmem_fat_file_list+0xe>
  401040:	a94a      	add	r1, sp, #296	; 0x128
  401042:	a841      	add	r0, sp, #260	; 0x104
  401044:	47c0      	blx	r8
  401046:	2800      	cmp	r0, #0
  401048:	d1e1      	bne.n	40100e <hal_nvmem_fat_file_list+0xe>
  40104a:	f89d 3131 	ldrb.w	r3, [sp, #305]	; 0x131
  40104e:	2b00      	cmp	r3, #0
  401050:	d0dd      	beq.n	40100e <hal_nvmem_fat_file_list+0xe>
			pc_fn = *fno.lfname ? fno.lfname : fno.fname;
  401052:	9c50      	ldr	r4, [sp, #320]	; 0x140
  401054:	7823      	ldrb	r3, [r4, #0]
  401056:	b90b      	cbnz	r3, 40105c <hal_nvmem_fat_file_list+0x5c>
  401058:	f20d 1431 	addw	r4, sp, #305	; 0x131
			if (fno.fattrib & AM_DIR){
  40105c:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
  401060:	f013 0f10 	tst.w	r3, #16
  401064:	d10b      	bne.n	40107e <hal_nvmem_fat_file_list+0x7e>
			strcpy( list[num_files++], strlen(pc_fn) < MEM_FAT_MAX_FNAME_LENGTH ? pc_fn : "file name too large" );
  401066:	3501      	adds	r5, #1
  401068:	4620      	mov	r0, r4
  40106a:	47d0      	blx	sl
  40106c:	281d      	cmp	r0, #29
  40106e:	bf94      	ite	ls
  401070:	4621      	movls	r1, r4
  401072:	4649      	movhi	r1, r9
  401074:	4630      	mov	r0, r6
  401076:	4b07      	ldr	r3, [pc, #28]	; (401094 <hal_nvmem_fat_file_list+0x94>)
  401078:	4798      	blx	r3
  40107a:	361f      	adds	r6, #31
  40107c:	e7de      	b.n	40103c <hal_nvmem_fat_file_list+0x3c>
		while( num_files < max_num_files && f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0 ){
  40107e:	42bd      	cmp	r5, r7
  401080:	d3de      	bcc.n	401040 <hal_nvmem_fat_file_list+0x40>
  401082:	e7c4      	b.n	40100e <hal_nvmem_fat_file_list+0xe>
	uint32_t num_files = 0; //files in the directory
  401084:	2500      	movs	r5, #0
  401086:	e7c2      	b.n	40100e <hal_nvmem_fat_file_list+0xe>
  401088:	200010c8 	.word	0x200010c8
  40108c:	0040a844 	.word	0x0040a844
  401090:	00405615 	.word	0x00405615
  401094:	004066fd 	.word	0x004066fd
  401098:	00405695 	.word	0x00405695
  40109c:	004067c1 	.word	0x004067c1
  4010a0:	0040a830 	.word	0x0040a830

004010a4 <loader_init>:

static tMemRegion app_memreg;						//Info to where the binary would be loaded to
static uint8_t binary[SYS_LOADER_BUFFER_MAX_SIZE];	//Binary's temporary buffer,  
static uint32_t app_stack_sz;

void loader_init(void){
  4010a4:	b508      	push	{r3, lr}
	//Get App region details
	hal_memreg_read( MemRegApp, &app_memreg );
  4010a6:	4902      	ldr	r1, [pc, #8]	; (4010b0 <loader_init+0xc>)
  4010a8:	2001      	movs	r0, #1
  4010aa:	4b02      	ldr	r3, [pc, #8]	; (4010b4 <loader_init+0x10>)
  4010ac:	4798      	blx	r3
  4010ae:	bd08      	pop	{r3, pc}
  4010b0:	200010cc 	.word	0x200010cc
  4010b4:	00400e9d 	.word	0x00400e9d

004010b8 <loader_load_app>:
}

/*
*
*/
uint32_t loader_load_app( uint8_t* app_name, tMemRegion* p_mem_region, uint32_t* p_stack_sz  ){
  4010b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4010ba:	4606      	mov	r6, r0
  4010bc:	460c      	mov	r4, r1
  4010be:	4615      	mov	r5, r2
	
	//validates app file
	uint32_t app_size = hal_nvmem_fat_file_size( app_name );
  4010c0:	4b13      	ldr	r3, [pc, #76]	; (401110 <loader_load_app+0x58>)
  4010c2:	4798      	blx	r3
	
	if( app_size == 0 )									
  4010c4:	4603      	mov	r3, r0
  4010c6:	b118      	cbz	r0, 4010d0 <loader_load_app+0x18>
		return LOADER_NO_APP_FOUND;
	else if ( app_size > SYS_LOADER_BUFFER_MAX_SIZE  || app_size > SYS_APP_MAX_SIZE )	
  4010c8:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
  4010cc:	d902      	bls.n	4010d4 <loader_load_app+0x1c>
		return LOADER_APP_TOO_LARGE;
  4010ce:	2301      	movs	r3, #1
	//pass caller a ptr to the loaded mem region and stack size
	*p_mem_region = app_memreg;
	*p_stack_sz = app_stack_sz;
	
	return LOADER_LOAD_SUCCESS;
}
  4010d0:	4618      	mov	r0, r3
  4010d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t bytes_read = hal_nvmem_fat_file_read( app_name, 
  4010d4:	4f0f      	ldr	r7, [pc, #60]	; (401114 <loader_load_app+0x5c>)
  4010d6:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
  4010da:	4639      	mov	r1, r7
  4010dc:	4630      	mov	r0, r6
  4010de:	4b0e      	ldr	r3, [pc, #56]	; (401118 <loader_load_app+0x60>)
  4010e0:	4798      	blx	r3
	app_stack_sz = *((uint32_t*)binary);
  4010e2:	683e      	ldr	r6, [r7, #0]
  4010e4:	4b0d      	ldr	r3, [pc, #52]	; (40111c <loader_load_app+0x64>)
  4010e6:	601e      	str	r6, [r3, #0]
	load_app( app_memreg.base, app_buffer, bytes_read );
  4010e8:	4b0d      	ldr	r3, [pc, #52]	; (401120 <loader_load_app+0x68>)
  4010ea:	6859      	ldr	r1, [r3, #4]

static void load_app( uint8_t* mem, uint8_t* binary, uint32_t size ){
	
	for(uint32_t i = 0; i<size; i++)
  4010ec:	b140      	cbz	r0, 401100 <loader_load_app+0x48>
  4010ee:	4a0d      	ldr	r2, [pc, #52]	; (401124 <loader_load_app+0x6c>)
  4010f0:	460b      	mov	r3, r1
  4010f2:	1808      	adds	r0, r1, r0
		mem[i] = binary[i];
  4010f4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4010f8:	f803 1b01 	strb.w	r1, [r3], #1
	for(uint32_t i = 0; i<size; i++)
  4010fc:	4283      	cmp	r3, r0
  4010fe:	d1f9      	bne.n	4010f4 <loader_load_app+0x3c>
	*p_mem_region = app_memreg;
  401100:	4b07      	ldr	r3, [pc, #28]	; (401120 <loader_load_app+0x68>)
  401102:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  401106:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	*p_stack_sz = app_stack_sz;
  40110a:	602e      	str	r6, [r5, #0]
	return LOADER_LOAD_SUCCESS;
  40110c:	2302      	movs	r3, #2
  40110e:	e7df      	b.n	4010d0 <loader_load_app+0x18>
  401110:	00400f6d 	.word	0x00400f6d
  401114:	200010dc 	.word	0x200010dc
  401118:	00400f99 	.word	0x00400f99
  40111c:	200010d8 	.word	0x200010d8
  401120:	200010cc 	.word	0x200010cc
  401124:	200010df 	.word	0x200010df

00401128 <tick_callback>:
*	Context switch takes place here.
*/
__attribute__((naked)) static void tick_callback(void){
	
	//save software context
	hal_cpu_save_context();
  401128:	4b0c      	ldr	r3, [pc, #48]	; (40115c <tick_callback+0x34>)
  40112a:	4798      	blx	r3
	
	//Is there an active process?
	if( active_proc->state != ProcessStateNull ){
  40112c:	4b0c      	ldr	r3, [pc, #48]	; (401160 <tick_callback+0x38>)
  40112e:	681c      	ldr	r4, [r3, #0]
  401130:	68a3      	ldr	r3, [r4, #8]
  401132:	2b02      	cmp	r3, #2
  401134:	d006      	beq.n	401144 <tick_callback+0x1c>
		//save SP
		active_proc->sp = hal_cpu_get_psp();
  401136:	4b0b      	ldr	r3, [pc, #44]	; (401164 <tick_callback+0x3c>)
  401138:	4798      	blx	r3
  40113a:	6060      	str	r0, [r4, #4]
		
		//place active process in dummy waiting list
		wait_list[0] = active_proc;
  40113c:	4b08      	ldr	r3, [pc, #32]	; (401160 <tick_callback+0x38>)
  40113e:	681a      	ldr	r2, [r3, #0]
  401140:	4b09      	ldr	r3, [pc, #36]	; (401168 <tick_callback+0x40>)
  401142:	601a      	str	r2, [r3, #0]
	}
	
	//get next active process from dummy waiting list
	active_proc = wait_list[0];
  401144:	4b08      	ldr	r3, [pc, #32]	; (401168 <tick_callback+0x40>)
  401146:	681b      	ldr	r3, [r3, #0]
  401148:	4a05      	ldr	r2, [pc, #20]	; (401160 <tick_callback+0x38>)
  40114a:	6013      	str	r3, [r2, #0]
	
	//restore SP
	hal_cpu_set_psp( active_proc->sp );
  40114c:	6858      	ldr	r0, [r3, #4]
  40114e:	4b07      	ldr	r3, [pc, #28]	; (40116c <tick_callback+0x44>)
  401150:	4798      	blx	r3
	
	//restore software context
	hal_cpu_restore_context();
  401152:	4b07      	ldr	r3, [pc, #28]	; (401170 <tick_callback+0x48>)
  401154:	4798      	blx	r3
	
	//give CPU to active process
	hal_cpu_return_exception_user_mode();
  401156:	4b07      	ldr	r3, [pc, #28]	; (401174 <tick_callback+0x4c>)
  401158:	4798      	blx	r3
  40115a:	bf00      	nop
  40115c:	00400741 	.word	0x00400741
  401160:	200060dc 	.word	0x200060dc
  401164:	004007a5 	.word	0x004007a5
  401168:	200060fc 	.word	0x200060fc
  40116c:	004007cf 	.word	0x004007cf
  401170:	0040074f 	.word	0x0040074f
  401174:	0040073d 	.word	0x0040073d

00401178 <scheduler_init>:
void scheduler_init(void){
  401178:	b510      	push	{r4, lr}
	hal_memreg_read( MemRegUserStack, &stack_memreg );
  40117a:	4c06      	ldr	r4, [pc, #24]	; (401194 <scheduler_init+0x1c>)
  40117c:	4621      	mov	r1, r4
  40117e:	2003      	movs	r0, #3
  401180:	4b05      	ldr	r3, [pc, #20]	; (401198 <scheduler_init+0x20>)
  401182:	4798      	blx	r3
	stack_init( stack_memreg.base );	//stack_init( epstack )
  401184:	6860      	ldr	r0, [r4, #4]
  401186:	4b05      	ldr	r3, [pc, #20]	; (40119c <scheduler_init+0x24>)
  401188:	4798      	blx	r3
	active_proc = &null_proc;
  40118a:	4a05      	ldr	r2, [pc, #20]	; (4011a0 <scheduler_init+0x28>)
  40118c:	4b05      	ldr	r3, [pc, #20]	; (4011a4 <scheduler_init+0x2c>)
  40118e:	601a      	str	r2, [r3, #0]
  401190:	bd10      	pop	{r4, pc}
  401192:	bf00      	nop
  401194:	200060f0 	.word	0x200060f0
  401198:	00400e9d 	.word	0x00400e9d
  40119c:	00401549 	.word	0x00401549
  4011a0:	20000050 	.word	0x20000050
  4011a4:	200060dc 	.word	0x200060dc

004011a8 <scheduler_process_create>:
/*
*	Scheduler Process Create
*
*	Creates a process from a binary in nvmem. Ticking here begins!
*/
uint32_t scheduler_process_create( uint8_t* binary_file_name, uint8_t* name, uint32_t* loader_rval ){	
  4011a8:	b530      	push	{r4, r5, lr}
  4011aa:	b085      	sub	sp, #20
  4011ac:	460d      	mov	r5, r1
  4011ae:	4614      	mov	r4, r2
	tMemRegion proc_memregion;
	uint32_t stack_sz;
	
	//Load app binary
	uint32_t rval = loader_load_app( binary_file_name, &proc_memregion, &stack_sz );
  4011b0:	466a      	mov	r2, sp
  4011b2:	a901      	add	r1, sp, #4
  4011b4:	4b16      	ldr	r3, [pc, #88]	; (401210 <scheduler_process_create+0x68>)
  4011b6:	4798      	blx	r3
	if(  rval != LOADER_LOAD_SUCCESS ){
  4011b8:	2802      	cmp	r0, #2
  4011ba:	d004      	beq.n	4011c6 <scheduler_process_create+0x1e>
		*loader_rval = rval;				//populate loader error
  4011bc:	6020      	str	r0, [r4, #0]
		return SCHEDULER_PROCESS_CREATE_FAILED;
  4011be:	2400      	movs	r4, #0
		hal_cpu_set_psp( proc[0].sp );						//or else the first tick fails
		hal_cpu_systimer_start( TICK_FREQ, tick_callback );
	}
	
	return SCHEDULER_PROCESS_CREATE_SUCCESS;	
  4011c0:	4620      	mov	r0, r4
  4011c2:	b005      	add	sp, #20
  4011c4:	bd30      	pop	{r4, r5, pc}
	proc[0].name = name;
  4011c6:	4c13      	ldr	r4, [pc, #76]	; (401214 <scheduler_process_create+0x6c>)
  4011c8:	6025      	str	r5, [r4, #0]
	proc[0].state = ProcessStateReady;
  4011ca:	2300      	movs	r3, #0
  4011cc:	60a3      	str	r3, [r4, #8]
	stack_alloc( CONTEXT_SIZE );
  4011ce:	2010      	movs	r0, #16
  4011d0:	4d11      	ldr	r5, [pc, #68]	; (401218 <scheduler_process_create+0x70>)
  4011d2:	47a8      	blx	r5
	proc[0].sp = stack_top();                //set SP
  4011d4:	4b11      	ldr	r3, [pc, #68]	; (40121c <scheduler_process_create+0x74>)
  4011d6:	4798      	blx	r3
  4011d8:	6060      	str	r0, [r4, #4]
	stack_alloc( stack_sz - CONTEXT_SIZE );  //make space 
  4011da:	9800      	ldr	r0, [sp, #0]
  4011dc:	3810      	subs	r0, #16
  4011de:	47a8      	blx	r5
	proc[0].sp[OFFSET_PC] =     ((uint32_t) (proc_memregion.base +1));
  4011e0:	6860      	ldr	r0, [r4, #4]
  4011e2:	9b02      	ldr	r3, [sp, #8]
  4011e4:	3301      	adds	r3, #1
  4011e6:	6383      	str	r3, [r0, #56]	; 0x38
	proc[0].sp[OFFSET_APSR] =   ((uint32_t) INITIAL_APSR);
  4011e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4011ec:	63c3      	str	r3, [r0, #60]	; 0x3c
	wait_list[0] = &proc[0];
  4011ee:	4b0c      	ldr	r3, [pc, #48]	; (401220 <scheduler_process_create+0x78>)
  4011f0:	601c      	str	r4, [r3, #0]
	proc_count++;
  4011f2:	4b0c      	ldr	r3, [pc, #48]	; (401224 <scheduler_process_create+0x7c>)
  4011f4:	681c      	ldr	r4, [r3, #0]
  4011f6:	3401      	adds	r4, #1
  4011f8:	601c      	str	r4, [r3, #0]
	if( proc_count == 1 ){
  4011fa:	2c01      	cmp	r4, #1
  4011fc:	d001      	beq.n	401202 <scheduler_process_create+0x5a>
	return SCHEDULER_PROCESS_CREATE_SUCCESS;	
  4011fe:	2401      	movs	r4, #1
  401200:	e7de      	b.n	4011c0 <scheduler_process_create+0x18>
		hal_cpu_set_psp( proc[0].sp );						//or else the first tick fails
  401202:	4b09      	ldr	r3, [pc, #36]	; (401228 <scheduler_process_create+0x80>)
  401204:	4798      	blx	r3
		hal_cpu_systimer_start( TICK_FREQ, tick_callback );
  401206:	4909      	ldr	r1, [pc, #36]	; (40122c <scheduler_process_create+0x84>)
  401208:	2003      	movs	r0, #3
  40120a:	4b09      	ldr	r3, [pc, #36]	; (401230 <scheduler_process_create+0x88>)
  40120c:	4798      	blx	r3
  40120e:	e7d7      	b.n	4011c0 <scheduler_process_create+0x18>
  401210:	004010b9 	.word	0x004010b9
  401214:	200060e0 	.word	0x200060e0
  401218:	00401585 	.word	0x00401585
  40121c:	0040155d 	.word	0x0040155d
  401220:	200060fc 	.word	0x200060fc
  401224:	200060ec 	.word	0x200060ec
  401228:	004007cf 	.word	0x004007cf
  40122c:	00401129 	.word	0x00401129
  401230:	0040069d 	.word	0x0040069d

00401234 <syscalls_entry_point>:
*	   2. Based on that extract the right SP (PSP or MSP)
*	   3. The rest is the same...
*
*	There' no reason to make a syscall from the kernel though, so it's all good.
*/
void syscalls_entry_point(void){
  401234:	b538      	push	{r3, r4, r5, lr}
	
	uint32_t sp = hal_cpu_get_psp();
  401236:	4b33      	ldr	r3, [pc, #204]	; (401304 <syscalls_entry_point+0xd0>)
  401238:	4798      	blx	r3
	
	//extract the number from the read instruction
	svc_number &= 0x00FF;
	
	//get arguments
	void* arg0 = ((uint32_t*)sp)[0];
  40123a:	6804      	ldr	r4, [r0, #0]
	void* arg1 = ((uint32_t*)sp)[1];
  40123c:	6845      	ldr	r5, [r0, #4]
	uint32_t svc_number = ((uint16_t*) ((uint32_t*)sp)[6])[-1];
  40123e:	6983      	ldr	r3, [r0, #24]
	void* arg2 = ((uint32_t*)sp)[2];
	void* arg3 = ((uint32_t*)sp)[3];
	
	//attend syscall
	switch(svc_number){
  401240:	f813 3c02 	ldrb.w	r3, [r3, #-2]
  401244:	3b03      	subs	r3, #3
  401246:	2b18      	cmp	r3, #24
  401248:	d85a      	bhi.n	401300 <syscalls_entry_point+0xcc>
  40124a:	e8df f003 	tbb	[pc, r3]
  40124e:	100d      	.short	0x100d
  401250:	1d591519 	.word	0x1d591519
  401254:	2c592722 	.word	0x2c592722
  401258:	3c353930 	.word	0x3c353930
  40125c:	49594541 	.word	0x49594541
  401260:	5959504d 	.word	0x5959504d
  401264:	5959      	.short	0x5959
  401266:	54          	.byte	0x54
  401267:	00          	.byte	0x00
		//case SVCLedWrite:			hal_io_led_write( (tLedNum)arg0, (tLedState)arg1 );				break;
		//case SVCLedRead:			*((tLedState*)arg1) = hal_io_led_read( (tLedNum)arg0 );			break;
		
		//Button
		//case SVCButtonStartEv:		/* Not supported yet */										break;
		case SVCButtonStartallPoll:	hal_io_button_startall_poll();										break;	
  401268:	4b27      	ldr	r3, [pc, #156]	; (401308 <syscalls_entry_point+0xd4>)
  40126a:	4798      	blx	r3
  40126c:	bd38      	pop	{r3, r4, r5, pc}
		case SVCButtonRead:			*((tButtonState*)arg1) = hal_io_button_read( (tButtonNum)arg0 );	break;	
  40126e:	4620      	mov	r0, r4
  401270:	4b26      	ldr	r3, [pc, #152]	; (40130c <syscalls_entry_point+0xd8>)
  401272:	4798      	blx	r3
  401274:	6028      	str	r0, [r5, #0]
  401276:	bd38      	pop	{r3, r4, r5, pc}
		
		//Clock
		case SVCClockWrite:			hal_io_clock_write( (tTime*)arg0 );								break;
  401278:	4620      	mov	r0, r4
  40127a:	4b25      	ldr	r3, [pc, #148]	; (401310 <syscalls_entry_point+0xdc>)
  40127c:	4798      	blx	r3
  40127e:	bd38      	pop	{r3, r4, r5, pc}
		case SVCClockRead:			hal_io_clock_read( (tTime*)arg0  );								break;
  401280:	4620      	mov	r0, r4
  401282:	4b24      	ldr	r3, [pc, #144]	; (401314 <syscalls_entry_point+0xe0>)
  401284:	4798      	blx	r3
  401286:	bd38      	pop	{r3, r4, r5, pc}
		
		//Serial
		//case SVCSerialStartEv:		/*Not supported yet  */										break;
		case SVCSerialStartPoll:	hal_io_serial_start_poll( (tSerialId)arg0, (uint32_t)arg1 );		break;
  401288:	4629      	mov	r1, r5
  40128a:	4620      	mov	r0, r4
  40128c:	4b22      	ldr	r3, [pc, #136]	; (401318 <syscalls_entry_point+0xe4>)
  40128e:	4798      	blx	r3
  401290:	bd38      	pop	{r3, r4, r5, pc}
		case SVCSerialPutc:			hal_io_serial_putc( (tSerialId)arg0, (uint8_t)arg1 );				break;
  401292:	b2e9      	uxtb	r1, r5
  401294:	4620      	mov	r0, r4
  401296:	4b21      	ldr	r3, [pc, #132]	; (40131c <syscalls_entry_point+0xe8>)
  401298:	4798      	blx	r3
  40129a:	bd38      	pop	{r3, r4, r5, pc}
		case SVCSerialGetc:			*((uint32_t*)arg1) = hal_io_serial_getc( (tSerialId)arg0 );		break;
  40129c:	4620      	mov	r0, r4
  40129e:	4b20      	ldr	r3, [pc, #128]	; (401320 <syscalls_entry_point+0xec>)
  4012a0:	4798      	blx	r3
  4012a2:	6028      	str	r0, [r5, #0]
  4012a4:	bd38      	pop	{r3, r4, r5, pc}
		
		//Sensor
		//case SVCSensorStartEv:		/* Not supported yet */										break;
		case SVCSensorStartPoll:	hal_io_sensor_start_poll( (tSensorId)arg0 );						break;
  4012a6:	4620      	mov	r0, r4
  4012a8:	4b1e      	ldr	r3, [pc, #120]	; (401324 <syscalls_entry_point+0xf0>)
  4012aa:	4798      	blx	r3
  4012ac:	bd38      	pop	{r3, r4, r5, pc}
		case SVCSensorRead:			*((uint32_t*)arg1) = hal_io_sensor_read( (tSensorId)arg0 );		break;
  4012ae:	4620      	mov	r0, r4
  4012b0:	4b1d      	ldr	r3, [pc, #116]	; (401328 <syscalls_entry_point+0xf4>)
  4012b2:	4798      	blx	r3
  4012b4:	6028      	str	r0, [r5, #0]
  4012b6:	bd38      	pop	{r3, r4, r5, pc}
		
		//Display		
		case SVCDisplayPutc:		hal_io_display_putc( (uint8_t)arg0 );								break;
  4012b8:	b2e0      	uxtb	r0, r4
  4012ba:	4b1c      	ldr	r3, [pc, #112]	; (40132c <syscalls_entry_point+0xf8>)
  4012bc:	4798      	blx	r3
  4012be:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayCls:			hal_io_display_cls();												break;
  4012c0:	4b1b      	ldr	r3, [pc, #108]	; (401330 <syscalls_entry_point+0xfc>)
  4012c2:	4798      	blx	r3
  4012c4:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayGotoxy:		hal_io_display_gotoxy( (uint32_t)arg0, (uint32_t)arg1 );			break;
  4012c6:	4629      	mov	r1, r5
  4012c8:	4620      	mov	r0, r4
  4012ca:	4b1a      	ldr	r3, [pc, #104]	; (401334 <syscalls_entry_point+0x100>)
  4012cc:	4798      	blx	r3
  4012ce:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayNumLines:	*((uint32_t*)arg0) = hal_io_display_numlines();					break;
  4012d0:	4b19      	ldr	r3, [pc, #100]	; (401338 <syscalls_entry_point+0x104>)
  4012d2:	4798      	blx	r3
  4012d4:	6020      	str	r0, [r4, #0]
  4012d6:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayCurrLine:	*((uint32_t*)arg0) = hal_io_display_currline();					break;
  4012d8:	4b18      	ldr	r3, [pc, #96]	; (40133c <syscalls_entry_point+0x108>)
  4012da:	4798      	blx	r3
  4012dc:	6020      	str	r0, [r4, #0]
  4012de:	bd38      	pop	{r3, r4, r5, pc}
		
		//Millisecond Timer
		//case SVCMtimerStartEv:	/*Not supported yet*/											break;
		case SVCMtimerStartPoll:	hal_io_mtimer_start( (uint32_t)arg0  );							break;
  4012e0:	4620      	mov	r0, r4
  4012e2:	4b17      	ldr	r3, [pc, #92]	; (401340 <syscalls_entry_point+0x10c>)
  4012e4:	4798      	blx	r3
  4012e6:	bd38      	pop	{r3, r4, r5, pc}
		case SVCMtimerStop:			hal_io_mtimer_stop();											break;
  4012e8:	4b16      	ldr	r3, [pc, #88]	; (401344 <syscalls_entry_point+0x110>)
  4012ea:	4798      	blx	r3
  4012ec:	bd38      	pop	{r3, r4, r5, pc}
		case SVCMtimerRead:			*((uint32_t*)arg0) = hal_io_mtimer_read( );						break;
  4012ee:	4b16      	ldr	r3, [pc, #88]	; (401348 <syscalls_entry_point+0x114>)
  4012f0:	4798      	blx	r3
  4012f2:	6020      	str	r0, [r4, #0]
  4012f4:	bd38      	pop	{r3, r4, r5, pc}
		   This should be from somewhere in the HAL
		    */
		break;

		//Scheduler	
		case SVCProcessCreate:		scheduler_process_create( (uint8_t*)arg0, (uint8_t*)arg1, (uint32_t*)arg2 );	break;
  4012f6:	6882      	ldr	r2, [r0, #8]
  4012f8:	4629      	mov	r1, r5
  4012fa:	4620      	mov	r0, r4
  4012fc:	4b13      	ldr	r3, [pc, #76]	; (40134c <syscalls_entry_point+0x118>)
  4012fe:	4798      	blx	r3
  401300:	bd38      	pop	{r3, r4, r5, pc}
  401302:	bf00      	nop
  401304:	004007a5 	.word	0x004007a5
  401308:	00400d05 	.word	0x00400d05
  40130c:	00400d09 	.word	0x00400d09
  401310:	004009f1 	.word	0x004009f1
  401314:	00400a25 	.word	0x00400a25
  401318:	00400d59 	.word	0x00400d59
  40131c:	00400d7d 	.word	0x00400d7d
  401320:	00400dbd 	.word	0x00400dbd
  401324:	00400bed 	.word	0x00400bed
  401328:	00400c61 	.word	0x00400c61
  40132c:	00400a75 	.word	0x00400a75
  401330:	00400b15 	.word	0x00400b15
  401334:	00400bad 	.word	0x00400bad
  401338:	00400bdd 	.word	0x00400bdd
  40133c:	00400be1 	.word	0x00400be1
  401340:	00400931 	.word	0x00400931
  401344:	00400989 	.word	0x00400989
  401348:	004009b1 	.word	0x004009b1
  40134c:	004011a9 	.word	0x004011a9

00401350 <syscalls_init>:
void syscalls_init(void){
  401350:	b508      	push	{r3, lr}
	hal_cpu_svc_start( syscalls_entry_point );
  401352:	4802      	ldr	r0, [pc, #8]	; (40135c <syscalls_init+0xc>)
  401354:	4b02      	ldr	r3, [pc, #8]	; (401360 <syscalls_init+0x10>)
  401356:	4798      	blx	r3
  401358:	bd08      	pop	{r3, pc}
  40135a:	bf00      	nop
  40135c:	00401235 	.word	0x00401235
  401360:	004006f1 	.word	0x004006f1

00401364 <println_display>:
#ifdef SYS_IO_DISPLAY_PRESENT
	hal_io_display_cls();
#endif
}

static void println_display( uint8_t* string ){
  401364:	b538      	push	{r3, r4, r5, lr}
  401366:	4604      	mov	r4, r0
	while( *string )
  401368:	7800      	ldrb	r0, [r0, #0]
  40136a:	b128      	cbz	r0, 401378 <println_display+0x14>
		hal_io_display_putc( *string++ );
  40136c:	4d06      	ldr	r5, [pc, #24]	; (401388 <println_display+0x24>)
  40136e:	47a8      	blx	r5
	while( *string )
  401370:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  401374:	2800      	cmp	r0, #0
  401376:	d1fa      	bne.n	40136e <println_display+0xa>
	//go to newline
	hal_io_display_gotoxy( hal_io_display_currline()+1, 0 );
  401378:	4b04      	ldr	r3, [pc, #16]	; (40138c <println_display+0x28>)
  40137a:	4798      	blx	r3
  40137c:	2100      	movs	r1, #0
  40137e:	3001      	adds	r0, #1
  401380:	4b03      	ldr	r3, [pc, #12]	; (401390 <println_display+0x2c>)
  401382:	4798      	blx	r3
  401384:	bd38      	pop	{r3, r4, r5, pc}
  401386:	bf00      	nop
  401388:	00400a75 	.word	0x00400a75
  40138c:	00400be1 	.word	0x00400be1
  401390:	00400bad 	.word	0x00400bad

00401394 <system_panic>:
void system_panic( const uint8_t* panic_msg ){
  401394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401396:	4605      	mov	r5, r0
	hal_io_display_cls();
  401398:	4b09      	ldr	r3, [pc, #36]	; (4013c0 <system_panic+0x2c>)
  40139a:	4798      	blx	r3
	println_display( ":( Something went wrong..." );
  40139c:	4e09      	ldr	r6, [pc, #36]	; (4013c4 <system_panic+0x30>)
  40139e:	4630      	mov	r0, r6
  4013a0:	4c09      	ldr	r4, [pc, #36]	; (4013c8 <system_panic+0x34>)
  4013a2:	47a0      	blx	r4
	println_display( "" );
  4013a4:	4f09      	ldr	r7, [pc, #36]	; (4013cc <system_panic+0x38>)
  4013a6:	4638      	mov	r0, r7
  4013a8:	47a0      	blx	r4
	println_display( panic_msg );
  4013aa:	4628      	mov	r0, r5
  4013ac:	47a0      	blx	r4
	console_puts( "" );
  4013ae:	4638      	mov	r0, r7
  4013b0:	4c07      	ldr	r4, [pc, #28]	; (4013d0 <system_panic+0x3c>)
  4013b2:	47a0      	blx	r4
	console_puts( ":( Something went wrong..." );
  4013b4:	4630      	mov	r0, r6
  4013b6:	47a0      	blx	r4
	console_puts( panic_msg );
  4013b8:	4628      	mov	r0, r5
  4013ba:	47a0      	blx	r4
  4013bc:	e7fe      	b.n	4013bc <system_panic+0x28>
  4013be:	bf00      	nop
  4013c0:	00400b15 	.word	0x00400b15
  4013c4:	0040a95c 	.word	0x0040a95c
  4013c8:	00401365 	.word	0x00401365
  4013cc:	0040a82c 	.word	0x0040a82c
  4013d0:	00400329 	.word	0x00400329

004013d4 <system_init>:
void system_init(void){
  4013d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4013d8:	b087      	sub	sp, #28
	hal_cpu_init();			
  4013da:	4b37      	ldr	r3, [pc, #220]	; (4014b8 <system_init+0xe4>)
  4013dc:	4798      	blx	r3
	hal_io_init();		
  4013de:	4b37      	ldr	r3, [pc, #220]	; (4014bc <system_init+0xe8>)
  4013e0:	4798      	blx	r3
	hal_nvmem_init();
  4013e2:	4b37      	ldr	r3, [pc, #220]	; (4014c0 <system_init+0xec>)
  4013e4:	4798      	blx	r3
	hal_memreg_init();
  4013e6:	4b37      	ldr	r3, [pc, #220]	; (4014c4 <system_init+0xf0>)
  4013e8:	4798      	blx	r3
	console_init();
  4013ea:	4b37      	ldr	r3, [pc, #220]	; (4014c8 <system_init+0xf4>)
  4013ec:	4798      	blx	r3
	hal_io_serial_start_poll( SerialA, SYS_CONF_SERIAL_A_BAUDRATE );
  4013ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  4013f2:	2000      	movs	r0, #0
  4013f4:	4c35      	ldr	r4, [pc, #212]	; (4014cc <system_init+0xf8>)
  4013f6:	47a0      	blx	r4
}

static void show_init_info( uint8_t* string ){
	
#ifdef SYS_INIT_FROM_CONSOLE
	console_puts( string );
  4013f8:	4835      	ldr	r0, [pc, #212]	; (4014d0 <system_init+0xfc>)
  4013fa:	4e36      	ldr	r6, [pc, #216]	; (4014d4 <system_init+0x100>)
  4013fc:	47b0      	blx	r6
  4013fe:	4836      	ldr	r0, [pc, #216]	; (4014d8 <system_init+0x104>)
  401400:	47b0      	blx	r6
	show_init_info( "Starting Display" );		hal_io_display_start();
  401402:	4b36      	ldr	r3, [pc, #216]	; (4014dc <system_init+0x108>)
  401404:	4798      	blx	r3
	console_puts( string );
  401406:	4836      	ldr	r0, [pc, #216]	; (4014e0 <system_init+0x10c>)
  401408:	47b0      	blx	r6
	show_init_info( "Starting SerialB" );		hal_io_serial_start_poll( SerialB, SYS_CONF_SERIAL_A_BAUDRATE );
  40140a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  40140e:	2001      	movs	r0, #1
  401410:	47a0      	blx	r4
	console_puts( string );
  401412:	4834      	ldr	r0, [pc, #208]	; (4014e4 <system_init+0x110>)
  401414:	47b0      	blx	r6
	show_init_info( "Starting Light Sensor" );	hal_io_sensor_start_poll( SensorLight );
  401416:	2000      	movs	r0, #0
  401418:	4c33      	ldr	r4, [pc, #204]	; (4014e8 <system_init+0x114>)
  40141a:	47a0      	blx	r4
	console_puts( string );
  40141c:	4833      	ldr	r0, [pc, #204]	; (4014ec <system_init+0x118>)
  40141e:	47b0      	blx	r6
	show_init_info( "Starting Temp Sensor" );	hal_io_sensor_start_poll( SensorTemp );
  401420:	2001      	movs	r0, #1
  401422:	47a0      	blx	r4
	console_puts( string );
  401424:	4832      	ldr	r0, [pc, #200]	; (4014f0 <system_init+0x11c>)
  401426:	47b0      	blx	r6
	show_init_info( "Starting Clock" );			hal_io_clock_start();
  401428:	4b32      	ldr	r3, [pc, #200]	; (4014f4 <system_init+0x120>)
  40142a:	4798      	blx	r3
	tTime time = {
  40142c:	466c      	mov	r4, sp
  40142e:	4d32      	ldr	r5, [pc, #200]	; (4014f8 <system_init+0x124>)
  401430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401434:	e895 0003 	ldmia.w	r5, {r0, r1}
  401438:	e884 0003 	stmia.w	r4, {r0, r1}
	hal_io_clock_write(&time);
  40143c:	4668      	mov	r0, sp
  40143e:	4b2f      	ldr	r3, [pc, #188]	; (4014fc <system_init+0x128>)
  401440:	4798      	blx	r3
	console_puts( string );
  401442:	482f      	ldr	r0, [pc, #188]	; (401500 <system_init+0x12c>)
  401444:	47b0      	blx	r6
	if( !hal_nvmem_start( NVMemSDCardFAT ) )
  401446:	2001      	movs	r0, #1
  401448:	4b2e      	ldr	r3, [pc, #184]	; (401504 <system_init+0x130>)
  40144a:	4798      	blx	r3
  40144c:	2800      	cmp	r0, #0
  40144e:	d02f      	beq.n	4014b0 <system_init+0xdc>
  401450:	2700      	movs	r7, #0
		hal_io_display_gotoxy(i, 0);
  401452:	46b9      	mov	r9, r7
  401454:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 401544 <system_init+0x170>
			hal_io_display_putc('#');
  401458:	4e2b      	ldr	r6, [pc, #172]	; (401508 <system_init+0x134>)
		hal_io_display_gotoxy(i, 0);
  40145a:	4649      	mov	r1, r9
  40145c:	4638      	mov	r0, r7
  40145e:	47c0      	blx	r8
  401460:	2414      	movs	r4, #20
			hal_io_display_putc('#');
  401462:	2523      	movs	r5, #35	; 0x23
  401464:	4628      	mov	r0, r5
  401466:	47b0      	blx	r6
		for(uint32_t j=0; j<20; j++) //columns
  401468:	3c01      	subs	r4, #1
  40146a:	d1fb      	bne.n	401464 <system_init+0x90>
	for(uint32_t i=0; i<4; i++){	 //rows
  40146c:	3701      	adds	r7, #1
  40146e:	2f04      	cmp	r7, #4
  401470:	d1f3      	bne.n	40145a <system_init+0x86>
	hal_cpu_delay(50);
  401472:	2032      	movs	r0, #50	; 0x32
  401474:	4b25      	ldr	r3, [pc, #148]	; (40150c <system_init+0x138>)
  401476:	4798      	blx	r3
	hal_io_display_cls();
  401478:	4b25      	ldr	r3, [pc, #148]	; (401510 <system_init+0x13c>)
  40147a:	4798      	blx	r3
	console_puts( string );
  40147c:	4825      	ldr	r0, [pc, #148]	; (401514 <system_init+0x140>)
  40147e:	4c15      	ldr	r4, [pc, #84]	; (4014d4 <system_init+0x100>)
  401480:	47a0      	blx	r4
	show_init_info( "Initializing Faults" );		faults_init();
  401482:	4b25      	ldr	r3, [pc, #148]	; (401518 <system_init+0x144>)
  401484:	4798      	blx	r3
	console_puts( string );
  401486:	4825      	ldr	r0, [pc, #148]	; (40151c <system_init+0x148>)
  401488:	47a0      	blx	r4
	show_init_info( "Initializing Syscalls" );		syscalls_init();
  40148a:	4b25      	ldr	r3, [pc, #148]	; (401520 <system_init+0x14c>)
  40148c:	4798      	blx	r3
	console_puts( string );
  40148e:	4825      	ldr	r0, [pc, #148]	; (401524 <system_init+0x150>)
  401490:	47a0      	blx	r4
	show_init_info( "Initializing Loader" );		loader_init();
  401492:	4b25      	ldr	r3, [pc, #148]	; (401528 <system_init+0x154>)
  401494:	4798      	blx	r3
	console_puts( string );
  401496:	4825      	ldr	r0, [pc, #148]	; (40152c <system_init+0x158>)
  401498:	47a0      	blx	r4
	show_init_info( "Initializing Scheduler" );		scheduler_init();
  40149a:	4b25      	ldr	r3, [pc, #148]	; (401530 <system_init+0x15c>)
  40149c:	4798      	blx	r3
	uint32_t ccr = hal_cpu_get_scb_ccr() | (1<< SCB_CCR_STKALIGN_OFFSET);
  40149e:	4b25      	ldr	r3, [pc, #148]	; (401534 <system_init+0x160>)
  4014a0:	4798      	blx	r3
	hal_cpu_set_scb_ccr( ccr );
  4014a2:	f440 7000 	orr.w	r0, r0, #512	; 0x200
  4014a6:	4b24      	ldr	r3, [pc, #144]	; (401538 <system_init+0x164>)
  4014a8:	4798      	blx	r3
}
  4014aa:	b007      	add	sp, #28
  4014ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		system_panic( "FS failed to mount" );
  4014b0:	4822      	ldr	r0, [pc, #136]	; (40153c <system_init+0x168>)
  4014b2:	4b23      	ldr	r3, [pc, #140]	; (401540 <system_init+0x16c>)
  4014b4:	4798      	blx	r3
  4014b6:	bf00      	nop
  4014b8:	00400691 	.word	0x00400691
  4014bc:	00400911 	.word	0x00400911
  4014c0:	00400eed 	.word	0x00400eed
  4014c4:	00400e99 	.word	0x00400e99
  4014c8:	00400319 	.word	0x00400319
  4014cc:	00400d59 	.word	0x00400d59
  4014d0:	0040a82c 	.word	0x0040a82c
  4014d4:	00400329 	.word	0x00400329
  4014d8:	0040a868 	.word	0x0040a868
  4014dc:	00400a69 	.word	0x00400a69
  4014e0:	0040a87c 	.word	0x0040a87c
  4014e4:	0040a890 	.word	0x0040a890
  4014e8:	00400bed 	.word	0x00400bed
  4014ec:	0040a8a8 	.word	0x0040a8a8
  4014f0:	0040a8c0 	.word	0x0040a8c0
  4014f4:	004009c5 	.word	0x004009c5
  4014f8:	0040a850 	.word	0x0040a850
  4014fc:	004009f1 	.word	0x004009f1
  401500:	0040a8d0 	.word	0x0040a8d0
  401504:	00400ef1 	.word	0x00400ef1
  401508:	00400a75 	.word	0x00400a75
  40150c:	004006fd 	.word	0x004006fd
  401510:	00400b15 	.word	0x00400b15
  401514:	0040a904 	.word	0x0040a904
  401518:	00400649 	.word	0x00400649
  40151c:	0040a918 	.word	0x0040a918
  401520:	00401351 	.word	0x00401351
  401524:	0040a930 	.word	0x0040a930
  401528:	004010a5 	.word	0x004010a5
  40152c:	0040a944 	.word	0x0040a944
  401530:	00401179 	.word	0x00401179
  401534:	00400793 	.word	0x00400793
  401538:	0040078d 	.word	0x0040078d
  40153c:	0040a8f0 	.word	0x0040a8f0
  401540:	00401395 	.word	0x00401395
  401544:	00400bad 	.word	0x00400bad

00401548 <stack_init>:
  401548:	4b02      	ldr	r3, [pc, #8]	; (401554 <stack_init+0xc>)
  40154a:	6018      	str	r0, [r3, #0]
  40154c:	2201      	movs	r2, #1
  40154e:	4b02      	ldr	r3, [pc, #8]	; (401558 <stack_init+0x10>)
  401550:	701a      	strb	r2, [r3, #0]
  401552:	4770      	bx	lr
  401554:	20006104 	.word	0x20006104
  401558:	20006100 	.word	0x20006100

0040155c <stack_top>:
  40155c:	b508      	push	{r3, lr}
  40155e:	4b05      	ldr	r3, [pc, #20]	; (401574 <stack_top+0x18>)
  401560:	781b      	ldrb	r3, [r3, #0]
  401562:	b113      	cbz	r3, 40156a <stack_top+0xe>
  401564:	4b04      	ldr	r3, [pc, #16]	; (401578 <stack_top+0x1c>)
  401566:	6818      	ldr	r0, [r3, #0]
  401568:	bd08      	pop	{r3, pc}
  40156a:	4804      	ldr	r0, [pc, #16]	; (40157c <stack_top+0x20>)
  40156c:	4b04      	ldr	r3, [pc, #16]	; (401580 <stack_top+0x24>)
  40156e:	4798      	blx	r3
  401570:	e7f8      	b.n	401564 <stack_top+0x8>
  401572:	bf00      	nop
  401574:	20006100 	.word	0x20006100
  401578:	20006104 	.word	0x20006104
  40157c:	0040a994 	.word	0x0040a994
  401580:	00401395 	.word	0x00401395

00401584 <stack_alloc>:
  401584:	b510      	push	{r4, lr}
  401586:	4604      	mov	r4, r0
  401588:	4b0a      	ldr	r3, [pc, #40]	; (4015b4 <stack_alloc+0x30>)
  40158a:	781b      	ldrb	r3, [r3, #0]
  40158c:	b16b      	cbz	r3, 4015aa <stack_alloc+0x26>
  40158e:	4b0a      	ldr	r3, [pc, #40]	; (4015b8 <stack_alloc+0x34>)
  401590:	6818      	ldr	r0, [r3, #0]
  401592:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
  401596:	f010 0f07 	tst.w	r0, #7
  40159a:	d003      	beq.n	4015a4 <stack_alloc+0x20>
  40159c:	3801      	subs	r0, #1
  40159e:	f010 0f07 	tst.w	r0, #7
  4015a2:	d1fb      	bne.n	40159c <stack_alloc+0x18>
  4015a4:	4b04      	ldr	r3, [pc, #16]	; (4015b8 <stack_alloc+0x34>)
  4015a6:	6018      	str	r0, [r3, #0]
  4015a8:	bd10      	pop	{r4, pc}
  4015aa:	4804      	ldr	r0, [pc, #16]	; (4015bc <stack_alloc+0x38>)
  4015ac:	4b04      	ldr	r3, [pc, #16]	; (4015c0 <stack_alloc+0x3c>)
  4015ae:	4798      	blx	r3
  4015b0:	e7ed      	b.n	40158e <stack_alloc+0xa>
  4015b2:	bf00      	nop
  4015b4:	20006100 	.word	0x20006100
  4015b8:	20006104 	.word	0x20006104
  4015bc:	0040a978 	.word	0x0040a978
  4015c0:	00401395 	.word	0x00401395

004015c4 <ssd1306_write_command>:
{
  4015c4:	b570      	push	{r4, r5, r6, lr}
  4015c6:	b082      	sub	sp, #8
  4015c8:	4606      	mov	r6, r0
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4015ca:	ac02      	add	r4, sp, #8
  4015cc:	2302      	movs	r3, #2
  4015ce:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  4015d2:	4d09      	ldr	r5, [pc, #36]	; (4015f8 <ssd1306_write_command+0x34>)
  4015d4:	4621      	mov	r1, r4
  4015d6:	4628      	mov	r0, r5
  4015d8:	4b08      	ldr	r3, [pc, #32]	; (4015fc <ssd1306_write_command+0x38>)
  4015da:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4015dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4015e0:	4b07      	ldr	r3, [pc, #28]	; (401600 <ssd1306_write_command+0x3c>)
  4015e2:	635a      	str	r2, [r3, #52]	; 0x34
  4015e4:	60ee      	str	r6, [r5, #12]
	delay_us(SSD1306_LATENCY); // At least 3us
  4015e6:	2056      	movs	r0, #86	; 0x56
  4015e8:	4b06      	ldr	r3, [pc, #24]	; (401604 <ssd1306_write_command+0x40>)
  4015ea:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4015ec:	4621      	mov	r1, r4
  4015ee:	4628      	mov	r0, r5
  4015f0:	4b05      	ldr	r3, [pc, #20]	; (401608 <ssd1306_write_command+0x44>)
  4015f2:	4798      	blx	r3
}
  4015f4:	b002      	add	sp, #8
  4015f6:	bd70      	pop	{r4, r5, r6, pc}
  4015f8:	40008000 	.word	0x40008000
  4015fc:	0040292d 	.word	0x0040292d
  401600:	400e1200 	.word	0x400e1200
  401604:	20000001 	.word	0x20000001
  401608:	0040295d 	.word	0x0040295d

0040160c <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  40160c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40160e:	b085      	sub	sp, #20
  401610:	4d25      	ldr	r5, [pc, #148]	; (4016a8 <ssd1306_init+0x9c>)
  401612:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  401616:	636e      	str	r6, [r5, #52]	; 0x34
	delay_us(SSD1306_LATENCY); // At least 3us
  401618:	2056      	movs	r0, #86	; 0x56
  40161a:	4c24      	ldr	r4, [pc, #144]	; (4016ac <ssd1306_init+0xa0>)
  40161c:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40161e:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(SSD1306_LATENCY); // At least 3us
  401620:	2056      	movs	r0, #86	; 0x56
  401622:	47a0      	blx	r4
	struct spi_device device = {
  401624:	2702      	movs	r7, #2
  401626:	ae04      	add	r6, sp, #16
  401628:	f846 7d04 	str.w	r7, [r6, #-4]!
	spi_master_init(SSD1306_SPI);
  40162c:	4c20      	ldr	r4, [pc, #128]	; (4016b0 <ssd1306_init+0xa4>)
  40162e:	4620      	mov	r0, r4
  401630:	4b20      	ldr	r3, [pc, #128]	; (4016b4 <ssd1306_init+0xa8>)
  401632:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  401634:	2500      	movs	r5, #0
  401636:	9500      	str	r5, [sp, #0]
  401638:	4b1f      	ldr	r3, [pc, #124]	; (4016b8 <ssd1306_init+0xac>)
  40163a:	462a      	mov	r2, r5
  40163c:	4631      	mov	r1, r6
  40163e:	4620      	mov	r0, r4
  401640:	4e1e      	ldr	r6, [pc, #120]	; (4016bc <ssd1306_init+0xb0>)
  401642:	47b0      	blx	r6
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401644:	2301      	movs	r3, #1
  401646:	6023      	str	r3, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  401648:	20a8      	movs	r0, #168	; 0xa8
  40164a:	4c1d      	ldr	r4, [pc, #116]	; (4016c0 <ssd1306_init+0xb4>)
  40164c:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  40164e:	201f      	movs	r0, #31
  401650:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  401652:	20d3      	movs	r0, #211	; 0xd3
  401654:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  401656:	4628      	mov	r0, r5
  401658:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  40165a:	2040      	movs	r0, #64	; 0x40
  40165c:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  40165e:	20a1      	movs	r0, #161	; 0xa1
  401660:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  401662:	20c8      	movs	r0, #200	; 0xc8
  401664:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  401666:	20da      	movs	r0, #218	; 0xda
  401668:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  40166a:	4638      	mov	r0, r7
  40166c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  40166e:	2081      	movs	r0, #129	; 0x81
  401670:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  401672:	208f      	movs	r0, #143	; 0x8f
  401674:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  401676:	20a4      	movs	r0, #164	; 0xa4
  401678:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  40167a:	20a6      	movs	r0, #166	; 0xa6
  40167c:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  40167e:	20d5      	movs	r0, #213	; 0xd5
  401680:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  401682:	2080      	movs	r0, #128	; 0x80
  401684:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  401686:	208d      	movs	r0, #141	; 0x8d
  401688:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  40168a:	2014      	movs	r0, #20
  40168c:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  40168e:	20db      	movs	r0, #219	; 0xdb
  401690:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  401692:	2040      	movs	r0, #64	; 0x40
  401694:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  401696:	20d9      	movs	r0, #217	; 0xd9
  401698:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  40169a:	20f1      	movs	r0, #241	; 0xf1
  40169c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  40169e:	20af      	movs	r0, #175	; 0xaf
  4016a0:	47a0      	blx	r4

	ssd1306_display_on();
}
  4016a2:	b005      	add	sp, #20
  4016a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4016a6:	bf00      	nop
  4016a8:	400e1200 	.word	0x400e1200
  4016ac:	20000001 	.word	0x20000001
  4016b0:	40008000 	.word	0x40008000
  4016b4:	00402859 	.word	0x00402859
  4016b8:	004c4b40 	.word	0x004c4b40
  4016bc:	004028ad 	.word	0x004028ad
  4016c0:	004015c5 	.word	0x004015c5

004016c4 <at30tse_init>:

/**
 * \brief Initialize the TWI instance used for AT30TSE75x.
 */
void at30tse_init(void)
{
  4016c4:	b500      	push	{lr}
  4016c6:	b085      	sub	sp, #20
	twi_options_t opts = {
  4016c8:	2300      	movs	r3, #0
  4016ca:	9303      	str	r3, [sp, #12]
  4016cc:	4b07      	ldr	r3, [pc, #28]	; (4016ec <at30tse_init+0x28>)
  4016ce:	9301      	str	r3, [sp, #4]
  4016d0:	f242 7310 	movw	r3, #10000	; 0x2710
  4016d4:	9302      	str	r3, [sp, #8]
  4016d6:	2013      	movs	r0, #19
  4016d8:	4b05      	ldr	r3, [pc, #20]	; (4016f0 <at30tse_init+0x2c>)
  4016da:	4798      	blx	r3
	flexcom_enable(BOARD_FLEXCOM_TWI);
	flexcom_set_opmode(BOARD_FLEXCOM_TWI, FLEXCOM_TWI);
#else
	sysclk_enable_peripheral_clock(BOARD_AT30TSE_TWI_ID);
#endif
	twi_master_init(BOARD_AT30TSE_TWI, &opts);
  4016dc:	a901      	add	r1, sp, #4
  4016de:	4805      	ldr	r0, [pc, #20]	; (4016f4 <at30tse_init+0x30>)
  4016e0:	4b05      	ldr	r3, [pc, #20]	; (4016f8 <at30tse_init+0x34>)
  4016e2:	4798      	blx	r3

}
  4016e4:	b005      	add	sp, #20
  4016e6:	f85d fb04 	ldr.w	pc, [sp], #4
  4016ea:	bf00      	nop
  4016ec:	07270e00 	.word	0x07270e00
  4016f0:	00403149 	.word	0x00403149
  4016f4:	40018000 	.word	0x40018000
  4016f8:	004035ad 	.word	0x004035ad

004016fc <at30tse_read_register>:
 *
 * \return TWI_SUCCESS if success, otherwise false
 */
uint8_t at30tse_read_register(uint8_t reg, uint8_t reg_type,
		uint8_t reg_size, uint8_t* buffer)
{
  4016fc:	b510      	push	{r4, lr}
  4016fe:	b086      	sub	sp, #24
	twi_packet_t packet = {
  401700:	2400      	movs	r4, #0
  401702:	9401      	str	r4, [sp, #4]
  401704:	9405      	str	r4, [sp, #20]
  401706:	4301      	orrs	r1, r0
  401708:	f88d 1004 	strb.w	r1, [sp, #4]
  40170c:	2101      	movs	r1, #1
  40170e:	9102      	str	r1, [sp, #8]
  401710:	9303      	str	r3, [sp, #12]
  401712:	9204      	str	r2, [sp, #16]
  401714:	234f      	movs	r3, #79	; 0x4f
  401716:	f88d 3014 	strb.w	r3, [sp, #20]
		.length = reg_size,
		/* Chip addr */
		.chip = AT30TSE_TEMPERATURE_TWI_ADDR
	};

	return twi_master_read(BOARD_AT30TSE_TWI, &packet);
  40171a:	a901      	add	r1, sp, #4
  40171c:	4802      	ldr	r0, [pc, #8]	; (401728 <at30tse_read_register+0x2c>)
  40171e:	4b03      	ldr	r3, [pc, #12]	; (40172c <at30tse_read_register+0x30>)
  401720:	4798      	blx	r3
}
  401722:	b2c0      	uxtb	r0, r0
  401724:	b006      	add	sp, #24
  401726:	bd10      	pop	{r4, pc}
  401728:	40018000 	.word	0x40018000
  40172c:	00403611 	.word	0x00403611

00401730 <at30tse_read_temperature>:
 * stored
 *
 * \return TWI_SUCCESS if success, otherwise false
 */
uint8_t at30tse_read_temperature(double *temperature)
{
  401730:	b570      	push	{r4, r5, r6, lr}
  401732:	b082      	sub	sp, #8
  401734:	4604      	mov	r4, r0
	/* Placeholder buffer to put temperature data in. */
	uint8_t buffer[2];
	uint8_t error_code = 0;
	buffer[0] = 0;
  401736:	2000      	movs	r0, #0
  401738:	f88d 0004 	strb.w	r0, [sp, #4]
	buffer[1] = 0;
  40173c:	f88d 0005 	strb.w	r0, [sp, #5]

	/* Read the 16-bit temperature register. */
	error_code = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
  401740:	ab01      	add	r3, sp, #4
  401742:	2202      	movs	r2, #2
  401744:	4601      	mov	r1, r0
  401746:	4d27      	ldr	r5, [pc, #156]	; (4017e4 <at30tse_read_temperature+0xb4>)
  401748:	47a8      	blx	r5
			AT30TSE_NON_VOLATILE_REG, AT30TSE_TEMPERATURE_REG_SIZE, buffer);

	/* Only convert temperature data if read success. */
	if (error_code == TWI_SUCCESS) {
  40174a:	4605      	mov	r5, r0
  40174c:	bb10      	cbnz	r0, 401794 <at30tse_read_temperature+0x64>
		uint16_t data = (buffer[0] << 8) | buffer[1];
  40174e:	f89d 2004 	ldrb.w	r2, [sp, #4]
  401752:	f89d 3005 	ldrb.w	r3, [sp, #5]
  401756:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40175a:	b21b      	sxth	r3, r3
  40175c:	b29a      	uxth	r2, r3
		int8_t sign = 1;

		/* Check if negative and clear sign bit. */
		if (data & (1 << 15)) {
  40175e:	2b00      	cmp	r3, #0
			sign *= -1;
			data &= ~(1 << 15);
  401760:	bfba      	itte	lt
  401762:	f3c2 020e 	ubfxlt	r2, r2, #0, #15
			sign *= -1;
  401766:	f04f 30ff 	movlt.w	r0, #4294967295
		int8_t sign = 1;
  40176a:	2001      	movge	r0, #1
		}

		/* Convert to temperature. */
		switch (resolution) {
  40176c:	4b1e      	ldr	r3, [pc, #120]	; (4017e8 <at30tse_read_temperature+0xb8>)
  40176e:	781b      	ldrb	r3, [r3, #0]
  401770:	b2db      	uxtb	r3, r3
  401772:	2b03      	cmp	r3, #3
  401774:	d80e      	bhi.n	401794 <at30tse_read_temperature+0x64>
  401776:	e8df f003 	tbb	[pc, r3]
  40177a:	1002      	.short	0x1002
  40177c:	291c      	.short	0x291c
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			*(temperature) = data * sign * 0.5;
  40177e:	09d2      	lsrs	r2, r2, #7
  401780:	fb00 f002 	mul.w	r0, r0, r2
  401784:	4b19      	ldr	r3, [pc, #100]	; (4017ec <at30tse_read_temperature+0xbc>)
  401786:	4798      	blx	r3
  401788:	2200      	movs	r2, #0
  40178a:	4b19      	ldr	r3, [pc, #100]	; (4017f0 <at30tse_read_temperature+0xc0>)
  40178c:	4e19      	ldr	r6, [pc, #100]	; (4017f4 <at30tse_read_temperature+0xc4>)
  40178e:	47b0      	blx	r6
  401790:	e9c4 0100 	strd	r0, r1, [r4]
			break;
		}
	}

	return error_code;
}
  401794:	4628      	mov	r0, r5
  401796:	b002      	add	sp, #8
  401798:	bd70      	pop	{r4, r5, r6, pc}
			*(temperature) = data * sign * 0.25;
  40179a:	0992      	lsrs	r2, r2, #6
  40179c:	fb00 f002 	mul.w	r0, r0, r2
  4017a0:	4b12      	ldr	r3, [pc, #72]	; (4017ec <at30tse_read_temperature+0xbc>)
  4017a2:	4798      	blx	r3
  4017a4:	2200      	movs	r2, #0
  4017a6:	4b14      	ldr	r3, [pc, #80]	; (4017f8 <at30tse_read_temperature+0xc8>)
  4017a8:	4e12      	ldr	r6, [pc, #72]	; (4017f4 <at30tse_read_temperature+0xc4>)
  4017aa:	47b0      	blx	r6
  4017ac:	e9c4 0100 	strd	r0, r1, [r4]
			break;
  4017b0:	e7f0      	b.n	401794 <at30tse_read_temperature+0x64>
			*(temperature) = data * sign * 0.125;
  4017b2:	0952      	lsrs	r2, r2, #5
  4017b4:	fb00 f002 	mul.w	r0, r0, r2
  4017b8:	4b0c      	ldr	r3, [pc, #48]	; (4017ec <at30tse_read_temperature+0xbc>)
  4017ba:	4798      	blx	r3
  4017bc:	2200      	movs	r2, #0
  4017be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  4017c2:	4e0c      	ldr	r6, [pc, #48]	; (4017f4 <at30tse_read_temperature+0xc4>)
  4017c4:	47b0      	blx	r6
  4017c6:	e9c4 0100 	strd	r0, r1, [r4]
			break;
  4017ca:	e7e3      	b.n	401794 <at30tse_read_temperature+0x64>
			*(temperature) = data * sign * 0.0625;
  4017cc:	0912      	lsrs	r2, r2, #4
  4017ce:	fb00 f002 	mul.w	r0, r0, r2
  4017d2:	4b06      	ldr	r3, [pc, #24]	; (4017ec <at30tse_read_temperature+0xbc>)
  4017d4:	4798      	blx	r3
  4017d6:	2200      	movs	r2, #0
  4017d8:	4b08      	ldr	r3, [pc, #32]	; (4017fc <at30tse_read_temperature+0xcc>)
  4017da:	4e06      	ldr	r6, [pc, #24]	; (4017f4 <at30tse_read_temperature+0xc4>)
  4017dc:	47b0      	blx	r6
  4017de:	e9c4 0100 	strd	r0, r1, [r4]
			break;
  4017e2:	e7d7      	b.n	401794 <at30tse_read_temperature+0x64>
  4017e4:	004016fd 	.word	0x004016fd
  4017e8:	20006108 	.word	0x20006108
  4017ec:	00405a8d 	.word	0x00405a8d
  4017f0:	3fe00000 	.word	0x3fe00000
  4017f4:	00405b59 	.word	0x00405b59
  4017f8:	3fd00000 	.word	0x3fd00000
  4017fc:	3fb00000 	.word	0x3fb00000

00401800 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  401800:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  401802:	4b07      	ldr	r3, [pc, #28]	; (401820 <sd_mmc_configure_slot+0x20>)
  401804:	6819      	ldr	r1, [r3, #0]
  401806:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  40180a:	3300      	adds	r3, #0
  40180c:	bf18      	it	ne
  40180e:	2301      	movne	r3, #1
  401810:	7c4a      	ldrb	r2, [r1, #17]
  401812:	6809      	ldr	r1, [r1, #0]
  401814:	4803      	ldr	r0, [pc, #12]	; (401824 <sd_mmc_configure_slot+0x24>)
  401816:	7800      	ldrb	r0, [r0, #0]
  401818:	4c03      	ldr	r4, [pc, #12]	; (401828 <sd_mmc_configure_slot+0x28>)
  40181a:	47a0      	blx	r4
  40181c:	bd10      	pop	{r4, pc}
  40181e:	bf00      	nop
  401820:	2000610c 	.word	0x2000610c
  401824:	20006115 	.word	0x20006115
  401828:	0040240d 	.word	0x0040240d

0040182c <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  40182c:	b108      	cbz	r0, 401832 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  40182e:	2004      	movs	r0, #4
  401830:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  401832:	4b33      	ldr	r3, [pc, #204]	; (401900 <sd_mmc_select_slot+0xd4>)
  401834:	689a      	ldr	r2, [r3, #8]
	return pin >> 5;
  401836:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401838:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40183c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401840:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401842:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  401844:	f002 021f 	and.w	r2, r2, #31
  401848:	2301      	movs	r3, #1
  40184a:	fa03 f202 	lsl.w	r2, r3, r2
  40184e:	420a      	tst	r2, r1
  401850:	d010      	beq.n	401874 <sd_mmc_select_slot+0x48>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  401852:	4b2b      	ldr	r3, [pc, #172]	; (401900 <sd_mmc_select_slot+0xd4>)
  401854:	7b9b      	ldrb	r3, [r3, #14]
  401856:	2b01      	cmp	r3, #1
  401858:	d004      	beq.n	401864 <sd_mmc_select_slot+0x38>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40185a:	2204      	movs	r2, #4
  40185c:	4b28      	ldr	r3, [pc, #160]	; (401900 <sd_mmc_select_slot+0xd4>)
  40185e:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  401860:	2002      	movs	r0, #2
  401862:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  401864:	4b27      	ldr	r3, [pc, #156]	; (401904 <sd_mmc_select_slot+0xd8>)
  401866:	781b      	ldrb	r3, [r3, #0]
  401868:	2b00      	cmp	r3, #0
  40186a:	d0f6      	beq.n	40185a <sd_mmc_select_slot+0x2e>
		SysTick->CTRL = 0;
  40186c:	2200      	movs	r2, #0
  40186e:	4b26      	ldr	r3, [pc, #152]	; (401908 <sd_mmc_select_slot+0xdc>)
  401870:	601a      	str	r2, [r3, #0]
  401872:	e7f2      	b.n	40185a <sd_mmc_select_slot+0x2e>
{
  401874:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  401876:	4b22      	ldr	r3, [pc, #136]	; (401900 <sd_mmc_select_slot+0xd4>)
  401878:	7b9b      	ldrb	r3, [r3, #14]
  40187a:	2b04      	cmp	r3, #4
  40187c:	d005      	beq.n	40188a <sd_mmc_select_slot+0x5e>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  40187e:	2b01      	cmp	r3, #1
  401880:	d019      	beq.n	4018b6 <sd_mmc_select_slot+0x8a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  401882:	2b03      	cmp	r3, #3
  401884:	d12c      	bne.n	4018e0 <sd_mmc_select_slot+0xb4>
		return SD_MMC_ERR_UNUSABLE;
  401886:	2003      	movs	r0, #3
  401888:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  40188a:	2201      	movs	r2, #1
  40188c:	4b1c      	ldr	r3, [pc, #112]	; (401900 <sd_mmc_select_slot+0xd4>)
  40188e:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  401890:	4b1d      	ldr	r3, [pc, #116]	; (401908 <sd_mmc_select_slot+0xdc>)
  401892:	681b      	ldr	r3, [r3, #0]
  401894:	b93b      	cbnz	r3, 4018a6 <sd_mmc_select_slot+0x7a>
		sd_mmc_sam_systick_used = true;
  401896:	4b1b      	ldr	r3, [pc, #108]	; (401904 <sd_mmc_select_slot+0xd8>)
  401898:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  40189a:	4b1b      	ldr	r3, [pc, #108]	; (401908 <sd_mmc_select_slot+0xdc>)
  40189c:	491b      	ldr	r1, [pc, #108]	; (40190c <sd_mmc_select_slot+0xe0>)
  40189e:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  4018a0:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  4018a2:	2002      	movs	r0, #2
  4018a4:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  4018a6:	2200      	movs	r2, #0
  4018a8:	4b16      	ldr	r3, [pc, #88]	; (401904 <sd_mmc_select_slot+0xd8>)
  4018aa:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  4018ac:	4818      	ldr	r0, [pc, #96]	; (401910 <sd_mmc_select_slot+0xe4>)
  4018ae:	4b19      	ldr	r3, [pc, #100]	; (401914 <sd_mmc_select_slot+0xe8>)
  4018b0:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  4018b2:	2002      	movs	r0, #2
  4018b4:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  4018b6:	4b13      	ldr	r3, [pc, #76]	; (401904 <sd_mmc_select_slot+0xd8>)
  4018b8:	781b      	ldrb	r3, [r3, #0]
  4018ba:	b13b      	cbz	r3, 4018cc <sd_mmc_select_slot+0xa0>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  4018bc:	4b12      	ldr	r3, [pc, #72]	; (401908 <sd_mmc_select_slot+0xdc>)
  4018be:	681b      	ldr	r3, [r3, #0]
  4018c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4018c4:	d01a      	beq.n	4018fc <sd_mmc_select_slot+0xd0>
		SysTick->CTRL = 0;
  4018c6:	2200      	movs	r2, #0
  4018c8:	4b0f      	ldr	r3, [pc, #60]	; (401908 <sd_mmc_select_slot+0xdc>)
  4018ca:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  4018cc:	4b0c      	ldr	r3, [pc, #48]	; (401900 <sd_mmc_select_slot+0xd4>)
  4018ce:	2202      	movs	r2, #2
  4018d0:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  4018d2:	4a11      	ldr	r2, [pc, #68]	; (401918 <sd_mmc_select_slot+0xec>)
  4018d4:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  4018d6:	2201      	movs	r2, #1
  4018d8:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  4018da:	2200      	movs	r2, #0
  4018dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  4018e0:	2200      	movs	r2, #0
  4018e2:	4b0e      	ldr	r3, [pc, #56]	; (40191c <sd_mmc_select_slot+0xf0>)
  4018e4:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  4018e6:	4c06      	ldr	r4, [pc, #24]	; (401900 <sd_mmc_select_slot+0xd4>)
  4018e8:	4b0d      	ldr	r3, [pc, #52]	; (401920 <sd_mmc_select_slot+0xf4>)
  4018ea:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  4018ec:	4b0d      	ldr	r3, [pc, #52]	; (401924 <sd_mmc_select_slot+0xf8>)
  4018ee:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  4018f0:	7ba0      	ldrb	r0, [r4, #14]
  4018f2:	2802      	cmp	r0, #2
  4018f4:	bf14      	ite	ne
  4018f6:	2000      	movne	r0, #0
  4018f8:	2001      	moveq	r0, #1
  4018fa:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  4018fc:	2002      	movs	r0, #2
  4018fe:	bd10      	pop	{r4, pc}
  401900:	20000458 	.word	0x20000458
  401904:	20006114 	.word	0x20006114
  401908:	e000e010 	.word	0xe000e010
  40190c:	00e4e1c0 	.word	0x00e4e1c0
  401910:	0082ca25 	.word	0x0082ca25
  401914:	20000001 	.word	0x20000001
  401918:	00061a80 	.word	0x00061a80
  40191c:	20006115 	.word	0x20006115
  401920:	2000610c 	.word	0x2000610c
  401924:	00401801 	.word	0x00401801

00401928 <sd_mmc_cmd13>:
{
  401928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40192c:	4c09      	ldr	r4, [pc, #36]	; (401954 <sd_mmc_cmd13+0x2c>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  40192e:	2700      	movs	r7, #0
  401930:	4e09      	ldr	r6, [pc, #36]	; (401958 <sd_mmc_cmd13+0x30>)
			if (!(driver_get_response() & 0xFF)) {
  401932:	4d0a      	ldr	r5, [pc, #40]	; (40195c <sd_mmc_cmd13+0x34>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  401934:	4639      	mov	r1, r7
  401936:	f641 300d 	movw	r0, #6925	; 0x1b0d
  40193a:	47b0      	blx	r6
  40193c:	4680      	mov	r8, r0
  40193e:	b130      	cbz	r0, 40194e <sd_mmc_cmd13+0x26>
			if (!(driver_get_response() & 0xFF)) {
  401940:	47a8      	blx	r5
  401942:	b2c0      	uxtb	r0, r0
  401944:	b118      	cbz	r0, 40194e <sd_mmc_cmd13+0x26>
		if (nec_timeout-- == 0) {
  401946:	3c01      	subs	r4, #1
  401948:	d1f4      	bne.n	401934 <sd_mmc_cmd13+0xc>
			return false;
  40194a:	f04f 0800 	mov.w	r8, #0
}
  40194e:	4640      	mov	r0, r8
  401950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401954:	00030d41 	.word	0x00030d41
  401958:	00402635 	.word	0x00402635
  40195c:	0040264d 	.word	0x0040264d

00401960 <sd_mmc_cmd9_spi>:
{
  401960:	b510      	push	{r4, lr}
  401962:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
  401964:	4b0d      	ldr	r3, [pc, #52]	; (40199c <sd_mmc_cmd9_spi+0x3c>)
  401966:	681b      	ldr	r3, [r3, #0]
  401968:	8999      	ldrh	r1, [r3, #12]
  40196a:	2301      	movs	r3, #1
  40196c:	9300      	str	r3, [sp, #0]
  40196e:	2210      	movs	r2, #16
  401970:	4091      	lsls	r1, r2
  401972:	480b      	ldr	r0, [pc, #44]	; (4019a0 <sd_mmc_cmd9_spi+0x40>)
  401974:	4c0b      	ldr	r4, [pc, #44]	; (4019a4 <sd_mmc_cmd9_spi+0x44>)
  401976:	47a0      	blx	r4
  401978:	4603      	mov	r3, r0
  40197a:	b910      	cbnz	r0, 401982 <sd_mmc_cmd9_spi+0x22>
}
  40197c:	4618      	mov	r0, r3
  40197e:	b002      	add	sp, #8
  401980:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
  401982:	4b06      	ldr	r3, [pc, #24]	; (40199c <sd_mmc_cmd9_spi+0x3c>)
  401984:	6818      	ldr	r0, [r3, #0]
  401986:	2101      	movs	r1, #1
  401988:	3012      	adds	r0, #18
  40198a:	4b07      	ldr	r3, [pc, #28]	; (4019a8 <sd_mmc_cmd9_spi+0x48>)
  40198c:	4798      	blx	r3
  40198e:	4603      	mov	r3, r0
  401990:	2800      	cmp	r0, #0
  401992:	d0f3      	beq.n	40197c <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
  401994:	4b05      	ldr	r3, [pc, #20]	; (4019ac <sd_mmc_cmd9_spi+0x4c>)
  401996:	4798      	blx	r3
  401998:	4603      	mov	r3, r0
  40199a:	e7ef      	b.n	40197c <sd_mmc_cmd9_spi+0x1c>
  40199c:	2000610c 	.word	0x2000610c
  4019a0:	00081109 	.word	0x00081109
  4019a4:	004024ad 	.word	0x004024ad
  4019a8:	004026cd 	.word	0x004026cd
  4019ac:	00402749 	.word	0x00402749

004019b0 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  4019b0:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  4019b2:	4b04      	ldr	r3, [pc, #16]	; (4019c4 <sd_mmc_deselect_slot+0x14>)
  4019b4:	781b      	ldrb	r3, [r3, #0]
  4019b6:	b103      	cbz	r3, 4019ba <sd_mmc_deselect_slot+0xa>
  4019b8:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  4019ba:	2000      	movs	r0, #0
  4019bc:	4b02      	ldr	r3, [pc, #8]	; (4019c8 <sd_mmc_deselect_slot+0x18>)
  4019be:	4798      	blx	r3
	}
}
  4019c0:	e7fa      	b.n	4019b8 <sd_mmc_deselect_slot+0x8>
  4019c2:	bf00      	nop
  4019c4:	20006115 	.word	0x20006115
  4019c8:	0040244d 	.word	0x0040244d

004019cc <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  4019cc:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  4019ce:	200d      	movs	r0, #13
  4019d0:	4b05      	ldr	r3, [pc, #20]	; (4019e8 <sd_mmc_init+0x1c>)
  4019d2:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4019d4:	2204      	movs	r2, #4
  4019d6:	4b05      	ldr	r3, [pc, #20]	; (4019ec <sd_mmc_init+0x20>)
  4019d8:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4019da:	22ff      	movs	r2, #255	; 0xff
  4019dc:	4b04      	ldr	r3, [pc, #16]	; (4019f0 <sd_mmc_init+0x24>)
  4019de:	701a      	strb	r2, [r3, #0]
	driver_init();
  4019e0:	4b04      	ldr	r3, [pc, #16]	; (4019f4 <sd_mmc_init+0x28>)
  4019e2:	4798      	blx	r3
  4019e4:	bd08      	pop	{r3, pc}
  4019e6:	bf00      	nop
  4019e8:	00403149 	.word	0x00403149
  4019ec:	20000458 	.word	0x20000458
  4019f0:	20006115 	.word	0x20006115
  4019f4:	004023dd 	.word	0x004023dd

004019f8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  4019f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4019fc:	b087      	sub	sp, #28
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4019fe:	4b9a      	ldr	r3, [pc, #616]	; (401c68 <sd_mmc_check+0x270>)
  401a00:	4798      	blx	r3
  401a02:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  401a04:	2801      	cmp	r0, #1
  401a06:	d005      	beq.n	401a14 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  401a08:	4b98      	ldr	r3, [pc, #608]	; (401c6c <sd_mmc_check+0x274>)
  401a0a:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  401a0c:	4620      	mov	r0, r4
  401a0e:	b007      	add	sp, #28
  401a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
  401a14:	4b96      	ldr	r3, [pc, #600]	; (401c70 <sd_mmc_check+0x278>)
  401a16:	681b      	ldr	r3, [r3, #0]
  401a18:	2201      	movs	r2, #1
  401a1a:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  401a1c:	2500      	movs	r5, #0
  401a1e:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  401a20:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  401a22:	4b94      	ldr	r3, [pc, #592]	; (401c74 <sd_mmc_check+0x27c>)
  401a24:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  401a26:	4629      	mov	r1, r5
  401a28:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  401a2c:	4b92      	ldr	r3, [pc, #584]	; (401c78 <sd_mmc_check+0x280>)
  401a2e:	4798      	blx	r3
  401a30:	b930      	cbnz	r0, 401a40 <sd_mmc_check+0x48>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  401a32:	4b8f      	ldr	r3, [pc, #572]	; (401c70 <sd_mmc_check+0x278>)
  401a34:	681b      	ldr	r3, [r3, #0]
  401a36:	2403      	movs	r4, #3
  401a38:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  401a3a:	4b8c      	ldr	r3, [pc, #560]	; (401c6c <sd_mmc_check+0x274>)
  401a3c:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  401a3e:	e7e5      	b.n	401a0c <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  401a40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  401a44:	f245 5008 	movw	r0, #21768	; 0x5508
  401a48:	4b8b      	ldr	r3, [pc, #556]	; (401c78 <sd_mmc_check+0x280>)
  401a4a:	4798      	blx	r3
  401a4c:	2800      	cmp	r0, #0
  401a4e:	d129      	bne.n	401aa4 <sd_mmc_check+0xac>
	*v2 = 0;
  401a50:	2700      	movs	r7, #0
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401a52:	4b87      	ldr	r3, [pc, #540]	; (401c70 <sd_mmc_check+0x278>)
  401a54:	681b      	ldr	r3, [r3, #0]
  401a56:	7bdb      	ldrb	r3, [r3, #15]
  401a58:	f013 0f01 	tst.w	r3, #1
  401a5c:	f040 81df 	bne.w	401e1e <sd_mmc_check+0x426>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  401a60:	4b83      	ldr	r3, [pc, #524]	; (401c70 <sd_mmc_check+0x278>)
  401a62:	681b      	ldr	r3, [r3, #0]
  401a64:	7bdb      	ldrb	r3, [r3, #15]
  401a66:	f003 0309 	and.w	r3, r3, #9
  401a6a:	2b01      	cmp	r3, #1
  401a6c:	d111      	bne.n	401a92 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  401a6e:	f44f 7100 	mov.w	r1, #512	; 0x200
  401a72:	f241 1010 	movw	r0, #4368	; 0x1110
  401a76:	4b80      	ldr	r3, [pc, #512]	; (401c78 <sd_mmc_check+0x280>)
  401a78:	4798      	blx	r3
  401a7a:	2800      	cmp	r0, #0
  401a7c:	d0d9      	beq.n	401a32 <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401a7e:	4b7c      	ldr	r3, [pc, #496]	; (401c70 <sd_mmc_check+0x278>)
  401a80:	681b      	ldr	r3, [r3, #0]
  401a82:	7bdb      	ldrb	r3, [r3, #15]
  401a84:	f013 0f01 	tst.w	r3, #1
  401a88:	d003      	beq.n	401a92 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
  401a8a:	4b7c      	ldr	r3, [pc, #496]	; (401c7c <sd_mmc_check+0x284>)
  401a8c:	4798      	blx	r3
  401a8e:	2800      	cmp	r0, #0
  401a90:	d0cf      	beq.n	401a32 <sd_mmc_check+0x3a>
	sd_mmc_configure_slot();
  401a92:	4b7b      	ldr	r3, [pc, #492]	; (401c80 <sd_mmc_check+0x288>)
  401a94:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  401a96:	4b76      	ldr	r3, [pc, #472]	; (401c70 <sd_mmc_check+0x278>)
  401a98:	681b      	ldr	r3, [r3, #0]
  401a9a:	2200      	movs	r2, #0
  401a9c:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  401a9e:	4b73      	ldr	r3, [pc, #460]	; (401c6c <sd_mmc_check+0x274>)
  401aa0:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  401aa2:	e7b3      	b.n	401a0c <sd_mmc_check+0x14>
	resp = driver_get_response();
  401aa4:	4b77      	ldr	r3, [pc, #476]	; (401c84 <sd_mmc_check+0x28c>)
  401aa6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  401aa8:	f1b0 3fff 	cmp.w	r0, #4294967295
  401aac:	f000 81b5 	beq.w	401e1a <sd_mmc_check+0x422>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  401ab0:	f3c0 000b 	ubfx	r0, r0, #0, #12
  401ab4:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  401ab8:	d1bb      	bne.n	401a32 <sd_mmc_check+0x3a>
	*v2 = 1;
  401aba:	2701      	movs	r7, #1
  401abc:	e7c9      	b.n	401a52 <sd_mmc_check+0x5a>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  401abe:	2100      	movs	r1, #0
  401ac0:	f240 503a 	movw	r0, #1338	; 0x53a
  401ac4:	4b6c      	ldr	r3, [pc, #432]	; (401c78 <sd_mmc_check+0x280>)
  401ac6:	4798      	blx	r3
  401ac8:	b9f0      	cbnz	r0, 401b08 <sd_mmc_check+0x110>
			sd_mmc_card->type = CARD_TYPE_MMC;
  401aca:	4b69      	ldr	r3, [pc, #420]	; (401c70 <sd_mmc_check+0x278>)
  401acc:	681b      	ldr	r3, [r3, #0]
  401ace:	2202      	movs	r2, #2
  401ad0:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  401ad2:	2100      	movs	r1, #0
  401ad4:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  401ad8:	4b67      	ldr	r3, [pc, #412]	; (401c78 <sd_mmc_check+0x280>)
  401ada:	4798      	blx	r3
  401adc:	2800      	cmp	r0, #0
  401ade:	d0a8      	beq.n	401a32 <sd_mmc_check+0x3a>
  401ae0:	f641 35ef 	movw	r5, #7151	; 0x1bef
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  401ae4:	f04f 0800 	mov.w	r8, #0
  401ae8:	4e63      	ldr	r6, [pc, #396]	; (401c78 <sd_mmc_check+0x280>)
		resp = driver_get_response();
  401aea:	4f66      	ldr	r7, [pc, #408]	; (401c84 <sd_mmc_check+0x28c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  401aec:	4641      	mov	r1, r8
  401aee:	f241 1001 	movw	r0, #4353	; 0x1101
  401af2:	47b0      	blx	r6
  401af4:	2800      	cmp	r0, #0
  401af6:	d09c      	beq.n	401a32 <sd_mmc_check+0x3a>
		resp = driver_get_response();
  401af8:	47b8      	blx	r7
		if (!(resp & R1_SPI_IDLE)) {
  401afa:	f010 0f01 	tst.w	r0, #1
  401afe:	f000 8084 	beq.w	401c0a <sd_mmc_check+0x212>
		if (retry-- == 0) {
  401b02:	3d01      	subs	r5, #1
  401b04:	d1f2      	bne.n	401aec <sd_mmc_check+0xf4>
  401b06:	e794      	b.n	401a32 <sd_mmc_check+0x3a>
	if ((driver_get_response() & OCR_CCS) != 0) {
  401b08:	4b5e      	ldr	r3, [pc, #376]	; (401c84 <sd_mmc_check+0x28c>)
  401b0a:	4798      	blx	r3
  401b0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  401b10:	d005      	beq.n	401b1e <sd_mmc_check+0x126>
		sd_mmc_card->type |= CARD_TYPE_HC;
  401b12:	4b57      	ldr	r3, [pc, #348]	; (401c70 <sd_mmc_check+0x278>)
  401b14:	681a      	ldr	r2, [r3, #0]
  401b16:	7bd3      	ldrb	r3, [r2, #15]
  401b18:	f043 0308 	orr.w	r3, r3, #8
  401b1c:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  401b1e:	2100      	movs	r1, #0
  401b20:	f241 103b 	movw	r0, #4411	; 0x113b
  401b24:	4b54      	ldr	r3, [pc, #336]	; (401c78 <sd_mmc_check+0x280>)
  401b26:	4798      	blx	r3
  401b28:	2800      	cmp	r0, #0
  401b2a:	d082      	beq.n	401a32 <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401b2c:	4b50      	ldr	r3, [pc, #320]	; (401c70 <sd_mmc_check+0x278>)
  401b2e:	681b      	ldr	r3, [r3, #0]
  401b30:	7bdb      	ldrb	r3, [r3, #15]
  401b32:	f013 0f01 	tst.w	r3, #1
  401b36:	f000 8190 	beq.w	401e5a <sd_mmc_check+0x462>
		if (!sd_mmc_cmd9_spi()) {
  401b3a:	4b53      	ldr	r3, [pc, #332]	; (401c88 <sd_mmc_check+0x290>)
  401b3c:	4798      	blx	r3
  401b3e:	2800      	cmp	r0, #0
  401b40:	f43f af77 	beq.w	401a32 <sd_mmc_check+0x3a>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  401b44:	4b4a      	ldr	r3, [pc, #296]	; (401c70 <sd_mmc_check+0x278>)
  401b46:	681b      	ldr	r3, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401b48:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  401b4a:	f002 0007 	and.w	r0, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  401b4e:	494f      	ldr	r1, [pc, #316]	; (401c8c <sd_mmc_check+0x294>)
  401b50:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  401b54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  401b58:	fb01 f100 	mul.w	r1, r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  401b5c:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  401b60:	484b      	ldr	r0, [pc, #300]	; (401c90 <sd_mmc_check+0x298>)
  401b62:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  401b66:	fb02 f201 	mul.w	r2, r2, r1
  401b6a:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  401b6c:	7c9a      	ldrb	r2, [r3, #18]
  401b6e:	0992      	lsrs	r2, r2, #6
  401b70:	f040 812a 	bne.w	401dc8 <sd_mmc_check+0x3d0>
  401b74:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401b76:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401b78:	7e1a      	ldrb	r2, [r3, #24]
  401b7a:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401b7c:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  401b80:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401b84:	7f18      	ldrb	r0, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401b86:	7ed9      	ldrb	r1, [r3, #27]
  401b88:	0049      	lsls	r1, r1, #1
  401b8a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  401b8e:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  401b92:	3201      	adds	r2, #1
  401b94:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  401b98:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  401b9a:	408a      	lsls	r2, r1
  401b9c:	7dd9      	ldrb	r1, [r3, #23]
  401b9e:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  401ba2:	408a      	lsls	r2, r1
				/ 1024;
  401ba4:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  401ba6:	605a      	str	r2, [r3, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  401ba8:	8999      	ldrh	r1, [r3, #12]
  401baa:	0409      	lsls	r1, r1, #16
  401bac:	f241 1037 	movw	r0, #4407	; 0x1137
  401bb0:	4b31      	ldr	r3, [pc, #196]	; (401c78 <sd_mmc_check+0x280>)
  401bb2:	4798      	blx	r3
  401bb4:	2800      	cmp	r0, #0
  401bb6:	f43f af3c 	beq.w	401a32 <sd_mmc_check+0x3a>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  401bba:	2301      	movs	r3, #1
  401bbc:	9300      	str	r3, [sp, #0]
  401bbe:	2208      	movs	r2, #8
  401bc0:	2100      	movs	r1, #0
  401bc2:	4834      	ldr	r0, [pc, #208]	; (401c94 <sd_mmc_check+0x29c>)
  401bc4:	4d34      	ldr	r5, [pc, #208]	; (401c98 <sd_mmc_check+0x2a0>)
  401bc6:	47a8      	blx	r5
  401bc8:	2800      	cmp	r0, #0
  401bca:	f43f af32 	beq.w	401a32 <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(scr, 1)) {
  401bce:	2101      	movs	r1, #1
  401bd0:	a804      	add	r0, sp, #16
  401bd2:	4b32      	ldr	r3, [pc, #200]	; (401c9c <sd_mmc_check+0x2a4>)
  401bd4:	4798      	blx	r3
  401bd6:	2800      	cmp	r0, #0
  401bd8:	f43f af2b 	beq.w	401a32 <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  401bdc:	4b30      	ldr	r3, [pc, #192]	; (401ca0 <sd_mmc_check+0x2a8>)
  401bde:	4798      	blx	r3
  401be0:	2800      	cmp	r0, #0
  401be2:	f43f af26 	beq.w	401a32 <sd_mmc_check+0x3a>
	switch (SD_SCR_SD_SPEC(scr)) {
  401be6:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401bea:	f003 030f 	and.w	r3, r3, #15
  401bee:	2b01      	cmp	r3, #1
  401bf0:	f000 8104 	beq.w	401dfc <sd_mmc_check+0x404>
  401bf4:	2b00      	cmp	r3, #0
  401bf6:	f000 80f4 	beq.w	401de2 <sd_mmc_check+0x3ea>
  401bfa:	2b02      	cmp	r3, #2
  401bfc:	f000 8103 	beq.w	401e06 <sd_mmc_check+0x40e>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  401c00:	4b1b      	ldr	r3, [pc, #108]	; (401c70 <sd_mmc_check+0x278>)
  401c02:	681b      	ldr	r3, [r3, #0]
  401c04:	2210      	movs	r2, #16
  401c06:	741a      	strb	r2, [r3, #16]
  401c08:	e0ef      	b.n	401dea <sd_mmc_check+0x3f2>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  401c0a:	2100      	movs	r1, #0
  401c0c:	f240 503a 	movw	r0, #1338	; 0x53a
  401c10:	4b19      	ldr	r3, [pc, #100]	; (401c78 <sd_mmc_check+0x280>)
  401c12:	4798      	blx	r3
  401c14:	2800      	cmp	r0, #0
  401c16:	f43f af0c 	beq.w	401a32 <sd_mmc_check+0x3a>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
  401c1a:	4b1a      	ldr	r3, [pc, #104]	; (401c84 <sd_mmc_check+0x28c>)
  401c1c:	4798      	blx	r3
  401c1e:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  401c22:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  401c26:	d105      	bne.n	401c34 <sd_mmc_check+0x23c>
		sd_mmc_card->type |= CARD_TYPE_HC;
  401c28:	4b11      	ldr	r3, [pc, #68]	; (401c70 <sd_mmc_check+0x278>)
  401c2a:	681a      	ldr	r2, [r3, #0]
  401c2c:	7bd3      	ldrb	r3, [r2, #15]
  401c2e:	f043 0308 	orr.w	r3, r3, #8
  401c32:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  401c34:	2100      	movs	r1, #0
  401c36:	f241 103b 	movw	r0, #4411	; 0x113b
  401c3a:	4b0f      	ldr	r3, [pc, #60]	; (401c78 <sd_mmc_check+0x280>)
  401c3c:	4798      	blx	r3
  401c3e:	2800      	cmp	r0, #0
  401c40:	f43f aef7 	beq.w	401a32 <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd9_spi()) {
  401c44:	4b10      	ldr	r3, [pc, #64]	; (401c88 <sd_mmc_check+0x290>)
  401c46:	4798      	blx	r3
  401c48:	2800      	cmp	r0, #0
  401c4a:	f43f aef2 	beq.w	401a32 <sd_mmc_check+0x3a>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  401c4e:	4b08      	ldr	r3, [pc, #32]	; (401c70 <sd_mmc_check+0x278>)
  401c50:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401c52:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  401c54:	f3c3 0383 	ubfx	r3, r3, #2, #4
  401c58:	3b01      	subs	r3, #1
  401c5a:	2b03      	cmp	r3, #3
  401c5c:	d822      	bhi.n	401ca4 <sd_mmc_check+0x2ac>
  401c5e:	e8df f003 	tbb	[pc, r3]
  401c62:	908d      	.short	0x908d
  401c64:	9693      	.short	0x9693
  401c66:	bf00      	nop
  401c68:	0040182d 	.word	0x0040182d
  401c6c:	004019b1 	.word	0x004019b1
  401c70:	2000610c 	.word	0x2000610c
  401c74:	00402475 	.word	0x00402475
  401c78:	00402635 	.word	0x00402635
  401c7c:	00401929 	.word	0x00401929
  401c80:	00401801 	.word	0x00401801
  401c84:	0040264d 	.word	0x0040264d
  401c88:	00401961 	.word	0x00401961
  401c8c:	0040a9ec 	.word	0x0040a9ec
  401c90:	0040aa08 	.word	0x0040aa08
  401c94:	00081133 	.word	0x00081133
  401c98:	004024ad 	.word	0x004024ad
  401c9c:	004026cd 	.word	0x004026cd
  401ca0:	00402749 	.word	0x00402749
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  401ca4:	2312      	movs	r3, #18
  401ca6:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401ca8:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  401caa:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  401cae:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  401cb2:	496d      	ldr	r1, [pc, #436]	; (401e68 <sd_mmc_check+0x470>)
  401cb4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  401cb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401cbc:	fb03 f301 	mul.w	r3, r3, r1
  401cc0:	496a      	ldr	r1, [pc, #424]	; (401e6c <sd_mmc_check+0x474>)
  401cc2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  401cc6:	fb03 f301 	mul.w	r3, r3, r1
  401cca:	6013      	str	r3, [r2, #0]
  401ccc:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401cce:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401cd0:	7e13      	ldrb	r3, [r2, #24]
  401cd2:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401cd4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  401cd8:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  401cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  401ce0:	f640 71ff 	movw	r1, #4095	; 0xfff
  401ce4:	428b      	cmp	r3, r1
  401ce6:	d00f      	beq.n	401d08 <sd_mmc_check+0x310>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401ce8:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401cea:	7ed1      	ldrb	r1, [r2, #27]
  401cec:	0049      	lsls	r1, r1, #1
  401cee:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  401cf2:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  401cf4:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  401cf8:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  401cfa:	408b      	lsls	r3, r1
  401cfc:	7dd1      	ldrb	r1, [r2, #23]
  401cfe:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  401d02:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  401d04:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  401d06:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  401d08:	7c13      	ldrb	r3, [r2, #16]
  401d0a:	2b3f      	cmp	r3, #63	; 0x3f
  401d0c:	d94b      	bls.n	401da6 <sd_mmc_check+0x3ae>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  401d0e:	2100      	movs	r1, #0
  401d10:	9100      	str	r1, [sp, #0]
  401d12:	2301      	movs	r3, #1
  401d14:	f44f 7200 	mov.w	r2, #512	; 0x200
  401d18:	4855      	ldr	r0, [pc, #340]	; (401e70 <sd_mmc_check+0x478>)
  401d1a:	4d56      	ldr	r5, [pc, #344]	; (401e74 <sd_mmc_check+0x47c>)
  401d1c:	47a8      	blx	r5
  401d1e:	2800      	cmp	r0, #0
  401d20:	f43f ae87 	beq.w	401a32 <sd_mmc_check+0x3a>
  401d24:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  401d26:	4e54      	ldr	r6, [pc, #336]	; (401e78 <sd_mmc_check+0x480>)
  401d28:	a803      	add	r0, sp, #12
  401d2a:	47b0      	blx	r6
  401d2c:	2800      	cmp	r0, #0
  401d2e:	f43f ae80 	beq.w	401a32 <sd_mmc_check+0x3a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  401d32:	3501      	adds	r5, #1
  401d34:	b2ad      	uxth	r5, r5
  401d36:	2d32      	cmp	r5, #50	; 0x32
  401d38:	d1f6      	bne.n	401d28 <sd_mmc_check+0x330>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  401d3a:	4b50      	ldr	r3, [pc, #320]	; (401e7c <sd_mmc_check+0x484>)
  401d3c:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401d3e:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401d40:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401d42:	7e1b      	ldrb	r3, [r3, #24]
  401d44:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401d46:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  401d4a:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  401d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401d52:	f640 72ff 	movw	r2, #4095	; 0xfff
  401d56:	4293      	cmp	r3, r2
  401d58:	d10e      	bne.n	401d78 <sd_mmc_check+0x380>
			if (!driver_read_word(&sec_count)) {
  401d5a:	4e47      	ldr	r6, [pc, #284]	; (401e78 <sd_mmc_check+0x480>)
  401d5c:	a804      	add	r0, sp, #16
  401d5e:	47b0      	blx	r6
  401d60:	2800      	cmp	r0, #0
  401d62:	f43f ae66 	beq.w	401a32 <sd_mmc_check+0x3a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  401d66:	3501      	adds	r5, #1
  401d68:	b2ad      	uxth	r5, r5
  401d6a:	2d35      	cmp	r5, #53	; 0x35
  401d6c:	d9f6      	bls.n	401d5c <sd_mmc_check+0x364>
		sd_mmc_card->capacity = sec_count / 2;
  401d6e:	4b43      	ldr	r3, [pc, #268]	; (401e7c <sd_mmc_check+0x484>)
  401d70:	681a      	ldr	r2, [r3, #0]
  401d72:	9b04      	ldr	r3, [sp, #16]
  401d74:	085b      	lsrs	r3, r3, #1
  401d76:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  401d78:	4e3f      	ldr	r6, [pc, #252]	; (401e78 <sd_mmc_check+0x480>)
  401d7a:	e012      	b.n	401da2 <sd_mmc_check+0x3aa>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  401d7c:	2314      	movs	r3, #20
  401d7e:	7413      	strb	r3, [r2, #16]
  401d80:	e792      	b.n	401ca8 <sd_mmc_check+0x2b0>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  401d82:	2322      	movs	r3, #34	; 0x22
  401d84:	7413      	strb	r3, [r2, #16]
  401d86:	e78f      	b.n	401ca8 <sd_mmc_check+0x2b0>
		sd_mmc_card->version = CARD_VER_MMC_3;
  401d88:	2330      	movs	r3, #48	; 0x30
  401d8a:	7413      	strb	r3, [r2, #16]
  401d8c:	e78c      	b.n	401ca8 <sd_mmc_check+0x2b0>
		sd_mmc_card->version = CARD_VER_MMC_4;
  401d8e:	2340      	movs	r3, #64	; 0x40
  401d90:	7413      	strb	r3, [r2, #16]
  401d92:	e789      	b.n	401ca8 <sd_mmc_check+0x2b0>
		if (!driver_read_word(&sec_count)) {
  401d94:	a804      	add	r0, sp, #16
  401d96:	47b0      	blx	r6
  401d98:	2800      	cmp	r0, #0
  401d9a:	f43f ae4a 	beq.w	401a32 <sd_mmc_check+0x3a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  401d9e:	3501      	adds	r5, #1
  401da0:	b2ad      	uxth	r5, r5
  401da2:	2d7f      	cmp	r5, #127	; 0x7f
  401da4:	d9f6      	bls.n	401d94 <sd_mmc_check+0x39c>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  401da6:	f44f 7100 	mov.w	r1, #512	; 0x200
  401daa:	f241 1010 	movw	r0, #4368	; 0x1110
  401dae:	4b34      	ldr	r3, [pc, #208]	; (401e80 <sd_mmc_check+0x488>)
  401db0:	4798      	blx	r3
  401db2:	2800      	cmp	r0, #0
  401db4:	f43f ae3d 	beq.w	401a32 <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd13()) {
  401db8:	4b32      	ldr	r3, [pc, #200]	; (401e84 <sd_mmc_check+0x48c>)
  401dba:	4798      	blx	r3
  401dbc:	2800      	cmp	r0, #0
  401dbe:	f43f ae38 	beq.w	401a32 <sd_mmc_check+0x3a>
	sd_mmc_configure_slot();
  401dc2:	4b31      	ldr	r3, [pc, #196]	; (401e88 <sd_mmc_check+0x490>)
  401dc4:	4798      	blx	r3
  401dc6:	e666      	b.n	401a96 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401dc8:	7ed9      	ldrb	r1, [r3, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401dca:	7e98      	ldrb	r0, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401dcc:	7e5a      	ldrb	r2, [r3, #25]
  401dce:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401dd0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  401dd4:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  401dd6:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  401dda:	3201      	adds	r2, #1
  401ddc:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  401dde:	605a      	str	r2, [r3, #4]
  401de0:	e6e2      	b.n	401ba8 <sd_mmc_check+0x1b0>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  401de2:	4b26      	ldr	r3, [pc, #152]	; (401e7c <sd_mmc_check+0x484>)
  401de4:	681b      	ldr	r3, [r3, #0]
  401de6:	2210      	movs	r2, #16
  401de8:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  401dea:	4b24      	ldr	r3, [pc, #144]	; (401e7c <sd_mmc_check+0x484>)
  401dec:	681b      	ldr	r3, [r3, #0]
  401dee:	7bdb      	ldrb	r3, [r3, #15]
  401df0:	f003 0309 	and.w	r3, r3, #9
  401df4:	2b01      	cmp	r3, #1
  401df6:	f47f ae42 	bne.w	401a7e <sd_mmc_check+0x86>
  401dfa:	e638      	b.n	401a6e <sd_mmc_check+0x76>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  401dfc:	4b1f      	ldr	r3, [pc, #124]	; (401e7c <sd_mmc_check+0x484>)
  401dfe:	681b      	ldr	r3, [r3, #0]
  401e00:	221a      	movs	r2, #26
  401e02:	741a      	strb	r2, [r3, #16]
  401e04:	e7f1      	b.n	401dea <sd_mmc_check+0x3f2>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  401e06:	f89d 3012 	ldrb.w	r3, [sp, #18]
  401e0a:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  401e0c:	4b1b      	ldr	r3, [pc, #108]	; (401e7c <sd_mmc_check+0x484>)
  401e0e:	681b      	ldr	r3, [r3, #0]
  401e10:	bf14      	ite	ne
  401e12:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  401e14:	2220      	moveq	r2, #32
  401e16:	741a      	strb	r2, [r3, #16]
  401e18:	e7e7      	b.n	401dea <sd_mmc_check+0x3f2>
	*v2 = 0;
  401e1a:	2700      	movs	r7, #0
  401e1c:	e619      	b.n	401a52 <sd_mmc_check+0x5a>
  401e1e:	07bf      	lsls	r7, r7, #30
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401e20:	f641 35ef 	movw	r5, #7151	; 0x1bef
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  401e24:	f04f 0800 	mov.w	r8, #0
  401e28:	4e15      	ldr	r6, [pc, #84]	; (401e80 <sd_mmc_check+0x488>)
		resp = driver_get_response();
  401e2a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 401e8c <sd_mmc_check+0x494>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  401e2e:	4641      	mov	r1, r8
  401e30:	f241 1037 	movw	r0, #4407	; 0x1137
  401e34:	47b0      	blx	r6
  401e36:	2800      	cmp	r0, #0
  401e38:	f43f ae47 	beq.w	401aca <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
  401e3c:	4639      	mov	r1, r7
  401e3e:	f241 1029 	movw	r0, #4393	; 0x1129
  401e42:	47b0      	blx	r6
  401e44:	2800      	cmp	r0, #0
  401e46:	f43f ae40 	beq.w	401aca <sd_mmc_check+0xd2>
		resp = driver_get_response();
  401e4a:	47c8      	blx	r9
		if (!(resp & R1_SPI_IDLE)) {
  401e4c:	f010 0f01 	tst.w	r0, #1
  401e50:	f43f ae35 	beq.w	401abe <sd_mmc_check+0xc6>
		if (retry-- == 0) {
  401e54:	3d01      	subs	r5, #1
  401e56:	d1ea      	bne.n	401e2e <sd_mmc_check+0x436>
  401e58:	e637      	b.n	401aca <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  401e5a:	f003 0309 	and.w	r3, r3, #9
  401e5e:	2b01      	cmp	r3, #1
  401e60:	f47f ae17 	bne.w	401a92 <sd_mmc_check+0x9a>
  401e64:	e603      	b.n	401a6e <sd_mmc_check+0x76>
  401e66:	bf00      	nop
  401e68:	0040a9ec 	.word	0x0040a9ec
  401e6c:	0040a9ac 	.word	0x0040a9ac
  401e70:	00081108 	.word	0x00081108
  401e74:	004024ad 	.word	0x004024ad
  401e78:	00402659 	.word	0x00402659
  401e7c:	2000610c 	.word	0x2000610c
  401e80:	00402635 	.word	0x00402635
  401e84:	00401929 	.word	0x00401929
  401e88:	00401801 	.word	0x00401801
  401e8c:	0040264d 	.word	0x0040264d

00401e90 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  401e90:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  401e92:	4b05      	ldr	r3, [pc, #20]	; (401ea8 <sd_mmc_get_type+0x18>)
  401e94:	4798      	blx	r3
  401e96:	b108      	cbz	r0, 401e9c <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  401e98:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  401e9a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  401e9c:	4b03      	ldr	r3, [pc, #12]	; (401eac <sd_mmc_get_type+0x1c>)
  401e9e:	4798      	blx	r3
	return sd_mmc_card->type;
  401ea0:	4b03      	ldr	r3, [pc, #12]	; (401eb0 <sd_mmc_get_type+0x20>)
  401ea2:	681b      	ldr	r3, [r3, #0]
  401ea4:	7bd8      	ldrb	r0, [r3, #15]
  401ea6:	bd08      	pop	{r3, pc}
  401ea8:	0040182d 	.word	0x0040182d
  401eac:	004019b1 	.word	0x004019b1
  401eb0:	2000610c 	.word	0x2000610c

00401eb4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  401eb4:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  401eb6:	4b05      	ldr	r3, [pc, #20]	; (401ecc <sd_mmc_get_capacity+0x18>)
  401eb8:	4798      	blx	r3
  401eba:	b108      	cbz	r0, 401ec0 <sd_mmc_get_capacity+0xc>
		return 0;
  401ebc:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  401ebe:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  401ec0:	4b03      	ldr	r3, [pc, #12]	; (401ed0 <sd_mmc_get_capacity+0x1c>)
  401ec2:	4798      	blx	r3
	return sd_mmc_card->capacity;
  401ec4:	4b03      	ldr	r3, [pc, #12]	; (401ed4 <sd_mmc_get_capacity+0x20>)
  401ec6:	681b      	ldr	r3, [r3, #0]
  401ec8:	6858      	ldr	r0, [r3, #4]
  401eca:	bd08      	pop	{r3, pc}
  401ecc:	0040182d 	.word	0x0040182d
  401ed0:	004019b1 	.word	0x004019b1
  401ed4:	2000610c 	.word	0x2000610c

00401ed8 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  401ed8:	2000      	movs	r0, #0
  401eda:	4770      	bx	lr

00401edc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  401edc:	b570      	push	{r4, r5, r6, lr}
  401ede:	b082      	sub	sp, #8
  401ee0:	460e      	mov	r6, r1
  401ee2:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  401ee4:	4b15      	ldr	r3, [pc, #84]	; (401f3c <sd_mmc_init_read_blocks+0x60>)
  401ee6:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  401ee8:	4604      	mov	r4, r0
  401eea:	b110      	cbz	r0, 401ef2 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  401eec:	4620      	mov	r0, r4
  401eee:	b002      	add	sp, #8
  401ef0:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
  401ef2:	4b13      	ldr	r3, [pc, #76]	; (401f40 <sd_mmc_init_read_blocks+0x64>)
  401ef4:	4798      	blx	r3
  401ef6:	b1c8      	cbz	r0, 401f2c <sd_mmc_init_read_blocks+0x50>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  401ef8:	4b12      	ldr	r3, [pc, #72]	; (401f44 <sd_mmc_init_read_blocks+0x68>)
  401efa:	4813      	ldr	r0, [pc, #76]	; (401f48 <sd_mmc_init_read_blocks+0x6c>)
  401efc:	2d01      	cmp	r5, #1
  401efe:	bf98      	it	ls
  401f00:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  401f02:	4b12      	ldr	r3, [pc, #72]	; (401f4c <sd_mmc_init_read_blocks+0x70>)
  401f04:	681b      	ldr	r3, [r3, #0]
  401f06:	7bdb      	ldrb	r3, [r3, #15]
  401f08:	f013 0f08 	tst.w	r3, #8
		arg = (start * SD_MMC_BLOCK_SIZE);
  401f0c:	bf08      	it	eq
  401f0e:	0276      	lsleq	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  401f10:	2301      	movs	r3, #1
  401f12:	9300      	str	r3, [sp, #0]
  401f14:	462b      	mov	r3, r5
  401f16:	f44f 7200 	mov.w	r2, #512	; 0x200
  401f1a:	4631      	mov	r1, r6
  401f1c:	4e0c      	ldr	r6, [pc, #48]	; (401f50 <sd_mmc_init_read_blocks+0x74>)
  401f1e:	47b0      	blx	r6
  401f20:	b140      	cbz	r0, 401f34 <sd_mmc_init_read_blocks+0x58>
	sd_mmc_nb_block_remaining = nb_block;
  401f22:	4b0c      	ldr	r3, [pc, #48]	; (401f54 <sd_mmc_init_read_blocks+0x78>)
  401f24:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  401f26:	4b0c      	ldr	r3, [pc, #48]	; (401f58 <sd_mmc_init_read_blocks+0x7c>)
  401f28:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  401f2a:	e7df      	b.n	401eec <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
  401f2c:	4b0b      	ldr	r3, [pc, #44]	; (401f5c <sd_mmc_init_read_blocks+0x80>)
  401f2e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  401f30:	2405      	movs	r4, #5
  401f32:	e7db      	b.n	401eec <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
  401f34:	4b09      	ldr	r3, [pc, #36]	; (401f5c <sd_mmc_init_read_blocks+0x80>)
  401f36:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  401f38:	2405      	movs	r4, #5
  401f3a:	e7d7      	b.n	401eec <sd_mmc_init_read_blocks+0x10>
  401f3c:	0040182d 	.word	0x0040182d
  401f40:	00401929 	.word	0x00401929
  401f44:	00081111 	.word	0x00081111
  401f48:	00101112 	.word	0x00101112
  401f4c:	2000610c 	.word	0x2000610c
  401f50:	004024ad 	.word	0x004024ad
  401f54:	20006110 	.word	0x20006110
  401f58:	20006112 	.word	0x20006112
  401f5c:	004019b1 	.word	0x004019b1

00401f60 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  401f60:	b510      	push	{r4, lr}
  401f62:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  401f64:	4b06      	ldr	r3, [pc, #24]	; (401f80 <sd_mmc_start_read_blocks+0x20>)
  401f66:	4798      	blx	r3
  401f68:	b920      	cbnz	r0, 401f74 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  401f6a:	2200      	movs	r2, #0
  401f6c:	4b05      	ldr	r3, [pc, #20]	; (401f84 <sd_mmc_start_read_blocks+0x24>)
  401f6e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  401f70:	2005      	movs	r0, #5
  401f72:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  401f74:	4a03      	ldr	r2, [pc, #12]	; (401f84 <sd_mmc_start_read_blocks+0x24>)
  401f76:	8813      	ldrh	r3, [r2, #0]
  401f78:	1b1c      	subs	r4, r3, r4
  401f7a:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  401f7c:	2000      	movs	r0, #0
}
  401f7e:	bd10      	pop	{r4, pc}
  401f80:	004026cd 	.word	0x004026cd
  401f84:	20006110 	.word	0x20006110

00401f88 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  401f88:	b510      	push	{r4, lr}
  401f8a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  401f8c:	4b13      	ldr	r3, [pc, #76]	; (401fdc <sd_mmc_wait_end_of_read_blocks+0x54>)
  401f8e:	4798      	blx	r3
  401f90:	b908      	cbnz	r0, 401f96 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  401f92:	2005      	movs	r0, #5
  401f94:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  401f96:	b184      	cbz	r4, 401fba <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  401f98:	2200      	movs	r2, #0
  401f9a:	4b11      	ldr	r3, [pc, #68]	; (401fe0 <sd_mmc_wait_end_of_read_blocks+0x58>)
  401f9c:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  401f9e:	4b11      	ldr	r3, [pc, #68]	; (401fe4 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  401fa0:	881b      	ldrh	r3, [r3, #0]
  401fa2:	2b01      	cmp	r3, #1
  401fa4:	d00f      	beq.n	401fc6 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  401fa6:	2100      	movs	r1, #0
  401fa8:	f243 100c 	movw	r0, #12556	; 0x310c
  401fac:	4b0e      	ldr	r3, [pc, #56]	; (401fe8 <sd_mmc_wait_end_of_read_blocks+0x60>)
  401fae:	4798      	blx	r3
  401fb0:	b168      	cbz	r0, 401fce <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  401fb2:	4b0e      	ldr	r3, [pc, #56]	; (401fec <sd_mmc_wait_end_of_read_blocks+0x64>)
  401fb4:	4798      	blx	r3
	return SD_MMC_OK;
  401fb6:	2000      	movs	r0, #0
  401fb8:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  401fba:	4b09      	ldr	r3, [pc, #36]	; (401fe0 <sd_mmc_wait_end_of_read_blocks+0x58>)
  401fbc:	881b      	ldrh	r3, [r3, #0]
  401fbe:	2b00      	cmp	r3, #0
  401fc0:	d0ed      	beq.n	401f9e <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  401fc2:	2000      	movs	r0, #0
}
  401fc4:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  401fc6:	4b09      	ldr	r3, [pc, #36]	; (401fec <sd_mmc_wait_end_of_read_blocks+0x64>)
  401fc8:	4798      	blx	r3
		return SD_MMC_OK;
  401fca:	2000      	movs	r0, #0
  401fcc:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  401fce:	2100      	movs	r1, #0
  401fd0:	f243 100c 	movw	r0, #12556	; 0x310c
  401fd4:	4b04      	ldr	r3, [pc, #16]	; (401fe8 <sd_mmc_wait_end_of_read_blocks+0x60>)
  401fd6:	4798      	blx	r3
  401fd8:	e7eb      	b.n	401fb2 <sd_mmc_wait_end_of_read_blocks+0x2a>
  401fda:	bf00      	nop
  401fdc:	00402749 	.word	0x00402749
  401fe0:	20006110 	.word	0x20006110
  401fe4:	20006112 	.word	0x20006112
  401fe8:	00402635 	.word	0x00402635
  401fec:	004019b1 	.word	0x004019b1

00401ff0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  401ff0:	b570      	push	{r4, r5, r6, lr}
  401ff2:	b082      	sub	sp, #8
  401ff4:	460e      	mov	r6, r1
  401ff6:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  401ff8:	4b11      	ldr	r3, [pc, #68]	; (402040 <sd_mmc_init_write_blocks+0x50>)
  401ffa:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  401ffc:	4604      	mov	r4, r0
  401ffe:	b9c0      	cbnz	r0, 402032 <sd_mmc_init_write_blocks+0x42>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  402000:	4b10      	ldr	r3, [pc, #64]	; (402044 <sd_mmc_init_write_blocks+0x54>)
  402002:	4811      	ldr	r0, [pc, #68]	; (402048 <sd_mmc_init_write_blocks+0x58>)
  402004:	2d01      	cmp	r5, #1
  402006:	bf98      	it	ls
  402008:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40200a:	4b10      	ldr	r3, [pc, #64]	; (40204c <sd_mmc_init_write_blocks+0x5c>)
  40200c:	681b      	ldr	r3, [r3, #0]
  40200e:	7bdb      	ldrb	r3, [r3, #15]
  402010:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  402014:	bf08      	it	eq
  402016:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  402018:	2301      	movs	r3, #1
  40201a:	9300      	str	r3, [sp, #0]
  40201c:	462b      	mov	r3, r5
  40201e:	f44f 7200 	mov.w	r2, #512	; 0x200
  402022:	4631      	mov	r1, r6
  402024:	4e0a      	ldr	r6, [pc, #40]	; (402050 <sd_mmc_init_write_blocks+0x60>)
  402026:	47b0      	blx	r6
  402028:	b130      	cbz	r0, 402038 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  40202a:	4b0a      	ldr	r3, [pc, #40]	; (402054 <sd_mmc_init_write_blocks+0x64>)
  40202c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  40202e:	4b0a      	ldr	r3, [pc, #40]	; (402058 <sd_mmc_init_write_blocks+0x68>)
  402030:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
  402032:	4620      	mov	r0, r4
  402034:	b002      	add	sp, #8
  402036:	bd70      	pop	{r4, r5, r6, pc}
		sd_mmc_deselect_slot();
  402038:	4b08      	ldr	r3, [pc, #32]	; (40205c <sd_mmc_init_write_blocks+0x6c>)
  40203a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  40203c:	2405      	movs	r4, #5
  40203e:	e7f8      	b.n	402032 <sd_mmc_init_write_blocks+0x42>
  402040:	0040182d 	.word	0x0040182d
  402044:	00089118 	.word	0x00089118
  402048:	00109119 	.word	0x00109119
  40204c:	2000610c 	.word	0x2000610c
  402050:	004024ad 	.word	0x004024ad
  402054:	20006110 	.word	0x20006110
  402058:	20006112 	.word	0x20006112
  40205c:	004019b1 	.word	0x004019b1

00402060 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  402060:	b510      	push	{r4, lr}
  402062:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  402064:	4b06      	ldr	r3, [pc, #24]	; (402080 <sd_mmc_start_write_blocks+0x20>)
  402066:	4798      	blx	r3
  402068:	b920      	cbnz	r0, 402074 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  40206a:	2200      	movs	r2, #0
  40206c:	4b05      	ldr	r3, [pc, #20]	; (402084 <sd_mmc_start_write_blocks+0x24>)
  40206e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  402070:	2005      	movs	r0, #5
  402072:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  402074:	4a03      	ldr	r2, [pc, #12]	; (402084 <sd_mmc_start_write_blocks+0x24>)
  402076:	8813      	ldrh	r3, [r2, #0]
  402078:	1b1c      	subs	r4, r3, r4
  40207a:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  40207c:	2000      	movs	r0, #0
}
  40207e:	bd10      	pop	{r4, pc}
  402080:	0040274d 	.word	0x0040274d
  402084:	20006110 	.word	0x20006110

00402088 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  402088:	b510      	push	{r4, lr}
  40208a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  40208c:	4b09      	ldr	r3, [pc, #36]	; (4020b4 <sd_mmc_wait_end_of_write_blocks+0x2c>)
  40208e:	4798      	blx	r3
  402090:	b908      	cbnz	r0, 402096 <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  402092:	2005      	movs	r0, #5
  402094:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  402096:	b134      	cbz	r4, 4020a6 <sd_mmc_wait_end_of_write_blocks+0x1e>
		sd_mmc_nb_block_remaining = 0;
  402098:	2200      	movs	r2, #0
  40209a:	4b07      	ldr	r3, [pc, #28]	; (4020b8 <sd_mmc_wait_end_of_write_blocks+0x30>)
  40209c:	801a      	strh	r2, [r3, #0]
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
  40209e:	4b07      	ldr	r3, [pc, #28]	; (4020bc <sd_mmc_wait_end_of_write_blocks+0x34>)
  4020a0:	4798      	blx	r3
	return SD_MMC_OK;
  4020a2:	2000      	movs	r0, #0
  4020a4:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  4020a6:	4b04      	ldr	r3, [pc, #16]	; (4020b8 <sd_mmc_wait_end_of_write_blocks+0x30>)
  4020a8:	881b      	ldrh	r3, [r3, #0]
  4020aa:	2b00      	cmp	r3, #0
  4020ac:	d0f7      	beq.n	40209e <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  4020ae:	2000      	movs	r0, #0
}
  4020b0:	bd10      	pop	{r4, pc}
  4020b2:	bf00      	nop
  4020b4:	004027cd 	.word	0x004027cd
  4020b8:	20006110 	.word	0x20006110
  4020bc:	004019b1 	.word	0x004019b1

004020c0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  4020c0:	b510      	push	{r4, lr}
  4020c2:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  4020c4:	4b0f      	ldr	r3, [pc, #60]	; (402104 <sd_mmc_test_unit_ready+0x44>)
  4020c6:	4798      	blx	r3
  4020c8:	2801      	cmp	r0, #1
  4020ca:	d018      	beq.n	4020fe <sd_mmc_test_unit_ready+0x3e>
  4020cc:	b118      	cbz	r0, 4020d6 <sd_mmc_test_unit_ready+0x16>
  4020ce:	2802      	cmp	r0, #2
  4020d0:	d010      	beq.n	4020f4 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  4020d2:	2001      	movs	r0, #1
  4020d4:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  4020d6:	4b0c      	ldr	r3, [pc, #48]	; (402108 <sd_mmc_test_unit_ready+0x48>)
  4020d8:	5d1b      	ldrb	r3, [r3, r4]
  4020da:	b10b      	cbz	r3, 4020e0 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  4020dc:	2002      	movs	r0, #2
	}
}
  4020de:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  4020e0:	4620      	mov	r0, r4
  4020e2:	4b0a      	ldr	r3, [pc, #40]	; (40210c <sd_mmc_test_unit_ready+0x4c>)
  4020e4:	4798      	blx	r3
  4020e6:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  4020ea:	2800      	cmp	r0, #0
  4020ec:	bf14      	ite	ne
  4020ee:	2000      	movne	r0, #0
  4020f0:	2002      	moveq	r0, #2
  4020f2:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  4020f4:	2200      	movs	r2, #0
  4020f6:	4b04      	ldr	r3, [pc, #16]	; (402108 <sd_mmc_test_unit_ready+0x48>)
  4020f8:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  4020fa:	2002      	movs	r0, #2
  4020fc:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  4020fe:	2003      	movs	r0, #3
  402100:	bd10      	pop	{r4, pc}
  402102:	bf00      	nop
  402104:	004019f9 	.word	0x004019f9
  402108:	20006118 	.word	0x20006118
  40210c:	00401e91 	.word	0x00401e91

00402110 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  402110:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  402112:	2000      	movs	r0, #0
  402114:	4b01      	ldr	r3, [pc, #4]	; (40211c <sd_mmc_test_unit_ready_0+0xc>)
  402116:	4798      	blx	r3
}
  402118:	bd08      	pop	{r3, pc}
  40211a:	bf00      	nop
  40211c:	004020c1 	.word	0x004020c1

00402120 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  402120:	b538      	push	{r3, r4, r5, lr}
  402122:	4604      	mov	r4, r0
  402124:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  402126:	4b04      	ldr	r3, [pc, #16]	; (402138 <sd_mmc_read_capacity+0x18>)
  402128:	4798      	blx	r3
  40212a:	0040      	lsls	r0, r0, #1
  40212c:	3801      	subs	r0, #1
  40212e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  402130:	4620      	mov	r0, r4
  402132:	4b02      	ldr	r3, [pc, #8]	; (40213c <sd_mmc_read_capacity+0x1c>)
  402134:	4798      	blx	r3
}
  402136:	bd38      	pop	{r3, r4, r5, pc}
  402138:	00401eb5 	.word	0x00401eb5
  40213c:	004020c1 	.word	0x004020c1

00402140 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  402140:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  402142:	4601      	mov	r1, r0
  402144:	2000      	movs	r0, #0
  402146:	4b01      	ldr	r3, [pc, #4]	; (40214c <sd_mmc_read_capacity_0+0xc>)
  402148:	4798      	blx	r3
}
  40214a:	bd08      	pop	{r3, pc}
  40214c:	00402121 	.word	0x00402121

00402150 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  402150:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  402152:	2000      	movs	r0, #0
  402154:	4b01      	ldr	r3, [pc, #4]	; (40215c <sd_mmc_wr_protect_0+0xc>)
  402156:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  402158:	bd08      	pop	{r3, pc}
  40215a:	bf00      	nop
  40215c:	00401ed9 	.word	0x00401ed9

00402160 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  402160:	b510      	push	{r4, lr}
  402162:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  402164:	2201      	movs	r2, #1
  402166:	4b0a      	ldr	r3, [pc, #40]	; (402190 <sd_mmc_mem_2_ram+0x30>)
  402168:	4798      	blx	r3
  40216a:	b120      	cbz	r0, 402176 <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  40216c:	2802      	cmp	r0, #2
  40216e:	bf0c      	ite	eq
  402170:	2002      	moveq	r0, #2
  402172:	2001      	movne	r0, #1
  402174:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  402176:	2101      	movs	r1, #1
  402178:	4620      	mov	r0, r4
  40217a:	4b06      	ldr	r3, [pc, #24]	; (402194 <sd_mmc_mem_2_ram+0x34>)
  40217c:	4798      	blx	r3
  40217e:	b108      	cbz	r0, 402184 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  402180:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  402182:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  402184:	4b04      	ldr	r3, [pc, #16]	; (402198 <sd_mmc_mem_2_ram+0x38>)
  402186:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  402188:	3000      	adds	r0, #0
  40218a:	bf18      	it	ne
  40218c:	2001      	movne	r0, #1
  40218e:	bd10      	pop	{r4, pc}
  402190:	00401edd 	.word	0x00401edd
  402194:	00401f61 	.word	0x00401f61
  402198:	00401f89 	.word	0x00401f89

0040219c <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  40219c:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  40219e:	460a      	mov	r2, r1
  4021a0:	4601      	mov	r1, r0
  4021a2:	2000      	movs	r0, #0
  4021a4:	4b01      	ldr	r3, [pc, #4]	; (4021ac <sd_mmc_mem_2_ram_0+0x10>)
  4021a6:	4798      	blx	r3
}
  4021a8:	bd08      	pop	{r3, pc}
  4021aa:	bf00      	nop
  4021ac:	00402161 	.word	0x00402161

004021b0 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  4021b0:	b510      	push	{r4, lr}
  4021b2:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  4021b4:	2201      	movs	r2, #1
  4021b6:	4b0a      	ldr	r3, [pc, #40]	; (4021e0 <sd_mmc_ram_2_mem+0x30>)
  4021b8:	4798      	blx	r3
  4021ba:	b120      	cbz	r0, 4021c6 <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  4021bc:	2802      	cmp	r0, #2
  4021be:	bf0c      	ite	eq
  4021c0:	2002      	moveq	r0, #2
  4021c2:	2001      	movne	r0, #1
  4021c4:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  4021c6:	2101      	movs	r1, #1
  4021c8:	4620      	mov	r0, r4
  4021ca:	4b06      	ldr	r3, [pc, #24]	; (4021e4 <sd_mmc_ram_2_mem+0x34>)
  4021cc:	4798      	blx	r3
  4021ce:	b108      	cbz	r0, 4021d4 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  4021d0:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  4021d2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  4021d4:	4b04      	ldr	r3, [pc, #16]	; (4021e8 <sd_mmc_ram_2_mem+0x38>)
  4021d6:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  4021d8:	3000      	adds	r0, #0
  4021da:	bf18      	it	ne
  4021dc:	2001      	movne	r0, #1
  4021de:	bd10      	pop	{r4, pc}
  4021e0:	00401ff1 	.word	0x00401ff1
  4021e4:	00402061 	.word	0x00402061
  4021e8:	00402089 	.word	0x00402089

004021ec <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  4021ec:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  4021ee:	460a      	mov	r2, r1
  4021f0:	4601      	mov	r1, r0
  4021f2:	2000      	movs	r0, #0
  4021f4:	4b01      	ldr	r3, [pc, #4]	; (4021fc <sd_mmc_ram_2_mem_0+0x10>)
  4021f6:	4798      	blx	r3
}
  4021f8:	bd08      	pop	{r3, pc}
  4021fa:	bf00      	nop
  4021fc:	004021b1 	.word	0x004021b1

00402200 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
  402200:	b500      	push	{lr}
  402202:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
  402204:	a902      	add	r1, sp, #8
  402206:	23ff      	movs	r3, #255	; 0xff
  402208:	f801 3d01 	strb.w	r3, [r1, #-1]!
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
  40220c:	2201      	movs	r2, #1
  40220e:	480a      	ldr	r0, [pc, #40]	; (402238 <sd_mmc_spi_start_write_block+0x38>)
  402210:	4b0a      	ldr	r3, [pc, #40]	; (40223c <sd_mmc_spi_start_write_block+0x3c>)
  402212:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
  402214:	4b0a      	ldr	r3, [pc, #40]	; (402240 <sd_mmc_spi_start_write_block+0x40>)
  402216:	881b      	ldrh	r3, [r3, #0]
  402218:	2b01      	cmp	r3, #1
		token = SPI_TOKEN_SINGLE_WRITE;
  40221a:	bf0c      	ite	eq
  40221c:	23fe      	moveq	r3, #254	; 0xfe
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
  40221e:	23fc      	movne	r3, #252	; 0xfc
  402220:	f88d 3006 	strb.w	r3, [sp, #6]
	}
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &token, 1);
  402224:	2201      	movs	r2, #1
  402226:	f10d 0106 	add.w	r1, sp, #6
  40222a:	4803      	ldr	r0, [pc, #12]	; (402238 <sd_mmc_spi_start_write_block+0x38>)
  40222c:	4b03      	ldr	r3, [pc, #12]	; (40223c <sd_mmc_spi_start_write_block+0x3c>)
  40222e:	4798      	blx	r3
}
  402230:	b003      	add	sp, #12
  402232:	f85d fb04 	ldr.w	pc, [sp], #4
  402236:	bf00      	nop
  402238:	40008000 	.word	0x40008000
  40223c:	0040297d 	.word	0x0040297d
  402240:	2000611e 	.word	0x2000611e

00402244 <sd_mmc_spi_wait_busy>:
{
  402244:	b570      	push	{r4, r5, r6, lr}
  402246:	b082      	sub	sp, #8
	uint8_t line = 0xFF;
  402248:	ac02      	add	r4, sp, #8
  40224a:	23ff      	movs	r3, #255	; 0xff
  40224c:	f804 3d01 	strb.w	r3, [r4, #-1]!
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  402250:	4e0f      	ldr	r6, [pc, #60]	; (402290 <sd_mmc_spi_wait_busy+0x4c>)
  402252:	2201      	movs	r2, #1
  402254:	4621      	mov	r1, r4
  402256:	4630      	mov	r0, r6
  402258:	4d0e      	ldr	r5, [pc, #56]	; (402294 <sd_mmc_spi_wait_busy+0x50>)
  40225a:	47a8      	blx	r5
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  40225c:	2201      	movs	r2, #1
  40225e:	4621      	mov	r1, r4
  402260:	4630      	mov	r0, r6
  402262:	47a8      	blx	r5
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  402264:	2201      	movs	r2, #1
  402266:	4621      	mov	r1, r4
  402268:	4630      	mov	r0, r6
  40226a:	47a8      	blx	r5
  40226c:	4c0a      	ldr	r4, [pc, #40]	; (402298 <sd_mmc_spi_wait_busy+0x54>)
	} while (line != 0xFF);
  40226e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402272:	2bff      	cmp	r3, #255	; 0xff
  402274:	d008      	beq.n	402288 <sd_mmc_spi_wait_busy+0x44>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  402276:	2201      	movs	r2, #1
  402278:	f10d 0107 	add.w	r1, sp, #7
  40227c:	4630      	mov	r0, r6
  40227e:	47a8      	blx	r5
		if (!(nec_timeout--)) {
  402280:	3c01      	subs	r4, #1
  402282:	d1f4      	bne.n	40226e <sd_mmc_spi_wait_busy+0x2a>
			return false;
  402284:	2000      	movs	r0, #0
  402286:	e000      	b.n	40228a <sd_mmc_spi_wait_busy+0x46>
	return true;
  402288:	2001      	movs	r0, #1
}
  40228a:	b002      	add	sp, #8
  40228c:	bd70      	pop	{r4, r5, r6, pc}
  40228e:	bf00      	nop
  402290:	40008000 	.word	0x40008000
  402294:	004029b1 	.word	0x004029b1
  402298:	00030d40 	.word	0x00030d40

0040229c <sd_mmc_spi_stop_multiwrite_block>:
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
  40229c:	4b16      	ldr	r3, [pc, #88]	; (4022f8 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
  40229e:	881a      	ldrh	r2, [r3, #0]
  4022a0:	2a01      	cmp	r2, #1
  4022a2:	d027      	beq.n	4022f4 <sd_mmc_spi_stop_multiwrite_block+0x58>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
  4022a4:	4b15      	ldr	r3, [pc, #84]	; (4022fc <sd_mmc_spi_stop_multiwrite_block+0x60>)
  4022a6:	8819      	ldrh	r1, [r3, #0]
  4022a8:	4b15      	ldr	r3, [pc, #84]	; (402300 <sd_mmc_spi_stop_multiwrite_block+0x64>)
  4022aa:	681b      	ldr	r3, [r3, #0]
  4022ac:	fbb3 f3f1 	udiv	r3, r3, r1
	if (sd_mmc_spi_nb_block >
  4022b0:	429a      	cmp	r2, r3
  4022b2:	d902      	bls.n	4022ba <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // It is not the End of multi write
  4022b4:	2301      	movs	r3, #1
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
  4022b6:	4618      	mov	r0, r3
  4022b8:	4770      	bx	lr
{
  4022ba:	b570      	push	{r4, r5, r6, lr}
  4022bc:	b082      	sub	sp, #8
	value = 0xFF;
  4022be:	ac02      	add	r4, sp, #8
  4022c0:	23ff      	movs	r3, #255	; 0xff
  4022c2:	f804 3d01 	strb.w	r3, [r4, #-1]!
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
  4022c6:	4e0f      	ldr	r6, [pc, #60]	; (402304 <sd_mmc_spi_stop_multiwrite_block+0x68>)
  4022c8:	2201      	movs	r2, #1
  4022ca:	4621      	mov	r1, r4
  4022cc:	4630      	mov	r0, r6
  4022ce:	4d0e      	ldr	r5, [pc, #56]	; (402308 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
  4022d0:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
  4022d2:	23fd      	movs	r3, #253	; 0xfd
  4022d4:	f88d 3007 	strb.w	r3, [sp, #7]
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
  4022d8:	2201      	movs	r2, #1
  4022da:	4621      	mov	r1, r4
  4022dc:	4630      	mov	r0, r6
  4022de:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
  4022e0:	4b0a      	ldr	r3, [pc, #40]	; (40230c <sd_mmc_spi_stop_multiwrite_block+0x70>)
  4022e2:	4798      	blx	r3
  4022e4:	4603      	mov	r3, r0
  4022e6:	b910      	cbnz	r0, 4022ee <sd_mmc_spi_stop_multiwrite_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  4022e8:	2105      	movs	r1, #5
  4022ea:	4a09      	ldr	r2, [pc, #36]	; (402310 <sd_mmc_spi_stop_multiwrite_block+0x74>)
  4022ec:	7011      	strb	r1, [r2, #0]
}
  4022ee:	4618      	mov	r0, r3
  4022f0:	b002      	add	sp, #8
  4022f2:	bd70      	pop	{r4, r5, r6, pc}
		return true; // Single block write
  4022f4:	2301      	movs	r3, #1
  4022f6:	e7de      	b.n	4022b6 <sd_mmc_spi_stop_multiwrite_block+0x1a>
  4022f8:	2000611e 	.word	0x2000611e
  4022fc:	2000611a 	.word	0x2000611a
  402300:	20006124 	.word	0x20006124
  402304:	40008000 	.word	0x40008000
  402308:	0040297d 	.word	0x0040297d
  40230c:	00402245 	.word	0x00402245
  402310:	2000611c 	.word	0x2000611c

00402314 <sd_mmc_spi_start_read_block>:
{
  402314:	b5f0      	push	{r4, r5, r6, r7, lr}
  402316:	b083      	sub	sp, #12
	token = 0;
  402318:	ad02      	add	r5, sp, #8
  40231a:	2300      	movs	r3, #0
  40231c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402320:	4c10      	ldr	r4, [pc, #64]	; (402364 <sd_mmc_spi_start_read_block+0x50>)
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &token, 1);
  402322:	4f11      	ldr	r7, [pc, #68]	; (402368 <sd_mmc_spi_start_read_block+0x54>)
  402324:	4e11      	ldr	r6, [pc, #68]	; (40236c <sd_mmc_spi_start_read_block+0x58>)
  402326:	2201      	movs	r2, #1
  402328:	4629      	mov	r1, r5
  40232a:	4638      	mov	r0, r7
  40232c:	47b0      	blx	r6
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
  40232e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402332:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  402336:	d008      	beq.n	40234a <sd_mmc_spi_start_read_block+0x36>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
  402338:	2bfe      	cmp	r3, #254	; 0xfe
  40233a:	d010      	beq.n	40235e <sd_mmc_spi_start_read_block+0x4a>
		if (i-- == 0) {
  40233c:	3c01      	subs	r4, #1
  40233e:	d1f2      	bne.n	402326 <sd_mmc_spi_start_read_block+0x12>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
  402340:	2204      	movs	r2, #4
  402342:	4b0b      	ldr	r3, [pc, #44]	; (402370 <sd_mmc_spi_start_read_block+0x5c>)
  402344:	701a      	strb	r2, [r3, #0]
			return false;
  402346:	2000      	movs	r0, #0
  402348:	e007      	b.n	40235a <sd_mmc_spi_start_read_block+0x46>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
  40234a:	f013 0f07 	tst.w	r3, #7
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
  40234e:	bf14      	ite	ne
  402350:	2207      	movne	r2, #7
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
  402352:	220b      	moveq	r2, #11
  402354:	4b06      	ldr	r3, [pc, #24]	; (402370 <sd_mmc_spi_start_read_block+0x5c>)
  402356:	701a      	strb	r2, [r3, #0]
			return false;
  402358:	2000      	movs	r0, #0
}
  40235a:	b003      	add	sp, #12
  40235c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
  40235e:	2001      	movs	r0, #1
  402360:	e7fb      	b.n	40235a <sd_mmc_spi_start_read_block+0x46>
  402362:	bf00      	nop
  402364:	0007a120 	.word	0x0007a120
  402368:	40008000 	.word	0x40008000
  40236c:	004029b1 	.word	0x004029b1
  402370:	2000611c 	.word	0x2000611c

00402374 <sd_mmc_spi_stop_write_block>:
{
  402374:	b510      	push	{r4, lr}
  402376:	b082      	sub	sp, #8
	crc = 0xFFFF; /// CRC is disabled in SPI mode
  402378:	a902      	add	r1, sp, #8
  40237a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40237e:	f821 3d04 	strh.w	r3, [r1, #-4]!
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, (uint8_t *)&crc, 2);
  402382:	4c12      	ldr	r4, [pc, #72]	; (4023cc <sd_mmc_spi_stop_write_block+0x58>)
  402384:	2202      	movs	r2, #2
  402386:	4620      	mov	r0, r4
  402388:	4b11      	ldr	r3, [pc, #68]	; (4023d0 <sd_mmc_spi_stop_write_block+0x5c>)
  40238a:	4798      	blx	r3
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &resp, 1);
  40238c:	2201      	movs	r2, #1
  40238e:	f10d 0107 	add.w	r1, sp, #7
  402392:	4620      	mov	r0, r4
  402394:	4b0f      	ldr	r3, [pc, #60]	; (4023d4 <sd_mmc_spi_stop_write_block+0x60>)
  402396:	4798      	blx	r3
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
  402398:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40239c:	f003 0211 	and.w	r2, r3, #17
  4023a0:	2a01      	cmp	r2, #1
  4023a2:	d005      	beq.n	4023b0 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
  4023a4:	2201      	movs	r2, #1
  4023a6:	4b0c      	ldr	r3, [pc, #48]	; (4023d8 <sd_mmc_spi_stop_write_block+0x64>)
  4023a8:	701a      	strb	r2, [r3, #0]
		return false;
  4023aa:	2000      	movs	r0, #0
}
  4023ac:	b002      	add	sp, #8
  4023ae:	bd10      	pop	{r4, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
  4023b0:	f003 031e 	and.w	r3, r3, #30
  4023b4:	2b04      	cmp	r3, #4
  4023b6:	d007      	beq.n	4023c8 <sd_mmc_spi_stop_write_block+0x54>
  4023b8:	2b0a      	cmp	r3, #10
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
  4023ba:	bf0c      	ite	eq
  4023bc:	2208      	moveq	r2, #8
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
  4023be:	220a      	movne	r2, #10
  4023c0:	4b05      	ldr	r3, [pc, #20]	; (4023d8 <sd_mmc_spi_stop_write_block+0x64>)
  4023c2:	701a      	strb	r2, [r3, #0]
		return false;
  4023c4:	2000      	movs	r0, #0
  4023c6:	e7f1      	b.n	4023ac <sd_mmc_spi_stop_write_block+0x38>
	return true;
  4023c8:	2001      	movs	r0, #1
  4023ca:	e7ef      	b.n	4023ac <sd_mmc_spi_stop_write_block+0x38>
  4023cc:	40008000 	.word	0x40008000
  4023d0:	0040297d 	.word	0x0040297d
  4023d4:	004029b1 	.word	0x004029b1
  4023d8:	2000611c 	.word	0x2000611c

004023dc <sd_mmc_spi_init>:
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4023dc:	2200      	movs	r2, #0
  4023de:	4b08      	ldr	r3, [pc, #32]	; (402400 <sd_mmc_spi_init+0x24>)
  4023e0:	701a      	strb	r2, [r3, #0]
	if (p_spi->SPI_SR & SPI_SR_SPIENS) {
  4023e2:	4b08      	ldr	r3, [pc, #32]	; (402404 <sd_mmc_spi_init+0x28>)
  4023e4:	691b      	ldr	r3, [r3, #16]
	// Initialize SPI interface and enable it
#if defined(SD_MMC_SPI_USES_USART_SPI_SERVICE)
		usart_spi_init(SD_MMC_SPI);
#else
	if (!spi_is_enabled(SD_MMC_SPI)) {
  4023e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4023ea:	d000      	beq.n	4023ee <sd_mmc_spi_init+0x12>
  4023ec:	4770      	bx	lr
{
  4023ee:	b510      	push	{r4, lr}
		spi_master_init(SD_MMC_SPI);
  4023f0:	4c04      	ldr	r4, [pc, #16]	; (402404 <sd_mmc_spi_init+0x28>)
  4023f2:	4620      	mov	r0, r4
  4023f4:	4b04      	ldr	r3, [pc, #16]	; (402408 <sd_mmc_spi_init+0x2c>)
  4023f6:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4023f8:	2301      	movs	r3, #1
  4023fa:	6023      	str	r3, [r4, #0]
  4023fc:	bd10      	pop	{r4, pc}
  4023fe:	bf00      	nop
  402400:	2000611c 	.word	0x2000611c
  402404:	40008000 	.word	0x40008000
  402408:	00402859 	.word	0x00402859

0040240c <sd_mmc_spi_select_device>:
#endif
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
  40240c:	b570      	push	{r4, r5, r6, lr}
  40240e:	b082      	sub	sp, #8
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  402410:	2200      	movs	r2, #0
  402412:	4b09      	ldr	r3, [pc, #36]	; (402438 <sd_mmc_spi_select_device+0x2c>)
  402414:	701a      	strb	r2, [r3, #0]
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif

	sd_mmc_spi_drv_setup_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot],
  402416:	4c09      	ldr	r4, [pc, #36]	; (40243c <sd_mmc_spi_select_device+0x30>)
  402418:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  40241c:	4d08      	ldr	r5, [pc, #32]	; (402440 <sd_mmc_spi_select_device+0x34>)
  40241e:	9200      	str	r2, [sp, #0]
  402420:	460b      	mov	r3, r1
  402422:	4621      	mov	r1, r4
  402424:	4628      	mov	r0, r5
  402426:	4e07      	ldr	r6, [pc, #28]	; (402444 <sd_mmc_spi_select_device+0x38>)
  402428:	47b0      	blx	r6
			SPI_MODE_0, clock, 0);
	sd_mmc_spi_drv_select_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  40242a:	4621      	mov	r1, r4
  40242c:	4628      	mov	r0, r5
  40242e:	4b06      	ldr	r3, [pc, #24]	; (402448 <sd_mmc_spi_select_device+0x3c>)
  402430:	4798      	blx	r3
}
  402432:	b002      	add	sp, #8
  402434:	bd70      	pop	{r4, r5, r6, pc}
  402436:	bf00      	nop
  402438:	2000611c 	.word	0x2000611c
  40243c:	2000047c 	.word	0x2000047c
  402440:	40008000 	.word	0x40008000
  402444:	004028ad 	.word	0x004028ad
  402448:	0040292d 	.word	0x0040292d

0040244c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
  40244c:	b508      	push	{r3, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  40244e:	2200      	movs	r2, #0
  402450:	4b04      	ldr	r3, [pc, #16]	; (402464 <sd_mmc_spi_deselect_device+0x18>)
  402452:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_drv_deselect_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  402454:	4904      	ldr	r1, [pc, #16]	; (402468 <sd_mmc_spi_deselect_device+0x1c>)
  402456:	eb01 0180 	add.w	r1, r1, r0, lsl #2
  40245a:	4804      	ldr	r0, [pc, #16]	; (40246c <sd_mmc_spi_deselect_device+0x20>)
  40245c:	4b04      	ldr	r3, [pc, #16]	; (402470 <sd_mmc_spi_deselect_device+0x24>)
  40245e:	4798      	blx	r3
  402460:	bd08      	pop	{r3, pc}
  402462:	bf00      	nop
  402464:	2000611c 	.word	0x2000611c
  402468:	2000047c 	.word	0x2000047c
  40246c:	40008000 	.word	0x40008000
  402470:	0040295d 	.word	0x0040295d

00402474 <sd_mmc_spi_send_clock>:
}

void sd_mmc_spi_send_clock(void)
{
  402474:	b5f0      	push	{r4, r5, r6, r7, lr}
  402476:	b083      	sub	sp, #12
	uint8_t i;
	uint8_t dummy = 0xFF;
  402478:	ad02      	add	r5, sp, #8
  40247a:	23ff      	movs	r3, #255	; 0xff
  40247c:	f805 3d01 	strb.w	r3, [r5, #-1]!

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  402480:	2200      	movs	r2, #0
  402482:	4b07      	ldr	r3, [pc, #28]	; (4024a0 <sd_mmc_spi_send_clock+0x2c>)
  402484:	701a      	strb	r2, [r3, #0]
  402486:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
  402488:	4f06      	ldr	r7, [pc, #24]	; (4024a4 <sd_mmc_spi_send_clock+0x30>)
  40248a:	4e07      	ldr	r6, [pc, #28]	; (4024a8 <sd_mmc_spi_send_clock+0x34>)
  40248c:	2201      	movs	r2, #1
  40248e:	4629      	mov	r1, r5
  402490:	4638      	mov	r0, r7
  402492:	47b0      	blx	r6
  402494:	1e63      	subs	r3, r4, #1
	for (i = 0; i < 10; i++) {
  402496:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40249a:	d1f7      	bne.n	40248c <sd_mmc_spi_send_clock+0x18>
	}
}
  40249c:	b003      	add	sp, #12
  40249e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4024a0:	2000611c 	.word	0x2000611c
  4024a4:	40008000 	.word	0x40008000
  4024a8:	0040297d 	.word	0x0040297d

004024ac <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4024ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4024b0:	b085      	sub	sp, #20
  4024b2:	4604      	mov	r4, r0
  4024b4:	4691      	mov	r9, r2
  4024b6:	4698      	mov	r8, r3
	uint8_t dummy = 0xFF;
  4024b8:	23ff      	movs	r3, #255	; 0xff
  4024ba:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4024be:	2300      	movs	r3, #0
  4024c0:	4a53      	ldr	r2, [pc, #332]	; (402610 <sd_mmc_spi_adtc_start+0x164>)
  4024c2:	7013      	strb	r3, [r2, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
  4024c4:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  4024c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4024cc:	f88d 2008 	strb.w	r2, [sp, #8]
	cmd_token[1] = arg >> 24;
  4024d0:	0e0a      	lsrs	r2, r1, #24
  4024d2:	f88d 2009 	strb.w	r2, [sp, #9]
	cmd_token[2] = arg >> 16;
  4024d6:	0c0a      	lsrs	r2, r1, #16
  4024d8:	f88d 200a 	strb.w	r2, [sp, #10]
	cmd_token[3] = arg >> 8;
  4024dc:	0a0a      	lsrs	r2, r1, #8
  4024de:	f88d 200b 	strb.w	r2, [sp, #11]
	cmd_token[4] = arg;
  4024e2:	f88d 100c 	strb.w	r1, [sp, #12]
  4024e6:	af02      	add	r7, sp, #8
		value = *buf++;
  4024e8:	f04f 0c08 	mov.w	ip, #8
	while (size--) {
  4024ec:	f10d 0e0d 	add.w	lr, sp, #13
  4024f0:	e001      	b.n	4024f6 <sd_mmc_spi_adtc_start+0x4a>
  4024f2:	4577      	cmp	r7, lr
  4024f4:	d012      	beq.n	40251c <sd_mmc_spi_adtc_start+0x70>
		value = *buf++;
  4024f6:	f817 1b01 	ldrb.w	r1, [r7], #1
  4024fa:	4662      	mov	r2, ip
			crc <<= 1;
  4024fc:	005b      	lsls	r3, r3, #1
  4024fe:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
  402500:	ea83 0001 	eor.w	r0, r3, r1
  402504:	f010 0f80 	tst.w	r0, #128	; 0x80
				crc ^= 0x09;
  402508:	bf18      	it	ne
  40250a:	f083 0309 	eorne.w	r3, r3, #9
			value <<= 1;
  40250e:	0049      	lsls	r1, r1, #1
  402510:	b2c9      	uxtb	r1, r1
  402512:	3a01      	subs	r2, #1
		for (i = 0; i < 8; i++) {
  402514:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  402518:	d1f0      	bne.n	4024fc <sd_mmc_spi_adtc_start+0x50>
  40251a:	e7ea      	b.n	4024f2 <sd_mmc_spi_adtc_start+0x46>
	crc = (crc << 1) | 1;
  40251c:	005b      	lsls	r3, r3, #1
  40251e:	f043 0301 	orr.w	r3, r3, #1
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
  402522:	f88d 300d 	strb.w	r3, [sp, #13]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
  402526:	4f3b      	ldr	r7, [pc, #236]	; (402614 <sd_mmc_spi_adtc_start+0x168>)
  402528:	2201      	movs	r2, #1
  40252a:	f10d 010f 	add.w	r1, sp, #15
  40252e:	4638      	mov	r0, r7
  402530:	4d39      	ldr	r5, [pc, #228]	; (402618 <sd_mmc_spi_adtc_start+0x16c>)
  402532:	47a8      	blx	r5
	// Send command
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, cmd_token, sizeof(cmd_token));
  402534:	2206      	movs	r2, #6
  402536:	a902      	add	r1, sp, #8
  402538:	4638      	mov	r0, r7
  40253a:	47a8      	blx	r5

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
  40253c:	a904      	add	r1, sp, #16
  40253e:	23ff      	movs	r3, #255	; 0xff
  402540:	f801 3d09 	strb.w	r3, [r1, #-9]!
	// Ignore first byte because Ncr min. = 8 clock cylces
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1);
  402544:	2201      	movs	r2, #1
  402546:	4638      	mov	r0, r7
  402548:	4b34      	ldr	r3, [pc, #208]	; (40261c <sd_mmc_spi_adtc_start+0x170>)
  40254a:	4798      	blx	r3
  40254c:	2707      	movs	r7, #7
	ncr_timeout = 7;
	while (1) {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1); // 8 cycles
  40254e:	4e31      	ldr	r6, [pc, #196]	; (402614 <sd_mmc_spi_adtc_start+0x168>)
  402550:	4d32      	ldr	r5, [pc, #200]	; (40261c <sd_mmc_spi_adtc_start+0x170>)
  402552:	2201      	movs	r2, #1
  402554:	f10d 0107 	add.w	r1, sp, #7
  402558:	4630      	mov	r0, r6
  40255a:	47a8      	blx	r5
		if ((r1 & R1_SPI_ERROR) == 0) {
  40255c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402560:	f013 0f80 	tst.w	r3, #128	; 0x80
  402564:	d00b      	beq.n	40257e <sd_mmc_spi_adtc_start+0xd2>
  402566:	1e7b      	subs	r3, r7, #1
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
  402568:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  40256c:	d1f1      	bne.n	402552 <sd_mmc_spi_adtc_start+0xa6>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
  40256e:	2202      	movs	r2, #2
  402570:	4b27      	ldr	r3, [pc, #156]	; (402610 <sd_mmc_spi_adtc_start+0x164>)
  402572:	701a      	strb	r2, [r3, #0]
			return false;
  402574:	2300      	movs	r3, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
  402576:	4618      	mov	r0, r3
  402578:	b005      	add	sp, #20
  40257a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_spi_response_32 = r1;
  40257e:	4a28      	ldr	r2, [pc, #160]	; (402620 <sd_mmc_spi_adtc_start+0x174>)
  402580:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
  402582:	f013 0f08 	tst.w	r3, #8
  402586:	d119      	bne.n	4025bc <sd_mmc_spi_adtc_start+0x110>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
  402588:	f013 0f04 	tst.w	r3, #4
  40258c:	d11b      	bne.n	4025c6 <sd_mmc_spi_adtc_start+0x11a>
	if (r1 & ~R1_SPI_IDLE) {
  40258e:	f033 0301 	bics.w	r3, r3, #1
  402592:	d11d      	bne.n	4025d0 <sd_mmc_spi_adtc_start+0x124>
	if (cmd & SDMMC_RESP_BUSY) {
  402594:	f414 5f00 	tst.w	r4, #8192	; 0x2000
  402598:	d11f      	bne.n	4025da <sd_mmc_spi_adtc_start+0x12e>
	if (cmd & SDMMC_RESP_8) {
  40259a:	f414 7f00 	tst.w	r4, #512	; 0x200
  40259e:	d125      	bne.n	4025ec <sd_mmc_spi_adtc_start+0x140>
	if (cmd & SDMMC_RESP_32) {
  4025a0:	f414 6f80 	tst.w	r4, #1024	; 0x400
  4025a4:	d12a      	bne.n	4025fc <sd_mmc_spi_adtc_start+0x150>
	sd_mmc_spi_block_size = block_size;
  4025a6:	4b1f      	ldr	r3, [pc, #124]	; (402624 <sd_mmc_spi_adtc_start+0x178>)
  4025a8:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_spi_nb_block = nb_block;
  4025ac:	4b1e      	ldr	r3, [pc, #120]	; (402628 <sd_mmc_spi_adtc_start+0x17c>)
  4025ae:	f8a3 8000 	strh.w	r8, [r3]
	sd_mmc_spi_transfert_pos = 0;
  4025b2:	2200      	movs	r2, #0
  4025b4:	4b1d      	ldr	r3, [pc, #116]	; (40262c <sd_mmc_spi_adtc_start+0x180>)
  4025b6:	601a      	str	r2, [r3, #0]
	return true; // Command complete
  4025b8:	2301      	movs	r3, #1
  4025ba:	e7dc      	b.n	402576 <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
  4025bc:	2206      	movs	r2, #6
  4025be:	4b14      	ldr	r3, [pc, #80]	; (402610 <sd_mmc_spi_adtc_start+0x164>)
  4025c0:	701a      	strb	r2, [r3, #0]
		return false;
  4025c2:	2300      	movs	r3, #0
  4025c4:	e7d7      	b.n	402576 <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
  4025c6:	2209      	movs	r2, #9
  4025c8:	4b11      	ldr	r3, [pc, #68]	; (402610 <sd_mmc_spi_adtc_start+0x164>)
  4025ca:	701a      	strb	r2, [r3, #0]
		return false;
  4025cc:	2300      	movs	r3, #0
  4025ce:	e7d2      	b.n	402576 <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
  4025d0:	2201      	movs	r2, #1
  4025d2:	4b0f      	ldr	r3, [pc, #60]	; (402610 <sd_mmc_spi_adtc_start+0x164>)
  4025d4:	701a      	strb	r2, [r3, #0]
		return false;
  4025d6:	2300      	movs	r3, #0
  4025d8:	e7cd      	b.n	402576 <sd_mmc_spi_adtc_start+0xca>
		if (!sd_mmc_spi_wait_busy()) {
  4025da:	4b15      	ldr	r3, [pc, #84]	; (402630 <sd_mmc_spi_adtc_start+0x184>)
  4025dc:	4798      	blx	r3
  4025de:	4603      	mov	r3, r0
  4025e0:	2800      	cmp	r0, #0
  4025e2:	d1da      	bne.n	40259a <sd_mmc_spi_adtc_start+0xee>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
  4025e4:	2103      	movs	r1, #3
  4025e6:	4a0a      	ldr	r2, [pc, #40]	; (402610 <sd_mmc_spi_adtc_start+0x164>)
  4025e8:	7011      	strb	r1, [r2, #0]
			return false;
  4025ea:	e7c4      	b.n	402576 <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_response_32 = 0;
  4025ec:	490c      	ldr	r1, [pc, #48]	; (402620 <sd_mmc_spi_adtc_start+0x174>)
  4025ee:	2300      	movs	r3, #0
  4025f0:	600b      	str	r3, [r1, #0]
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 1);
  4025f2:	2201      	movs	r2, #1
  4025f4:	4807      	ldr	r0, [pc, #28]	; (402614 <sd_mmc_spi_adtc_start+0x168>)
  4025f6:	4b09      	ldr	r3, [pc, #36]	; (40261c <sd_mmc_spi_adtc_start+0x170>)
  4025f8:	4798      	blx	r3
  4025fa:	e7d1      	b.n	4025a0 <sd_mmc_spi_adtc_start+0xf4>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 4);
  4025fc:	4c08      	ldr	r4, [pc, #32]	; (402620 <sd_mmc_spi_adtc_start+0x174>)
  4025fe:	2204      	movs	r2, #4
  402600:	4621      	mov	r1, r4
  402602:	4804      	ldr	r0, [pc, #16]	; (402614 <sd_mmc_spi_adtc_start+0x168>)
  402604:	4b05      	ldr	r3, [pc, #20]	; (40261c <sd_mmc_spi_adtc_start+0x170>)
  402606:	4798      	blx	r3
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
  402608:	6823      	ldr	r3, [r4, #0]
  40260a:	ba1b      	rev	r3, r3
  40260c:	6023      	str	r3, [r4, #0]
  40260e:	e7ca      	b.n	4025a6 <sd_mmc_spi_adtc_start+0xfa>
  402610:	2000611c 	.word	0x2000611c
  402614:	40008000 	.word	0x40008000
  402618:	0040297d 	.word	0x0040297d
  40261c:	004029b1 	.word	0x004029b1
  402620:	20006120 	.word	0x20006120
  402624:	2000611a 	.word	0x2000611a
  402628:	2000611e 	.word	0x2000611e
  40262c:	20006124 	.word	0x20006124
  402630:	00402245 	.word	0x00402245

00402634 <sd_mmc_spi_send_cmd>:
{
  402634:	b510      	push	{r4, lr}
  402636:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
  402638:	2200      	movs	r2, #0
  40263a:	9200      	str	r2, [sp, #0]
  40263c:	4613      	mov	r3, r2
  40263e:	4c02      	ldr	r4, [pc, #8]	; (402648 <sd_mmc_spi_send_cmd+0x14>)
  402640:	47a0      	blx	r4
}
  402642:	b002      	add	sp, #8
  402644:	bd10      	pop	{r4, pc}
  402646:	bf00      	nop
  402648:	004024ad 	.word	0x004024ad

0040264c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
}
  40264c:	4b01      	ldr	r3, [pc, #4]	; (402654 <sd_mmc_spi_get_response+0x8>)
  40264e:	6818      	ldr	r0, [r3, #0]
  402650:	4770      	bx	lr
  402652:	bf00      	nop
  402654:	20006120 	.word	0x20006120

00402658 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
  402658:	b510      	push	{r4, lr}
  40265a:	b082      	sub	sp, #8
  40265c:	4604      	mov	r4, r0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  40265e:	2200      	movs	r2, #0
  402660:	4b14      	ldr	r3, [pc, #80]	; (4026b4 <sd_mmc_spi_read_word+0x5c>)
  402662:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  402664:	4b14      	ldr	r3, [pc, #80]	; (4026b8 <sd_mmc_spi_read_word+0x60>)
  402666:	881a      	ldrh	r2, [r3, #0]
  402668:	4b14      	ldr	r3, [pc, #80]	; (4026bc <sd_mmc_spi_read_word+0x64>)
  40266a:	6819      	ldr	r1, [r3, #0]
  40266c:	fbb1 f3f2 	udiv	r3, r1, r2
  402670:	fb02 1313 	mls	r3, r2, r3, r1
  402674:	b91b      	cbnz	r3, 40267e <sd_mmc_spi_read_word+0x26>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
  402676:	4b12      	ldr	r3, [pc, #72]	; (4026c0 <sd_mmc_spi_read_word+0x68>)
  402678:	4798      	blx	r3
  40267a:	4603      	mov	r3, r0
  40267c:	b180      	cbz	r0, 4026a0 <sd_mmc_spi_read_word+0x48>
			return false;
		}
	}
	// Read data
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*)value, 4);
  40267e:	2204      	movs	r2, #4
  402680:	4621      	mov	r1, r4
  402682:	4810      	ldr	r0, [pc, #64]	; (4026c4 <sd_mmc_spi_read_word+0x6c>)
  402684:	4b10      	ldr	r3, [pc, #64]	; (4026c8 <sd_mmc_spi_read_word+0x70>)
  402686:	4798      	blx	r3
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
  402688:	4a0c      	ldr	r2, [pc, #48]	; (4026bc <sd_mmc_spi_read_word+0x64>)
  40268a:	6813      	ldr	r3, [r2, #0]
  40268c:	3304      	adds	r3, #4
  40268e:	6013      	str	r3, [r2, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  402690:	4a09      	ldr	r2, [pc, #36]	; (4026b8 <sd_mmc_spi_read_word+0x60>)
  402692:	8811      	ldrh	r1, [r2, #0]
  402694:	fbb3 f2f1 	udiv	r2, r3, r1
  402698:	fb01 3312 	mls	r3, r1, r2, r3
  40269c:	b11b      	cbz	r3, 4026a6 <sd_mmc_spi_read_word+0x4e>
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
  40269e:	2301      	movs	r3, #1
}
  4026a0:	4618      	mov	r0, r3
  4026a2:	b002      	add	sp, #8
  4026a4:	bd10      	pop	{r4, pc}
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  4026a6:	2202      	movs	r2, #2
  4026a8:	a901      	add	r1, sp, #4
  4026aa:	4806      	ldr	r0, [pc, #24]	; (4026c4 <sd_mmc_spi_read_word+0x6c>)
  4026ac:	4b06      	ldr	r3, [pc, #24]	; (4026c8 <sd_mmc_spi_read_word+0x70>)
  4026ae:	4798      	blx	r3
	return true;
  4026b0:	2301      	movs	r3, #1
  4026b2:	e7f5      	b.n	4026a0 <sd_mmc_spi_read_word+0x48>
  4026b4:	2000611c 	.word	0x2000611c
  4026b8:	2000611a 	.word	0x2000611a
  4026bc:	20006124 	.word	0x20006124
  4026c0:	00402315 	.word	0x00402315
  4026c4:	40008000 	.word	0x40008000
  4026c8:	004029b1 	.word	0x004029b1

004026cc <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
  4026cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026d0:	b083      	sub	sp, #12
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4026d2:	2200      	movs	r2, #0
  4026d4:	4b16      	ldr	r3, [pc, #88]	; (402730 <sd_mmc_spi_start_read_blocks+0x64>)
  4026d6:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
  4026d8:	b339      	cbz	r1, 40272a <sd_mmc_spi_start_read_blocks+0x5e>
  4026da:	1e4c      	subs	r4, r1, #1
  4026dc:	b2a4      	uxth	r4, r4
  4026de:	4681      	mov	r9, r0
  4026e0:	4615      	mov	r5, r2
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
  4026e2:	f8df b05c 	ldr.w	fp, [pc, #92]	; 402740 <sd_mmc_spi_start_read_blocks+0x74>
			return false;
		}

		// Read block
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  4026e6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 402744 <sd_mmc_spi_start_read_blocks+0x78>
  4026ea:	4f12      	ldr	r7, [pc, #72]	; (402734 <sd_mmc_spi_start_read_blocks+0x68>)
		if (!sd_mmc_spi_start_read_block()) {
  4026ec:	47d8      	blx	fp
  4026ee:	4682      	mov	sl, r0
  4026f0:	b1b8      	cbz	r0, 402722 <sd_mmc_spi_start_read_blocks+0x56>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  4026f2:	f8b8 2000 	ldrh.w	r2, [r8]
  4026f6:	eb09 0105 	add.w	r1, r9, r5
  4026fa:	4638      	mov	r0, r7
  4026fc:	4e0e      	ldr	r6, [pc, #56]	; (402738 <sd_mmc_spi_start_read_blocks+0x6c>)
  4026fe:	47b0      	blx	r6
		pos += sd_mmc_spi_block_size;
  402700:	f8b8 1000 	ldrh.w	r1, [r8]
  402704:	440d      	add	r5, r1
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
  402706:	4a0d      	ldr	r2, [pc, #52]	; (40273c <sd_mmc_spi_start_read_blocks+0x70>)
  402708:	6813      	ldr	r3, [r2, #0]
  40270a:	440b      	add	r3, r1
  40270c:	6013      	str	r3, [r2, #0]
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  40270e:	2202      	movs	r2, #2
  402710:	a901      	add	r1, sp, #4
  402712:	4638      	mov	r0, r7
  402714:	47b0      	blx	r6
	while (nb_block--) {
  402716:	3c01      	subs	r4, #1
  402718:	b2a4      	uxth	r4, r4
  40271a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40271e:	429c      	cmp	r4, r3
  402720:	d1e4      	bne.n	4026ec <sd_mmc_spi_start_read_blocks+0x20>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
  402722:	4650      	mov	r0, sl
  402724:	b003      	add	sp, #12
  402726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
  40272a:	f04f 0a01 	mov.w	sl, #1
  40272e:	e7f8      	b.n	402722 <sd_mmc_spi_start_read_blocks+0x56>
  402730:	2000611c 	.word	0x2000611c
  402734:	40008000 	.word	0x40008000
  402738:	004029b1 	.word	0x004029b1
  40273c:	20006124 	.word	0x20006124
  402740:	00402315 	.word	0x00402315
  402744:	2000611a 	.word	0x2000611a

00402748 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
  402748:	2001      	movs	r0, #1
  40274a:	4770      	bx	lr

0040274c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
  40274c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402750:	4681      	mov	r9, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  402752:	2500      	movs	r5, #0
  402754:	4b15      	ldr	r3, [pc, #84]	; (4027ac <sd_mmc_spi_start_write_blocks+0x60>)
  402756:	701d      	strb	r5, [r3, #0]
	pos = 0;
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
  402758:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4027c8 <sd_mmc_spi_start_write_blocks+0x7c>

		// Write block
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &((uint8_t*)src)[pos], sd_mmc_spi_block_size);
  40275c:	4e14      	ldr	r6, [pc, #80]	; (4027b0 <sd_mmc_spi_start_write_blocks+0x64>)
  40275e:	4f15      	ldr	r7, [pc, #84]	; (4027b4 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
  402760:	e000      	b.n	402764 <sd_mmc_spi_start_write_blocks+0x18>
{
  402762:	4621      	mov	r1, r4
	while (nb_block--) {
  402764:	1e4c      	subs	r4, r1, #1
  402766:	b2a4      	uxth	r4, r4
  402768:	b1d9      	cbz	r1, 4027a2 <sd_mmc_spi_start_write_blocks+0x56>
		sd_mmc_spi_start_write_block();
  40276a:	47c0      	blx	r8
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &((uint8_t*)src)[pos], sd_mmc_spi_block_size);
  40276c:	8832      	ldrh	r2, [r6, #0]
  40276e:	eb09 0105 	add.w	r1, r9, r5
  402772:	4638      	mov	r0, r7
  402774:	4b10      	ldr	r3, [pc, #64]	; (4027b8 <sd_mmc_spi_start_write_blocks+0x6c>)
  402776:	4798      	blx	r3
		pos += sd_mmc_spi_block_size;
  402778:	8831      	ldrh	r1, [r6, #0]
  40277a:	440d      	add	r5, r1
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
  40277c:	4a0f      	ldr	r2, [pc, #60]	; (4027bc <sd_mmc_spi_start_write_blocks+0x70>)
  40277e:	6813      	ldr	r3, [r2, #0]
  402780:	440b      	add	r3, r1
  402782:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
  402784:	4b0e      	ldr	r3, [pc, #56]	; (4027c0 <sd_mmc_spi_start_write_blocks+0x74>)
  402786:	4798      	blx	r3
  402788:	4603      	mov	r3, r0
  40278a:	b158      	cbz	r0, 4027a4 <sd_mmc_spi_start_write_blocks+0x58>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
  40278c:	2c00      	cmp	r4, #0
  40278e:	d0e8      	beq.n	402762 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
  402790:	4b0c      	ldr	r3, [pc, #48]	; (4027c4 <sd_mmc_spi_start_write_blocks+0x78>)
  402792:	4798      	blx	r3
  402794:	4603      	mov	r3, r0
  402796:	2800      	cmp	r0, #0
  402798:	d1e3      	bne.n	402762 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  40279a:	2105      	movs	r1, #5
  40279c:	4a03      	ldr	r2, [pc, #12]	; (4027ac <sd_mmc_spi_start_write_blocks+0x60>)
  40279e:	7011      	strb	r1, [r2, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
  4027a0:	e000      	b.n	4027a4 <sd_mmc_spi_start_write_blocks+0x58>
			}
		}
	}
	return true;
  4027a2:	2301      	movs	r3, #1
}
  4027a4:	4618      	mov	r0, r3
  4027a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4027aa:	bf00      	nop
  4027ac:	2000611c 	.word	0x2000611c
  4027b0:	2000611a 	.word	0x2000611a
  4027b4:	40008000 	.word	0x40008000
  4027b8:	0040297d 	.word	0x0040297d
  4027bc:	20006124 	.word	0x20006124
  4027c0:	00402375 	.word	0x00402375
  4027c4:	00402245 	.word	0x00402245
  4027c8:	00402201 	.word	0x00402201

004027cc <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
  4027cc:	b508      	push	{r3, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
  4027ce:	4b06      	ldr	r3, [pc, #24]	; (4027e8 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
  4027d0:	4798      	blx	r3
  4027d2:	b928      	cbnz	r0, 4027e0 <sd_mmc_spi_wait_end_of_write_blocks+0x14>
  4027d4:	4603      	mov	r3, r0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  4027d6:	2105      	movs	r1, #5
  4027d8:	4a04      	ldr	r2, [pc, #16]	; (4027ec <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
  4027da:	7011      	strb	r1, [r2, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
  4027dc:	4618      	mov	r0, r3
  4027de:	bd08      	pop	{r3, pc}
	return sd_mmc_spi_stop_multiwrite_block();
  4027e0:	4b03      	ldr	r3, [pc, #12]	; (4027f0 <sd_mmc_spi_wait_end_of_write_blocks+0x24>)
  4027e2:	4798      	blx	r3
  4027e4:	4603      	mov	r3, r0
  4027e6:	e7f9      	b.n	4027dc <sd_mmc_spi_wait_end_of_write_blocks+0x10>
  4027e8:	00402245 	.word	0x00402245
  4027ec:	2000611c 	.word	0x2000611c
  4027f0:	0040229d 	.word	0x0040229d

004027f4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4027f4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4027f6:	480e      	ldr	r0, [pc, #56]	; (402830 <sysclk_init+0x3c>)
  4027f8:	4b0e      	ldr	r3, [pc, #56]	; (402834 <sysclk_init+0x40>)
  4027fa:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4027fc:	213e      	movs	r1, #62	; 0x3e
  4027fe:	2000      	movs	r0, #0
  402800:	4b0d      	ldr	r3, [pc, #52]	; (402838 <sysclk_init+0x44>)
  402802:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402804:	4c0d      	ldr	r4, [pc, #52]	; (40283c <sysclk_init+0x48>)
  402806:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402808:	2800      	cmp	r0, #0
  40280a:	d0fc      	beq.n	402806 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40280c:	4b0c      	ldr	r3, [pc, #48]	; (402840 <sysclk_init+0x4c>)
  40280e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402810:	4a0c      	ldr	r2, [pc, #48]	; (402844 <sysclk_init+0x50>)
  402812:	4b0d      	ldr	r3, [pc, #52]	; (402848 <sysclk_init+0x54>)
  402814:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  402816:	4c0d      	ldr	r4, [pc, #52]	; (40284c <sysclk_init+0x58>)
  402818:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40281a:	2800      	cmp	r0, #0
  40281c:	d0fc      	beq.n	402818 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40281e:	2010      	movs	r0, #16
  402820:	4b0b      	ldr	r3, [pc, #44]	; (402850 <sysclk_init+0x5c>)
  402822:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402824:	4b0b      	ldr	r3, [pc, #44]	; (402854 <sysclk_init+0x60>)
  402826:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402828:	4801      	ldr	r0, [pc, #4]	; (402830 <sysclk_init+0x3c>)
  40282a:	4b02      	ldr	r3, [pc, #8]	; (402834 <sysclk_init+0x40>)
  40282c:	4798      	blx	r3
  40282e:	bd10      	pop	{r4, pc}
  402830:	07270e00 	.word	0x07270e00
  402834:	00403a19 	.word	0x00403a19
  402838:	004030c5 	.word	0x004030c5
  40283c:	00403119 	.word	0x00403119
  402840:	00403129 	.word	0x00403129
  402844:	20133f01 	.word	0x20133f01
  402848:	400e0400 	.word	0x400e0400
  40284c:	00403139 	.word	0x00403139
  402850:	0040301d 	.word	0x0040301d
  402854:	00403909 	.word	0x00403909

00402858 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  402858:	b510      	push	{r4, lr}
  40285a:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  40285c:	4b10      	ldr	r3, [pc, #64]	; (4028a0 <spi_master_init+0x48>)
  40285e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  402860:	2380      	movs	r3, #128	; 0x80
  402862:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  402864:	6863      	ldr	r3, [r4, #4]
  402866:	f043 0301 	orr.w	r3, r3, #1
  40286a:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40286c:	6863      	ldr	r3, [r4, #4]
  40286e:	f043 0310 	orr.w	r3, r3, #16
  402872:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  402874:	6863      	ldr	r3, [r4, #4]
  402876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40287a:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  40287c:	2100      	movs	r1, #0
  40287e:	4620      	mov	r0, r4
  402880:	4b08      	ldr	r3, [pc, #32]	; (4028a4 <spi_master_init+0x4c>)
  402882:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  402884:	6863      	ldr	r3, [r4, #4]
  402886:	f023 0302 	bic.w	r3, r3, #2
  40288a:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  40288c:	6863      	ldr	r3, [r4, #4]
  40288e:	f023 0304 	bic.w	r3, r3, #4
  402892:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  402894:	2100      	movs	r1, #0
  402896:	4620      	mov	r0, r4
  402898:	4b03      	ldr	r3, [pc, #12]	; (4028a8 <spi_master_init+0x50>)
  40289a:	4798      	blx	r3
  40289c:	bd10      	pop	{r4, pc}
  40289e:	bf00      	nop
  4028a0:	004033cd 	.word	0x004033cd
  4028a4:	004033dd 	.word	0x004033dd
  4028a8:	004033f3 	.word	0x004033f3

004028ac <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4028ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4028b0:	4604      	mov	r4, r0
  4028b2:	460d      	mov	r5, r1
  4028b4:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  4028b6:	4915      	ldr	r1, [pc, #84]	; (40290c <spi_master_setup_device+0x60>)
  4028b8:	4618      	mov	r0, r3
  4028ba:	4b15      	ldr	r3, [pc, #84]	; (402910 <spi_master_setup_device+0x64>)
  4028bc:	4798      	blx	r3
  4028be:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  4028c0:	2300      	movs	r3, #0
  4028c2:	461a      	mov	r2, r3
  4028c4:	6829      	ldr	r1, [r5, #0]
  4028c6:	4620      	mov	r0, r4
  4028c8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 402928 <spi_master_setup_device+0x7c>
  4028cc:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  4028ce:	2208      	movs	r2, #8
  4028d0:	6829      	ldr	r1, [r5, #0]
  4028d2:	4620      	mov	r0, r4
  4028d4:	4b0f      	ldr	r3, [pc, #60]	; (402914 <spi_master_setup_device+0x68>)
  4028d6:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  4028d8:	b2fa      	uxtb	r2, r7
  4028da:	6829      	ldr	r1, [r5, #0]
  4028dc:	4620      	mov	r0, r4
  4028de:	4b0e      	ldr	r3, [pc, #56]	; (402918 <spi_master_setup_device+0x6c>)
  4028e0:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  4028e2:	2208      	movs	r2, #8
  4028e4:	6829      	ldr	r1, [r5, #0]
  4028e6:	4620      	mov	r0, r4
  4028e8:	4b0c      	ldr	r3, [pc, #48]	; (40291c <spi_master_setup_device+0x70>)
  4028ea:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  4028ec:	0872      	lsrs	r2, r6, #1
  4028ee:	6829      	ldr	r1, [r5, #0]
  4028f0:	4620      	mov	r0, r4
  4028f2:	4b0b      	ldr	r3, [pc, #44]	; (402920 <spi_master_setup_device+0x74>)
  4028f4:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  4028f6:	f086 0201 	eor.w	r2, r6, #1
  4028fa:	f002 0201 	and.w	r2, r2, #1
  4028fe:	6829      	ldr	r1, [r5, #0]
  402900:	4620      	mov	r0, r4
  402902:	4b08      	ldr	r3, [pc, #32]	; (402924 <spi_master_setup_device+0x78>)
  402904:	4798      	blx	r3
  402906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40290a:	bf00      	nop
  40290c:	07270e00 	.word	0x07270e00
  402910:	0040349b 	.word	0x0040349b
  402914:	00403487 	.word	0x00403487
  402918:	004034b1 	.word	0x004034b1
  40291c:	00403441 	.word	0x00403441
  402920:	00403405 	.word	0x00403405
  402924:	00403423 	.word	0x00403423
  402928:	004034d7 	.word	0x004034d7

0040292c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  40292c:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  40292e:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  402930:	f013 0f04 	tst.w	r3, #4
  402934:	d006      	beq.n	402944 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  402936:	6809      	ldr	r1, [r1, #0]
  402938:	290f      	cmp	r1, #15
  40293a:	d900      	bls.n	40293e <spi_select_device+0x12>
  40293c:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  40293e:	4b06      	ldr	r3, [pc, #24]	; (402958 <spi_select_device+0x2c>)
  402940:	4798      	blx	r3
  402942:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  402944:	6809      	ldr	r1, [r1, #0]
  402946:	2903      	cmp	r1, #3
  402948:	d8f8      	bhi.n	40293c <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  40294a:	2301      	movs	r3, #1
  40294c:	fa03 f101 	lsl.w	r1, r3, r1
  402950:	43c9      	mvns	r1, r1
  402952:	4b01      	ldr	r3, [pc, #4]	; (402958 <spi_select_device+0x2c>)
  402954:	4798      	blx	r3
		}
	}
}
  402956:	e7f1      	b.n	40293c <spi_select_device+0x10>
  402958:	004033dd 	.word	0x004033dd

0040295c <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  40295c:	b510      	push	{r4, lr}
  40295e:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  402960:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  402962:	f413 7f00 	tst.w	r3, #512	; 0x200
  402966:	d0fb      	beq.n	402960 <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  402968:	210f      	movs	r1, #15
  40296a:	4620      	mov	r0, r4
  40296c:	4b02      	ldr	r3, [pc, #8]	; (402978 <spi_deselect_device+0x1c>)
  40296e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  402970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  402974:	6023      	str	r3, [r4, #0]
  402976:	bd10      	pop	{r4, pc}
  402978:	004033dd 	.word	0x004033dd

0040297c <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  40297c:	b11a      	cbz	r2, 402986 <spi_write_packet+0xa>
{
  40297e:	b410      	push	{r4}
  402980:	460c      	mov	r4, r1
  402982:	4411      	add	r1, r2
  402984:	e006      	b.n	402994 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  402986:	2000      	movs	r0, #0
  402988:	4770      	bx	lr
		val = data[i];
  40298a:	f814 3b01 	ldrb.w	r3, [r4], #1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40298e:	60c3      	str	r3, [r0, #12]
	while (len) {
  402990:	42a1      	cmp	r1, r4
  402992:	d00b      	beq.n	4029ac <spi_write_packet+0x30>
{
  402994:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  402998:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  40299a:	f012 0f02 	tst.w	r2, #2
  40299e:	d1f4      	bne.n	40298a <spi_write_packet+0xe>
			if (!timeout--) {
  4029a0:	3b01      	subs	r3, #1
  4029a2:	d1f9      	bne.n	402998 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  4029a4:	f06f 0002 	mvn.w	r0, #2
}
  4029a8:	bc10      	pop	{r4}
  4029aa:	4770      	bx	lr
	return STATUS_OK;
  4029ac:	2000      	movs	r0, #0
  4029ae:	e7fb      	b.n	4029a8 <spi_write_packet+0x2c>

004029b0 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  4029b0:	b13a      	cbz	r2, 4029c2 <spi_read_packet+0x12>
{
  4029b2:	b470      	push	{r4, r5, r6}
  4029b4:	4615      	mov	r5, r2
  4029b6:	460c      	mov	r4, r1
  4029b8:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4029ba:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4029bc:	f240 2101 	movw	r1, #513	; 0x201
  4029c0:	e012      	b.n	4029e8 <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  4029c2:	2000      	movs	r0, #0
  4029c4:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4029c6:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  4029c8:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4029cc:	6902      	ldr	r2, [r0, #16]
  4029ce:	ea31 0202 	bics.w	r2, r1, r2
  4029d2:	d004      	beq.n	4029de <spi_read_packet+0x2e>
			if (!timeout--) {
  4029d4:	3b01      	subs	r3, #1
  4029d6:	d1f9      	bne.n	4029cc <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  4029d8:	f06f 0002 	mvn.w	r0, #2
  4029dc:	e00e      	b.n	4029fc <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  4029de:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  4029e0:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  4029e4:	42a5      	cmp	r5, r4
  4029e6:	d00b      	beq.n	402a00 <spi_read_packet+0x50>
{
  4029e8:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4029ec:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  4029ee:	f012 0f02 	tst.w	r2, #2
  4029f2:	d1e8      	bne.n	4029c6 <spi_read_packet+0x16>
			if (!timeout--) {
  4029f4:	3b01      	subs	r3, #1
  4029f6:	d1f9      	bne.n	4029ec <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  4029f8:	f06f 0002 	mvn.w	r0, #2
}
  4029fc:	bc70      	pop	{r4, r5, r6}
  4029fe:	4770      	bx	lr
	return STATUS_OK;
  402a00:	2000      	movs	r0, #0
  402a02:	e7fb      	b.n	4029fc <spi_read_packet+0x4c>

00402a04 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  402a04:	b108      	cbz	r0, 402a0a <mem_test_unit_ready+0x6>
  402a06:	2001      	movs	r0, #1
  402a08:	4770      	bx	lr
{
  402a0a:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  402a0c:	4b01      	ldr	r3, [pc, #4]	; (402a14 <mem_test_unit_ready+0x10>)
  402a0e:	4798      	blx	r3
  402a10:	bd08      	pop	{r3, pc}
  402a12:	bf00      	nop
  402a14:	00402111 	.word	0x00402111

00402a18 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  402a18:	b108      	cbz	r0, 402a1e <mem_read_capacity+0x6>
  402a1a:	2001      	movs	r0, #1
  402a1c:	4770      	bx	lr
{
  402a1e:	b508      	push	{r3, lr}
  402a20:	4608      	mov	r0, r1
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  402a22:	4b01      	ldr	r3, [pc, #4]	; (402a28 <mem_read_capacity+0x10>)
  402a24:	4798      	blx	r3
  402a26:	bd08      	pop	{r3, pc}
  402a28:	00402141 	.word	0x00402141

00402a2c <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  402a2c:	fab0 f080 	clz	r0, r0
  402a30:	0940      	lsrs	r0, r0, #5
  402a32:	4770      	bx	lr

00402a34 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  402a34:	b108      	cbz	r0, 402a3a <mem_wr_protect+0x6>
  402a36:	2001      	movs	r0, #1
  402a38:	4770      	bx	lr
{
  402a3a:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  402a3c:	4b01      	ldr	r3, [pc, #4]	; (402a44 <mem_wr_protect+0x10>)
  402a3e:	4798      	blx	r3
  402a40:	bd08      	pop	{r3, pc}
  402a42:	bf00      	nop
  402a44:	00402151 	.word	0x00402151

00402a48 <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  402a48:	b108      	cbz	r0, 402a4e <memory_2_ram+0x6>
  402a4a:	2001      	movs	r0, #1
  402a4c:	4770      	bx	lr
{
  402a4e:	b508      	push	{r3, lr}
  402a50:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  402a52:	4611      	mov	r1, r2
  402a54:	4b01      	ldr	r3, [pc, #4]	; (402a5c <memory_2_ram+0x14>)
  402a56:	4798      	blx	r3
  402a58:	bd08      	pop	{r3, pc}
  402a5a:	bf00      	nop
  402a5c:	0040219d 	.word	0x0040219d

00402a60 <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  402a60:	b108      	cbz	r0, 402a66 <ram_2_memory+0x6>
  402a62:	2001      	movs	r0, #1
  402a64:	4770      	bx	lr
{
  402a66:	b508      	push	{r3, lr}
  402a68:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  402a6a:	4611      	mov	r1, r2
  402a6c:	4b01      	ldr	r3, [pc, #4]	; (402a74 <ram_2_memory+0x14>)
  402a6e:	4798      	blx	r3
  402a70:	bd08      	pop	{r3, pc}
  402a72:	bf00      	nop
  402a74:	004021ed 	.word	0x004021ed

00402a78 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  402a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  402a7a:	4838      	ldr	r0, [pc, #224]	; (402b5c <board_init+0xe4>)
  402a7c:	4b38      	ldr	r3, [pc, #224]	; (402b60 <board_init+0xe8>)
  402a7e:	4798      	blx	r3
  402a80:	200b      	movs	r0, #11
  402a82:	4c38      	ldr	r4, [pc, #224]	; (402b64 <board_init+0xec>)
  402a84:	47a0      	blx	r4
  402a86:	200c      	movs	r0, #12
  402a88:	47a0      	blx	r4
  402a8a:	200d      	movs	r0, #13
  402a8c:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402a8e:	4b36      	ldr	r3, [pc, #216]	; (402b68 <board_init+0xf0>)
  402a90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  402a94:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402a96:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402a98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402a9c:	4c33      	ldr	r4, [pc, #204]	; (402b6c <board_init+0xf4>)
  402a9e:	2504      	movs	r5, #4
  402aa0:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402aa2:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  402aa6:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402aa8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402aac:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402aae:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402ab0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402ab4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  402ab6:	f022 0204 	bic.w	r2, r2, #4
  402aba:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402abc:	6f62      	ldr	r2, [r4, #116]	; 0x74
  402abe:	f022 0204 	bic.w	r2, r2, #4
  402ac2:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402ac4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402ac8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402aca:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402acc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402ad0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  402ad4:	6322      	str	r2, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402ad6:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402ad8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402adc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402ae0:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402ae2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402ae4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  402ae8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  402aec:	210c      	movs	r1, #12
  402aee:	4820      	ldr	r0, [pc, #128]	; (402b70 <board_init+0xf8>)
  402af0:	4b20      	ldr	r3, [pc, #128]	; (402b74 <board_init+0xfc>)
  402af2:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  402af4:	4f20      	ldr	r7, [pc, #128]	; (402b78 <board_init+0x100>)
  402af6:	4639      	mov	r1, r7
  402af8:	2003      	movs	r0, #3
  402afa:	4e20      	ldr	r6, [pc, #128]	; (402b7c <board_init+0x104>)
  402afc:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  402afe:	4639      	mov	r1, r7
  402b00:	4628      	mov	r0, r5
  402b02:	47b0      	blx	r6
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  402b04:	4639      	mov	r1, r7
  402b06:	200c      	movs	r0, #12
  402b08:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  402b0a:	4639      	mov	r1, r7
  402b0c:	200d      	movs	r0, #13
  402b0e:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  402b10:	4639      	mov	r1, r7
  402b12:	200e      	movs	r0, #14
  402b14:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  402b16:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402b1a:	2009      	movs	r0, #9
  402b1c:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  402b1e:	4918      	ldr	r1, [pc, #96]	; (402b80 <board_init+0x108>)
  402b20:	200a      	movs	r0, #10
  402b22:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  402b24:	f107 5740 	add.w	r7, r7, #805306368	; 0x30000000
  402b28:	4639      	mov	r1, r7
  402b2a:	2055      	movs	r0, #85	; 0x55
  402b2c:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  402b2e:	4639      	mov	r1, r7
  402b30:	205f      	movs	r0, #95	; 0x5f
  402b32:	47b0      	blx	r6
#endif

#ifdef CONF_BOARD_SD_MMC_SPI
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  402b34:	4913      	ldr	r1, [pc, #76]	; (402b84 <board_init+0x10c>)
  402b36:	204c      	movs	r0, #76	; 0x4c
  402b38:	47b0      	blx	r6
		base->PIO_PUER = mask;
  402b3a:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402b3c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402b40:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402b42:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402b44:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402b48:	6f23      	ldr	r3, [r4, #112]	; 0x70
  402b4a:	f023 0304 	bic.w	r3, r3, #4
  402b4e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402b50:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402b52:	f023 0304 	bic.w	r3, r3, #4
  402b56:	6763      	str	r3, [r4, #116]	; 0x74
  402b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b5a:	bf00      	nop
  402b5c:	400e1450 	.word	0x400e1450
  402b60:	00403851 	.word	0x00403851
  402b64:	00403149 	.word	0x00403149
  402b68:	400e1200 	.word	0x400e1200
  402b6c:	400e0e00 	.word	0x400e0e00
  402b70:	400e1000 	.word	0x400e1000
  402b74:	00402ea1 	.word	0x00402ea1
  402b78:	08000001 	.word	0x08000001
  402b7c:	00402d81 	.word	0x00402d81
  402b80:	10000001 	.word	0x10000001
  402b84:	28000001 	.word	0x28000001

00402b88 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  402b88:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  402b8a:	2401      	movs	r4, #1
  402b8c:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  402b8e:	2400      	movs	r4, #0
  402b90:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  402b92:	f240 2502 	movw	r5, #514	; 0x202
  402b96:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  402b9a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  402b9e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  402ba2:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  402ba4:	0052      	lsls	r2, r2, #1
  402ba6:	fbb1 f2f2 	udiv	r2, r1, r2
  402baa:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  402bac:	0212      	lsls	r2, r2, #8
  402bae:	b292      	uxth	r2, r2
  402bb0:	432b      	orrs	r3, r5
  402bb2:	431a      	orrs	r2, r3
  402bb4:	6042      	str	r2, [r0, #4]
	return 0;
}
  402bb6:	4620      	mov	r0, r4
  402bb8:	bc30      	pop	{r4, r5}
  402bba:	4770      	bx	lr

00402bbc <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  402bbc:	6843      	ldr	r3, [r0, #4]
  402bbe:	01d2      	lsls	r2, r2, #7
  402bc0:	b2d2      	uxtb	r2, r2
  402bc2:	4319      	orrs	r1, r3
  402bc4:	430a      	orrs	r2, r1
  402bc6:	6042      	str	r2, [r0, #4]
  402bc8:	4770      	bx	lr

00402bca <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  402bca:	2302      	movs	r3, #2
  402bcc:	6003      	str	r3, [r0, #0]
  402bce:	4770      	bx	lr

00402bd0 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  402bd0:	2301      	movs	r3, #1
  402bd2:	fa03 f101 	lsl.w	r1, r3, r1
  402bd6:	6101      	str	r1, [r0, #16]
  402bd8:	4770      	bx	lr

00402bda <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
  402bda:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
  402bdc:	bf9a      	itte	ls
  402bde:	3050      	addls	r0, #80	; 0x50
  402be0:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
	uint32_t ul_data = 0;
  402be4:	2000      	movhi	r0, #0
	}

	return ul_data;
}
  402be6:	4770      	bx	lr

00402be8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402be8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402bea:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402bee:	d039      	beq.n	402c64 <pio_set_peripheral+0x7c>
  402bf0:	d813      	bhi.n	402c1a <pio_set_peripheral+0x32>
  402bf2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402bf6:	d025      	beq.n	402c44 <pio_set_peripheral+0x5c>
  402bf8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402bfc:	d10a      	bne.n	402c14 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402bfe:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402c00:	4313      	orrs	r3, r2
  402c02:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402c04:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402c06:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402c08:	400b      	ands	r3, r1
  402c0a:	ea23 0302 	bic.w	r3, r3, r2
  402c0e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402c10:	6042      	str	r2, [r0, #4]
  402c12:	4770      	bx	lr
	switch (ul_type) {
  402c14:	2900      	cmp	r1, #0
  402c16:	d1fb      	bne.n	402c10 <pio_set_peripheral+0x28>
  402c18:	4770      	bx	lr
  402c1a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402c1e:	d020      	beq.n	402c62 <pio_set_peripheral+0x7a>
  402c20:	d809      	bhi.n	402c36 <pio_set_peripheral+0x4e>
  402c22:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402c26:	d1f3      	bne.n	402c10 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402c28:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402c2a:	4313      	orrs	r3, r2
  402c2c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402c2e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402c30:	4313      	orrs	r3, r2
  402c32:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402c34:	e7ec      	b.n	402c10 <pio_set_peripheral+0x28>
	switch (ul_type) {
  402c36:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402c3a:	d012      	beq.n	402c62 <pio_set_peripheral+0x7a>
  402c3c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402c40:	d00f      	beq.n	402c62 <pio_set_peripheral+0x7a>
  402c42:	e7e5      	b.n	402c10 <pio_set_peripheral+0x28>
{
  402c44:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  402c46:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402c48:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402c4a:	43d3      	mvns	r3, r2
  402c4c:	4021      	ands	r1, r4
  402c4e:	461c      	mov	r4, r3
  402c50:	4019      	ands	r1, r3
  402c52:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402c54:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402c56:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402c58:	400b      	ands	r3, r1
  402c5a:	4023      	ands	r3, r4
  402c5c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  402c5e:	6042      	str	r2, [r0, #4]
}
  402c60:	bc10      	pop	{r4}
  402c62:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  402c64:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402c66:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402c68:	400b      	ands	r3, r1
  402c6a:	ea23 0302 	bic.w	r3, r3, r2
  402c6e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402c70:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402c72:	4313      	orrs	r3, r2
  402c74:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402c76:	e7cb      	b.n	402c10 <pio_set_peripheral+0x28>

00402c78 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402c78:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402c7a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  402c7e:	bf14      	ite	ne
  402c80:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402c82:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402c84:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  402c88:	bf14      	ite	ne
  402c8a:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  402c8c:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  402c8e:	f012 0f02 	tst.w	r2, #2
  402c92:	d107      	bne.n	402ca4 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  402c94:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  402c98:	bf18      	it	ne
  402c9a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  402c9e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402ca0:	6001      	str	r1, [r0, #0]
  402ca2:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  402ca4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402ca8:	e7f9      	b.n	402c9e <pio_set_input+0x26>

00402caa <pio_set_output>:
{
  402caa:	b410      	push	{r4}
  402cac:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  402cae:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402cb0:	b944      	cbnz	r4, 402cc4 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  402cb2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  402cb4:	b143      	cbz	r3, 402cc8 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  402cb6:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  402cb8:	b942      	cbnz	r2, 402ccc <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  402cba:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  402cbc:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402cbe:	6001      	str	r1, [r0, #0]
}
  402cc0:	bc10      	pop	{r4}
  402cc2:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  402cc4:	6641      	str	r1, [r0, #100]	; 0x64
  402cc6:	e7f5      	b.n	402cb4 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  402cc8:	6541      	str	r1, [r0, #84]	; 0x54
  402cca:	e7f5      	b.n	402cb8 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  402ccc:	6301      	str	r1, [r0, #48]	; 0x30
  402cce:	e7f5      	b.n	402cbc <pio_set_output+0x12>

00402cd0 <pio_configure>:
{
  402cd0:	b570      	push	{r4, r5, r6, lr}
  402cd2:	b082      	sub	sp, #8
  402cd4:	4605      	mov	r5, r0
  402cd6:	4616      	mov	r6, r2
  402cd8:	461c      	mov	r4, r3
	switch (ul_type) {
  402cda:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402cde:	d014      	beq.n	402d0a <pio_configure+0x3a>
  402ce0:	d90a      	bls.n	402cf8 <pio_configure+0x28>
  402ce2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402ce6:	d022      	beq.n	402d2e <pio_configure+0x5e>
  402ce8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402cec:	d01f      	beq.n	402d2e <pio_configure+0x5e>
  402cee:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402cf2:	d016      	beq.n	402d22 <pio_configure+0x52>
		return 0;
  402cf4:	2000      	movs	r0, #0
  402cf6:	e012      	b.n	402d1e <pio_configure+0x4e>
	switch (ul_type) {
  402cf8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402cfc:	d005      	beq.n	402d0a <pio_configure+0x3a>
  402cfe:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402d02:	d002      	beq.n	402d0a <pio_configure+0x3a>
  402d04:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402d08:	d1f4      	bne.n	402cf4 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402d0a:	4632      	mov	r2, r6
  402d0c:	4628      	mov	r0, r5
  402d0e:	4b10      	ldr	r3, [pc, #64]	; (402d50 <pio_configure+0x80>)
  402d10:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402d12:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  402d16:	bf14      	ite	ne
  402d18:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402d1a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  402d1c:	2001      	movs	r0, #1
}
  402d1e:	b002      	add	sp, #8
  402d20:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_attribute);
  402d22:	461a      	mov	r2, r3
  402d24:	4631      	mov	r1, r6
  402d26:	4b0b      	ldr	r3, [pc, #44]	; (402d54 <pio_configure+0x84>)
  402d28:	4798      	blx	r3
	return 1;
  402d2a:	2001      	movs	r0, #1
		break;
  402d2c:	e7f7      	b.n	402d1e <pio_configure+0x4e>
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402d2e:	f004 0301 	and.w	r3, r4, #1
  402d32:	9300      	str	r3, [sp, #0]
  402d34:	f3c4 0380 	ubfx	r3, r4, #2, #1
  402d38:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402d3c:	bf14      	ite	ne
  402d3e:	2200      	movne	r2, #0
  402d40:	2201      	moveq	r2, #1
  402d42:	4631      	mov	r1, r6
  402d44:	4628      	mov	r0, r5
  402d46:	4c04      	ldr	r4, [pc, #16]	; (402d58 <pio_configure+0x88>)
  402d48:	47a0      	blx	r4
	return 1;
  402d4a:	2001      	movs	r0, #1
		break;
  402d4c:	e7e7      	b.n	402d1e <pio_configure+0x4e>
  402d4e:	bf00      	nop
  402d50:	00402be9 	.word	0x00402be9
  402d54:	00402c79 	.word	0x00402c79
  402d58:	00402cab 	.word	0x00402cab

00402d5c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402d5c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402d5e:	4770      	bx	lr

00402d60 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402d60:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402d62:	4770      	bx	lr

00402d64 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402d64:	0943      	lsrs	r3, r0, #5
  402d66:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402d6a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402d6e:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  402d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  402d72:	f000 001f 	and.w	r0, r0, #31
  402d76:	fa23 f000 	lsr.w	r0, r3, r0
}
  402d7a:	f000 0001 	and.w	r0, r0, #1
  402d7e:	4770      	bx	lr

00402d80 <pio_configure_pin>:
{
  402d80:	b570      	push	{r4, r5, r6, lr}
  402d82:	b082      	sub	sp, #8
  402d84:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402d86:	0943      	lsrs	r3, r0, #5
  402d88:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402d8c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402d90:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  402d92:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  402d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402d9a:	d053      	beq.n	402e44 <pio_configure_pin+0xc4>
  402d9c:	d80a      	bhi.n	402db4 <pio_configure_pin+0x34>
  402d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402da2:	d02d      	beq.n	402e00 <pio_configure_pin+0x80>
  402da4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402da8:	d03b      	beq.n	402e22 <pio_configure_pin+0xa2>
  402daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402dae:	d015      	beq.n	402ddc <pio_configure_pin+0x5c>
		return 0;
  402db0:	2000      	movs	r0, #0
  402db2:	e023      	b.n	402dfc <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  402db4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402db8:	d055      	beq.n	402e66 <pio_configure_pin+0xe6>
  402dba:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402dbe:	d052      	beq.n	402e66 <pio_configure_pin+0xe6>
  402dc0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402dc4:	d1f4      	bne.n	402db0 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402dc6:	f000 011f 	and.w	r1, r0, #31
  402dca:	2601      	movs	r6, #1
  402dcc:	462a      	mov	r2, r5
  402dce:	fa06 f101 	lsl.w	r1, r6, r1
  402dd2:	4620      	mov	r0, r4
  402dd4:	4b2f      	ldr	r3, [pc, #188]	; (402e94 <pio_configure_pin+0x114>)
  402dd6:	4798      	blx	r3
	return 1;
  402dd8:	4630      	mov	r0, r6
		break;
  402dda:	e00f      	b.n	402dfc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402ddc:	f000 001f 	and.w	r0, r0, #31
  402de0:	2601      	movs	r6, #1
  402de2:	4086      	lsls	r6, r0
  402de4:	4632      	mov	r2, r6
  402de6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402dea:	4620      	mov	r0, r4
  402dec:	4b2a      	ldr	r3, [pc, #168]	; (402e98 <pio_configure_pin+0x118>)
  402dee:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402df0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402df4:	bf14      	ite	ne
  402df6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402df8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  402dfa:	2001      	movs	r0, #1
}
  402dfc:	b002      	add	sp, #8
  402dfe:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402e00:	f000 001f 	and.w	r0, r0, #31
  402e04:	2601      	movs	r6, #1
  402e06:	4086      	lsls	r6, r0
  402e08:	4632      	mov	r2, r6
  402e0a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402e0e:	4620      	mov	r0, r4
  402e10:	4b21      	ldr	r3, [pc, #132]	; (402e98 <pio_configure_pin+0x118>)
  402e12:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402e14:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402e18:	bf14      	ite	ne
  402e1a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402e1c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  402e1e:	2001      	movs	r0, #1
  402e20:	e7ec      	b.n	402dfc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402e22:	f000 001f 	and.w	r0, r0, #31
  402e26:	2601      	movs	r6, #1
  402e28:	4086      	lsls	r6, r0
  402e2a:	4632      	mov	r2, r6
  402e2c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402e30:	4620      	mov	r0, r4
  402e32:	4b19      	ldr	r3, [pc, #100]	; (402e98 <pio_configure_pin+0x118>)
  402e34:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402e36:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402e3a:	bf14      	ite	ne
  402e3c:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402e3e:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  402e40:	2001      	movs	r0, #1
  402e42:	e7db      	b.n	402dfc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402e44:	f000 001f 	and.w	r0, r0, #31
  402e48:	2601      	movs	r6, #1
  402e4a:	4086      	lsls	r6, r0
  402e4c:	4632      	mov	r2, r6
  402e4e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402e52:	4620      	mov	r0, r4
  402e54:	4b10      	ldr	r3, [pc, #64]	; (402e98 <pio_configure_pin+0x118>)
  402e56:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402e58:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402e5c:	bf14      	ite	ne
  402e5e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402e60:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  402e62:	2001      	movs	r0, #1
  402e64:	e7ca      	b.n	402dfc <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402e66:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402e6a:	f000 011f 	and.w	r1, r0, #31
  402e6e:	2601      	movs	r6, #1
  402e70:	ea05 0306 	and.w	r3, r5, r6
  402e74:	9300      	str	r3, [sp, #0]
  402e76:	f3c5 0380 	ubfx	r3, r5, #2, #1
  402e7a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402e7e:	bf14      	ite	ne
  402e80:	2200      	movne	r2, #0
  402e82:	2201      	moveq	r2, #1
  402e84:	fa06 f101 	lsl.w	r1, r6, r1
  402e88:	4620      	mov	r0, r4
  402e8a:	4c04      	ldr	r4, [pc, #16]	; (402e9c <pio_configure_pin+0x11c>)
  402e8c:	47a0      	blx	r4
	return 1;
  402e8e:	4630      	mov	r0, r6
		break;
  402e90:	e7b4      	b.n	402dfc <pio_configure_pin+0x7c>
  402e92:	bf00      	nop
  402e94:	00402c79 	.word	0x00402c79
  402e98:	00402be9 	.word	0x00402be9
  402e9c:	00402cab 	.word	0x00402cab

00402ea0 <pio_configure_pin_group>:
{
  402ea0:	b570      	push	{r4, r5, r6, lr}
  402ea2:	b082      	sub	sp, #8
  402ea4:	4605      	mov	r5, r0
  402ea6:	460e      	mov	r6, r1
  402ea8:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  402eaa:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  402eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402eb2:	d03d      	beq.n	402f30 <pio_configure_pin_group+0x90>
  402eb4:	d80a      	bhi.n	402ecc <pio_configure_pin_group+0x2c>
  402eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402eba:	d021      	beq.n	402f00 <pio_configure_pin_group+0x60>
  402ebc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402ec0:	d02a      	beq.n	402f18 <pio_configure_pin_group+0x78>
  402ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402ec6:	d00e      	beq.n	402ee6 <pio_configure_pin_group+0x46>
		return 0;
  402ec8:	2000      	movs	r0, #0
  402eca:	e017      	b.n	402efc <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  402ecc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402ed0:	d03a      	beq.n	402f48 <pio_configure_pin_group+0xa8>
  402ed2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402ed6:	d037      	beq.n	402f48 <pio_configure_pin_group+0xa8>
  402ed8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402edc:	d1f4      	bne.n	402ec8 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  402ede:	4b23      	ldr	r3, [pc, #140]	; (402f6c <pio_configure_pin_group+0xcc>)
  402ee0:	4798      	blx	r3
	return 1;
  402ee2:	2001      	movs	r0, #1
		break;
  402ee4:	e00a      	b.n	402efc <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  402ee6:	460a      	mov	r2, r1
  402ee8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402eec:	4b20      	ldr	r3, [pc, #128]	; (402f70 <pio_configure_pin_group+0xd0>)
  402eee:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402ef0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  402ef4:	bf14      	ite	ne
  402ef6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402ef8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  402efa:	2001      	movs	r0, #1
}
  402efc:	b002      	add	sp, #8
  402efe:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  402f00:	460a      	mov	r2, r1
  402f02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402f06:	4b1a      	ldr	r3, [pc, #104]	; (402f70 <pio_configure_pin_group+0xd0>)
  402f08:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402f0a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  402f0e:	bf14      	ite	ne
  402f10:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402f12:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  402f14:	2001      	movs	r0, #1
  402f16:	e7f1      	b.n	402efc <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  402f18:	460a      	mov	r2, r1
  402f1a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402f1e:	4b14      	ldr	r3, [pc, #80]	; (402f70 <pio_configure_pin_group+0xd0>)
  402f20:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402f22:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  402f26:	bf14      	ite	ne
  402f28:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402f2a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  402f2c:	2001      	movs	r0, #1
  402f2e:	e7e5      	b.n	402efc <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  402f30:	460a      	mov	r2, r1
  402f32:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402f36:	4b0e      	ldr	r3, [pc, #56]	; (402f70 <pio_configure_pin_group+0xd0>)
  402f38:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402f3a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  402f3e:	bf14      	ite	ne
  402f40:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402f42:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  402f44:	2001      	movs	r0, #1
  402f46:	e7d9      	b.n	402efc <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402f48:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  402f4c:	f004 0301 	and.w	r3, r4, #1
  402f50:	9300      	str	r3, [sp, #0]
  402f52:	f3c4 0380 	ubfx	r3, r4, #2, #1
  402f56:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402f5a:	bf14      	ite	ne
  402f5c:	2200      	movne	r2, #0
  402f5e:	2201      	moveq	r2, #1
  402f60:	4631      	mov	r1, r6
  402f62:	4628      	mov	r0, r5
  402f64:	4c03      	ldr	r4, [pc, #12]	; (402f74 <pio_configure_pin_group+0xd4>)
  402f66:	47a0      	blx	r4
	return 1;
  402f68:	2001      	movs	r0, #1
		break;
  402f6a:	e7c7      	b.n	402efc <pio_configure_pin_group+0x5c>
  402f6c:	00402c79 	.word	0x00402c79
  402f70:	00402be9 	.word	0x00402be9
  402f74:	00402cab 	.word	0x00402cab

00402f78 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402f7c:	4681      	mov	r9, r0
  402f7e:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  402f80:	4b12      	ldr	r3, [pc, #72]	; (402fcc <pio_handler_process+0x54>)
  402f82:	4798      	blx	r3
  402f84:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402f86:	4648      	mov	r0, r9
  402f88:	4b11      	ldr	r3, [pc, #68]	; (402fd0 <pio_handler_process+0x58>)
  402f8a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  402f8c:	4005      	ands	r5, r0
  402f8e:	d013      	beq.n	402fb8 <pio_handler_process+0x40>
  402f90:	4c10      	ldr	r4, [pc, #64]	; (402fd4 <pio_handler_process+0x5c>)
  402f92:	f104 0660 	add.w	r6, r4, #96	; 0x60
  402f96:	e003      	b.n	402fa0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  402f98:	42b4      	cmp	r4, r6
  402f9a:	d00d      	beq.n	402fb8 <pio_handler_process+0x40>
  402f9c:	3410      	adds	r4, #16
		while (status != 0) {
  402f9e:	b15d      	cbz	r5, 402fb8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402fa0:	6820      	ldr	r0, [r4, #0]
  402fa2:	42b8      	cmp	r0, r7
  402fa4:	d1f8      	bne.n	402f98 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402fa6:	6861      	ldr	r1, [r4, #4]
  402fa8:	4229      	tst	r1, r5
  402faa:	d0f5      	beq.n	402f98 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402fac:	68e3      	ldr	r3, [r4, #12]
  402fae:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402fb0:	6863      	ldr	r3, [r4, #4]
  402fb2:	ea25 0503 	bic.w	r5, r5, r3
  402fb6:	e7ef      	b.n	402f98 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  402fb8:	4b07      	ldr	r3, [pc, #28]	; (402fd8 <pio_handler_process+0x60>)
  402fba:	681b      	ldr	r3, [r3, #0]
  402fbc:	b123      	cbz	r3, 402fc8 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  402fbe:	4b07      	ldr	r3, [pc, #28]	; (402fdc <pio_handler_process+0x64>)
  402fc0:	681b      	ldr	r3, [r3, #0]
  402fc2:	b10b      	cbz	r3, 402fc8 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  402fc4:	4648      	mov	r0, r9
  402fc6:	4798      	blx	r3
  402fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402fcc:	00402d5d 	.word	0x00402d5d
  402fd0:	00402d61 	.word	0x00402d61
  402fd4:	20006128 	.word	0x20006128
  402fd8:	20006230 	.word	0x20006230
  402fdc:	20006198 	.word	0x20006198

00402fe0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402fe0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  402fe2:	210b      	movs	r1, #11
  402fe4:	4801      	ldr	r0, [pc, #4]	; (402fec <PIOA_Handler+0xc>)
  402fe6:	4b02      	ldr	r3, [pc, #8]	; (402ff0 <PIOA_Handler+0x10>)
  402fe8:	4798      	blx	r3
  402fea:	bd08      	pop	{r3, pc}
  402fec:	400e0e00 	.word	0x400e0e00
  402ff0:	00402f79 	.word	0x00402f79

00402ff4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402ff4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  402ff6:	210c      	movs	r1, #12
  402ff8:	4801      	ldr	r0, [pc, #4]	; (403000 <PIOB_Handler+0xc>)
  402ffa:	4b02      	ldr	r3, [pc, #8]	; (403004 <PIOB_Handler+0x10>)
  402ffc:	4798      	blx	r3
  402ffe:	bd08      	pop	{r3, pc}
  403000:	400e1000 	.word	0x400e1000
  403004:	00402f79 	.word	0x00402f79

00403008 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  403008:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40300a:	210d      	movs	r1, #13
  40300c:	4801      	ldr	r0, [pc, #4]	; (403014 <PIOC_Handler+0xc>)
  40300e:	4b02      	ldr	r3, [pc, #8]	; (403018 <PIOC_Handler+0x10>)
  403010:	4798      	blx	r3
  403012:	bd08      	pop	{r3, pc}
  403014:	400e1200 	.word	0x400e1200
  403018:	00402f79 	.word	0x00402f79

0040301c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40301c:	4a17      	ldr	r2, [pc, #92]	; (40307c <pmc_switch_mck_to_pllack+0x60>)
  40301e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403024:	4318      	orrs	r0, r3
  403026:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403028:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40302a:	f013 0f08 	tst.w	r3, #8
  40302e:	d10a      	bne.n	403046 <pmc_switch_mck_to_pllack+0x2a>
  403030:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403034:	4911      	ldr	r1, [pc, #68]	; (40307c <pmc_switch_mck_to_pllack+0x60>)
  403036:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403038:	f012 0f08 	tst.w	r2, #8
  40303c:	d103      	bne.n	403046 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40303e:	3b01      	subs	r3, #1
  403040:	d1f9      	bne.n	403036 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  403042:	2001      	movs	r0, #1
  403044:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  403046:	4a0d      	ldr	r2, [pc, #52]	; (40307c <pmc_switch_mck_to_pllack+0x60>)
  403048:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40304a:	f023 0303 	bic.w	r3, r3, #3
  40304e:	f043 0302 	orr.w	r3, r3, #2
  403052:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403054:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403056:	f013 0f08 	tst.w	r3, #8
  40305a:	d10a      	bne.n	403072 <pmc_switch_mck_to_pllack+0x56>
  40305c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403060:	4906      	ldr	r1, [pc, #24]	; (40307c <pmc_switch_mck_to_pllack+0x60>)
  403062:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403064:	f012 0f08 	tst.w	r2, #8
  403068:	d105      	bne.n	403076 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40306a:	3b01      	subs	r3, #1
  40306c:	d1f9      	bne.n	403062 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40306e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403070:	4770      	bx	lr
	return 0;
  403072:	2000      	movs	r0, #0
  403074:	4770      	bx	lr
  403076:	2000      	movs	r0, #0
  403078:	4770      	bx	lr
  40307a:	bf00      	nop
  40307c:	400e0400 	.word	0x400e0400

00403080 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  403080:	2801      	cmp	r0, #1
  403082:	d003      	beq.n	40308c <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  403084:	4a05      	ldr	r2, [pc, #20]	; (40309c <pmc_switch_sclk_to_32kxtal+0x1c>)
  403086:	4b06      	ldr	r3, [pc, #24]	; (4030a0 <pmc_switch_sclk_to_32kxtal+0x20>)
  403088:	601a      	str	r2, [r3, #0]
  40308a:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40308c:	4a04      	ldr	r2, [pc, #16]	; (4030a0 <pmc_switch_sclk_to_32kxtal+0x20>)
  40308e:	6893      	ldr	r3, [r2, #8]
  403090:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  403094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403098:	6093      	str	r3, [r2, #8]
  40309a:	e7f3      	b.n	403084 <pmc_switch_sclk_to_32kxtal+0x4>
  40309c:	a5000008 	.word	0xa5000008
  4030a0:	400e1410 	.word	0x400e1410

004030a4 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4030a4:	4b05      	ldr	r3, [pc, #20]	; (4030bc <pmc_osc_is_ready_32kxtal+0x18>)
  4030a6:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4030a8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4030ac:	bf1d      	ittte	ne
  4030ae:	4b04      	ldrne	r3, [pc, #16]	; (4030c0 <pmc_osc_is_ready_32kxtal+0x1c>)
  4030b0:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  4030b2:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  4030b6:	2000      	moveq	r0, #0
}
  4030b8:	4770      	bx	lr
  4030ba:	bf00      	nop
  4030bc:	400e1410 	.word	0x400e1410
  4030c0:	400e0400 	.word	0x400e0400

004030c4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4030c4:	b9c8      	cbnz	r0, 4030fa <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4030c6:	4a11      	ldr	r2, [pc, #68]	; (40310c <pmc_switch_mainck_to_xtal+0x48>)
  4030c8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4030ca:	0209      	lsls	r1, r1, #8
  4030cc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4030ce:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4030d2:	f023 0303 	bic.w	r3, r3, #3
  4030d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4030da:	f043 0301 	orr.w	r3, r3, #1
  4030de:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4030e0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4030e2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4030e4:	f013 0f01 	tst.w	r3, #1
  4030e8:	d0fb      	beq.n	4030e2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4030ea:	4a08      	ldr	r2, [pc, #32]	; (40310c <pmc_switch_mainck_to_xtal+0x48>)
  4030ec:	6a13      	ldr	r3, [r2, #32]
  4030ee:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4030f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4030f6:	6213      	str	r3, [r2, #32]
  4030f8:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4030fa:	4904      	ldr	r1, [pc, #16]	; (40310c <pmc_switch_mainck_to_xtal+0x48>)
  4030fc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4030fe:	4a04      	ldr	r2, [pc, #16]	; (403110 <pmc_switch_mainck_to_xtal+0x4c>)
  403100:	401a      	ands	r2, r3
  403102:	4b04      	ldr	r3, [pc, #16]	; (403114 <pmc_switch_mainck_to_xtal+0x50>)
  403104:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403106:	620b      	str	r3, [r1, #32]
  403108:	4770      	bx	lr
  40310a:	bf00      	nop
  40310c:	400e0400 	.word	0x400e0400
  403110:	fec8fffc 	.word	0xfec8fffc
  403114:	01370002 	.word	0x01370002

00403118 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  403118:	4b02      	ldr	r3, [pc, #8]	; (403124 <pmc_osc_is_ready_mainck+0xc>)
  40311a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40311c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  403120:	4770      	bx	lr
  403122:	bf00      	nop
  403124:	400e0400 	.word	0x400e0400

00403128 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403128:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40312c:	4b01      	ldr	r3, [pc, #4]	; (403134 <pmc_disable_pllack+0xc>)
  40312e:	629a      	str	r2, [r3, #40]	; 0x28
  403130:	4770      	bx	lr
  403132:	bf00      	nop
  403134:	400e0400 	.word	0x400e0400

00403138 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403138:	4b02      	ldr	r3, [pc, #8]	; (403144 <pmc_is_locked_pllack+0xc>)
  40313a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40313c:	f000 0002 	and.w	r0, r0, #2
  403140:	4770      	bx	lr
  403142:	bf00      	nop
  403144:	400e0400 	.word	0x400e0400

00403148 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  403148:	2822      	cmp	r0, #34	; 0x22
  40314a:	d81e      	bhi.n	40318a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40314c:	281f      	cmp	r0, #31
  40314e:	d80c      	bhi.n	40316a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403150:	4b11      	ldr	r3, [pc, #68]	; (403198 <pmc_enable_periph_clk+0x50>)
  403152:	699a      	ldr	r2, [r3, #24]
  403154:	2301      	movs	r3, #1
  403156:	4083      	lsls	r3, r0
  403158:	4393      	bics	r3, r2
  40315a:	d018      	beq.n	40318e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40315c:	2301      	movs	r3, #1
  40315e:	fa03 f000 	lsl.w	r0, r3, r0
  403162:	4b0d      	ldr	r3, [pc, #52]	; (403198 <pmc_enable_periph_clk+0x50>)
  403164:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  403166:	2000      	movs	r0, #0
  403168:	4770      	bx	lr
		ul_id -= 32;
  40316a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40316c:	4b0a      	ldr	r3, [pc, #40]	; (403198 <pmc_enable_periph_clk+0x50>)
  40316e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403172:	2301      	movs	r3, #1
  403174:	4083      	lsls	r3, r0
  403176:	4393      	bics	r3, r2
  403178:	d00b      	beq.n	403192 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40317a:	2301      	movs	r3, #1
  40317c:	fa03 f000 	lsl.w	r0, r3, r0
  403180:	4b05      	ldr	r3, [pc, #20]	; (403198 <pmc_enable_periph_clk+0x50>)
  403182:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  403186:	2000      	movs	r0, #0
  403188:	4770      	bx	lr
		return 1;
  40318a:	2001      	movs	r0, #1
  40318c:	4770      	bx	lr
	return 0;
  40318e:	2000      	movs	r0, #0
  403190:	4770      	bx	lr
  403192:	2000      	movs	r0, #0
}
  403194:	4770      	bx	lr
  403196:	bf00      	nop
  403198:	400e0400 	.word	0x400e0400

0040319c <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  40319c:	b921      	cbnz	r1, 4031a8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40319e:	6843      	ldr	r3, [r0, #4]
  4031a0:	f023 0301 	bic.w	r3, r3, #1
  4031a4:	6043      	str	r3, [r0, #4]
  4031a6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4031a8:	6843      	ldr	r3, [r0, #4]
  4031aa:	f043 0301 	orr.w	r3, r3, #1
  4031ae:	6043      	str	r3, [r0, #4]
  4031b0:	4770      	bx	lr

004031b2 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4031b2:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4031b4:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4031b6:	6884      	ldr	r4, [r0, #8]
  4031b8:	42a5      	cmp	r5, r4
  4031ba:	d003      	beq.n	4031c4 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4031bc:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4031be:	6884      	ldr	r4, [r0, #8]
  4031c0:	42ac      	cmp	r4, r5
  4031c2:	d1fb      	bne.n	4031bc <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4031c4:	b161      	cbz	r1, 4031e0 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4031c6:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4031ca:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4031ce:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4031d2:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4031d6:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4031da:	bf18      	it	ne
  4031dc:	300c      	addne	r0, #12
  4031de:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4031e0:	b142      	cbz	r2, 4031f4 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4031e2:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4031e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4031ea:	f3c4 2003 	ubfx	r0, r4, #8, #4
  4031ee:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  4031f2:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  4031f4:	b143      	cbz	r3, 403208 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4031f6:	f3c4 1202 	ubfx	r2, r4, #4, #3
  4031fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4031fe:	f004 040f 	and.w	r4, r4, #15
  403202:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  403206:	601c      	str	r4, [r3, #0]
	}
}
  403208:	bc30      	pop	{r4, r5}
  40320a:	4770      	bx	lr

0040320c <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  40320c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  40320e:	6844      	ldr	r4, [r0, #4]
  403210:	f014 0f01 	tst.w	r4, #1
  403214:	d005      	beq.n	403222 <rtc_set_time+0x16>
		if (ul_hour > 12) {
  403216:	290c      	cmp	r1, #12
  403218:	d93d      	bls.n	403296 <rtc_set_time+0x8a>
			ul_hour -= 12;
  40321a:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  40321c:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  403220:	e000      	b.n	403224 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  403222:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  403224:	4c1d      	ldr	r4, [pc, #116]	; (40329c <rtc_set_time+0x90>)
  403226:	fba4 5603 	umull	r5, r6, r4, r3
  40322a:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40322c:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  403230:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  403234:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  403238:	fba4 6502 	umull	r6, r5, r4, r2
  40323c:	08ed      	lsrs	r5, r5, #3
  40323e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  403242:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  403246:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40324a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  40324e:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  403250:	fba4 4201 	umull	r4, r2, r4, r1
  403254:	08d2      	lsrs	r2, r2, #3
  403256:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40325a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40325e:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  403262:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  403266:	6983      	ldr	r3, [r0, #24]
  403268:	f013 0f04 	tst.w	r3, #4
  40326c:	d0fb      	beq.n	403266 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  40326e:	6803      	ldr	r3, [r0, #0]
  403270:	f043 0301 	orr.w	r3, r3, #1
  403274:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  403276:	6983      	ldr	r3, [r0, #24]
  403278:	f013 0f01 	tst.w	r3, #1
  40327c:	d0fb      	beq.n	403276 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40327e:	2301      	movs	r3, #1
  403280:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  403282:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  403284:	6803      	ldr	r3, [r0, #0]
  403286:	f023 0301 	bic.w	r3, r3, #1
  40328a:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  40328c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40328e:	f000 0001 	and.w	r0, r0, #1
  403292:	bcf0      	pop	{r4, r5, r6, r7}
  403294:	4770      	bx	lr
	uint32_t ul_time = 0;
  403296:	2700      	movs	r7, #0
  403298:	e7c4      	b.n	403224 <rtc_set_time+0x18>
  40329a:	bf00      	nop
  40329c:	cccccccd 	.word	0xcccccccd

004032a0 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4032a0:	b4f0      	push	{r4, r5, r6, r7}
  4032a2:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4032a4:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4032a6:	68c4      	ldr	r4, [r0, #12]
  4032a8:	42a5      	cmp	r5, r4
  4032aa:	d003      	beq.n	4032b4 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  4032ac:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4032ae:	68c4      	ldr	r4, [r0, #12]
  4032b0:	42ac      	cmp	r4, r5
  4032b2:	d1fb      	bne.n	4032ac <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  4032b4:	b199      	cbz	r1, 4032de <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4032b6:	f3c4 3003 	ubfx	r0, r4, #12, #4
  4032ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4032be:	f3c4 2703 	ubfx	r7, r4, #8, #4
  4032c2:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4032c6:	f3c4 1002 	ubfx	r0, r4, #4, #3
  4032ca:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4032ce:	f004 000f 	and.w	r0, r4, #15
  4032d2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4032d6:	2564      	movs	r5, #100	; 0x64
  4032d8:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  4032dc:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  4032de:	b142      	cbz	r2, 4032f2 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4032e0:	f3c4 5000 	ubfx	r0, r4, #20, #1
  4032e4:	0081      	lsls	r1, r0, #2
  4032e6:	4408      	add	r0, r1
  4032e8:	f3c4 4103 	ubfx	r1, r4, #16, #4
  4032ec:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  4032f0:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  4032f2:	b143      	cbz	r3, 403306 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4032f4:	f3c4 7201 	ubfx	r2, r4, #28, #2
  4032f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4032fc:	f3c4 6103 	ubfx	r1, r4, #24, #4
  403300:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  403304:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  403306:	b116      	cbz	r6, 40330e <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  403308:	f3c4 5442 	ubfx	r4, r4, #21, #3
  40330c:	6034      	str	r4, [r6, #0]
	}
}
  40330e:	bcf0      	pop	{r4, r5, r6, r7}
  403310:	4770      	bx	lr
	...

00403314 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  403314:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  403316:	4d2a      	ldr	r5, [pc, #168]	; (4033c0 <rtc_set_date+0xac>)
  403318:	fba5 4603 	umull	r4, r6, r5, r3
  40331c:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40331e:	9c03      	ldr	r4, [sp, #12]
  403320:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  403322:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  403326:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40332a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40332e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  403332:	fba5 6402 	umull	r6, r4, r5, r2
  403336:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  403338:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40333c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403340:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  403344:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  403348:	4b1e      	ldr	r3, [pc, #120]	; (4033c4 <rtc_set_date+0xb0>)
  40334a:	fba3 4301 	umull	r4, r3, r3, r1
  40334e:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  403350:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  403354:	4b1c      	ldr	r3, [pc, #112]	; (4033c8 <rtc_set_date+0xb4>)
  403356:	fba3 4301 	umull	r4, r3, r3, r1
  40335a:	095b      	lsrs	r3, r3, #5
  40335c:	fba5 6403 	umull	r6, r4, r5, r3
  403360:	08e4      	lsrs	r4, r4, #3
  403362:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403366:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40336a:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  40336c:	fba5 4301 	umull	r4, r3, r5, r1
  403370:	08db      	lsrs	r3, r3, #3
  403372:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  403376:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40337a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40337e:	fba5 1503 	umull	r1, r5, r5, r3
  403382:	08ed      	lsrs	r5, r5, #3
  403384:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  403388:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40338c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  403390:	6983      	ldr	r3, [r0, #24]
  403392:	f013 0f04 	tst.w	r3, #4
  403396:	d0fb      	beq.n	403390 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  403398:	6803      	ldr	r3, [r0, #0]
  40339a:	f043 0302 	orr.w	r3, r3, #2
  40339e:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4033a0:	6983      	ldr	r3, [r0, #24]
  4033a2:	f013 0f01 	tst.w	r3, #1
  4033a6:	d0fb      	beq.n	4033a0 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4033a8:	2301      	movs	r3, #1
  4033aa:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4033ac:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4033ae:	6803      	ldr	r3, [r0, #0]
  4033b0:	f023 0302 	bic.w	r3, r3, #2
  4033b4:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4033b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4033b8:	f000 0002 	and.w	r0, r0, #2
  4033bc:	bc70      	pop	{r4, r5, r6}
  4033be:	4770      	bx	lr
  4033c0:	cccccccd 	.word	0xcccccccd
  4033c4:	10624dd3 	.word	0x10624dd3
  4033c8:	51eb851f 	.word	0x51eb851f

004033cc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4033cc:	b508      	push	{r3, lr}
  4033ce:	2015      	movs	r0, #21
  4033d0:	4b01      	ldr	r3, [pc, #4]	; (4033d8 <spi_enable_clock+0xc>)
  4033d2:	4798      	blx	r3
  4033d4:	bd08      	pop	{r3, pc}
  4033d6:	bf00      	nop
  4033d8:	00403149 	.word	0x00403149

004033dc <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4033dc:	6843      	ldr	r3, [r0, #4]
  4033de:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4033e2:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4033e4:	6843      	ldr	r3, [r0, #4]
  4033e6:	0409      	lsls	r1, r1, #16
  4033e8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4033ec:	4319      	orrs	r1, r3
  4033ee:	6041      	str	r1, [r0, #4]
  4033f0:	4770      	bx	lr

004033f2 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  4033f2:	6843      	ldr	r3, [r0, #4]
  4033f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4033f8:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  4033fa:	6843      	ldr	r3, [r0, #4]
  4033fc:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  403400:	6041      	str	r1, [r0, #4]
  403402:	4770      	bx	lr

00403404 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  403404:	b932      	cbnz	r2, 403414 <spi_set_clock_polarity+0x10>
  403406:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40340a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40340c:	f023 0301 	bic.w	r3, r3, #1
  403410:	6303      	str	r3, [r0, #48]	; 0x30
  403412:	4770      	bx	lr
  403414:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  403418:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40341a:	f043 0301 	orr.w	r3, r3, #1
  40341e:	6303      	str	r3, [r0, #48]	; 0x30
  403420:	4770      	bx	lr

00403422 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  403422:	b932      	cbnz	r2, 403432 <spi_set_clock_phase+0x10>
  403424:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  403428:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40342a:	f023 0302 	bic.w	r3, r3, #2
  40342e:	6303      	str	r3, [r0, #48]	; 0x30
  403430:	4770      	bx	lr
  403432:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  403436:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403438:	f043 0302 	orr.w	r3, r3, #2
  40343c:	6303      	str	r3, [r0, #48]	; 0x30
  40343e:	4770      	bx	lr

00403440 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  403440:	2a04      	cmp	r2, #4
  403442:	d003      	beq.n	40344c <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  403444:	b16a      	cbz	r2, 403462 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  403446:	2a08      	cmp	r2, #8
  403448:	d016      	beq.n	403478 <spi_configure_cs_behavior+0x38>
  40344a:	4770      	bx	lr
  40344c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  403450:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403452:	f023 0308 	bic.w	r3, r3, #8
  403456:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  403458:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40345a:	f043 0304 	orr.w	r3, r3, #4
  40345e:	6303      	str	r3, [r0, #48]	; 0x30
  403460:	4770      	bx	lr
  403462:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  403466:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403468:	f023 0308 	bic.w	r3, r3, #8
  40346c:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40346e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403470:	f023 0304 	bic.w	r3, r3, #4
  403474:	6303      	str	r3, [r0, #48]	; 0x30
  403476:	4770      	bx	lr
  403478:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40347c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40347e:	f043 0308 	orr.w	r3, r3, #8
  403482:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  403484:	e7e1      	b.n	40344a <spi_configure_cs_behavior+0xa>

00403486 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  403486:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40348a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40348c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  403490:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  403492:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403494:	431a      	orrs	r2, r3
  403496:	630a      	str	r2, [r1, #48]	; 0x30
  403498:	4770      	bx	lr

0040349a <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40349a:	1e43      	subs	r3, r0, #1
  40349c:	4419      	add	r1, r3
  40349e:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4034a2:	1e43      	subs	r3, r0, #1
  4034a4:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4034a6:	bf94      	ite	ls
  4034a8:	b200      	sxthls	r0, r0
		return -1;
  4034aa:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4034ae:	4770      	bx	lr

004034b0 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4034b0:	b172      	cbz	r2, 4034d0 <spi_set_baudrate_div+0x20>
{
  4034b2:	b410      	push	{r4}
  4034b4:	4614      	mov	r4, r2
  4034b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4034ba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4034bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4034c0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4034c2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4034c4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4034c8:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4034ca:	2000      	movs	r0, #0
}
  4034cc:	bc10      	pop	{r4}
  4034ce:	4770      	bx	lr
        return -1;
  4034d0:	f04f 30ff 	mov.w	r0, #4294967295
  4034d4:	4770      	bx	lr

004034d6 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4034d6:	b410      	push	{r4}
  4034d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4034dc:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4034de:	b280      	uxth	r0, r0
  4034e0:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4034e2:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4034e4:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4034e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4034ec:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4034ee:	bc10      	pop	{r4}
  4034f0:	4770      	bx	lr
	...

004034f4 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4034f4:	4b2a      	ldr	r3, [pc, #168]	; (4035a0 <twi_set_speed+0xac>)
  4034f6:	4299      	cmp	r1, r3
  4034f8:	d849      	bhi.n	40358e <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4034fa:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4034fe:	4299      	cmp	r1, r3
  403500:	d92b      	bls.n	40355a <twi_set_speed+0x66>
{
  403502:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  403504:	4c27      	ldr	r4, [pc, #156]	; (4035a4 <twi_set_speed+0xb0>)
  403506:	fba4 3402 	umull	r3, r4, r4, r2
  40350a:	0ba4      	lsrs	r4, r4, #14
  40350c:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40350e:	4b26      	ldr	r3, [pc, #152]	; (4035a8 <twi_set_speed+0xb4>)
  403510:	440b      	add	r3, r1
  403512:	009b      	lsls	r3, r3, #2
  403514:	fbb2 f2f3 	udiv	r2, r2, r3
  403518:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40351a:	2cff      	cmp	r4, #255	; 0xff
  40351c:	d939      	bls.n	403592 <twi_set_speed+0x9e>
  40351e:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  403520:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  403522:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403524:	2cff      	cmp	r4, #255	; 0xff
  403526:	d90d      	bls.n	403544 <twi_set_speed+0x50>
  403528:	2907      	cmp	r1, #7
  40352a:	d1f9      	bne.n	403520 <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  40352c:	0213      	lsls	r3, r2, #8
  40352e:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
  403530:	0409      	lsls	r1, r1, #16
  403532:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  403536:	430b      	orrs	r3, r1
  403538:	b2e4      	uxtb	r4, r4
  40353a:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
  40353c:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40353e:	2000      	movs	r0, #0
}
  403540:	bc10      	pop	{r4}
  403542:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403544:	2aff      	cmp	r2, #255	; 0xff
  403546:	d9f1      	bls.n	40352c <twi_set_speed+0x38>
  403548:	2906      	cmp	r1, #6
  40354a:	d8ef      	bhi.n	40352c <twi_set_speed+0x38>
			ckdiv++;
  40354c:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
  40354e:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403550:	2aff      	cmp	r2, #255	; 0xff
  403552:	d9eb      	bls.n	40352c <twi_set_speed+0x38>
  403554:	2906      	cmp	r1, #6
  403556:	d9f9      	bls.n	40354c <twi_set_speed+0x58>
  403558:	e7e8      	b.n	40352c <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40355a:	0049      	lsls	r1, r1, #1
  40355c:	fbb2 f2f1 	udiv	r2, r2, r1
  403560:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403562:	2aff      	cmp	r2, #255	; 0xff
  403564:	d911      	bls.n	40358a <twi_set_speed+0x96>
  403566:	2300      	movs	r3, #0
			ckdiv++;
  403568:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
  40356a:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40356c:	2aff      	cmp	r2, #255	; 0xff
  40356e:	d901      	bls.n	403574 <twi_set_speed+0x80>
  403570:	2b07      	cmp	r3, #7
  403572:	d1f9      	bne.n	403568 <twi_set_speed+0x74>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  403574:	0211      	lsls	r1, r2, #8
  403576:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
  403578:	041b      	lsls	r3, r3, #16
  40357a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40357e:	430b      	orrs	r3, r1
  403580:	b2d2      	uxtb	r2, r2
  403582:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  403584:	6102      	str	r2, [r0, #16]
	return PASS;
  403586:	2000      	movs	r0, #0
  403588:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40358a:	2300      	movs	r3, #0
  40358c:	e7f2      	b.n	403574 <twi_set_speed+0x80>
		return FAIL;
  40358e:	2001      	movs	r0, #1
  403590:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403592:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
  403594:	bf88      	it	hi
  403596:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403598:	d8d8      	bhi.n	40354c <twi_set_speed+0x58>
	uint32_t ckdiv = 0;
  40359a:	2100      	movs	r1, #0
  40359c:	e7c6      	b.n	40352c <twi_set_speed+0x38>
  40359e:	bf00      	nop
  4035a0:	00061a80 	.word	0x00061a80
  4035a4:	057619f1 	.word	0x057619f1
  4035a8:	3ffd1200 	.word	0x3ffd1200

004035ac <twi_master_init>:
{
  4035ac:	b538      	push	{r3, r4, r5, lr}
  4035ae:	4604      	mov	r4, r0
  4035b0:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
  4035b2:	f04f 33ff 	mov.w	r3, #4294967295
  4035b6:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
  4035b8:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4035ba:	2380      	movs	r3, #128	; 0x80
  4035bc:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  4035be:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4035c0:	2308      	movs	r3, #8
  4035c2:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4035c4:	2320      	movs	r3, #32
  4035c6:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
  4035c8:	2304      	movs	r3, #4
  4035ca:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4035cc:	680a      	ldr	r2, [r1, #0]
  4035ce:	6849      	ldr	r1, [r1, #4]
  4035d0:	4b05      	ldr	r3, [pc, #20]	; (4035e8 <twi_master_init+0x3c>)
  4035d2:	4798      	blx	r3
  4035d4:	2801      	cmp	r0, #1
  4035d6:	bf14      	ite	ne
  4035d8:	2000      	movne	r0, #0
  4035da:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
  4035dc:	7a6b      	ldrb	r3, [r5, #9]
  4035de:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  4035e0:	bf04      	itt	eq
  4035e2:	2340      	moveq	r3, #64	; 0x40
  4035e4:	6023      	streq	r3, [r4, #0]
}
  4035e6:	bd38      	pop	{r3, r4, r5, pc}
  4035e8:	004034f5 	.word	0x004034f5

004035ec <twi_mk_addr>:
	if (len == 0)
  4035ec:	460a      	mov	r2, r1
  4035ee:	b159      	cbz	r1, 403608 <twi_mk_addr+0x1c>
	val = addr[0];
  4035f0:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  4035f2:	2901      	cmp	r1, #1
		val |= addr[1];
  4035f4:	bfc4      	itt	gt
  4035f6:	7841      	ldrbgt	r1, [r0, #1]
  4035f8:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
  4035fc:	2a02      	cmp	r2, #2
  4035fe:	dd04      	ble.n	40360a <twi_mk_addr+0x1e>
		val |= addr[2];
  403600:	7882      	ldrb	r2, [r0, #2]
  403602:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  403606:	e000      	b.n	40360a <twi_mk_addr+0x1e>
		return 0;
  403608:	2300      	movs	r3, #0
}
  40360a:	4618      	mov	r0, r3
  40360c:	4770      	bx	lr
	...

00403610 <twi_master_read>:
{
  403610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cnt = p_packet->length;
  403612:	68cc      	ldr	r4, [r1, #12]
	if (cnt == 0) {
  403614:	2c00      	cmp	r4, #0
  403616:	d04f      	beq.n	4036b8 <twi_master_read+0xa8>
  403618:	460b      	mov	r3, r1
  40361a:	4605      	mov	r5, r0
	uint8_t *buffer = p_packet->buffer;
  40361c:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  40361e:	2000      	movs	r0, #0
  403620:	6068      	str	r0, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  403622:	684a      	ldr	r2, [r1, #4]
  403624:	0212      	lsls	r2, r2, #8
  403626:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  40362a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  40362e:	7c09      	ldrb	r1, [r1, #16]
  403630:	0409      	lsls	r1, r1, #16
  403632:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
  403636:	430a      	orrs	r2, r1
  403638:	606a      	str	r2, [r5, #4]
	p_twi->TWI_IADR = 0;
  40363a:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40363c:	6859      	ldr	r1, [r3, #4]
  40363e:	4618      	mov	r0, r3
  403640:	4b22      	ldr	r3, [pc, #136]	; (4036cc <twi_master_read+0xbc>)
  403642:	4798      	blx	r3
  403644:	60e8      	str	r0, [r5, #12]
	if (cnt == 1) {
  403646:	2c01      	cmp	r4, #1
  403648:	d00f      	beq.n	40366a <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START;
  40364a:	2301      	movs	r3, #1
  40364c:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  40364e:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
  403650:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  403652:	f413 7f80 	tst.w	r3, #256	; 0x100
  403656:	d136      	bne.n	4036c6 <twi_master_read+0xb6>
  403658:	f247 512f 	movw	r1, #29999	; 0x752f
		timeout = TWI_TIMEOUT;
  40365c:	f247 5730 	movw	r7, #30000	; 0x7530
		if (!(status & TWI_SR_RXRDY)) {
  403660:	f04f 0e01 	mov.w	lr, #1
			p_twi->TWI_CR = TWI_CR_STOP;
  403664:	f04f 0c02 	mov.w	ip, #2
  403668:	e019      	b.n	40369e <twi_master_read+0x8e>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40366a:	2303      	movs	r3, #3
  40366c:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  40366e:	2001      	movs	r0, #1
  403670:	e7ee      	b.n	403650 <twi_master_read+0x40>
		if (!(status & TWI_SR_RXRDY)) {
  403672:	460a      	mov	r2, r1
  403674:	4670      	mov	r0, lr
  403676:	e00c      	b.n	403692 <twi_master_read+0x82>
		if (cnt == 1  && !stop_sent) {
  403678:	b908      	cbnz	r0, 40367e <twi_master_read+0x6e>
			p_twi->TWI_CR = TWI_CR_STOP;
  40367a:	f8c5 c000 	str.w	ip, [r5]
		if (!(status & TWI_SR_RXRDY)) {
  40367e:	f013 0f02 	tst.w	r3, #2
  403682:	d0f6      	beq.n	403672 <twi_master_read+0x62>
  403684:	4670      	mov	r0, lr
		*buffer++ = p_twi->TWI_RHR;
  403686:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403688:	7033      	strb	r3, [r6, #0]
		cnt--;
  40368a:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
  40368c:	3601      	adds	r6, #1
		timeout = TWI_TIMEOUT;
  40368e:	463a      	mov	r2, r7
	while (cnt > 0) {
  403690:	b164      	cbz	r4, 4036ac <twi_master_read+0x9c>
		status = p_twi->TWI_SR;
  403692:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  403694:	f413 7f80 	tst.w	r3, #256	; 0x100
  403698:	d111      	bne.n	4036be <twi_master_read+0xae>
		if (!timeout--) {
  40369a:	1e51      	subs	r1, r2, #1
  40369c:	b18a      	cbz	r2, 4036c2 <twi_master_read+0xb2>
		if (cnt == 1  && !stop_sent) {
  40369e:	2c01      	cmp	r4, #1
  4036a0:	d0ea      	beq.n	403678 <twi_master_read+0x68>
		if (!(status & TWI_SR_RXRDY)) {
  4036a2:	f013 0f02 	tst.w	r3, #2
  4036a6:	d1ee      	bne.n	403686 <twi_master_read+0x76>
  4036a8:	460a      	mov	r2, r1
  4036aa:	e7f1      	b.n	403690 <twi_master_read+0x80>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4036ac:	6a2b      	ldr	r3, [r5, #32]
  4036ae:	f013 0f01 	tst.w	r3, #1
  4036b2:	d0fb      	beq.n	4036ac <twi_master_read+0x9c>
	p_twi->TWI_SR;
  4036b4:	6a2b      	ldr	r3, [r5, #32]
	return TWI_SUCCESS;
  4036b6:	e000      	b.n	4036ba <twi_master_read+0xaa>
		return TWI_INVALID_ARGUMENT;
  4036b8:	2401      	movs	r4, #1
}
  4036ba:	4620      	mov	r0, r4
  4036bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
  4036be:	2405      	movs	r4, #5
  4036c0:	e7fb      	b.n	4036ba <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
  4036c2:	2409      	movs	r4, #9
  4036c4:	e7f9      	b.n	4036ba <twi_master_read+0xaa>
			return TWI_RECEIVE_NACK;
  4036c6:	2405      	movs	r4, #5
  4036c8:	e7f7      	b.n	4036ba <twi_master_read+0xaa>
  4036ca:	bf00      	nop
  4036cc:	004035ed 	.word	0x004035ed

004036d0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4036d0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4036d2:	23ac      	movs	r3, #172	; 0xac
  4036d4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4036d6:	680b      	ldr	r3, [r1, #0]
  4036d8:	684a      	ldr	r2, [r1, #4]
  4036da:	fbb3 f3f2 	udiv	r3, r3, r2
  4036de:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4036e0:	1e5c      	subs	r4, r3, #1
  4036e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4036e6:	4294      	cmp	r4, r2
  4036e8:	d80b      	bhi.n	403702 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  4036ea:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4036ec:	688b      	ldr	r3, [r1, #8]
  4036ee:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4036f0:	f240 2302 	movw	r3, #514	; 0x202
  4036f4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4036f8:	2350      	movs	r3, #80	; 0x50
  4036fa:	6003      	str	r3, [r0, #0]

	return 0;
  4036fc:	2000      	movs	r0, #0
}
  4036fe:	bc10      	pop	{r4}
  403700:	4770      	bx	lr
		return 1;
  403702:	2001      	movs	r0, #1
  403704:	e7fb      	b.n	4036fe <uart_init+0x2e>

00403706 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  403706:	2340      	movs	r3, #64	; 0x40
  403708:	6003      	str	r3, [r0, #0]
  40370a:	4770      	bx	lr

0040370c <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  40370c:	2310      	movs	r3, #16
  40370e:	6003      	str	r3, [r0, #0]
  403710:	4770      	bx	lr

00403712 <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  403712:	6940      	ldr	r0, [r0, #20]
}
  403714:	4770      	bx	lr

00403716 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  403716:	6943      	ldr	r3, [r0, #20]
  403718:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40371c:	bf1a      	itte	ne
  40371e:	61c1      	strne	r1, [r0, #28]
	return 0;
  403720:	2000      	movne	r0, #0
		return 1;
  403722:	2001      	moveq	r0, #1
}
  403724:	4770      	bx	lr

00403726 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  403726:	6943      	ldr	r3, [r0, #20]
  403728:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40372c:	bf1d      	ittte	ne
  40372e:	6983      	ldrne	r3, [r0, #24]
  403730:	700b      	strbne	r3, [r1, #0]
	return 0;
  403732:	2000      	movne	r0, #0
		return 1;
  403734:	2001      	moveq	r0, #1
}
  403736:	4770      	bx	lr

00403738 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  403738:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40373a:	010b      	lsls	r3, r1, #4
  40373c:	4293      	cmp	r3, r2
  40373e:	d914      	bls.n	40376a <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403740:	00c9      	lsls	r1, r1, #3
  403742:	084b      	lsrs	r3, r1, #1
  403744:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  403748:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40374c:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40374e:	1e5c      	subs	r4, r3, #1
  403750:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403754:	428c      	cmp	r4, r1
  403756:	d901      	bls.n	40375c <usart_set_async_baudrate+0x24>
		return 1;
  403758:	2001      	movs	r0, #1
  40375a:	e017      	b.n	40378c <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40375c:	6841      	ldr	r1, [r0, #4]
  40375e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  403762:	6041      	str	r1, [r0, #4]
  403764:	e00c      	b.n	403780 <usart_set_async_baudrate+0x48>
		return 1;
  403766:	2001      	movs	r0, #1
  403768:	e010      	b.n	40378c <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40376a:	0859      	lsrs	r1, r3, #1
  40376c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  403770:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  403774:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403776:	1e5c      	subs	r4, r3, #1
  403778:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40377c:	428c      	cmp	r4, r1
  40377e:	d8f2      	bhi.n	403766 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  403780:	0412      	lsls	r2, r2, #16
  403782:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  403786:	431a      	orrs	r2, r3
  403788:	6202      	str	r2, [r0, #32]

	return 0;
  40378a:	2000      	movs	r0, #0
}
  40378c:	bc10      	pop	{r4}
  40378e:	4770      	bx	lr

00403790 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403790:	4b0a      	ldr	r3, [pc, #40]	; (4037bc <usart_reset+0x2c>)
  403792:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  403796:	2300      	movs	r3, #0
  403798:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40379a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40379c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40379e:	2388      	movs	r3, #136	; 0x88
  4037a0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4037a2:	2324      	movs	r3, #36	; 0x24
  4037a4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4037a6:	f44f 7380 	mov.w	r3, #256	; 0x100
  4037aa:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4037ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4037b0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
  4037b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4037b6:	6003      	str	r3, [r0, #0]
  4037b8:	4770      	bx	lr
  4037ba:	bf00      	nop
  4037bc:	55534100 	.word	0x55534100

004037c0 <usart_init_rs232>:
{
  4037c0:	b570      	push	{r4, r5, r6, lr}
  4037c2:	4605      	mov	r5, r0
  4037c4:	460c      	mov	r4, r1
  4037c6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4037c8:	4b0f      	ldr	r3, [pc, #60]	; (403808 <usart_init_rs232+0x48>)
  4037ca:	4798      	blx	r3
	ul_reg_val = 0;
  4037cc:	2200      	movs	r2, #0
  4037ce:	4b0f      	ldr	r3, [pc, #60]	; (40380c <usart_init_rs232+0x4c>)
  4037d0:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4037d2:	b1a4      	cbz	r4, 4037fe <usart_init_rs232+0x3e>
  4037d4:	4632      	mov	r2, r6
  4037d6:	6821      	ldr	r1, [r4, #0]
  4037d8:	4628      	mov	r0, r5
  4037da:	4b0d      	ldr	r3, [pc, #52]	; (403810 <usart_init_rs232+0x50>)
  4037dc:	4798      	blx	r3
  4037de:	4602      	mov	r2, r0
  4037e0:	b978      	cbnz	r0, 403802 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4037e2:	6863      	ldr	r3, [r4, #4]
  4037e4:	68a1      	ldr	r1, [r4, #8]
  4037e6:	430b      	orrs	r3, r1
  4037e8:	6921      	ldr	r1, [r4, #16]
  4037ea:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4037ec:	68e1      	ldr	r1, [r4, #12]
  4037ee:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4037f0:	4906      	ldr	r1, [pc, #24]	; (40380c <usart_init_rs232+0x4c>)
  4037f2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4037f4:	6869      	ldr	r1, [r5, #4]
  4037f6:	430b      	orrs	r3, r1
  4037f8:	606b      	str	r3, [r5, #4]
}
  4037fa:	4610      	mov	r0, r2
  4037fc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4037fe:	2201      	movs	r2, #1
  403800:	e7fb      	b.n	4037fa <usart_init_rs232+0x3a>
  403802:	2201      	movs	r2, #1
  403804:	e7f9      	b.n	4037fa <usart_init_rs232+0x3a>
  403806:	bf00      	nop
  403808:	00403791 	.word	0x00403791
  40380c:	2000619c 	.word	0x2000619c
  403810:	00403739 	.word	0x00403739

00403814 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  403814:	2340      	movs	r3, #64	; 0x40
  403816:	6003      	str	r3, [r0, #0]
  403818:	4770      	bx	lr

0040381a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40381a:	2310      	movs	r3, #16
  40381c:	6003      	str	r3, [r0, #0]
  40381e:	4770      	bx	lr

00403820 <usart_get_status>:
	return p_usart->US_CSR;
  403820:	6940      	ldr	r0, [r0, #20]
}
  403822:	4770      	bx	lr

00403824 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  403824:	6943      	ldr	r3, [r0, #20]
  403826:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
  40382a:	bf1d      	ittte	ne
  40382c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  403830:	61c1      	strne	r1, [r0, #28]
	return 0;
  403832:	2000      	movne	r0, #0
		return 1;
  403834:	2001      	moveq	r0, #1
}
  403836:	4770      	bx	lr

00403838 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  403838:	6943      	ldr	r3, [r0, #20]
  40383a:	f013 0f01 	tst.w	r3, #1
  40383e:	d005      	beq.n	40384c <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403840:	6983      	ldr	r3, [r0, #24]
  403842:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403846:	600b      	str	r3, [r1, #0]
	return 0;
  403848:	2000      	movs	r0, #0
  40384a:	4770      	bx	lr
		return 1;
  40384c:	2001      	movs	r0, #1
}
  40384e:	4770      	bx	lr

00403850 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  403850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403854:	6043      	str	r3, [r0, #4]
  403856:	4770      	bx	lr

00403858 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403858:	e7fe      	b.n	403858 <Dummy_Handler>
	...

0040385c <Reset_Handler>:
{
  40385c:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  40385e:	4b21      	ldr	r3, [pc, #132]	; (4038e4 <Reset_Handler+0x88>)
  403860:	4a21      	ldr	r2, [pc, #132]	; (4038e8 <Reset_Handler+0x8c>)
  403862:	429a      	cmp	r2, r3
  403864:	d928      	bls.n	4038b8 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  403866:	4b21      	ldr	r3, [pc, #132]	; (4038ec <Reset_Handler+0x90>)
  403868:	4a1e      	ldr	r2, [pc, #120]	; (4038e4 <Reset_Handler+0x88>)
  40386a:	429a      	cmp	r2, r3
  40386c:	d20c      	bcs.n	403888 <Reset_Handler+0x2c>
  40386e:	3b01      	subs	r3, #1
  403870:	1a9b      	subs	r3, r3, r2
  403872:	f023 0303 	bic.w	r3, r3, #3
  403876:	3304      	adds	r3, #4
  403878:	4413      	add	r3, r2
  40387a:	491b      	ldr	r1, [pc, #108]	; (4038e8 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  40387c:	f851 0b04 	ldr.w	r0, [r1], #4
  403880:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  403884:	429a      	cmp	r2, r3
  403886:	d1f9      	bne.n	40387c <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  403888:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  40388a:	4b19      	ldr	r3, [pc, #100]	; (4038f0 <Reset_Handler+0x94>)
  40388c:	4a19      	ldr	r2, [pc, #100]	; (4038f4 <Reset_Handler+0x98>)
  40388e:	429a      	cmp	r2, r3
  403890:	d20a      	bcs.n	4038a8 <Reset_Handler+0x4c>
  403892:	3b01      	subs	r3, #1
  403894:	1a9b      	subs	r3, r3, r2
  403896:	f023 0303 	bic.w	r3, r3, #3
  40389a:	3304      	adds	r3, #4
  40389c:	4413      	add	r3, r2
		*pDest++ = 0;
  40389e:	2100      	movs	r1, #0
  4038a0:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4038a4:	429a      	cmp	r2, r3
  4038a6:	d1fb      	bne.n	4038a0 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  4038a8:	4b13      	ldr	r3, [pc, #76]	; (4038f8 <Reset_Handler+0x9c>)
  4038aa:	4a14      	ldr	r2, [pc, #80]	; (4038fc <Reset_Handler+0xa0>)
  4038ac:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  4038ae:	4b14      	ldr	r3, [pc, #80]	; (403900 <Reset_Handler+0xa4>)
  4038b0:	4798      	blx	r3
	main();
  4038b2:	4b14      	ldr	r3, [pc, #80]	; (403904 <Reset_Handler+0xa8>)
  4038b4:	4798      	blx	r3
  4038b6:	e7fe      	b.n	4038b6 <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  4038b8:	4b0a      	ldr	r3, [pc, #40]	; (4038e4 <Reset_Handler+0x88>)
  4038ba:	4a0b      	ldr	r2, [pc, #44]	; (4038e8 <Reset_Handler+0x8c>)
  4038bc:	429a      	cmp	r2, r3
  4038be:	d2e3      	bcs.n	403888 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4038c0:	4b0a      	ldr	r3, [pc, #40]	; (4038ec <Reset_Handler+0x90>)
  4038c2:	4808      	ldr	r0, [pc, #32]	; (4038e4 <Reset_Handler+0x88>)
  4038c4:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4038c6:	4611      	mov	r1, r2
  4038c8:	3a04      	subs	r2, #4
  4038ca:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  4038cc:	2800      	cmp	r0, #0
  4038ce:	d0db      	beq.n	403888 <Reset_Handler+0x2c>
  4038d0:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  4038d4:	f852 0904 	ldr.w	r0, [r2], #-4
  4038d8:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  4038dc:	42ca      	cmn	r2, r1
  4038de:	d1f9      	bne.n	4038d4 <Reset_Handler+0x78>
  4038e0:	e7d2      	b.n	403888 <Reset_Handler+0x2c>
  4038e2:	bf00      	nop
  4038e4:	20000000 	.word	0x20000000
  4038e8:	0040b264 	.word	0x0040b264
  4038ec:	20000e30 	.word	0x20000e30
  4038f0:	2000625c 	.word	0x2000625c
  4038f4:	20000e30 	.word	0x20000e30
  4038f8:	e000ed00 	.word	0xe000ed00
  4038fc:	00400000 	.word	0x00400000
  403900:	004062cd 	.word	0x004062cd
  403904:	004057d5 	.word	0x004057d5

00403908 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  403908:	4b3c      	ldr	r3, [pc, #240]	; (4039fc <SystemCoreClockUpdate+0xf4>)
  40390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40390c:	f003 0303 	and.w	r3, r3, #3
  403910:	2b03      	cmp	r3, #3
  403912:	d80e      	bhi.n	403932 <SystemCoreClockUpdate+0x2a>
  403914:	e8df f003 	tbb	[pc, r3]
  403918:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40391c:	4b38      	ldr	r3, [pc, #224]	; (403a00 <SystemCoreClockUpdate+0xf8>)
  40391e:	695b      	ldr	r3, [r3, #20]
  403920:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403924:	bf14      	ite	ne
  403926:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40392a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40392e:	4b35      	ldr	r3, [pc, #212]	; (403a04 <SystemCoreClockUpdate+0xfc>)
  403930:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  403932:	4b32      	ldr	r3, [pc, #200]	; (4039fc <SystemCoreClockUpdate+0xf4>)
  403934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403936:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40393a:	2b70      	cmp	r3, #112	; 0x70
  40393c:	d055      	beq.n	4039ea <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40393e:	4b2f      	ldr	r3, [pc, #188]	; (4039fc <SystemCoreClockUpdate+0xf4>)
  403940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  403942:	4930      	ldr	r1, [pc, #192]	; (403a04 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403944:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  403948:	680b      	ldr	r3, [r1, #0]
  40394a:	40d3      	lsrs	r3, r2
  40394c:	600b      	str	r3, [r1, #0]
  40394e:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403950:	4b2a      	ldr	r3, [pc, #168]	; (4039fc <SystemCoreClockUpdate+0xf4>)
  403952:	6a1b      	ldr	r3, [r3, #32]
  403954:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403958:	d003      	beq.n	403962 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40395a:	4a2b      	ldr	r2, [pc, #172]	; (403a08 <SystemCoreClockUpdate+0x100>)
  40395c:	4b29      	ldr	r3, [pc, #164]	; (403a04 <SystemCoreClockUpdate+0xfc>)
  40395e:	601a      	str	r2, [r3, #0]
  403960:	e7e7      	b.n	403932 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403962:	4a2a      	ldr	r2, [pc, #168]	; (403a0c <SystemCoreClockUpdate+0x104>)
  403964:	4b27      	ldr	r3, [pc, #156]	; (403a04 <SystemCoreClockUpdate+0xfc>)
  403966:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403968:	4b24      	ldr	r3, [pc, #144]	; (4039fc <SystemCoreClockUpdate+0xf4>)
  40396a:	6a1b      	ldr	r3, [r3, #32]
  40396c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403970:	2b10      	cmp	r3, #16
  403972:	d005      	beq.n	403980 <SystemCoreClockUpdate+0x78>
  403974:	2b20      	cmp	r3, #32
  403976:	d1dc      	bne.n	403932 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403978:	4a23      	ldr	r2, [pc, #140]	; (403a08 <SystemCoreClockUpdate+0x100>)
  40397a:	4b22      	ldr	r3, [pc, #136]	; (403a04 <SystemCoreClockUpdate+0xfc>)
  40397c:	601a      	str	r2, [r3, #0]
			break;
  40397e:	e7d8      	b.n	403932 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403980:	4a23      	ldr	r2, [pc, #140]	; (403a10 <SystemCoreClockUpdate+0x108>)
  403982:	4b20      	ldr	r3, [pc, #128]	; (403a04 <SystemCoreClockUpdate+0xfc>)
  403984:	601a      	str	r2, [r3, #0]
			break;
  403986:	e7d4      	b.n	403932 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403988:	4b1c      	ldr	r3, [pc, #112]	; (4039fc <SystemCoreClockUpdate+0xf4>)
  40398a:	6a1b      	ldr	r3, [r3, #32]
  40398c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403990:	d018      	beq.n	4039c4 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  403992:	4a1d      	ldr	r2, [pc, #116]	; (403a08 <SystemCoreClockUpdate+0x100>)
  403994:	4b1b      	ldr	r3, [pc, #108]	; (403a04 <SystemCoreClockUpdate+0xfc>)
  403996:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  403998:	4b18      	ldr	r3, [pc, #96]	; (4039fc <SystemCoreClockUpdate+0xf4>)
  40399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40399c:	f003 0303 	and.w	r3, r3, #3
  4039a0:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4039a2:	4a16      	ldr	r2, [pc, #88]	; (4039fc <SystemCoreClockUpdate+0xf4>)
  4039a4:	bf07      	ittee	eq
  4039a6:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4039a8:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4039aa:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4039ac:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4039ae:	4815      	ldr	r0, [pc, #84]	; (403a04 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4039b0:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4039b4:	6803      	ldr	r3, [r0, #0]
  4039b6:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  4039ba:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4039bc:	fbb3 f3f2 	udiv	r3, r3, r2
  4039c0:	6003      	str	r3, [r0, #0]
  4039c2:	e7b6      	b.n	403932 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4039c4:	4a11      	ldr	r2, [pc, #68]	; (403a0c <SystemCoreClockUpdate+0x104>)
  4039c6:	4b0f      	ldr	r3, [pc, #60]	; (403a04 <SystemCoreClockUpdate+0xfc>)
  4039c8:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4039ca:	4b0c      	ldr	r3, [pc, #48]	; (4039fc <SystemCoreClockUpdate+0xf4>)
  4039cc:	6a1b      	ldr	r3, [r3, #32]
  4039ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4039d2:	2b10      	cmp	r3, #16
  4039d4:	d005      	beq.n	4039e2 <SystemCoreClockUpdate+0xda>
  4039d6:	2b20      	cmp	r3, #32
  4039d8:	d1de      	bne.n	403998 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4039da:	4a0b      	ldr	r2, [pc, #44]	; (403a08 <SystemCoreClockUpdate+0x100>)
  4039dc:	4b09      	ldr	r3, [pc, #36]	; (403a04 <SystemCoreClockUpdate+0xfc>)
  4039de:	601a      	str	r2, [r3, #0]
					break;
  4039e0:	e7da      	b.n	403998 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4039e2:	4a0b      	ldr	r2, [pc, #44]	; (403a10 <SystemCoreClockUpdate+0x108>)
  4039e4:	4b07      	ldr	r3, [pc, #28]	; (403a04 <SystemCoreClockUpdate+0xfc>)
  4039e6:	601a      	str	r2, [r3, #0]
					break;
  4039e8:	e7d6      	b.n	403998 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4039ea:	4a06      	ldr	r2, [pc, #24]	; (403a04 <SystemCoreClockUpdate+0xfc>)
  4039ec:	6813      	ldr	r3, [r2, #0]
  4039ee:	4909      	ldr	r1, [pc, #36]	; (403a14 <SystemCoreClockUpdate+0x10c>)
  4039f0:	fba1 1303 	umull	r1, r3, r1, r3
  4039f4:	085b      	lsrs	r3, r3, #1
  4039f6:	6013      	str	r3, [r2, #0]
  4039f8:	4770      	bx	lr
  4039fa:	bf00      	nop
  4039fc:	400e0400 	.word	0x400e0400
  403a00:	400e1410 	.word	0x400e1410
  403a04:	20000480 	.word	0x20000480
  403a08:	00b71b00 	.word	0x00b71b00
  403a0c:	003d0900 	.word	0x003d0900
  403a10:	007a1200 	.word	0x007a1200
  403a14:	aaaaaaab 	.word	0xaaaaaaab

00403a18 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403a18:	4b1a      	ldr	r3, [pc, #104]	; (403a84 <system_init_flash+0x6c>)
  403a1a:	4298      	cmp	r0, r3
  403a1c:	d914      	bls.n	403a48 <system_init_flash+0x30>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  403a1e:	4b1a      	ldr	r3, [pc, #104]	; (403a88 <system_init_flash+0x70>)
  403a20:	4298      	cmp	r0, r3
  403a22:	d919      	bls.n	403a58 <system_init_flash+0x40>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  403a24:	4b19      	ldr	r3, [pc, #100]	; (403a8c <system_init_flash+0x74>)
  403a26:	4298      	cmp	r0, r3
  403a28:	d91d      	bls.n	403a66 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  403a2a:	4b19      	ldr	r3, [pc, #100]	; (403a90 <system_init_flash+0x78>)
  403a2c:	4298      	cmp	r0, r3
  403a2e:	d921      	bls.n	403a74 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  403a30:	4b18      	ldr	r3, [pc, #96]	; (403a94 <system_init_flash+0x7c>)
  403a32:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403a34:	bf94      	ite	ls
  403a36:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403a3a:	4b17      	ldrhi	r3, [pc, #92]	; (403a98 <system_init_flash+0x80>)
  403a3c:	4a17      	ldr	r2, [pc, #92]	; (403a9c <system_init_flash+0x84>)
  403a3e:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403a40:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403a44:	6013      	str	r3, [r2, #0]
  403a46:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403a48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  403a4c:	4a13      	ldr	r2, [pc, #76]	; (403a9c <system_init_flash+0x84>)
  403a4e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403a50:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403a54:	6013      	str	r3, [r2, #0]
  403a56:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403a58:	4b11      	ldr	r3, [pc, #68]	; (403aa0 <system_init_flash+0x88>)
  403a5a:	4a10      	ldr	r2, [pc, #64]	; (403a9c <system_init_flash+0x84>)
  403a5c:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403a5e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403a62:	6013      	str	r3, [r2, #0]
  403a64:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403a66:	4b0f      	ldr	r3, [pc, #60]	; (403aa4 <system_init_flash+0x8c>)
  403a68:	4a0c      	ldr	r2, [pc, #48]	; (403a9c <system_init_flash+0x84>)
  403a6a:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403a6c:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403a70:	6013      	str	r3, [r2, #0]
  403a72:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403a74:	4b0c      	ldr	r3, [pc, #48]	; (403aa8 <system_init_flash+0x90>)
  403a76:	4a09      	ldr	r2, [pc, #36]	; (403a9c <system_init_flash+0x84>)
  403a78:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403a7a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403a7e:	6013      	str	r3, [r2, #0]
  403a80:	4770      	bx	lr
  403a82:	bf00      	nop
  403a84:	01312cff 	.word	0x01312cff
  403a88:	026259ff 	.word	0x026259ff
  403a8c:	039386ff 	.word	0x039386ff
  403a90:	04c4b3ff 	.word	0x04c4b3ff
  403a94:	05f5e0ff 	.word	0x05f5e0ff
  403a98:	04000500 	.word	0x04000500
  403a9c:	400e0a00 	.word	0x400e0a00
  403aa0:	04000100 	.word	0x04000100
  403aa4:	04000200 	.word	0x04000200
  403aa8:	04000300 	.word	0x04000300

00403aac <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403aac:	4b0a      	ldr	r3, [pc, #40]	; (403ad8 <_sbrk+0x2c>)
  403aae:	681b      	ldr	r3, [r3, #0]
  403ab0:	b153      	cbz	r3, 403ac8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  403ab2:	4b09      	ldr	r3, [pc, #36]	; (403ad8 <_sbrk+0x2c>)
  403ab4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403ab6:	181a      	adds	r2, r3, r0
  403ab8:	4908      	ldr	r1, [pc, #32]	; (403adc <_sbrk+0x30>)
  403aba:	4291      	cmp	r1, r2
  403abc:	db08      	blt.n	403ad0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  403abe:	4610      	mov	r0, r2
  403ac0:	4a05      	ldr	r2, [pc, #20]	; (403ad8 <_sbrk+0x2c>)
  403ac2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403ac4:	4618      	mov	r0, r3
  403ac6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403ac8:	4a05      	ldr	r2, [pc, #20]	; (403ae0 <_sbrk+0x34>)
  403aca:	4b03      	ldr	r3, [pc, #12]	; (403ad8 <_sbrk+0x2c>)
  403acc:	601a      	str	r2, [r3, #0]
  403ace:	e7f0      	b.n	403ab2 <_sbrk+0x6>
		return (caddr_t) -1;	
  403ad0:	f04f 30ff 	mov.w	r0, #4294967295
}
  403ad4:	4770      	bx	lr
  403ad6:	bf00      	nop
  403ad8:	200061a0 	.word	0x200061a0
  403adc:	20013ffc 	.word	0x20013ffc
  403ae0:	20009260 	.word	0x20009260

00403ae4 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  403ae4:	b510      	push	{r4, lr}
  403ae6:	4604      	mov	r4, r0
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  403ae8:	2100      	movs	r1, #0
  403aea:	480f      	ldr	r0, [pc, #60]	; (403b28 <disk_initialize+0x44>)
  403aec:	4b0f      	ldr	r3, [pc, #60]	; (403b2c <disk_initialize+0x48>)
  403aee:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  403af0:	2c01      	cmp	r4, #1
  403af2:	d901      	bls.n	403af8 <disk_initialize+0x14>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  403af4:	2001      	movs	r0, #1
  403af6:	bd10      	pop	{r4, pc}
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  403af8:	4620      	mov	r0, r4
  403afa:	4b0d      	ldr	r3, [pc, #52]	; (403b30 <disk_initialize+0x4c>)
  403afc:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  403afe:	2803      	cmp	r0, #3
  403b00:	d106      	bne.n	403b10 <disk_initialize+0x2c>
		mem_status = mem_test_unit_ready(drv);
  403b02:	4620      	mov	r0, r4
  403b04:	4b0a      	ldr	r3, [pc, #40]	; (403b30 <disk_initialize+0x4c>)
  403b06:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  403b08:	2803      	cmp	r0, #3
  403b0a:	d101      	bne.n	403b10 <disk_initialize+0x2c>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  403b0c:	2001      	movs	r0, #1
  403b0e:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  403b10:	b938      	cbnz	r0, 403b22 <disk_initialize+0x3e>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  403b12:	4620      	mov	r0, r4
  403b14:	4b07      	ldr	r3, [pc, #28]	; (403b34 <disk_initialize+0x50>)
  403b16:	4798      	blx	r3
  403b18:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  403b1a:	bf14      	ite	ne
  403b1c:	2004      	movne	r0, #4
  403b1e:	2000      	moveq	r0, #0
  403b20:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  403b22:	2001      	movs	r0, #1
}
  403b24:	bd10      	pop	{r4, pc}
  403b26:	bf00      	nop
  403b28:	400e1460 	.word	0x400e1460
  403b2c:	0040319d 	.word	0x0040319d
  403b30:	00402a05 	.word	0x00402a05
  403b34:	00402a35 	.word	0x00402a35

00403b38 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  403b38:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  403b3a:	4b05      	ldr	r3, [pc, #20]	; (403b50 <disk_status+0x18>)
  403b3c:	4798      	blx	r3
  403b3e:	b120      	cbz	r0, 403b4a <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  403b40:	2802      	cmp	r0, #2
  403b42:	bf0c      	ite	eq
  403b44:	2003      	moveq	r0, #3
  403b46:	2001      	movne	r0, #1
  403b48:	bd08      	pop	{r3, pc}
		return 0;
  403b4a:	2000      	movs	r0, #0
	}
}
  403b4c:	bd08      	pop	{r3, pc}
  403b4e:	bf00      	nop
  403b50:	00402a05 	.word	0x00402a05

00403b54 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  403b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b58:	b083      	sub	sp, #12
  403b5a:	4680      	mov	r8, r0
  403b5c:	460d      	mov	r5, r1
  403b5e:	4614      	mov	r4, r2
  403b60:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  403b62:	4b15      	ldr	r3, [pc, #84]	; (403bb8 <disk_read+0x64>)
  403b64:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  403b66:	b918      	cbnz	r0, 403b70 <disk_read+0x1c>
		return RES_ERROR;
  403b68:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  403b6a:	b003      	add	sp, #12
  403b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b70:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  403b72:	a901      	add	r1, sp, #4
  403b74:	4640      	mov	r0, r8
  403b76:	4b11      	ldr	r3, [pc, #68]	; (403bbc <disk_read+0x68>)
  403b78:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  403b7a:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  403b7c:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  403b80:	9b01      	ldr	r3, [sp, #4]
  403b82:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  403b86:	429a      	cmp	r2, r3
  403b88:	d901      	bls.n	403b8e <disk_read+0x3a>
		return RES_PARERR;
  403b8a:	2004      	movs	r0, #4
  403b8c:	e7ed      	b.n	403b6a <disk_read+0x16>
	for (i = 0; i < count; i++) {
  403b8e:	46ba      	mov	sl, r7
  403b90:	b177      	cbz	r7, 403bb0 <disk_read+0x5c>
  403b92:	0276      	lsls	r6, r6, #9
  403b94:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  403b96:	f8df b028 	ldr.w	fp, [pc, #40]	; 403bc0 <disk_read+0x6c>
  403b9a:	462a      	mov	r2, r5
  403b9c:	4621      	mov	r1, r4
  403b9e:	4640      	mov	r0, r8
  403ba0:	47d8      	blx	fp
  403ba2:	b938      	cbnz	r0, 403bb4 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  403ba4:	3701      	adds	r7, #1
  403ba6:	444c      	add	r4, r9
  403ba8:	4435      	add	r5, r6
  403baa:	4557      	cmp	r7, sl
  403bac:	d1f5      	bne.n	403b9a <disk_read+0x46>
  403bae:	e7dc      	b.n	403b6a <disk_read+0x16>
	return RES_OK;
  403bb0:	2000      	movs	r0, #0
  403bb2:	e7da      	b.n	403b6a <disk_read+0x16>
			return RES_ERROR;
  403bb4:	2001      	movs	r0, #1
  403bb6:	e7d8      	b.n	403b6a <disk_read+0x16>
  403bb8:	00402a2d 	.word	0x00402a2d
  403bbc:	00402a19 	.word	0x00402a19
  403bc0:	00402a49 	.word	0x00402a49

00403bc4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  403bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403bc8:	b083      	sub	sp, #12
  403bca:	4680      	mov	r8, r0
  403bcc:	460d      	mov	r5, r1
  403bce:	4614      	mov	r4, r2
  403bd0:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  403bd2:	4b15      	ldr	r3, [pc, #84]	; (403c28 <disk_write+0x64>)
  403bd4:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  403bd6:	b918      	cbnz	r0, 403be0 <disk_write+0x1c>
		return RES_ERROR;
  403bd8:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  403bda:	b003      	add	sp, #12
  403bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403be0:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  403be2:	a901      	add	r1, sp, #4
  403be4:	4640      	mov	r0, r8
  403be6:	4b11      	ldr	r3, [pc, #68]	; (403c2c <disk_write+0x68>)
  403be8:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  403bea:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  403bec:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  403bf0:	9b01      	ldr	r3, [sp, #4]
  403bf2:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  403bf6:	429a      	cmp	r2, r3
  403bf8:	d901      	bls.n	403bfe <disk_write+0x3a>
		return RES_PARERR;
  403bfa:	2004      	movs	r0, #4
  403bfc:	e7ed      	b.n	403bda <disk_write+0x16>
	for (i = 0; i < count; i++) {
  403bfe:	46ba      	mov	sl, r7
  403c00:	b177      	cbz	r7, 403c20 <disk_write+0x5c>
  403c02:	0276      	lsls	r6, r6, #9
  403c04:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  403c06:	f8df b028 	ldr.w	fp, [pc, #40]	; 403c30 <disk_write+0x6c>
  403c0a:	462a      	mov	r2, r5
  403c0c:	4621      	mov	r1, r4
  403c0e:	4640      	mov	r0, r8
  403c10:	47d8      	blx	fp
  403c12:	b938      	cbnz	r0, 403c24 <disk_write+0x60>
	for (i = 0; i < count; i++) {
  403c14:	3701      	adds	r7, #1
  403c16:	444c      	add	r4, r9
  403c18:	4435      	add	r5, r6
  403c1a:	4557      	cmp	r7, sl
  403c1c:	d1f5      	bne.n	403c0a <disk_write+0x46>
  403c1e:	e7dc      	b.n	403bda <disk_write+0x16>
	return RES_OK;
  403c20:	2000      	movs	r0, #0
  403c22:	e7da      	b.n	403bda <disk_write+0x16>
			return RES_ERROR;
  403c24:	2001      	movs	r0, #1
  403c26:	e7d8      	b.n	403bda <disk_write+0x16>
  403c28:	00402a2d 	.word	0x00402a2d
  403c2c:	00402a19 	.word	0x00402a19
  403c30:	00402a61 	.word	0x00402a61

00403c34 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  403c34:	b510      	push	{r4, lr}
  403c36:	b082      	sub	sp, #8
  403c38:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  403c3a:	2903      	cmp	r1, #3
  403c3c:	d827      	bhi.n	403c8e <disk_ioctl+0x5a>
  403c3e:	e8df f001 	tbb	[pc, r1]
  403c42:	071f      	.short	0x071f
  403c44:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  403c46:	2301      	movs	r3, #1
  403c48:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  403c4a:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  403c4c:	b002      	add	sp, #8
  403c4e:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  403c50:	a901      	add	r1, sp, #4
  403c52:	4b11      	ldr	r3, [pc, #68]	; (403c98 <disk_ioctl+0x64>)
  403c54:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  403c56:	9b01      	ldr	r3, [sp, #4]
  403c58:	3301      	adds	r3, #1
  403c5a:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  403c5c:	2000      	movs	r0, #0
	break;
  403c5e:	e7f5      	b.n	403c4c <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  403c60:	4b0e      	ldr	r3, [pc, #56]	; (403c9c <disk_ioctl+0x68>)
  403c62:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  403c64:	2808      	cmp	r0, #8
  403c66:	d814      	bhi.n	403c92 <disk_ioctl+0x5e>
  403c68:	f44f 738b 	mov.w	r3, #278	; 0x116
  403c6c:	fa23 f000 	lsr.w	r0, r3, r0
  403c70:	f010 0f01 	tst.w	r0, #1
  403c74:	d101      	bne.n	403c7a <disk_ioctl+0x46>
			return RES_ERROR;
  403c76:	2001      	movs	r0, #1
  403c78:	e7e8      	b.n	403c4c <disk_ioctl+0x18>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  403c7a:	2000      	movs	r0, #0
  403c7c:	7020      	strb	r0, [r4, #0]
	break;
  403c7e:	e7e5      	b.n	403c4c <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  403c80:	4b07      	ldr	r3, [pc, #28]	; (403ca0 <disk_ioctl+0x6c>)
  403c82:	4798      	blx	r3
  403c84:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  403c86:	bf0c      	ite	eq
  403c88:	2000      	moveq	r0, #0
  403c8a:	2003      	movne	r0, #3
  403c8c:	e7de      	b.n	403c4c <disk_ioctl+0x18>
		res = RES_PARERR;
  403c8e:	2004      	movs	r0, #4
  403c90:	e7dc      	b.n	403c4c <disk_ioctl+0x18>
			return RES_ERROR;
  403c92:	2001      	movs	r0, #1
  403c94:	e7da      	b.n	403c4c <disk_ioctl+0x18>
  403c96:	bf00      	nop
  403c98:	00402a19 	.word	0x00402a19
  403c9c:	00402a2d 	.word	0x00402a2d
  403ca0:	00402a05 	.word	0x00402a05

00403ca4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  403ca4:	b530      	push	{r4, r5, lr}
  403ca6:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  403ca8:	4c11      	ldr	r4, [pc, #68]	; (403cf0 <get_fattime+0x4c>)
  403caa:	ab07      	add	r3, sp, #28
  403cac:	aa08      	add	r2, sp, #32
  403cae:	a909      	add	r1, sp, #36	; 0x24
  403cb0:	4620      	mov	r0, r4
  403cb2:	4d10      	ldr	r5, [pc, #64]	; (403cf4 <get_fattime+0x50>)
  403cb4:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  403cb6:	ab03      	add	r3, sp, #12
  403cb8:	9300      	str	r3, [sp, #0]
  403cba:	ab04      	add	r3, sp, #16
  403cbc:	aa05      	add	r2, sp, #20
  403cbe:	a906      	add	r1, sp, #24
  403cc0:	4620      	mov	r0, r4
  403cc2:	4c0d      	ldr	r4, [pc, #52]	; (403cf8 <get_fattime+0x54>)
  403cc4:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  403cc6:	9b04      	ldr	r3, [sp, #16]
  403cc8:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  403cca:	9805      	ldr	r0, [sp, #20]
  403ccc:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  403cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
  403cd2:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  403cd6:	9808      	ldr	r0, [sp, #32]
  403cd8:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  403cdc:	9807      	ldr	r0, [sp, #28]
  403cde:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  403ce2:	9806      	ldr	r0, [sp, #24]
  403ce4:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  403ce8:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  403cec:	b00b      	add	sp, #44	; 0x2c
  403cee:	bd30      	pop	{r4, r5, pc}
  403cf0:	400e1460 	.word	0x400e1460
  403cf4:	004031b3 	.word	0x004031b3
  403cf8:	004032a1 	.word	0x004032a1

00403cfc <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  403cfc:	b13a      	cbz	r2, 403d0e <mem_cpy+0x12>
  403cfe:	3801      	subs	r0, #1
  403d00:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  403d02:	f811 3b01 	ldrb.w	r3, [r1], #1
  403d06:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  403d0a:	4291      	cmp	r1, r2
  403d0c:	d1f9      	bne.n	403d02 <mem_cpy+0x6>
  403d0e:	4770      	bx	lr

00403d10 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  403d10:	b122      	cbz	r2, 403d1c <mem_set+0xc>
  403d12:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  403d14:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
  403d18:	4282      	cmp	r2, r0
  403d1a:	d1fb      	bne.n	403d14 <mem_set+0x4>
  403d1c:	4770      	bx	lr

00403d1e <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  403d1e:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  403d20:	6983      	ldr	r3, [r0, #24]
  403d22:	3b02      	subs	r3, #2
  403d24:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
  403d26:	bf3d      	ittte	cc
  403d28:	7883      	ldrbcc	r3, [r0, #2]
  403d2a:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
  403d2c:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  403d30:	2000      	movcs	r0, #0
}
  403d32:	4770      	bx	lr

00403d34 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  403d34:	4602      	mov	r2, r0
  403d36:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  403d3a:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  403d3c:	01c3      	lsls	r3, r0, #7
  403d3e:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  403d42:	f812 0b01 	ldrb.w	r0, [r2], #1
  403d46:	fa50 f383 	uxtab	r3, r0, r3
  403d4a:	b2d8      	uxtb	r0, r3
  403d4c:	428a      	cmp	r2, r1
  403d4e:	d1f5      	bne.n	403d3c <sum_sfn+0x8>
	return sum;
}
  403d50:	4770      	bx	lr
	...

00403d54 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  403d54:	b198      	cbz	r0, 403d7e <validate+0x2a>
{
  403d56:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  403d58:	7802      	ldrb	r2, [r0, #0]
  403d5a:	b90a      	cbnz	r2, 403d60 <validate+0xc>
		return FR_INVALID_OBJECT;
  403d5c:	2009      	movs	r0, #9
  403d5e:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  403d60:	88c2      	ldrh	r2, [r0, #6]
  403d62:	428a      	cmp	r2, r1
  403d64:	d001      	beq.n	403d6a <validate+0x16>
		return FR_INVALID_OBJECT;
  403d66:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  403d68:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  403d6a:	7840      	ldrb	r0, [r0, #1]
  403d6c:	4b05      	ldr	r3, [pc, #20]	; (403d84 <validate+0x30>)
  403d6e:	4798      	blx	r3
  403d70:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  403d74:	2800      	cmp	r0, #0
  403d76:	bf14      	ite	ne
  403d78:	2003      	movne	r0, #3
  403d7a:	2000      	moveq	r0, #0
  403d7c:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  403d7e:	2009      	movs	r0, #9
  403d80:	4770      	bx	lr
  403d82:	bf00      	nop
  403d84:	00403b39 	.word	0x00403b39

00403d88 <check_fs>:
{
  403d88:	b538      	push	{r3, r4, r5, lr}
  403d8a:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  403d8c:	2301      	movs	r3, #1
  403d8e:	460a      	mov	r2, r1
  403d90:	f100 0130 	add.w	r1, r0, #48	; 0x30
  403d94:	7840      	ldrb	r0, [r0, #1]
  403d96:	4d1d      	ldr	r5, [pc, #116]	; (403e0c <check_fs+0x84>)
  403d98:	47a8      	blx	r5
  403d9a:	b108      	cbz	r0, 403da0 <check_fs+0x18>
		return 3;
  403d9c:	2003      	movs	r0, #3
  403d9e:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  403da0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  403da4:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  403da8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403dac:	b21b      	sxth	r3, r3
  403dae:	4a18      	ldr	r2, [pc, #96]	; (403e10 <check_fs+0x88>)
  403db0:	4293      	cmp	r3, r2
  403db2:	d001      	beq.n	403db8 <check_fs+0x30>
		return 2;
  403db4:	2002      	movs	r0, #2
  403db6:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  403db8:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  403dbc:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  403dc0:	041b      	lsls	r3, r3, #16
  403dc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  403dc6:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  403dca:	4313      	orrs	r3, r2
  403dcc:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  403dd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403dd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  403dd8:	4a0e      	ldr	r2, [pc, #56]	; (403e14 <check_fs+0x8c>)
  403dda:	4293      	cmp	r3, r2
  403ddc:	d013      	beq.n	403e06 <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  403dde:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  403de2:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  403de6:	0400      	lsls	r0, r0, #16
  403de8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  403dec:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  403df0:	4318      	orrs	r0, r3
  403df2:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  403df6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  403dfa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  403dfe:	1a80      	subs	r0, r0, r2
  403e00:	bf18      	it	ne
  403e02:	2001      	movne	r0, #1
  403e04:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  403e06:	2000      	movs	r0, #0
}
  403e08:	bd38      	pop	{r3, r4, r5, pc}
  403e0a:	bf00      	nop
  403e0c:	00403b55 	.word	0x00403b55
  403e10:	ffffaa55 	.word	0xffffaa55
  403e14:	00544146 	.word	0x00544146

00403e18 <chk_mounted>:
{
  403e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  403e1a:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  403e1c:	781c      	ldrb	r4, [r3, #0]
  403e1e:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  403e20:	2c09      	cmp	r4, #9
  403e22:	d80a      	bhi.n	403e3a <chk_mounted+0x22>
  403e24:	785d      	ldrb	r5, [r3, #1]
  403e26:	2d3a      	cmp	r5, #58	; 0x3a
  403e28:	d001      	beq.n	403e2e <chk_mounted+0x16>
  403e2a:	2400      	movs	r4, #0
  403e2c:	e006      	b.n	403e3c <chk_mounted+0x24>
		p += 2; *path = p;				/* Return pointer to the path name */
  403e2e:	3302      	adds	r3, #2
  403e30:	6003      	str	r3, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  403e32:	2c07      	cmp	r4, #7
  403e34:	d902      	bls.n	403e3c <chk_mounted+0x24>
		return FR_INVALID_DRIVE;
  403e36:	200b      	movs	r0, #11
  403e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403e3a:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  403e3c:	4bad      	ldr	r3, [pc, #692]	; (4040f4 <chk_mounted+0x2dc>)
  403e3e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  403e42:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  403e44:	2d00      	cmp	r5, #0
  403e46:	f000 813d 	beq.w	4040c4 <chk_mounted+0x2ac>
  403e4a:	4616      	mov	r6, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  403e4c:	782b      	ldrb	r3, [r5, #0]
  403e4e:	b17b      	cbz	r3, 403e70 <chk_mounted+0x58>
		stat = disk_status(fs->drv);
  403e50:	7868      	ldrb	r0, [r5, #1]
  403e52:	4ba9      	ldr	r3, [pc, #676]	; (4040f8 <chk_mounted+0x2e0>)
  403e54:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  403e56:	f010 0f01 	tst.w	r0, #1
  403e5a:	d109      	bne.n	403e70 <chk_mounted+0x58>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  403e5c:	2e00      	cmp	r6, #0
  403e5e:	f000 8133 	beq.w	4040c8 <chk_mounted+0x2b0>
  403e62:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  403e66:	2800      	cmp	r0, #0
  403e68:	bf0c      	ite	eq
  403e6a:	2000      	moveq	r0, #0
  403e6c:	200a      	movne	r0, #10
  403e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  403e70:	2300      	movs	r3, #0
  403e72:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  403e74:	b2e0      	uxtb	r0, r4
  403e76:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  403e78:	4ba0      	ldr	r3, [pc, #640]	; (4040fc <chk_mounted+0x2e4>)
  403e7a:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  403e7c:	f010 0f01 	tst.w	r0, #1
  403e80:	d001      	beq.n	403e86 <chk_mounted+0x6e>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  403e82:	2003      	movs	r0, #3
  403e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  403e86:	b126      	cbz	r6, 403e92 <chk_mounted+0x7a>
  403e88:	f010 0f04 	tst.w	r0, #4
  403e8c:	d001      	beq.n	403e92 <chk_mounted+0x7a>
		return FR_WRITE_PROTECTED;
  403e8e:	200a      	movs	r0, #10
  403e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  403e92:	2100      	movs	r1, #0
  403e94:	4628      	mov	r0, r5
  403e96:	4b9a      	ldr	r3, [pc, #616]	; (404100 <chk_mounted+0x2e8>)
  403e98:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  403e9a:	2801      	cmp	r0, #1
  403e9c:	d006      	beq.n	403eac <chk_mounted+0x94>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  403e9e:	2400      	movs	r4, #0
	if (fmt == 3) return FR_DISK_ERR;
  403ea0:	2803      	cmp	r0, #3
  403ea2:	f000 8113 	beq.w	4040cc <chk_mounted+0x2b4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  403ea6:	b1c8      	cbz	r0, 403edc <chk_mounted+0xc4>
  403ea8:	200d      	movs	r0, #13
  403eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  403eac:	f895 31f2 	ldrb.w	r3, [r5, #498]	; 0x1f2
  403eb0:	b90b      	cbnz	r3, 403eb6 <chk_mounted+0x9e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  403eb2:	200d      	movs	r0, #13
  403eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  403eb6:	f895 31f9 	ldrb.w	r3, [r5, #505]	; 0x1f9
  403eba:	f895 41f8 	ldrb.w	r4, [r5, #504]	; 0x1f8
  403ebe:	0424      	lsls	r4, r4, #16
  403ec0:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  403ec4:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
  403ec8:	431c      	orrs	r4, r3
  403eca:	f895 31f7 	ldrb.w	r3, [r5, #503]	; 0x1f7
  403ece:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  403ed2:	4621      	mov	r1, r4
  403ed4:	4628      	mov	r0, r5
  403ed6:	4b8a      	ldr	r3, [pc, #552]	; (404100 <chk_mounted+0x2e8>)
  403ed8:	4798      	blx	r3
  403eda:	e7e1      	b.n	403ea0 <chk_mounted+0x88>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  403edc:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  403ee0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  403ee4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403ee8:	b21b      	sxth	r3, r3
  403eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403eee:	d001      	beq.n	403ef4 <chk_mounted+0xdc>
		return FR_NO_FILESYSTEM;
  403ef0:	200d      	movs	r0, #13
  403ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  403ef4:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
  403ef8:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  403efc:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  403f00:	d10d      	bne.n	403f1e <chk_mounted+0x106>
  403f02:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
  403f06:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
  403f0a:	0412      	lsls	r2, r2, #16
  403f0c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  403f10:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
  403f14:	431a      	orrs	r2, r3
  403f16:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
  403f1a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  403f1e:	61ea      	str	r2, [r5, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  403f20:	f895 e040 	ldrb.w	lr, [r5, #64]	; 0x40
  403f24:	f885 e003 	strb.w	lr, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  403f28:	f10e 33ff 	add.w	r3, lr, #4294967295
  403f2c:	b2db      	uxtb	r3, r3
  403f2e:	2b01      	cmp	r3, #1
  403f30:	d901      	bls.n	403f36 <chk_mounted+0x11e>
  403f32:	200d      	movs	r0, #13
  403f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  403f36:	f895 603d 	ldrb.w	r6, [r5, #61]	; 0x3d
  403f3a:	70ae      	strb	r6, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  403f3c:	2e00      	cmp	r6, #0
  403f3e:	f000 80c7 	beq.w	4040d0 <chk_mounted+0x2b8>
  403f42:	1e73      	subs	r3, r6, #1
  403f44:	4233      	tst	r3, r6
  403f46:	d001      	beq.n	403f4c <chk_mounted+0x134>
  403f48:	200d      	movs	r0, #13
  403f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  403f4c:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
  403f50:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
  403f54:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  403f58:	8129      	strh	r1, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  403f5a:	f011 0f0f 	tst.w	r1, #15
  403f5e:	f040 80b9 	bne.w	4040d4 <chk_mounted+0x2bc>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  403f62:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
  403f66:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  403f6a:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  403f6e:	d10d      	bne.n	403f8c <chk_mounted+0x174>
  403f70:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
  403f74:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
  403f78:	041b      	lsls	r3, r3, #16
  403f7a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  403f7e:	f895 0050 	ldrb.w	r0, [r5, #80]	; 0x50
  403f82:	4303      	orrs	r3, r0
  403f84:	f895 0051 	ldrb.w	r0, [r5, #81]	; 0x51
  403f88:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  403f8c:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
  403f90:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  403f94:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  403f98:	f000 809e 	beq.w	4040d8 <chk_mounted+0x2c0>
	fasize *= b;										/* Number of sectors for FAT area */
  403f9c:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  403fa0:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  403fa4:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  403fa6:	4283      	cmp	r3, r0
  403fa8:	f0c0 8098 	bcc.w	4040dc <chk_mounted+0x2c4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  403fac:	1a1b      	subs	r3, r3, r0
  403fae:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  403fb2:	2b00      	cmp	r3, #0
  403fb4:	f000 8094 	beq.w	4040e0 <chk_mounted+0x2c8>
	fmt = FS_FAT12;
  403fb8:	f640 76f5 	movw	r6, #4085	; 0xff5
  403fbc:	42b3      	cmp	r3, r6
  403fbe:	bf8c      	ite	hi
  403fc0:	2602      	movhi	r6, #2
  403fc2:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  403fc4:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  403fc8:	4563      	cmp	r3, ip
  403fca:	f200 80a3 	bhi.w	404114 <chk_mounted+0x2fc>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  403fce:	3302      	adds	r3, #2
  403fd0:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  403fd2:	4420      	add	r0, r4
  403fd4:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  403fd6:	443c      	add	r4, r7
  403fd8:	622c      	str	r4, [r5, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  403fda:	2900      	cmp	r1, #0
  403fdc:	f000 8088 	beq.w	4040f0 <chk_mounted+0x2d8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  403fe0:	4474      	add	r4, lr
  403fe2:	626c      	str	r4, [r5, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  403fe4:	2e02      	cmp	r6, #2
  403fe6:	bf0f      	iteee	eq
  403fe8:	005b      	lsleq	r3, r3, #1
  403fea:	eb03 0143 	addne.w	r1, r3, r3, lsl #1
  403fee:	f003 0301 	andne.w	r3, r3, #1
  403ff2:	eb03 0351 	addne.w	r3, r3, r1, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  403ff6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  403ffa:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  403ffe:	d375      	bcc.n	4040ec <chk_mounted+0x2d4>
	fs->free_clust = 0xFFFFFFFF;
  404000:	f04f 33ff 	mov.w	r3, #4294967295
  404004:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  404006:	2300      	movs	r3, #0
  404008:	60eb      	str	r3, [r5, #12]
  40400a:	e04a      	b.n	4040a2 <chk_mounted+0x28a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40400c:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
  404010:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
  404014:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  404018:	b21b      	sxth	r3, r3
  40401a:	4a3a      	ldr	r2, [pc, #232]	; (404104 <chk_mounted+0x2ec>)
  40401c:	4293      	cmp	r3, r2
  40401e:	d14b      	bne.n	4040b8 <chk_mounted+0x2a0>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  404020:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  404024:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  404028:	041b      	lsls	r3, r3, #16
  40402a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40402e:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
  404032:	4313      	orrs	r3, r2
  404034:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  404038:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40403c:	4a32      	ldr	r2, [pc, #200]	; (404108 <chk_mounted+0x2f0>)
  40403e:	4293      	cmp	r3, r2
  404040:	d13c      	bne.n	4040bc <chk_mounted+0x2a4>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  404042:	f895 2217 	ldrb.w	r2, [r5, #535]	; 0x217
  404046:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  40404a:	041b      	lsls	r3, r3, #16
  40404c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404050:	f895 2214 	ldrb.w	r2, [r5, #532]	; 0x214
  404054:	4313      	orrs	r3, r2
  404056:	f895 2215 	ldrb.w	r2, [r5, #533]	; 0x215
  40405a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  40405e:	4a2b      	ldr	r2, [pc, #172]	; (40410c <chk_mounted+0x2f4>)
  404060:	4293      	cmp	r3, r2
  404062:	d12d      	bne.n	4040c0 <chk_mounted+0x2a8>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  404064:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  404068:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  40406c:	041b      	lsls	r3, r3, #16
  40406e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404072:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
  404076:	4313      	orrs	r3, r2
  404078:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  40407c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404080:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  404082:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  404086:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  40408a:	041b      	lsls	r3, r3, #16
  40408c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404090:	f895 2218 	ldrb.w	r2, [r5, #536]	; 0x218
  404094:	4313      	orrs	r3, r2
  404096:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  40409a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40409e:	612b      	str	r3, [r5, #16]
  4040a0:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  4040a2:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  4040a4:	4a1a      	ldr	r2, [pc, #104]	; (404110 <chk_mounted+0x2f8>)
  4040a6:	8813      	ldrh	r3, [r2, #0]
  4040a8:	3301      	adds	r3, #1
  4040aa:	b29b      	uxth	r3, r3
  4040ac:	8013      	strh	r3, [r2, #0]
  4040ae:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  4040b0:	2000      	movs	r0, #0
  4040b2:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  4040b4:	7128      	strb	r0, [r5, #4]
	return FR_OK;
  4040b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040b8:	2603      	movs	r6, #3
  4040ba:	e7f2      	b.n	4040a2 <chk_mounted+0x28a>
  4040bc:	2603      	movs	r6, #3
  4040be:	e7f0      	b.n	4040a2 <chk_mounted+0x28a>
  4040c0:	2603      	movs	r6, #3
  4040c2:	e7ee      	b.n	4040a2 <chk_mounted+0x28a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  4040c4:	200c      	movs	r0, #12
  4040c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  4040c8:	2000      	movs	r0, #0
  4040ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  4040cc:	2001      	movs	r0, #1
  4040ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  4040d0:	200d      	movs	r0, #13
  4040d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  4040d4:	200d      	movs	r0, #13
  4040d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  4040d8:	200d      	movs	r0, #13
  4040da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  4040dc:	200d      	movs	r0, #13
  4040de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  4040e0:	200d      	movs	r0, #13
  4040e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  4040e4:	200d      	movs	r0, #13
  4040e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  4040e8:	200d      	movs	r0, #13
  4040ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  4040ec:	200d      	movs	r0, #13
  4040ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  4040f0:	200d      	movs	r0, #13
  4040f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040f4:	200061a4 	.word	0x200061a4
  4040f8:	00403b39 	.word	0x00403b39
  4040fc:	00403ae5 	.word	0x00403ae5
  404100:	00403d89 	.word	0x00403d89
  404104:	ffffaa55 	.word	0xffffaa55
  404108:	41615252 	.word	0x41615252
  40410c:	61417272 	.word	0x61417272
  404110:	200061c4 	.word	0x200061c4
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  404114:	3302      	adds	r3, #2
  404116:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  404118:	4420      	add	r0, r4
  40411a:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  40411c:	4427      	add	r7, r4
  40411e:	622f      	str	r7, [r5, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  404120:	2900      	cmp	r1, #0
  404122:	d1e1      	bne.n	4040e8 <chk_mounted+0x2d0>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  404124:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
  404128:	f895 105e 	ldrb.w	r1, [r5, #94]	; 0x5e
  40412c:	0409      	lsls	r1, r1, #16
  40412e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  404132:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
  404136:	4301      	orrs	r1, r0
  404138:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
  40413c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  404140:	6269      	str	r1, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  404142:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  404144:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  404148:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  40414c:	d3ca      	bcc.n	4040e4 <chk_mounted+0x2cc>
	fs->free_clust = 0xFFFFFFFF;
  40414e:	f04f 33ff 	mov.w	r3, #4294967295
  404152:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  404154:	2300      	movs	r3, #0
  404156:	60eb      	str	r3, [r5, #12]
	 	fs->fsi_flag = 0;
  404158:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  40415a:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
  40415e:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
  404162:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  404166:	4422      	add	r2, r4
  404168:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  40416a:	2301      	movs	r3, #1
  40416c:	f105 0130 	add.w	r1, r5, #48	; 0x30
  404170:	7868      	ldrb	r0, [r5, #1]
  404172:	4c03      	ldr	r4, [pc, #12]	; (404180 <chk_mounted+0x368>)
  404174:	47a0      	blx	r4
  404176:	2800      	cmp	r0, #0
  404178:	f43f af48 	beq.w	40400c <chk_mounted+0x1f4>
  40417c:	2603      	movs	r6, #3
  40417e:	e790      	b.n	4040a2 <chk_mounted+0x28a>
  404180:	00403b55 	.word	0x00403b55

00404184 <get_fileinfo>:
{
  404184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	p = fno->fname;
  404188:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
  40418c:	6903      	ldr	r3, [r0, #16]
  40418e:	2b00      	cmp	r3, #0
  404190:	d05e      	beq.n	404250 <get_fileinfo+0xcc>
		dir = dj->dir;
  404192:	6944      	ldr	r4, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
  404194:	f894 e00c 	ldrb.w	lr, [r4, #12]
			c = dir[i];
  404198:	7823      	ldrb	r3, [r4, #0]
			if (c == ' ') break;
  40419a:	2b20      	cmp	r3, #32
  40419c:	d01d      	beq.n	4041da <get_fileinfo+0x56>
  40419e:	4625      	mov	r5, r4
  4041a0:	f101 0711 	add.w	r7, r1, #17
			if (c == NDDE) c = (TCHAR)DDE;
  4041a4:	f04f 08e5 	mov.w	r8, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  4041a8:	f00e 0c08 	and.w	ip, lr, #8
  4041ac:	e008      	b.n	4041c0 <get_fileinfo+0x3c>
			if (c == NDDE) c = (TCHAR)DDE;
  4041ae:	4643      	mov	r3, r8
			*p++ = c;
  4041b0:	f802 3b01 	strb.w	r3, [r2], #1
		for (i = 0; i < 8; i++) {	/* Copy name body */
  4041b4:	42ba      	cmp	r2, r7
  4041b6:	d010      	beq.n	4041da <get_fileinfo+0x56>
			c = dir[i];
  4041b8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
			if (c == ' ') break;
  4041bc:	2b20      	cmp	r3, #32
  4041be:	d00c      	beq.n	4041da <get_fileinfo+0x56>
			if (c == NDDE) c = (TCHAR)DDE;
  4041c0:	2b05      	cmp	r3, #5
  4041c2:	d0f4      	beq.n	4041ae <get_fileinfo+0x2a>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  4041c4:	f1bc 0f00 	cmp.w	ip, #0
  4041c8:	d0f2      	beq.n	4041b0 <get_fileinfo+0x2c>
  4041ca:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
  4041ce:	b2f6      	uxtb	r6, r6
  4041d0:	2e19      	cmp	r6, #25
  4041d2:	d8ed      	bhi.n	4041b0 <get_fileinfo+0x2c>
  4041d4:	3320      	adds	r3, #32
  4041d6:	b2db      	uxtb	r3, r3
  4041d8:	e7ea      	b.n	4041b0 <get_fileinfo+0x2c>
		if (dir[8] != ' ') {		/* Copy name extension */
  4041da:	7a23      	ldrb	r3, [r4, #8]
  4041dc:	2b20      	cmp	r3, #32
  4041de:	d020      	beq.n	404222 <get_fileinfo+0x9e>
			*p++ = '.';
  4041e0:	1c55      	adds	r5, r2, #1
  4041e2:	232e      	movs	r3, #46	; 0x2e
  4041e4:	7013      	strb	r3, [r2, #0]
				c = dir[i];
  4041e6:	7a23      	ldrb	r3, [r4, #8]
				if (c == ' ') break;
  4041e8:	2b20      	cmp	r3, #32
  4041ea:	d019      	beq.n	404220 <get_fileinfo+0x9c>
  4041ec:	f104 0708 	add.w	r7, r4, #8
  4041f0:	f102 0c04 	add.w	ip, r2, #4
  4041f4:	462a      	mov	r2, r5
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  4041f6:	f00e 0510 	and.w	r5, lr, #16
  4041fa:	e007      	b.n	40420c <get_fileinfo+0x88>
				*p++ = c;
  4041fc:	f802 3b01 	strb.w	r3, [r2], #1
			for (i = 8; i < 11; i++) {
  404200:	4562      	cmp	r2, ip
  404202:	d00e      	beq.n	404222 <get_fileinfo+0x9e>
				c = dir[i];
  404204:	f817 3f01 	ldrb.w	r3, [r7, #1]!
				if (c == ' ') break;
  404208:	2b20      	cmp	r3, #32
  40420a:	d00a      	beq.n	404222 <get_fileinfo+0x9e>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  40420c:	2d00      	cmp	r5, #0
  40420e:	d0f5      	beq.n	4041fc <get_fileinfo+0x78>
  404210:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
  404214:	b2f6      	uxtb	r6, r6
  404216:	2e19      	cmp	r6, #25
  404218:	bf9c      	itt	ls
  40421a:	3320      	addls	r3, #32
  40421c:	b2db      	uxtbls	r3, r3
  40421e:	e7ed      	b.n	4041fc <get_fileinfo+0x78>
			*p++ = '.';
  404220:	462a      	mov	r2, r5
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
  404222:	7ae3      	ldrb	r3, [r4, #11]
  404224:	720b      	strb	r3, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
  404226:	7fe5      	ldrb	r5, [r4, #31]
  404228:	7fa3      	ldrb	r3, [r4, #30]
  40422a:	041b      	lsls	r3, r3, #16
  40422c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  404230:	7f25      	ldrb	r5, [r4, #28]
  404232:	432b      	orrs	r3, r5
  404234:	7f65      	ldrb	r5, [r4, #29]
  404236:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  40423a:	600b      	str	r3, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
  40423c:	7e65      	ldrb	r5, [r4, #25]
  40423e:	7e23      	ldrb	r3, [r4, #24]
  404240:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  404244:	808b      	strh	r3, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
  404246:	7de5      	ldrb	r5, [r4, #23]
  404248:	7da3      	ldrb	r3, [r4, #22]
  40424a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  40424e:	80cb      	strh	r3, [r1, #6]
	*p = 0;		/* Terminate SFN str by a \0 */
  404250:	2300      	movs	r3, #0
  404252:	7013      	strb	r3, [r2, #0]
	if (fno->lfname && fno->lfsize) {
  404254:	698f      	ldr	r7, [r1, #24]
  404256:	b32f      	cbz	r7, 4042a4 <get_fileinfo+0x120>
  404258:	69cb      	ldr	r3, [r1, #28]
  40425a:	b31b      	cbz	r3, 4042a4 <get_fileinfo+0x120>
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
  40425c:	6903      	ldr	r3, [r0, #16]
  40425e:	b1f3      	cbz	r3, 40429e <get_fileinfo+0x11a>
  404260:	8c02      	ldrh	r2, [r0, #32]
  404262:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404266:	429a      	cmp	r2, r3
  404268:	d01e      	beq.n	4042a8 <get_fileinfo+0x124>
			lfn = dj->lfn;
  40426a:	f8d0 801c 	ldr.w	r8, [r0, #28]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  40426e:	f8b8 0000 	ldrh.w	r0, [r8]
  404272:	b1d8      	cbz	r0, 4042ac <get_fileinfo+0x128>
  404274:	460d      	mov	r5, r1
  404276:	1e7e      	subs	r6, r7, #1
  404278:	2400      	movs	r4, #0
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
  40427a:	46a2      	mov	sl, r4
  40427c:	f8df 9038 	ldr.w	r9, [pc, #56]	; 4042b8 <get_fileinfo+0x134>
  404280:	4651      	mov	r1, sl
  404282:	47c8      	blx	r9
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  404284:	b1a0      	cbz	r0, 4042b0 <get_fileinfo+0x12c>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  404286:	69eb      	ldr	r3, [r5, #28]
  404288:	3b01      	subs	r3, #1
  40428a:	42a3      	cmp	r3, r4
  40428c:	d912      	bls.n	4042b4 <get_fileinfo+0x130>
				tp[i++] = (TCHAR)w;
  40428e:	3401      	adds	r4, #1
  404290:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  404294:	f838 0014 	ldrh.w	r0, [r8, r4, lsl #1]
  404298:	2800      	cmp	r0, #0
  40429a:	d1f1      	bne.n	404280 <get_fileinfo+0xfc>
  40429c:	e000      	b.n	4042a0 <get_fileinfo+0x11c>
		i = 0;
  40429e:	2400      	movs	r4, #0
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
  4042a0:	2300      	movs	r3, #0
  4042a2:	553b      	strb	r3, [r7, r4]
  4042a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = 0;
  4042a8:	2400      	movs	r4, #0
  4042aa:	e7f9      	b.n	4042a0 <get_fileinfo+0x11c>
  4042ac:	2400      	movs	r4, #0
  4042ae:	e7f7      	b.n	4042a0 <get_fileinfo+0x11c>
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  4042b0:	2400      	movs	r4, #0
  4042b2:	e7f5      	b.n	4042a0 <get_fileinfo+0x11c>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  4042b4:	2400      	movs	r4, #0
  4042b6:	e7f3      	b.n	4042a0 <get_fileinfo+0x11c>
  4042b8:	00405761 	.word	0x00405761

004042bc <move_window>:
{
  4042bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  4042c0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  4042c2:	428f      	cmp	r7, r1
  4042c4:	d035      	beq.n	404332 <move_window+0x76>
  4042c6:	460e      	mov	r6, r1
  4042c8:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  4042ca:	7903      	ldrb	r3, [r0, #4]
  4042cc:	b91b      	cbnz	r3, 4042d6 <move_window+0x1a>
		if (sector) {
  4042ce:	bb2e      	cbnz	r6, 40431c <move_window+0x60>
	return FR_OK;
  4042d0:	2000      	movs	r0, #0
  4042d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  4042d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
  4042da:	2301      	movs	r3, #1
  4042dc:	463a      	mov	r2, r7
  4042de:	4641      	mov	r1, r8
  4042e0:	7840      	ldrb	r0, [r0, #1]
  4042e2:	4d18      	ldr	r5, [pc, #96]	; (404344 <move_window+0x88>)
  4042e4:	47a8      	blx	r5
  4042e6:	bb38      	cbnz	r0, 404338 <move_window+0x7c>
			fs->wflag = 0;
  4042e8:	2300      	movs	r3, #0
  4042ea:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  4042ec:	6a23      	ldr	r3, [r4, #32]
  4042ee:	69e2      	ldr	r2, [r4, #28]
  4042f0:	4413      	add	r3, r2
  4042f2:	429f      	cmp	r7, r3
  4042f4:	d2eb      	bcs.n	4042ce <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  4042f6:	78e5      	ldrb	r5, [r4, #3]
  4042f8:	2d01      	cmp	r5, #1
  4042fa:	d9e8      	bls.n	4042ce <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  4042fc:	f04f 0a01 	mov.w	sl, #1
  404300:	f8df 9040 	ldr.w	r9, [pc, #64]	; 404344 <move_window+0x88>
					wsect += fs->fsize;
  404304:	69e3      	ldr	r3, [r4, #28]
  404306:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  404308:	4653      	mov	r3, sl
  40430a:	463a      	mov	r2, r7
  40430c:	4641      	mov	r1, r8
  40430e:	7860      	ldrb	r0, [r4, #1]
  404310:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  404312:	3d01      	subs	r5, #1
  404314:	b2ed      	uxtb	r5, r5
  404316:	2d01      	cmp	r5, #1
  404318:	d1f4      	bne.n	404304 <move_window+0x48>
  40431a:	e7d8      	b.n	4042ce <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  40431c:	2301      	movs	r3, #1
  40431e:	4632      	mov	r2, r6
  404320:	f104 0130 	add.w	r1, r4, #48	; 0x30
  404324:	7860      	ldrb	r0, [r4, #1]
  404326:	4d08      	ldr	r5, [pc, #32]	; (404348 <move_window+0x8c>)
  404328:	47a8      	blx	r5
  40432a:	b940      	cbnz	r0, 40433e <move_window+0x82>
			fs->winsect = sector;
  40432c:	62e6      	str	r6, [r4, #44]	; 0x2c
  40432e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  404332:	2000      	movs	r0, #0
  404334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  404338:	2001      	movs	r0, #1
  40433a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  40433e:	2001      	movs	r0, #1
}
  404340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404344:	00403bc5 	.word	0x00403bc5
  404348:	00403b55 	.word	0x00403b55

0040434c <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  40434c:	2901      	cmp	r1, #1
  40434e:	d96a      	bls.n	404426 <get_fat+0xda>
{
  404350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  404352:	6983      	ldr	r3, [r0, #24]
  404354:	4299      	cmp	r1, r3
  404356:	d268      	bcs.n	40442a <get_fat+0xde>
  404358:	460c      	mov	r4, r1
  40435a:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  40435c:	7803      	ldrb	r3, [r0, #0]
  40435e:	2b02      	cmp	r3, #2
  404360:	d02f      	beq.n	4043c2 <get_fat+0x76>
  404362:	2b03      	cmp	r3, #3
  404364:	d041      	beq.n	4043ea <get_fat+0x9e>
  404366:	2b01      	cmp	r3, #1
  404368:	d002      	beq.n	404370 <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40436a:	f04f 30ff 	mov.w	r0, #4294967295
  40436e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  404370:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  404374:	6a01      	ldr	r1, [r0, #32]
  404376:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  40437a:	4b2d      	ldr	r3, [pc, #180]	; (404430 <get_fat+0xe4>)
  40437c:	4798      	blx	r3
  40437e:	b110      	cbz	r0, 404386 <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  404380:	f04f 30ff 	mov.w	r0, #4294967295
  404384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  404386:	f3c7 0308 	ubfx	r3, r7, #0, #9
  40438a:	4433      	add	r3, r6
  40438c:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  404390:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  404392:	6a31      	ldr	r1, [r6, #32]
  404394:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  404398:	4630      	mov	r0, r6
  40439a:	4b25      	ldr	r3, [pc, #148]	; (404430 <get_fat+0xe4>)
  40439c:	4798      	blx	r3
  40439e:	b110      	cbz	r0, 4043a6 <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4043a0:	f04f 30ff 	mov.w	r0, #4294967295
  4043a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  4043a6:	f3c7 0708 	ubfx	r7, r7, #0, #9
  4043aa:	19f0      	adds	r0, r6, r7
  4043ac:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4043b0:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  4043b4:	f014 0f01 	tst.w	r4, #1
  4043b8:	bf14      	ite	ne
  4043ba:	0900      	lsrne	r0, r0, #4
  4043bc:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  4043c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  4043c2:	6a01      	ldr	r1, [r0, #32]
  4043c4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  4043c8:	4b19      	ldr	r3, [pc, #100]	; (404430 <get_fat+0xe4>)
  4043ca:	4798      	blx	r3
  4043cc:	b110      	cbz	r0, 4043d4 <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4043ce:	f04f 30ff 	mov.w	r0, #4294967295
  4043d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  4043d4:	0060      	lsls	r0, r4, #1
  4043d6:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  4043da:	4430      	add	r0, r6
  4043dc:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  4043e0:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4043e4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4043e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  4043ea:	6a01      	ldr	r1, [r0, #32]
  4043ec:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  4043f0:	4b0f      	ldr	r3, [pc, #60]	; (404430 <get_fat+0xe4>)
  4043f2:	4798      	blx	r3
  4043f4:	b110      	cbz	r0, 4043fc <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4043f6:	f04f 30ff 	mov.w	r0, #4294967295
}
  4043fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  4043fc:	00a0      	lsls	r0, r4, #2
  4043fe:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  404402:	f100 0230 	add.w	r2, r0, #48	; 0x30
  404406:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  404408:	78d1      	ldrb	r1, [r2, #3]
  40440a:	7893      	ldrb	r3, [r2, #2]
  40440c:	041b      	lsls	r3, r3, #16
  40440e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  404412:	4430      	add	r0, r6
  404414:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  404418:	4318      	orrs	r0, r3
  40441a:	7853      	ldrb	r3, [r2, #1]
  40441c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  404420:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  404424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  404426:	2001      	movs	r0, #1
  404428:	4770      	bx	lr
  40442a:	2001      	movs	r0, #1
  40442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40442e:	bf00      	nop
  404430:	004042bd 	.word	0x004042bd

00404434 <dir_sdi>:
{
  404434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404436:	4605      	mov	r5, r0
  404438:	460c      	mov	r4, r1
	dj->index = idx;
  40443a:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  40443c:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  40443e:	2901      	cmp	r1, #1
  404440:	d03d      	beq.n	4044be <dir_sdi+0x8a>
  404442:	6803      	ldr	r3, [r0, #0]
  404444:	699a      	ldr	r2, [r3, #24]
  404446:	4291      	cmp	r1, r2
  404448:	d301      	bcc.n	40444e <dir_sdi+0x1a>
		return FR_INT_ERR;
  40444a:	2002      	movs	r0, #2
  40444c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  40444e:	b961      	cbnz	r1, 40446a <dir_sdi+0x36>
  404450:	781a      	ldrb	r2, [r3, #0]
  404452:	2a03      	cmp	r2, #3
  404454:	d006      	beq.n	404464 <dir_sdi+0x30>
		dj->clust = clst;
  404456:	2200      	movs	r2, #0
  404458:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  40445a:	891a      	ldrh	r2, [r3, #8]
  40445c:	42a2      	cmp	r2, r4
  40445e:	d821      	bhi.n	4044a4 <dir_sdi+0x70>
			return FR_INT_ERR;
  404460:	2002      	movs	r0, #2
  404462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  404464:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  404466:	2900      	cmp	r1, #0
  404468:	d0f5      	beq.n	404456 <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  40446a:	789e      	ldrb	r6, [r3, #2]
  40446c:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  40446e:	42b4      	cmp	r4, r6
  404470:	d310      	bcc.n	404494 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  404472:	4f17      	ldr	r7, [pc, #92]	; (4044d0 <dir_sdi+0x9c>)
  404474:	6828      	ldr	r0, [r5, #0]
  404476:	47b8      	blx	r7
  404478:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  40447a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40447e:	d020      	beq.n	4044c2 <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  404480:	2801      	cmp	r0, #1
  404482:	d920      	bls.n	4044c6 <dir_sdi+0x92>
  404484:	682b      	ldr	r3, [r5, #0]
  404486:	699b      	ldr	r3, [r3, #24]
  404488:	4298      	cmp	r0, r3
  40448a:	d21e      	bcs.n	4044ca <dir_sdi+0x96>
			idx -= ic;
  40448c:	1ba4      	subs	r4, r4, r6
  40448e:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  404490:	42a6      	cmp	r6, r4
  404492:	d9ef      	bls.n	404474 <dir_sdi+0x40>
		dj->clust = clst;
  404494:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  404496:	6828      	ldr	r0, [r5, #0]
  404498:	4b0e      	ldr	r3, [pc, #56]	; (4044d4 <dir_sdi+0xa0>)
  40449a:	4798      	blx	r3
  40449c:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  4044a0:	6128      	str	r0, [r5, #16]
  4044a2:	e003      	b.n	4044ac <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  4044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4044a6:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  4044aa:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  4044ac:	682b      	ldr	r3, [r5, #0]
  4044ae:	3330      	adds	r3, #48	; 0x30
  4044b0:	f004 040f 	and.w	r4, r4, #15
  4044b4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  4044b8:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  4044ba:	2000      	movs	r0, #0
  4044bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  4044be:	2002      	movs	r0, #2
  4044c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  4044c2:	2001      	movs	r0, #1
  4044c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  4044c6:	2002      	movs	r0, #2
  4044c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044ca:	2002      	movs	r0, #2
}
  4044cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044ce:	bf00      	nop
  4044d0:	0040434d 	.word	0x0040434d
  4044d4:	00403d1f 	.word	0x00403d1f

004044d8 <put_fat>:
{
  4044d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4044dc:	2901      	cmp	r1, #1
  4044de:	f240 808f 	bls.w	404600 <put_fat+0x128>
  4044e2:	6983      	ldr	r3, [r0, #24]
  4044e4:	4299      	cmp	r1, r3
  4044e6:	d301      	bcc.n	4044ec <put_fat+0x14>
		res = FR_INT_ERR;
  4044e8:	2702      	movs	r7, #2
	return res;
  4044ea:	e08a      	b.n	404602 <put_fat+0x12a>
  4044ec:	4615      	mov	r5, r2
  4044ee:	460c      	mov	r4, r1
  4044f0:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  4044f2:	7803      	ldrb	r3, [r0, #0]
  4044f4:	2b02      	cmp	r3, #2
  4044f6:	d04e      	beq.n	404596 <put_fat+0xbe>
  4044f8:	2b03      	cmp	r3, #3
  4044fa:	d05f      	beq.n	4045bc <put_fat+0xe4>
  4044fc:	2b01      	cmp	r3, #1
  4044fe:	d003      	beq.n	404508 <put_fat+0x30>
			res = FR_INT_ERR;
  404500:	2702      	movs	r7, #2
		fs->wflag = 1;
  404502:	2301      	movs	r3, #1
  404504:	7133      	strb	r3, [r6, #4]
  404506:	e07c      	b.n	404602 <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  404508:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40450c:	6a01      	ldr	r1, [r0, #32]
  40450e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  404512:	4b3d      	ldr	r3, [pc, #244]	; (404608 <put_fat+0x130>)
  404514:	4798      	blx	r3
			if (res != FR_OK) break;
  404516:	4607      	mov	r7, r0
  404518:	2800      	cmp	r0, #0
  40451a:	d1f2      	bne.n	404502 <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  40451c:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  404520:	f014 0f01 	tst.w	r4, #1
  404524:	d01c      	beq.n	404560 <put_fat+0x88>
  404526:	4433      	add	r3, r6
  404528:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  40452c:	f002 020f 	and.w	r2, r2, #15
  404530:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  404534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  404538:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  40453c:	2301      	movs	r3, #1
  40453e:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  404540:	6a31      	ldr	r1, [r6, #32]
  404542:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  404546:	4630      	mov	r0, r6
  404548:	4b2f      	ldr	r3, [pc, #188]	; (404608 <put_fat+0x130>)
  40454a:	4798      	blx	r3
			if (res != FR_OK) break;
  40454c:	2800      	cmp	r0, #0
  40454e:	d153      	bne.n	4045f8 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  404550:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  404554:	f3c5 1207 	ubfx	r2, r5, #4, #8
  404558:	44b0      	add	r8, r6
  40455a:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  40455e:	e7d0      	b.n	404502 <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  404560:	4433      	add	r3, r6
  404562:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  404566:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  40456a:	2301      	movs	r3, #1
  40456c:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40456e:	6a31      	ldr	r1, [r6, #32]
  404570:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  404574:	4630      	mov	r0, r6
  404576:	4b24      	ldr	r3, [pc, #144]	; (404608 <put_fat+0x130>)
  404578:	4798      	blx	r3
			if (res != FR_OK) break;
  40457a:	2800      	cmp	r0, #0
  40457c:	d13e      	bne.n	4045fc <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  40457e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  404582:	eb06 0308 	add.w	r3, r6, r8
  404586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  40458a:	f023 030f 	bic.w	r3, r3, #15
  40458e:	f3c5 2203 	ubfx	r2, r5, #8, #4
  404592:	431a      	orrs	r2, r3
  404594:	e7e0      	b.n	404558 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  404596:	6a01      	ldr	r1, [r0, #32]
  404598:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  40459c:	4b1a      	ldr	r3, [pc, #104]	; (404608 <put_fat+0x130>)
  40459e:	4798      	blx	r3
			if (res != FR_OK) break;
  4045a0:	4607      	mov	r7, r0
  4045a2:	2800      	cmp	r0, #0
  4045a4:	d1ad      	bne.n	404502 <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  4045a6:	0063      	lsls	r3, r4, #1
  4045a8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  4045ac:	4433      	add	r3, r6
  4045ae:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  4045b2:	f3c5 2207 	ubfx	r2, r5, #8, #8
  4045b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  4045ba:	e7a2      	b.n	404502 <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  4045bc:	6a01      	ldr	r1, [r0, #32]
  4045be:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  4045c2:	4b11      	ldr	r3, [pc, #68]	; (404608 <put_fat+0x130>)
  4045c4:	4798      	blx	r3
			if (res != FR_OK) break;
  4045c6:	4607      	mov	r7, r0
  4045c8:	2800      	cmp	r0, #0
  4045ca:	d19a      	bne.n	404502 <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  4045cc:	00a1      	lsls	r1, r4, #2
  4045ce:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  4045d2:	f101 0330 	add.w	r3, r1, #48	; 0x30
  4045d6:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  4045d8:	78da      	ldrb	r2, [r3, #3]
  4045da:	0612      	lsls	r2, r2, #24
  4045dc:	4431      	add	r1, r6
  4045de:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  4045e2:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  4045e4:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  4045e8:	f3c2 2107 	ubfx	r1, r2, #8, #8
  4045ec:	7059      	strb	r1, [r3, #1]
  4045ee:	0c11      	lsrs	r1, r2, #16
  4045f0:	7099      	strb	r1, [r3, #2]
  4045f2:	0e12      	lsrs	r2, r2, #24
  4045f4:	70da      	strb	r2, [r3, #3]
			break;
  4045f6:	e784      	b.n	404502 <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4045f8:	4607      	mov	r7, r0
  4045fa:	e782      	b.n	404502 <put_fat+0x2a>
  4045fc:	4607      	mov	r7, r0
  4045fe:	e780      	b.n	404502 <put_fat+0x2a>
		res = FR_INT_ERR;
  404600:	2702      	movs	r7, #2
}
  404602:	4638      	mov	r0, r7
  404604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404608:	004042bd 	.word	0x004042bd

0040460c <create_chain>:
{
  40460c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404610:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  404612:	4688      	mov	r8, r1
  404614:	b941      	cbnz	r1, 404628 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  404616:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  404618:	b186      	cbz	r6, 40463c <create_chain+0x30>
  40461a:	6983      	ldr	r3, [r0, #24]
  40461c:	429e      	cmp	r6, r3
  40461e:	bf28      	it	cs
  404620:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  404622:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  404624:	4f27      	ldr	r7, [pc, #156]	; (4046c4 <create_chain+0xb8>)
  404626:	e017      	b.n	404658 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  404628:	4b26      	ldr	r3, [pc, #152]	; (4046c4 <create_chain+0xb8>)
  40462a:	4798      	blx	r3
  40462c:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  40462e:	2801      	cmp	r0, #1
  404630:	d93e      	bls.n	4046b0 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  404632:	69aa      	ldr	r2, [r5, #24]
  404634:	4290      	cmp	r0, r2
  404636:	d340      	bcc.n	4046ba <create_chain+0xae>
		scl = clst;
  404638:	4646      	mov	r6, r8
  40463a:	e7f2      	b.n	404622 <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  40463c:	2601      	movs	r6, #1
  40463e:	e7f0      	b.n	404622 <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  404640:	4621      	mov	r1, r4
  404642:	4628      	mov	r0, r5
  404644:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  404646:	4603      	mov	r3, r0
  404648:	b170      	cbz	r0, 404668 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  40464a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40464e:	d034      	beq.n	4046ba <create_chain+0xae>
  404650:	2801      	cmp	r0, #1
  404652:	d032      	beq.n	4046ba <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  404654:	42b4      	cmp	r4, r6
  404656:	d02f      	beq.n	4046b8 <create_chain+0xac>
		ncl++;							/* Next cluster */
  404658:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  40465a:	69ab      	ldr	r3, [r5, #24]
  40465c:	429c      	cmp	r4, r3
  40465e:	d3ef      	bcc.n	404640 <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  404660:	2e01      	cmp	r6, #1
  404662:	d927      	bls.n	4046b4 <create_chain+0xa8>
			ncl = 2;
  404664:	2402      	movs	r4, #2
  404666:	e7eb      	b.n	404640 <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  404668:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  40466c:	4621      	mov	r1, r4
  40466e:	4628      	mov	r0, r5
  404670:	4b15      	ldr	r3, [pc, #84]	; (4046c8 <create_chain+0xbc>)
  404672:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  404674:	4603      	mov	r3, r0
  404676:	b9a8      	cbnz	r0, 4046a4 <create_chain+0x98>
  404678:	f1b8 0f00 	cmp.w	r8, #0
  40467c:	d10a      	bne.n	404694 <create_chain+0x88>
		fs->last_clust = ncl;			/* Update FSINFO */
  40467e:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  404680:	692b      	ldr	r3, [r5, #16]
  404682:	f1b3 3fff 	cmp.w	r3, #4294967295
  404686:	d01b      	beq.n	4046c0 <create_chain+0xb4>
			fs->free_clust--;
  404688:	3b01      	subs	r3, #1
  40468a:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  40468c:	2301      	movs	r3, #1
  40468e:	716b      	strb	r3, [r5, #5]
  404690:	4623      	mov	r3, r4
  404692:	e012      	b.n	4046ba <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  404694:	4622      	mov	r2, r4
  404696:	4641      	mov	r1, r8
  404698:	4628      	mov	r0, r5
  40469a:	4b0b      	ldr	r3, [pc, #44]	; (4046c8 <create_chain+0xbc>)
  40469c:	4798      	blx	r3
	if (res == FR_OK) {
  40469e:	4603      	mov	r3, r0
  4046a0:	2800      	cmp	r0, #0
  4046a2:	d0ec      	beq.n	40467e <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  4046a4:	2b01      	cmp	r3, #1
  4046a6:	bf0c      	ite	eq
  4046a8:	f04f 33ff 	moveq.w	r3, #4294967295
  4046ac:	2301      	movne	r3, #1
  4046ae:	e004      	b.n	4046ba <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  4046b0:	2301      	movs	r3, #1
  4046b2:	e002      	b.n	4046ba <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  4046b4:	2300      	movs	r3, #0
  4046b6:	e000      	b.n	4046ba <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  4046b8:	2300      	movs	r3, #0
}
  4046ba:	4618      	mov	r0, r3
  4046bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4046c0:	4623      	mov	r3, r4
  4046c2:	e7fa      	b.n	4046ba <create_chain+0xae>
  4046c4:	0040434d 	.word	0x0040434d
  4046c8:	004044d9 	.word	0x004044d9

004046cc <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4046cc:	2901      	cmp	r1, #1
  4046ce:	d92e      	bls.n	40472e <remove_chain+0x62>
{
  4046d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4046d4:	4604      	mov	r4, r0
  4046d6:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4046d8:	6983      	ldr	r3, [r0, #24]
  4046da:	4299      	cmp	r1, r3
  4046dc:	d303      	bcc.n	4046e6 <remove_chain+0x1a>
		res = FR_INT_ERR;
  4046de:	2202      	movs	r2, #2
}
  4046e0:	4610      	mov	r0, r2
  4046e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  4046e6:	4f16      	ldr	r7, [pc, #88]	; (404740 <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  4046e8:	f04f 0900 	mov.w	r9, #0
  4046ec:	f8df 8054 	ldr.w	r8, [pc, #84]	; 404744 <remove_chain+0x78>
  4046f0:	e003      	b.n	4046fa <remove_chain+0x2e>
  4046f2:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  4046f4:	69a3      	ldr	r3, [r4, #24]
  4046f6:	42ab      	cmp	r3, r5
  4046f8:	d9f2      	bls.n	4046e0 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  4046fa:	4631      	mov	r1, r6
  4046fc:	4620      	mov	r0, r4
  4046fe:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  404700:	4605      	mov	r5, r0
  404702:	b1b8      	cbz	r0, 404734 <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  404704:	2801      	cmp	r0, #1
  404706:	d017      	beq.n	404738 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  404708:	f1b0 3fff 	cmp.w	r0, #4294967295
  40470c:	d016      	beq.n	40473c <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  40470e:	464a      	mov	r2, r9
  404710:	4631      	mov	r1, r6
  404712:	4620      	mov	r0, r4
  404714:	47c0      	blx	r8
			if (res != FR_OK) break;
  404716:	4602      	mov	r2, r0
  404718:	2800      	cmp	r0, #0
  40471a:	d1e1      	bne.n	4046e0 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  40471c:	6923      	ldr	r3, [r4, #16]
  40471e:	f1b3 3fff 	cmp.w	r3, #4294967295
  404722:	d0e6      	beq.n	4046f2 <remove_chain+0x26>
				fs->free_clust++;
  404724:	3301      	adds	r3, #1
  404726:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  404728:	2301      	movs	r3, #1
  40472a:	7163      	strb	r3, [r4, #5]
  40472c:	e7e1      	b.n	4046f2 <remove_chain+0x26>
		res = FR_INT_ERR;
  40472e:	2202      	movs	r2, #2
}
  404730:	4610      	mov	r0, r2
  404732:	4770      	bx	lr
  404734:	2200      	movs	r2, #0
  404736:	e7d3      	b.n	4046e0 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  404738:	2202      	movs	r2, #2
  40473a:	e7d1      	b.n	4046e0 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  40473c:	2201      	movs	r2, #1
  40473e:	e7cf      	b.n	4046e0 <remove_chain+0x14>
  404740:	0040434d 	.word	0x0040434d
  404744:	004044d9 	.word	0x004044d9

00404748 <dir_next>:
{
  404748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  40474c:	88c4      	ldrh	r4, [r0, #6]
  40474e:	3401      	adds	r4, #1
  404750:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  404752:	b914      	cbnz	r4, 40475a <dir_next+0x12>
		return FR_NO_FILE;
  404754:	2004      	movs	r0, #4
  404756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  40475a:	6903      	ldr	r3, [r0, #16]
  40475c:	b913      	cbnz	r3, 404764 <dir_next+0x1c>
		return FR_NO_FILE;
  40475e:	2004      	movs	r0, #4
  404760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404764:	460e      	mov	r6, r1
  404766:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  404768:	f014 070f 	ands.w	r7, r4, #15
  40476c:	d110      	bne.n	404790 <dir_next+0x48>
		dj->sect++;					/* Next sector */
  40476e:	3301      	adds	r3, #1
  404770:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  404772:	68c1      	ldr	r1, [r0, #12]
  404774:	b931      	cbnz	r1, 404784 <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  404776:	6803      	ldr	r3, [r0, #0]
  404778:	891b      	ldrh	r3, [r3, #8]
  40477a:	42a3      	cmp	r3, r4
  40477c:	d808      	bhi.n	404790 <dir_next+0x48>
				return FR_NO_FILE;
  40477e:	2004      	movs	r0, #4
  404780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  404784:	6800      	ldr	r0, [r0, #0]
  404786:	7883      	ldrb	r3, [r0, #2]
  404788:	3b01      	subs	r3, #1
  40478a:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  40478e:	d008      	beq.n	4047a2 <dir_next+0x5a>
	dj->index = i;
  404790:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  404792:	682b      	ldr	r3, [r5, #0]
  404794:	3330      	adds	r3, #48	; 0x30
  404796:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  40479a:	616b      	str	r3, [r5, #20]
	return FR_OK;
  40479c:	2000      	movs	r0, #0
  40479e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  4047a2:	4b32      	ldr	r3, [pc, #200]	; (40486c <dir_next+0x124>)
  4047a4:	4798      	blx	r3
  4047a6:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  4047a8:	2801      	cmp	r0, #1
  4047aa:	d94d      	bls.n	404848 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4047ac:	f1b0 3fff 	cmp.w	r0, #4294967295
  4047b0:	d04d      	beq.n	40484e <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  4047b2:	6828      	ldr	r0, [r5, #0]
  4047b4:	6983      	ldr	r3, [r0, #24]
  4047b6:	4598      	cmp	r8, r3
  4047b8:	d33e      	bcc.n	404838 <dir_next+0xf0>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  4047ba:	b916      	cbnz	r6, 4047c2 <dir_next+0x7a>
  4047bc:	2004      	movs	r0, #4
  4047be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  4047c2:	68e9      	ldr	r1, [r5, #12]
  4047c4:	4b2a      	ldr	r3, [pc, #168]	; (404870 <dir_next+0x128>)
  4047c6:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  4047c8:	4680      	mov	r8, r0
  4047ca:	b910      	cbnz	r0, 4047d2 <dir_next+0x8a>
  4047cc:	2007      	movs	r0, #7
  4047ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4047d2:	2801      	cmp	r0, #1
  4047d4:	d03e      	beq.n	404854 <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4047d6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4047da:	d03e      	beq.n	40485a <dir_next+0x112>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4047dc:	2100      	movs	r1, #0
  4047de:	6828      	ldr	r0, [r5, #0]
  4047e0:	4b24      	ldr	r3, [pc, #144]	; (404874 <dir_next+0x12c>)
  4047e2:	4798      	blx	r3
  4047e4:	2800      	cmp	r0, #0
  4047e6:	d13b      	bne.n	404860 <dir_next+0x118>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  4047e8:	6828      	ldr	r0, [r5, #0]
  4047ea:	f44f 7200 	mov.w	r2, #512	; 0x200
  4047ee:	2100      	movs	r1, #0
  4047f0:	3030      	adds	r0, #48	; 0x30
  4047f2:	4b21      	ldr	r3, [pc, #132]	; (404878 <dir_next+0x130>)
  4047f4:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  4047f6:	682e      	ldr	r6, [r5, #0]
  4047f8:	4641      	mov	r1, r8
  4047fa:	4630      	mov	r0, r6
  4047fc:	4b1f      	ldr	r3, [pc, #124]	; (40487c <dir_next+0x134>)
  4047fe:	4798      	blx	r3
  404800:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  404802:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  404804:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  404808:	46b2      	mov	sl, r6
  40480a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 404874 <dir_next+0x12c>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40480e:	682b      	ldr	r3, [r5, #0]
  404810:	7899      	ldrb	r1, [r3, #2]
  404812:	b2f2      	uxtb	r2, r6
  404814:	4291      	cmp	r1, r2
  404816:	d90b      	bls.n	404830 <dir_next+0xe8>
						dj->fs->wflag = 1;
  404818:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  40481c:	4651      	mov	r1, sl
  40481e:	6828      	ldr	r0, [r5, #0]
  404820:	47c8      	blx	r9
  404822:	3601      	adds	r6, #1
  404824:	b9f8      	cbnz	r0, 404866 <dir_next+0x11e>
						dj->fs->winsect++;
  404826:	682a      	ldr	r2, [r5, #0]
  404828:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  40482a:	3301      	adds	r3, #1
  40482c:	62d3      	str	r3, [r2, #44]	; 0x2c
  40482e:	e7ee      	b.n	40480e <dir_next+0xc6>
					dj->fs->winsect -= c;						/* Rewind window address */
  404830:	4616      	mov	r6, r2
  404832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  404834:	1b96      	subs	r6, r2, r6
  404836:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  404838:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  40483c:	4641      	mov	r1, r8
  40483e:	6828      	ldr	r0, [r5, #0]
  404840:	4b0e      	ldr	r3, [pc, #56]	; (40487c <dir_next+0x134>)
  404842:	4798      	blx	r3
  404844:	6128      	str	r0, [r5, #16]
  404846:	e7a3      	b.n	404790 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  404848:	2002      	movs	r0, #2
  40484a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40484e:	2001      	movs	r0, #1
  404850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  404854:	2002      	movs	r0, #2
  404856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40485a:	2001      	movs	r0, #1
  40485c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  404860:	2001      	movs	r0, #1
  404862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  404866:	2001      	movs	r0, #1
}
  404868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40486c:	0040434d 	.word	0x0040434d
  404870:	0040460d 	.word	0x0040460d
  404874:	004042bd 	.word	0x004042bd
  404878:	00403d11 	.word	0x00403d11
  40487c:	00403d1f 	.word	0x00403d1f

00404880 <dir_find>:
{
  404880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404884:	b085      	sub	sp, #20
  404886:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  404888:	2100      	movs	r1, #0
  40488a:	4b62      	ldr	r3, [pc, #392]	; (404a14 <dir_find+0x194>)
  40488c:	4798      	blx	r3
	if (res != FR_OK) return res;
  40488e:	4680      	mov	r8, r0
  404890:	bb08      	cbnz	r0, 4048d6 <dir_find+0x56>
  404892:	f04f 0bff 	mov.w	fp, #255	; 0xff
  404896:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  404898:	4f5f      	ldr	r7, [pc, #380]	; (404a18 <dir_find+0x198>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  40489a:	46da      	mov	sl, fp
  40489c:	e095      	b.n	4049ca <dir_find+0x14a>
			if (a == AM_LFN) {			/* An LFN entry is found */
  40489e:	2a0f      	cmp	r2, #15
  4048a0:	d01d      	beq.n	4048de <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  4048a2:	f1b9 0f00 	cmp.w	r9, #0
  4048a6:	d104      	bne.n	4048b2 <dir_find+0x32>
  4048a8:	4620      	mov	r0, r4
  4048aa:	4b5c      	ldr	r3, [pc, #368]	; (404a1c <dir_find+0x19c>)
  4048ac:	4798      	blx	r3
  4048ae:	4582      	cmp	sl, r0
  4048b0:	d011      	beq.n	4048d6 <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4048b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4048b6:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  4048b8:	69ab      	ldr	r3, [r5, #24]
  4048ba:	7ada      	ldrb	r2, [r3, #11]
  4048bc:	f012 0f01 	tst.w	r2, #1
  4048c0:	d17a      	bne.n	4049b8 <dir_find+0x138>
  4048c2:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  4048c6:	f814 1b01 	ldrb.w	r1, [r4], #1
  4048ca:	f813 2b01 	ldrb.w	r2, [r3], #1
  4048ce:	4291      	cmp	r1, r2
  4048d0:	d16c      	bne.n	4049ac <dir_find+0x12c>
  4048d2:	42a0      	cmp	r0, r4
  4048d4:	d1f7      	bne.n	4048c6 <dir_find+0x46>
}
  4048d6:	4640      	mov	r0, r8
  4048d8:	b005      	add	sp, #20
  4048da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  4048de:	f8d5 801c 	ldr.w	r8, [r5, #28]
  4048e2:	f1b8 0f00 	cmp.w	r8, #0
  4048e6:	d069      	beq.n	4049bc <dir_find+0x13c>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  4048e8:	f016 0f40 	tst.w	r6, #64	; 0x40
  4048ec:	d00c      	beq.n	404908 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  4048ee:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  4048f2:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  4048f6:	88eb      	ldrh	r3, [r5, #6]
  4048f8:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4048fa:	f894 b00d 	ldrb.w	fp, [r4, #13]
  4048fe:	45d3      	cmp	fp, sl
  404900:	d008      	beq.n	404914 <dir_find+0x94>
  404902:	f04f 09ff 	mov.w	r9, #255	; 0xff
  404906:	e059      	b.n	4049bc <dir_find+0x13c>
  404908:	45b1      	cmp	r9, r6
  40490a:	bf18      	it	ne
  40490c:	f04f 09ff 	movne.w	r9, #255	; 0xff
  404910:	d154      	bne.n	4049bc <dir_find+0x13c>
  404912:	e7f2      	b.n	4048fa <dir_find+0x7a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  404914:	f894 a000 	ldrb.w	sl, [r4]
  404918:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  40491c:	f10a 3aff 	add.w	sl, sl, #4294967295
  404920:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  404924:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  404928:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 404a28 <dir_find+0x1a8>
  40492c:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  404930:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  404932:	9603      	str	r6, [sp, #12]
  404934:	f8cd b004 	str.w	fp, [sp, #4]
  404938:	461e      	mov	r6, r3
  40493a:	9502      	str	r5, [sp, #8]
  40493c:	e00f      	b.n	40495e <dir_find+0xde>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  40493e:	4618      	mov	r0, r3
  404940:	4b37      	ldr	r3, [pc, #220]	; (404a20 <dir_find+0x1a0>)
  404942:	4798      	blx	r3
  404944:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  404946:	2efe      	cmp	r6, #254	; 0xfe
  404948:	d85b      	bhi.n	404a02 <dir_find+0x182>
  40494a:	1c75      	adds	r5, r6, #1
  40494c:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  404950:	4b33      	ldr	r3, [pc, #204]	; (404a20 <dir_find+0x1a0>)
  404952:	4798      	blx	r3
  404954:	4583      	cmp	fp, r0
  404956:	d158      	bne.n	404a0a <dir_find+0x18a>
  404958:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  40495a:	45d1      	cmp	r9, sl
  40495c:	d013      	beq.n	404986 <dir_find+0x106>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  40495e:	f819 2b01 	ldrb.w	r2, [r9], #1
  404962:	18a3      	adds	r3, r4, r2
  404964:	7859      	ldrb	r1, [r3, #1]
  404966:	5ca3      	ldrb	r3, [r4, r2]
  404968:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  40496c:	2800      	cmp	r0, #0
  40496e:	d1e6      	bne.n	40493e <dir_find+0xbe>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  404970:	f64f 72ff 	movw	r2, #65535	; 0xffff
  404974:	4293      	cmp	r3, r2
  404976:	d0f0      	beq.n	40495a <dir_find+0xda>
  404978:	f8dd b004 	ldr.w	fp, [sp, #4]
  40497c:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40497e:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404980:	f04f 09ff 	mov.w	r9, #255	; 0xff
  404984:	e01a      	b.n	4049bc <dir_find+0x13c>
  404986:	f8dd b004 	ldr.w	fp, [sp, #4]
  40498a:	4632      	mov	r2, r6
  40498c:	9e03      	ldr	r6, [sp, #12]
  40498e:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  404990:	7823      	ldrb	r3, [r4, #0]
  404992:	f013 0f40 	tst.w	r3, #64	; 0x40
  404996:	d004      	beq.n	4049a2 <dir_find+0x122>
  404998:	b118      	cbz	r0, 4049a2 <dir_find+0x122>
  40499a:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  40499e:	2b00      	cmp	r3, #0
  4049a0:	d1ed      	bne.n	40497e <dir_find+0xfe>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4049a2:	3e01      	subs	r6, #1
  4049a4:	fa5f f986 	uxtb.w	r9, r6
  4049a8:	46da      	mov	sl, fp
  4049aa:	e007      	b.n	4049bc <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4049ac:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4049b0:	e004      	b.n	4049bc <dir_find+0x13c>
			ord = 0xFF;
  4049b2:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4049b6:	e001      	b.n	4049bc <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4049b8:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  4049bc:	2100      	movs	r1, #0
  4049be:	4628      	mov	r0, r5
  4049c0:	4b18      	ldr	r3, [pc, #96]	; (404a24 <dir_find+0x1a4>)
  4049c2:	4798      	blx	r3
	} while (res == FR_OK);
  4049c4:	4680      	mov	r8, r0
  4049c6:	2800      	cmp	r0, #0
  4049c8:	d185      	bne.n	4048d6 <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  4049ca:	6929      	ldr	r1, [r5, #16]
  4049cc:	6828      	ldr	r0, [r5, #0]
  4049ce:	47b8      	blx	r7
		if (res != FR_OK) break;
  4049d0:	4680      	mov	r8, r0
  4049d2:	2800      	cmp	r0, #0
  4049d4:	f47f af7f 	bne.w	4048d6 <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  4049d8:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  4049da:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4049dc:	b176      	cbz	r6, 4049fc <dir_find+0x17c>
		a = dir[DIR_Attr] & AM_MASK;
  4049de:	7ae3      	ldrb	r3, [r4, #11]
  4049e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  4049e4:	2ee5      	cmp	r6, #229	; 0xe5
  4049e6:	d0e4      	beq.n	4049b2 <dir_find+0x132>
  4049e8:	f013 0f08 	tst.w	r3, #8
  4049ec:	f43f af57 	beq.w	40489e <dir_find+0x1e>
  4049f0:	2a0f      	cmp	r2, #15
  4049f2:	f43f af74 	beq.w	4048de <dir_find+0x5e>
			ord = 0xFF;
  4049f6:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4049fa:	e7df      	b.n	4049bc <dir_find+0x13c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4049fc:	f04f 0804 	mov.w	r8, #4
  404a00:	e769      	b.n	4048d6 <dir_find+0x56>
  404a02:	f8dd b004 	ldr.w	fp, [sp, #4]
  404a06:	9d02      	ldr	r5, [sp, #8]
  404a08:	e7b9      	b.n	40497e <dir_find+0xfe>
  404a0a:	f8dd b004 	ldr.w	fp, [sp, #4]
  404a0e:	9d02      	ldr	r5, [sp, #8]
  404a10:	e7b5      	b.n	40497e <dir_find+0xfe>
  404a12:	bf00      	nop
  404a14:	00404435 	.word	0x00404435
  404a18:	004042bd 	.word	0x004042bd
  404a1c:	00403d35 	.word	0x00403d35
  404a20:	004057a1 	.word	0x004057a1
  404a24:	00404749 	.word	0x00404749
  404a28:	0040aa48 	.word	0x0040aa48

00404a2c <dir_register>:
{
  404a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a30:	b089      	sub	sp, #36	; 0x24
  404a32:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  404a34:	6985      	ldr	r5, [r0, #24]
  404a36:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  404a3a:	220c      	movs	r2, #12
  404a3c:	4629      	mov	r1, r5
  404a3e:	a805      	add	r0, sp, #20
  404a40:	4ba8      	ldr	r3, [pc, #672]	; (404ce4 <dir_register+0x2b8>)
  404a42:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  404a44:	f89d 301f 	ldrb.w	r3, [sp, #31]
  404a48:	f013 0f01 	tst.w	r3, #1
  404a4c:	d079      	beq.n	404b42 <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  404a4e:	2300      	movs	r3, #0
  404a50:	72eb      	strb	r3, [r5, #11]
  404a52:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  404a54:	220b      	movs	r2, #11
  404a56:	a905      	add	r1, sp, #20
  404a58:	4628      	mov	r0, r5
  404a5a:	4ba2      	ldr	r3, [pc, #648]	; (404ce4 <dir_register+0x2b8>)
  404a5c:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  404a5e:	2701      	movs	r7, #1
  404a60:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  404a62:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  404a66:	f8df 929c 	ldr.w	r9, [pc, #668]	; 404d04 <dir_register+0x2d8>
	mem_cpy(dst, src, 11);
  404a6a:	f8df a278 	ldr.w	sl, [pc, #632]	; 404ce4 <dir_register+0x2b8>
  404a6e:	e032      	b.n	404ad6 <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  404a70:	463b      	mov	r3, r7
  404a72:	e030      	b.n	404ad6 <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  404a74:	4613      	mov	r3, r2
  404a76:	e002      	b.n	404a7e <dir_register+0x52>
  404a78:	2300      	movs	r3, #0
  404a7a:	e000      	b.n	404a7e <dir_register+0x52>
  404a7c:	4613      	mov	r3, r2
  404a7e:	442b      	add	r3, r5
  404a80:	e005      	b.n	404a8e <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  404a82:	4641      	mov	r1, r8
  404a84:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  404a88:	1b59      	subs	r1, r3, r5
  404a8a:	2907      	cmp	r1, #7
  404a8c:	d807      	bhi.n	404a9e <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  404a8e:	2a07      	cmp	r2, #7
  404a90:	d8f7      	bhi.n	404a82 <dir_register+0x56>
  404a92:	a908      	add	r1, sp, #32
  404a94:	4411      	add	r1, r2
  404a96:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  404a9a:	3201      	adds	r2, #1
  404a9c:	e7f2      	b.n	404a84 <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  404a9e:	4620      	mov	r0, r4
  404aa0:	47c8      	blx	r9
			if (res != FR_OK) break;
  404aa2:	4606      	mov	r6, r0
  404aa4:	2800      	cmp	r0, #0
  404aa6:	d13e      	bne.n	404b26 <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  404aa8:	3701      	adds	r7, #1
  404aaa:	b2bf      	uxth	r7, r7
  404aac:	2f64      	cmp	r7, #100	; 0x64
  404aae:	d038      	beq.n	404b22 <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  404ab0:	220b      	movs	r2, #11
  404ab2:	a905      	add	r1, sp, #20
  404ab4:	4628      	mov	r0, r5
  404ab6:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  404ab8:	2f05      	cmp	r7, #5
  404aba:	d9d9      	bls.n	404a70 <dir_register+0x44>
  404abc:	463b      	mov	r3, r7
  404abe:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  404ac0:	03da      	lsls	r2, r3, #15
  404ac2:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  404ac6:	f831 2b02 	ldrh.w	r2, [r1], #2
  404aca:	fa12 f383 	uxtah	r3, r2, r3
  404ace:	b29b      	uxth	r3, r3
  404ad0:	880a      	ldrh	r2, [r1, #0]
  404ad2:	2a00      	cmp	r2, #0
  404ad4:	d1f4      	bne.n	404ac0 <dir_register+0x94>
  404ad6:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  404ada:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  404adc:	f003 000f 	and.w	r0, r3, #15
  404ae0:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  404ae4:	2939      	cmp	r1, #57	; 0x39
  404ae6:	bf88      	it	hi
  404ae8:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  404aec:	3a01      	subs	r2, #1
  404aee:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  404af2:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  404af6:	2b00      	cmp	r3, #0
  404af8:	d1f0      	bne.n	404adc <dir_register+0xb0>
	ns[i] = '~';
  404afa:	217e      	movs	r1, #126	; 0x7e
  404afc:	ab08      	add	r3, sp, #32
  404afe:	4413      	add	r3, r2
  404b00:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  404b04:	2a00      	cmp	r2, #0
  404b06:	d0b5      	beq.n	404a74 <dir_register+0x48>
  404b08:	782b      	ldrb	r3, [r5, #0]
  404b0a:	2b20      	cmp	r3, #32
  404b0c:	d0b4      	beq.n	404a78 <dir_register+0x4c>
  404b0e:	4629      	mov	r1, r5
  404b10:	2300      	movs	r3, #0
  404b12:	3301      	adds	r3, #1
  404b14:	429a      	cmp	r2, r3
  404b16:	d0b1      	beq.n	404a7c <dir_register+0x50>
  404b18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  404b1c:	2820      	cmp	r0, #32
  404b1e:	d1f8      	bne.n	404b12 <dir_register+0xe6>
  404b20:	e7ad      	b.n	404a7e <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  404b22:	2607      	movs	r6, #7
  404b24:	e004      	b.n	404b30 <dir_register+0x104>
  404b26:	2f64      	cmp	r7, #100	; 0x64
  404b28:	f000 809f 	beq.w	404c6a <dir_register+0x23e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  404b2c:	2804      	cmp	r0, #4
  404b2e:	d003      	beq.n	404b38 <dir_register+0x10c>
}
  404b30:	4630      	mov	r0, r6
  404b32:	b009      	add	sp, #36	; 0x24
  404b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  404b38:	f89d 301f 	ldrb.w	r3, [sp, #31]
  404b3c:	72eb      	strb	r3, [r5, #11]
  404b3e:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  404b42:	f89d 301f 	ldrb.w	r3, [sp, #31]
  404b46:	f013 0f02 	tst.w	r3, #2
  404b4a:	d014      	beq.n	404b76 <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  404b4c:	f8bb 3000 	ldrh.w	r3, [fp]
  404b50:	b17b      	cbz	r3, 404b72 <dir_register+0x146>
  404b52:	2300      	movs	r3, #0
  404b54:	3301      	adds	r3, #1
  404b56:	b29b      	uxth	r3, r3
  404b58:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  404b5c:	2a00      	cmp	r2, #0
  404b5e:	d1f9      	bne.n	404b54 <dir_register+0x128>
		ne = (ne + 25) / 13;
  404b60:	3319      	adds	r3, #25
  404b62:	4f61      	ldr	r7, [pc, #388]	; (404ce8 <dir_register+0x2bc>)
  404b64:	fb87 2703 	smull	r2, r7, r7, r3
  404b68:	17db      	asrs	r3, r3, #31
  404b6a:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  404b6e:	b2bf      	uxth	r7, r7
  404b70:	e002      	b.n	404b78 <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  404b72:	2300      	movs	r3, #0
  404b74:	e7f4      	b.n	404b60 <dir_register+0x134>
		ne = 1;
  404b76:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  404b78:	2100      	movs	r1, #0
  404b7a:	4620      	mov	r0, r4
  404b7c:	4b5b      	ldr	r3, [pc, #364]	; (404cec <dir_register+0x2c0>)
  404b7e:	4798      	blx	r3
	if (res != FR_OK) return res;
  404b80:	4606      	mov	r6, r0
  404b82:	2800      	cmp	r0, #0
  404b84:	d1d4      	bne.n	404b30 <dir_register+0x104>
  404b86:	f04f 0a00 	mov.w	sl, #0
  404b8a:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  404b8c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 404cf8 <dir_register+0x2cc>
			n = 0;					/* Not a blank entry. Restart to search */
  404b90:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  404b92:	f8df 9160 	ldr.w	r9, [pc, #352]	; 404cf4 <dir_register+0x2c8>
  404b96:	e00a      	b.n	404bae <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  404b98:	1c6b      	adds	r3, r5, #1
  404b9a:	b29b      	uxth	r3, r3
  404b9c:	429f      	cmp	r7, r3
  404b9e:	d066      	beq.n	404c6e <dir_register+0x242>
  404ba0:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  404ba2:	2101      	movs	r1, #1
  404ba4:	4620      	mov	r0, r4
  404ba6:	47c8      	blx	r9
	} while (res == FR_OK);
  404ba8:	4606      	mov	r6, r0
  404baa:	2800      	cmp	r0, #0
  404bac:	d1c0      	bne.n	404b30 <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  404bae:	6921      	ldr	r1, [r4, #16]
  404bb0:	6820      	ldr	r0, [r4, #0]
  404bb2:	47c0      	blx	r8
		if (res != FR_OK) break;
  404bb4:	4606      	mov	r6, r0
  404bb6:	2800      	cmp	r0, #0
  404bb8:	d1ba      	bne.n	404b30 <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  404bba:	6963      	ldr	r3, [r4, #20]
  404bbc:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  404bbe:	2be5      	cmp	r3, #229	; 0xe5
  404bc0:	d000      	beq.n	404bc4 <dir_register+0x198>
  404bc2:	b923      	cbnz	r3, 404bce <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  404bc4:	2d00      	cmp	r5, #0
  404bc6:	d1e7      	bne.n	404b98 <dir_register+0x16c>
  404bc8:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  404bcc:	e7e4      	b.n	404b98 <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  404bce:	465d      	mov	r5, fp
  404bd0:	e7e7      	b.n	404ba2 <dir_register+0x176>
		res = dir_sdi(dj, is);
  404bd2:	4651      	mov	r1, sl
  404bd4:	4620      	mov	r0, r4
  404bd6:	4b45      	ldr	r3, [pc, #276]	; (404cec <dir_register+0x2c0>)
  404bd8:	4798      	blx	r3
		if (res == FR_OK) {
  404bda:	4606      	mov	r6, r0
  404bdc:	2800      	cmp	r0, #0
  404bde:	d1a7      	bne.n	404b30 <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  404be0:	69a0      	ldr	r0, [r4, #24]
  404be2:	4b43      	ldr	r3, [pc, #268]	; (404cf0 <dir_register+0x2c4>)
  404be4:	4798      	blx	r3
  404be6:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  404be8:	2700      	movs	r7, #0
	s = wc = 0;
  404bea:	9701      	str	r7, [sp, #4]
  404bec:	e019      	b.n	404c22 <dir_register+0x1f6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  404bee:	4671      	mov	r1, lr
  404bf0:	e062      	b.n	404cb8 <dir_register+0x28c>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  404bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  404bf6:	4293      	cmp	r3, r2
  404bf8:	d002      	beq.n	404c00 <dir_register+0x1d4>
  404bfa:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  404bfe:	b90b      	cbnz	r3, 404c04 <dir_register+0x1d8>
  404c00:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  404c04:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  404c08:	6823      	ldr	r3, [r4, #0]
  404c0a:	2201      	movs	r2, #1
  404c0c:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  404c0e:	4639      	mov	r1, r7
  404c10:	4620      	mov	r0, r4
  404c12:	4b38      	ldr	r3, [pc, #224]	; (404cf4 <dir_register+0x2c8>)
  404c14:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  404c16:	4606      	mov	r6, r0
  404c18:	2800      	cmp	r0, #0
  404c1a:	d189      	bne.n	404b30 <dir_register+0x104>
  404c1c:	3d01      	subs	r5, #1
  404c1e:	b2ad      	uxth	r5, r5
  404c20:	b33d      	cbz	r5, 404c72 <dir_register+0x246>
				res = move_window(dj->fs, dj->sect);
  404c22:	6921      	ldr	r1, [r4, #16]
  404c24:	6820      	ldr	r0, [r4, #0]
  404c26:	4b34      	ldr	r3, [pc, #208]	; (404cf8 <dir_register+0x2cc>)
  404c28:	4798      	blx	r3
				if (res != FR_OK) break;
  404c2a:	4606      	mov	r6, r0
  404c2c:	2800      	cmp	r0, #0
  404c2e:	f47f af7f 	bne.w	404b30 <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  404c32:	f8d4 901c 	ldr.w	r9, [r4, #28]
  404c36:	6960      	ldr	r0, [r4, #20]
  404c38:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  404c3c:	f89d 3000 	ldrb.w	r3, [sp]
  404c40:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  404c42:	230f      	movs	r3, #15
  404c44:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  404c46:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  404c48:	7687      	strb	r7, [r0, #26]
  404c4a:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  404c4c:	f10b 31ff 	add.w	r1, fp, #4294967295
  404c50:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  404c54:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  404c58:	4a28      	ldr	r2, [pc, #160]	; (404cfc <dir_register+0x2d0>)
  404c5a:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  404c5e:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  404c60:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  404c64:	f04f 0aff 	mov.w	sl, #255	; 0xff
  404c68:	e029      	b.n	404cbe <dir_register+0x292>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  404c6a:	2607      	movs	r6, #7
  404c6c:	e760      	b.n	404b30 <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  404c6e:	2b01      	cmp	r3, #1
  404c70:	d8af      	bhi.n	404bd2 <dir_register+0x1a6>
		res = move_window(dj->fs, dj->sect);
  404c72:	6921      	ldr	r1, [r4, #16]
  404c74:	6820      	ldr	r0, [r4, #0]
  404c76:	4b20      	ldr	r3, [pc, #128]	; (404cf8 <dir_register+0x2cc>)
  404c78:	4798      	blx	r3
		if (res == FR_OK) {
  404c7a:	4606      	mov	r6, r0
  404c7c:	2800      	cmp	r0, #0
  404c7e:	f47f af57 	bne.w	404b30 <dir_register+0x104>
			dir = dj->dir;
  404c82:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  404c84:	2220      	movs	r2, #32
  404c86:	2100      	movs	r1, #0
  404c88:	4628      	mov	r0, r5
  404c8a:	4b1d      	ldr	r3, [pc, #116]	; (404d00 <dir_register+0x2d4>)
  404c8c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  404c8e:	220b      	movs	r2, #11
  404c90:	69a1      	ldr	r1, [r4, #24]
  404c92:	4628      	mov	r0, r5
  404c94:	4b13      	ldr	r3, [pc, #76]	; (404ce4 <dir_register+0x2b8>)
  404c96:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  404c98:	69a3      	ldr	r3, [r4, #24]
  404c9a:	7adb      	ldrb	r3, [r3, #11]
  404c9c:	f003 0318 	and.w	r3, r3, #24
  404ca0:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  404ca2:	6823      	ldr	r3, [r4, #0]
  404ca4:	2201      	movs	r2, #1
  404ca6:	711a      	strb	r2, [r3, #4]
  404ca8:	e742      	b.n	404b30 <dir_register+0x104>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  404caa:	f892 e000 	ldrb.w	lr, [r2]
  404cae:	f800 a00e 	strb.w	sl, [r0, lr]
  404cb2:	4486      	add	lr, r0
  404cb4:	f88e a001 	strb.w	sl, [lr, #1]
  404cb8:	3201      	adds	r2, #1
	} while (++s < 13);
  404cba:	4542      	cmp	r2, r8
  404cbc:	d099      	beq.n	404bf2 <dir_register+0x1c6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  404cbe:	42b3      	cmp	r3, r6
  404cc0:	d0f3      	beq.n	404caa <dir_register+0x27e>
  404cc2:	f101 0e01 	add.w	lr, r1, #1
  404cc6:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  404cca:	7811      	ldrb	r1, [r2, #0]
  404ccc:	5443      	strb	r3, [r0, r1]
  404cce:	4401      	add	r1, r0
  404cd0:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  404cd4:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  404cd8:	2b00      	cmp	r3, #0
  404cda:	d188      	bne.n	404bee <dir_register+0x1c2>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  404cdc:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  404cde:	4633      	mov	r3, r6
  404ce0:	e7ea      	b.n	404cb8 <dir_register+0x28c>
  404ce2:	bf00      	nop
  404ce4:	00403cfd 	.word	0x00403cfd
  404ce8:	4ec4ec4f 	.word	0x4ec4ec4f
  404cec:	00404435 	.word	0x00404435
  404cf0:	00403d35 	.word	0x00403d35
  404cf4:	00404749 	.word	0x00404749
  404cf8:	004042bd 	.word	0x004042bd
  404cfc:	0040aa48 	.word	0x0040aa48
  404d00:	00403d11 	.word	0x00403d11
  404d04:	00404881 	.word	0x00404881

00404d08 <dir_read>:
{
  404d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d0c:	4604      	mov	r4, r0
	BYTE a, ord = 0xFF, sum = 0xFF;
  404d0e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  404d12:	464e      	mov	r6, r9
	res = FR_NO_FILE;
  404d14:	2504      	movs	r5, #4
		res = move_window(dj->fs, dj->sect);
  404d16:	4f40      	ldr	r7, [pc, #256]	; (404e18 <dir_read+0x110>)
			if (uc != 0xFFFF) return 0;		/* Check filler */
  404d18:	f64f 78ff 	movw	r8, #65535	; 0xffff
	while (dj->sect) {
  404d1c:	e05a      	b.n	404dd4 <dir_read+0xcc>
			if (a == AM_LFN) {			/* An LFN entry is found */
  404d1e:	290f      	cmp	r1, #15
  404d20:	d146      	bne.n	404db0 <dir_read+0xa8>
				if (c & LLE) {			/* Is it start of LFN sequence? */
  404d22:	f013 0f40 	tst.w	r3, #64	; 0x40
  404d26:	d00b      	beq.n	404d40 <dir_read+0x38>
					sum = dir[LDIR_Chksum];
  404d28:	f890 900d 	ldrb.w	r9, [r0, #13]
					c &= ~LLE; ord = c;
  404d2c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
					dj->lfn_idx = dj->index;
  404d30:	88e2      	ldrh	r2, [r4, #6]
  404d32:	8422      	strh	r2, [r4, #32]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404d34:	f890 e00d 	ldrb.w	lr, [r0, #13]
  404d38:	45ce      	cmp	lr, r9
  404d3a:	d006      	beq.n	404d4a <dir_read+0x42>
  404d3c:	26ff      	movs	r6, #255	; 0xff
  404d3e:	e043      	b.n	404dc8 <dir_read+0xc0>
  404d40:	429e      	cmp	r6, r3
  404d42:	bf18      	it	ne
  404d44:	26ff      	movne	r6, #255	; 0xff
  404d46:	d13f      	bne.n	404dc8 <dir_read+0xc0>
  404d48:	e7f4      	b.n	404d34 <dir_read+0x2c>
  404d4a:	f8d4 a01c 	ldr.w	sl, [r4, #28]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
  404d4e:	7806      	ldrb	r6, [r0, #0]
  404d50:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  404d54:	3e01      	subs	r6, #1
  404d56:	eb06 0246 	add.w	r2, r6, r6, lsl #1
  404d5a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
  404d5e:	492f      	ldr	r1, [pc, #188]	; (404e1c <dir_read+0x114>)
  404d60:	f101 090d 	add.w	r9, r1, #13
	s = 0; wc = 1;
  404d64:	f04f 0c01 	mov.w	ip, #1
  404d68:	e003      	b.n	404d72 <dir_read+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
  404d6a:	4542      	cmp	r2, r8
  404d6c:	d14b      	bne.n	404e06 <dir_read+0xfe>
	} while (++s < 13);						/* Read all character in the entry */
  404d6e:	4589      	cmp	r9, r1
  404d70:	d011      	beq.n	404d96 <dir_read+0x8e>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
  404d72:	f811 5b01 	ldrb.w	r5, [r1], #1
  404d76:	1942      	adds	r2, r0, r5
  404d78:	f892 b001 	ldrb.w	fp, [r2, #1]
  404d7c:	5d42      	ldrb	r2, [r0, r5]
  404d7e:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
  404d82:	f1bc 0f00 	cmp.w	ip, #0
  404d86:	d0f0      	beq.n	404d6a <dir_read+0x62>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
  404d88:	2efe      	cmp	r6, #254	; 0xfe
  404d8a:	d83c      	bhi.n	404e06 <dir_read+0xfe>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404d8c:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
  404d90:	4694      	mov	ip, r2
  404d92:	3601      	adds	r6, #1
  404d94:	e7eb      	b.n	404d6e <dir_read+0x66>
	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
  404d96:	7802      	ldrb	r2, [r0, #0]
  404d98:	f012 0f40 	tst.w	r2, #64	; 0x40
  404d9c:	d004      	beq.n	404da8 <dir_read+0xa0>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
  404d9e:	2efe      	cmp	r6, #254	; 0xfe
  404da0:	d831      	bhi.n	404e06 <dir_read+0xfe>
		lfnbuf[i] = 0;
  404da2:	2200      	movs	r2, #0
  404da4:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404da8:	3b01      	subs	r3, #1
  404daa:	b2de      	uxtb	r6, r3
  404dac:	46f1      	mov	r9, lr
  404dae:	e00b      	b.n	404dc8 <dir_read+0xc0>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
  404db0:	b91e      	cbnz	r6, 404dba <dir_read+0xb2>
  404db2:	4b1b      	ldr	r3, [pc, #108]	; (404e20 <dir_read+0x118>)
  404db4:	4798      	blx	r3
  404db6:	4581      	cmp	r9, r0
  404db8:	d02b      	beq.n	404e12 <dir_read+0x10a>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
  404dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404dbe:	8423      	strh	r3, [r4, #32]
  404dc0:	e027      	b.n	404e12 <dir_read+0x10a>
			ord = 0xFF;
  404dc2:	26ff      	movs	r6, #255	; 0xff
  404dc4:	e000      	b.n	404dc8 <dir_read+0xc0>
  404dc6:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dj, 0);				/* Next entry */
  404dc8:	2100      	movs	r1, #0
  404dca:	4620      	mov	r0, r4
  404dcc:	4b15      	ldr	r3, [pc, #84]	; (404e24 <dir_read+0x11c>)
  404dce:	4798      	blx	r3
		if (res != FR_OK) break;
  404dd0:	4605      	mov	r5, r0
  404dd2:	b9e0      	cbnz	r0, 404e0e <dir_read+0x106>
	while (dj->sect) {
  404dd4:	6921      	ldr	r1, [r4, #16]
  404dd6:	b1a1      	cbz	r1, 404e02 <dir_read+0xfa>
		res = move_window(dj->fs, dj->sect);
  404dd8:	6820      	ldr	r0, [r4, #0]
  404dda:	47b8      	blx	r7
		if (res != FR_OK) break;
  404ddc:	4605      	mov	r5, r0
  404dde:	b9b0      	cbnz	r0, 404e0e <dir_read+0x106>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  404de0:	6960      	ldr	r0, [r4, #20]
		c = dir[DIR_Name];
  404de2:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  404de4:	b193      	cbz	r3, 404e0c <dir_read+0x104>
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  404de6:	2be5      	cmp	r3, #229	; 0xe5
  404de8:	d0eb      	beq.n	404dc2 <dir_read+0xba>
  404dea:	2b2e      	cmp	r3, #46	; 0x2e
  404dec:	d0eb      	beq.n	404dc6 <dir_read+0xbe>
		a = dir[DIR_Attr] & AM_MASK;
  404dee:	7ac2      	ldrb	r2, [r0, #11]
  404df0:	f002 013f 	and.w	r1, r2, #63	; 0x3f
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  404df4:	f012 0f08 	tst.w	r2, #8
  404df8:	d091      	beq.n	404d1e <dir_read+0x16>
  404dfa:	290f      	cmp	r1, #15
  404dfc:	d091      	beq.n	404d22 <dir_read+0x1a>
			ord = 0xFF;
  404dfe:	26ff      	movs	r6, #255	; 0xff
  404e00:	e7e2      	b.n	404dc8 <dir_read+0xc0>
	if (res != FR_OK) dj->sect = 0;
  404e02:	b135      	cbz	r5, 404e12 <dir_read+0x10a>
  404e04:	e003      	b.n	404e0e <dir_read+0x106>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404e06:	46f1      	mov	r9, lr
  404e08:	26ff      	movs	r6, #255	; 0xff
  404e0a:	e7dd      	b.n	404dc8 <dir_read+0xc0>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  404e0c:	2504      	movs	r5, #4
	if (res != FR_OK) dj->sect = 0;
  404e0e:	2300      	movs	r3, #0
  404e10:	6123      	str	r3, [r4, #16]
}
  404e12:	4628      	mov	r0, r5
  404e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e18:	004042bd 	.word	0x004042bd
  404e1c:	0040aa48 	.word	0x0040aa48
  404e20:	00403d35 	.word	0x00403d35
  404e24:	00404749 	.word	0x00404749

00404e28 <sync>:
{
  404e28:	b570      	push	{r4, r5, r6, lr}
  404e2a:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  404e2c:	2100      	movs	r1, #0
  404e2e:	4b2d      	ldr	r3, [pc, #180]	; (404ee4 <sync+0xbc>)
  404e30:	4798      	blx	r3
	if (res == FR_OK) {
  404e32:	4603      	mov	r3, r0
  404e34:	b950      	cbnz	r0, 404e4c <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  404e36:	7823      	ldrb	r3, [r4, #0]
  404e38:	2b03      	cmp	r3, #3
  404e3a:	d009      	beq.n	404e50 <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  404e3c:	2200      	movs	r2, #0
  404e3e:	4611      	mov	r1, r2
  404e40:	7860      	ldrb	r0, [r4, #1]
  404e42:	4b29      	ldr	r3, [pc, #164]	; (404ee8 <sync+0xc0>)
  404e44:	4798      	blx	r3
	res = move_window(fs, 0);
  404e46:	1c03      	adds	r3, r0, #0
  404e48:	bf18      	it	ne
  404e4a:	2301      	movne	r3, #1
}
  404e4c:	4618      	mov	r0, r3
  404e4e:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  404e50:	7963      	ldrb	r3, [r4, #5]
  404e52:	2b00      	cmp	r3, #0
  404e54:	d0f2      	beq.n	404e3c <sync+0x14>
			fs->winsect = 0;
  404e56:	2600      	movs	r6, #0
  404e58:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  404e5a:	f104 0530 	add.w	r5, r4, #48	; 0x30
  404e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
  404e62:	4631      	mov	r1, r6
  404e64:	4628      	mov	r0, r5
  404e66:	4b21      	ldr	r3, [pc, #132]	; (404eec <sync+0xc4>)
  404e68:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  404e6a:	2355      	movs	r3, #85	; 0x55
  404e6c:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  404e70:	23aa      	movs	r3, #170	; 0xaa
  404e72:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  404e76:	2352      	movs	r3, #82	; 0x52
  404e78:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  404e7c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  404e80:	2361      	movs	r3, #97	; 0x61
  404e82:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  404e86:	2241      	movs	r2, #65	; 0x41
  404e88:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  404e8c:	2172      	movs	r1, #114	; 0x72
  404e8e:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
  404e92:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
  404e96:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  404e9a:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  404e9e:	6923      	ldr	r3, [r4, #16]
  404ea0:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  404ea4:	f3c3 2207 	ubfx	r2, r3, #8, #8
  404ea8:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  404eac:	0c1a      	lsrs	r2, r3, #16
  404eae:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  404eb2:	0e1b      	lsrs	r3, r3, #24
  404eb4:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  404eb8:	68e3      	ldr	r3, [r4, #12]
  404eba:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  404ebe:	f3c3 2207 	ubfx	r2, r3, #8, #8
  404ec2:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  404ec6:	0c1a      	lsrs	r2, r3, #16
  404ec8:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  404ecc:	0e1b      	lsrs	r3, r3, #24
  404ece:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  404ed2:	2301      	movs	r3, #1
  404ed4:	6962      	ldr	r2, [r4, #20]
  404ed6:	4629      	mov	r1, r5
  404ed8:	7860      	ldrb	r0, [r4, #1]
  404eda:	4d05      	ldr	r5, [pc, #20]	; (404ef0 <sync+0xc8>)
  404edc:	47a8      	blx	r5
			fs->fsi_flag = 0;
  404ede:	7166      	strb	r6, [r4, #5]
  404ee0:	e7ac      	b.n	404e3c <sync+0x14>
  404ee2:	bf00      	nop
  404ee4:	004042bd 	.word	0x004042bd
  404ee8:	00403c35 	.word	0x00403c35
  404eec:	00403d11 	.word	0x00403d11
  404ef0:	00403bc5 	.word	0x00403bc5

00404ef4 <follow_path>:
{
  404ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ef8:	b083      	sub	sp, #12
  404efa:	4682      	mov	sl, r0
  404efc:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  404efe:	780b      	ldrb	r3, [r1, #0]
  404f00:	2b2f      	cmp	r3, #47	; 0x2f
  404f02:	d00c      	beq.n	404f1e <follow_path+0x2a>
  404f04:	2b5c      	cmp	r3, #92	; 0x5c
  404f06:	d00a      	beq.n	404f1e <follow_path+0x2a>
	dj->sclust = 0;						/* Start from the root dir */
  404f08:	2300      	movs	r3, #0
  404f0a:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  404f0e:	f898 3000 	ldrb.w	r3, [r8]
  404f12:	2b1f      	cmp	r3, #31
  404f14:	d906      	bls.n	404f24 <follow_path+0x30>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  404f16:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 40520c <follow_path+0x318>
			res = dir_find(dj);				/* Find it */
  404f1a:	4644      	mov	r4, r8
  404f1c:	e00c      	b.n	404f38 <follow_path+0x44>
		path++;
  404f1e:	f108 0801 	add.w	r8, r8, #1
  404f22:	e7f1      	b.n	404f08 <follow_path+0x14>
		res = dir_sdi(dj, 0);
  404f24:	2100      	movs	r1, #0
  404f26:	4650      	mov	r0, sl
  404f28:	4bb2      	ldr	r3, [pc, #712]	; (4051f4 <follow_path+0x300>)
  404f2a:	4798      	blx	r3
  404f2c:	4603      	mov	r3, r0
		dj->dir = 0;
  404f2e:	2200      	movs	r2, #0
  404f30:	f8ca 2014 	str.w	r2, [sl, #20]
  404f34:	e12e      	b.n	405194 <follow_path+0x2a0>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  404f36:	461c      	mov	r4, r3
  404f38:	4627      	mov	r7, r4
  404f3a:	4623      	mov	r3, r4
  404f3c:	f813 0b01 	ldrb.w	r0, [r3], #1
  404f40:	282f      	cmp	r0, #47	; 0x2f
  404f42:	d0f8      	beq.n	404f36 <follow_path+0x42>
  404f44:	285c      	cmp	r0, #92	; 0x5c
  404f46:	bf08      	it	eq
  404f48:	461c      	moveq	r4, r3
  404f4a:	d0f5      	beq.n	404f38 <follow_path+0x44>
	lfn = dj->lfn;
  404f4c:	f8da b01c 	ldr.w	fp, [sl, #28]
		w = p[si++];					/* Get a character */
  404f50:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  404f52:	281f      	cmp	r0, #31
  404f54:	f240 812d 	bls.w	4051b2 <follow_path+0x2be>
  404f58:	282f      	cmp	r0, #47	; 0x2f
  404f5a:	f000 812f 	beq.w	4051bc <follow_path+0x2c8>
  404f5e:	285c      	cmp	r0, #92	; 0x5c
  404f60:	f000 8135 	beq.w	4051ce <follow_path+0x2da>
  404f64:	f1ab 0602 	sub.w	r6, fp, #2
  404f68:	2501      	movs	r5, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  404f6a:	46a8      	mov	r8, r5
  404f6c:	e012      	b.n	404f94 <follow_path+0xa0>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  404f6e:	bb73      	cbnz	r3, 404fce <follow_path+0xda>
		lfn[di++] = w;					/* Store the Unicode char */
  404f70:	f826 2f02 	strh.w	r2, [r6, #2]!
		w = p[si++];					/* Get a character */
  404f74:	1c6b      	adds	r3, r5, #1
  404f76:	f814 0f01 	ldrb.w	r0, [r4, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  404f7a:	281f      	cmp	r0, #31
  404f7c:	f240 811b 	bls.w	4051b6 <follow_path+0x2c2>
  404f80:	282f      	cmp	r0, #47	; 0x2f
  404f82:	f000 811d 	beq.w	4051c0 <follow_path+0x2cc>
  404f86:	285c      	cmp	r0, #92	; 0x5c
  404f88:	f000 811a 	beq.w	4051c0 <follow_path+0x2cc>
		if (di >= _MAX_LFN)				/* Reject too long name */
  404f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  404f90:	d01d      	beq.n	404fce <follow_path+0xda>
		w = p[si++];					/* Get a character */
  404f92:	461d      	mov	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  404f94:	4641      	mov	r1, r8
  404f96:	47c8      	blx	r9
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  404f98:	4602      	mov	r2, r0
  404f9a:	b1c0      	cbz	r0, 404fce <follow_path+0xda>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  404f9c:	287f      	cmp	r0, #127	; 0x7f
  404f9e:	d8e7      	bhi.n	404f70 <follow_path+0x7c>
	while (*str && *str != chr) str++;
  404fa0:	2822      	cmp	r0, #34	; 0x22
  404fa2:	f000 80f6 	beq.w	405192 <follow_path+0x29e>
  404fa6:	232a      	movs	r3, #42	; 0x2a
  404fa8:	4993      	ldr	r1, [pc, #588]	; (4051f8 <follow_path+0x304>)
  404faa:	b298      	uxth	r0, r3
  404fac:	4290      	cmp	r0, r2
  404fae:	d0de      	beq.n	404f6e <follow_path+0x7a>
  404fb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  404fb4:	2b00      	cmp	r3, #0
  404fb6:	d1f8      	bne.n	404faa <follow_path+0xb6>
  404fb8:	e7da      	b.n	404f70 <follow_path+0x7c>
	while (di) {						/* Strip trailing spaces and dots */
  404fba:	3d01      	subs	r5, #1
  404fbc:	f000 80e9 	beq.w	405192 <follow_path+0x29e>
		w = lfn[di-1];
  404fc0:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  404fc4:	2b20      	cmp	r3, #32
  404fc6:	d0f8      	beq.n	404fba <follow_path+0xc6>
  404fc8:	2b2e      	cmp	r3, #46	; 0x2e
  404fca:	d0f6      	beq.n	404fba <follow_path+0xc6>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  404fcc:	b90d      	cbnz	r5, 404fd2 <follow_path+0xde>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  404fce:	2306      	movs	r3, #6
	return res;
  404fd0:	e0e0      	b.n	405194 <follow_path+0x2a0>
	lfn[di] = 0;						/* LFN is created */
  404fd2:	006f      	lsls	r7, r5, #1
  404fd4:	f04f 0800 	mov.w	r8, #0
  404fd8:	f82b 8015 	strh.w	r8, [fp, r5, lsl #1]
	mem_set(dj->fn, ' ', 11);
  404fdc:	220b      	movs	r2, #11
  404fde:	2120      	movs	r1, #32
  404fe0:	f8da 0018 	ldr.w	r0, [sl, #24]
  404fe4:	4b85      	ldr	r3, [pc, #532]	; (4051fc <follow_path+0x308>)
  404fe6:	4798      	blx	r3
  404fe8:	f1ab 0102 	sub.w	r1, fp, #2
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  404fec:	4643      	mov	r3, r8
  404fee:	e000      	b.n	404ff2 <follow_path+0xfe>
  404ff0:	3301      	adds	r3, #1
  404ff2:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  404ff6:	2a20      	cmp	r2, #32
  404ff8:	d0fa      	beq.n	404ff0 <follow_path+0xfc>
  404ffa:	2a2e      	cmp	r2, #46	; 0x2e
  404ffc:	d0f8      	beq.n	404ff0 <follow_path+0xfc>
	if (si) cf |= NS_LOSS | NS_LFN;
  404ffe:	b10b      	cbz	r3, 405004 <follow_path+0x110>
  405000:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  405004:	3f02      	subs	r7, #2
  405006:	eb0b 0207 	add.w	r2, fp, r7
  40500a:	f83b 1007 	ldrh.w	r1, [fp, r7]
  40500e:	292e      	cmp	r1, #46	; 0x2e
  405010:	d005      	beq.n	40501e <follow_path+0x12a>
  405012:	3d01      	subs	r5, #1
  405014:	d003      	beq.n	40501e <follow_path+0x12a>
  405016:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  40501a:	292e      	cmp	r1, #46	; 0x2e
  40501c:	d1f9      	bne.n	405012 <follow_path+0x11e>
		dj->fn[i++] = (BYTE)w;
  40501e:	2208      	movs	r2, #8
  405020:	9200      	str	r2, [sp, #0]
  405022:	f04f 0800 	mov.w	r8, #0
  405026:	f8cd 8004 	str.w	r8, [sp, #4]
  40502a:	e005      	b.n	405038 <follow_path+0x144>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  40502c:	42af      	cmp	r7, r5
  40502e:	f000 80d1 	beq.w	4051d4 <follow_path+0x2e0>
			cf |= NS_LOSS | NS_LFN; continue;
  405032:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN char */
  405036:	463b      	mov	r3, r7
  405038:	1c5f      	adds	r7, r3, #1
  40503a:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  40503e:	b350      	cbz	r0, 405096 <follow_path+0x1a2>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  405040:	2820      	cmp	r0, #32
  405042:	d0f6      	beq.n	405032 <follow_path+0x13e>
  405044:	282e      	cmp	r0, #46	; 0x2e
  405046:	d0f1      	beq.n	40502c <follow_path+0x138>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  405048:	9b00      	ldr	r3, [sp, #0]
  40504a:	4598      	cmp	r8, r3
  40504c:	d219      	bcs.n	405082 <follow_path+0x18e>
  40504e:	42af      	cmp	r7, r5
  405050:	f000 80c0 	beq.w	4051d4 <follow_path+0x2e0>
		if (w >= 0x80) {				/* Non ASCII char */
  405054:	287f      	cmp	r0, #127	; 0x7f
  405056:	d86c      	bhi.n	405132 <follow_path+0x23e>
	while (*str && *str != chr) str++;
  405058:	282b      	cmp	r0, #43	; 0x2b
  40505a:	d079      	beq.n	405150 <follow_path+0x25c>
  40505c:	232c      	movs	r3, #44	; 0x2c
  40505e:	4a68      	ldr	r2, [pc, #416]	; (405200 <follow_path+0x30c>)
  405060:	b299      	uxth	r1, r3
  405062:	4281      	cmp	r1, r0
  405064:	d072      	beq.n	40514c <follow_path+0x258>
  405066:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40506a:	2b00      	cmp	r3, #0
  40506c:	d1f8      	bne.n	405060 <follow_path+0x16c>
				if (IsUpper(w)) {		/* ASCII large capital */
  40506e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  405072:	b29b      	uxth	r3, r3
  405074:	2b19      	cmp	r3, #25
  405076:	d876      	bhi.n	405166 <follow_path+0x272>
					b |= 2;
  405078:	9b01      	ldr	r3, [sp, #4]
  40507a:	f043 0302 	orr.w	r3, r3, #2
  40507e:	9301      	str	r3, [sp, #4]
  405080:	e069      	b.n	405156 <follow_path+0x262>
			if (ni == 11) {				/* Long extension */
  405082:	9b00      	ldr	r3, [sp, #0]
  405084:	2b0b      	cmp	r3, #11
  405086:	d048      	beq.n	40511a <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  405088:	42af      	cmp	r7, r5
  40508a:	f000 80a6 	beq.w	4051da <follow_path+0x2e6>
  40508e:	f046 0603 	orr.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  405092:	f240 80a2 	bls.w	4051da <follow_path+0x2e6>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  405096:	f8da 3018 	ldr.w	r3, [sl, #24]
  40509a:	781a      	ldrb	r2, [r3, #0]
  40509c:	2ae5      	cmp	r2, #229	; 0xe5
  40509e:	d045      	beq.n	40512c <follow_path+0x238>
	if (ni == 8) b <<= 2;
  4050a0:	9b00      	ldr	r3, [sp, #0]
  4050a2:	2b08      	cmp	r3, #8
  4050a4:	d06b      	beq.n	40517e <follow_path+0x28a>
  4050a6:	9a01      	ldr	r2, [sp, #4]
  4050a8:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  4050ac:	2b0c      	cmp	r3, #12
  4050ae:	d06d      	beq.n	40518c <follow_path+0x298>
  4050b0:	f002 0203 	and.w	r2, r2, #3
  4050b4:	2a03      	cmp	r2, #3
  4050b6:	d069      	beq.n	40518c <follow_path+0x298>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  4050b8:	f016 0f02 	tst.w	r6, #2
  4050bc:	d10b      	bne.n	4050d6 <follow_path+0x1e2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  4050be:	9a01      	ldr	r2, [sp, #4]
  4050c0:	f002 0b03 	and.w	fp, r2, #3
  4050c4:	f1bb 0f01 	cmp.w	fp, #1
  4050c8:	bf08      	it	eq
  4050ca:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  4050ce:	2b04      	cmp	r3, #4
  4050d0:	bf08      	it	eq
  4050d2:	f046 0608 	orreq.w	r6, r6, #8
	dj->fn[NS] = cf;	/* SFN is created */
  4050d6:	f8da 3018 	ldr.w	r3, [sl, #24]
  4050da:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
  4050dc:	4650      	mov	r0, sl
  4050de:	4b49      	ldr	r3, [pc, #292]	; (405204 <follow_path+0x310>)
  4050e0:	4798      	blx	r3
			ns = *(dj->fn+NS);
  4050e2:	f8da 3018 	ldr.w	r3, [sl, #24]
  4050e6:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  4050e8:	4603      	mov	r3, r0
  4050ea:	2800      	cmp	r0, #0
  4050ec:	d156      	bne.n	40519c <follow_path+0x2a8>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  4050ee:	f012 0f04 	tst.w	r2, #4
  4050f2:	d14f      	bne.n	405194 <follow_path+0x2a0>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  4050f4:	f8da 2014 	ldr.w	r2, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  4050f8:	7ad3      	ldrb	r3, [r2, #11]
  4050fa:	f013 0f10 	tst.w	r3, #16
  4050fe:	d056      	beq.n	4051ae <follow_path+0x2ba>
			dj->sclust = LD_CLUST(dir);
  405100:	7d51      	ldrb	r1, [r2, #21]
  405102:	7d13      	ldrb	r3, [r2, #20]
  405104:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  405108:	7ed0      	ldrb	r0, [r2, #27]
  40510a:	7e93      	ldrb	r3, [r2, #26]
  40510c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  405110:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  405114:	f8ca 3008 	str.w	r3, [sl, #8]
			res = create_name(dj, &path);	/* Get a segment */
  405118:	e70e      	b.n	404f38 <follow_path+0x44>
				cf |= NS_LOSS | NS_LFN; break;
  40511a:	f046 0603 	orr.w	r6, r6, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  40511e:	f8da 3018 	ldr.w	r3, [sl, #24]
  405122:	781a      	ldrb	r2, [r3, #0]
  405124:	2ae5      	cmp	r2, #229	; 0xe5
  405126:	d1be      	bne.n	4050a6 <follow_path+0x1b2>
  405128:	220b      	movs	r2, #11
  40512a:	9200      	str	r2, [sp, #0]
  40512c:	2205      	movs	r2, #5
  40512e:	701a      	strb	r2, [r3, #0]
  405130:	e7b6      	b.n	4050a0 <follow_path+0x1ac>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  405132:	2100      	movs	r1, #0
  405134:	47c8      	blx	r9
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  405136:	4603      	mov	r3, r0
  405138:	2800      	cmp	r0, #0
  40513a:	d058      	beq.n	4051ee <follow_path+0x2fa>
  40513c:	4a32      	ldr	r2, [pc, #200]	; (405208 <follow_path+0x314>)
  40513e:	4413      	add	r3, r2
  405140:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  405144:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  405148:	b110      	cbz	r0, 405150 <follow_path+0x25c>
  40514a:	e785      	b.n	405058 <follow_path+0x164>
  40514c:	2b00      	cmp	r3, #0
  40514e:	d08e      	beq.n	40506e <follow_path+0x17a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  405150:	f046 0603 	orr.w	r6, r6, #3
  405154:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  405156:	f8da 3018 	ldr.w	r3, [sl, #24]
  40515a:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  40515e:	463b      	mov	r3, r7
		dj->fn[i++] = (BYTE)w;
  405160:	f108 0801 	add.w	r8, r8, #1
  405164:	e768      	b.n	405038 <follow_path+0x144>
					if (IsLower(w)) {	/* ASCII small capital */
  405166:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  40516a:	b29b      	uxth	r3, r3
  40516c:	2b19      	cmp	r3, #25
  40516e:	d8f2      	bhi.n	405156 <follow_path+0x262>
						b |= 1; w -= 0x20;
  405170:	9b01      	ldr	r3, [sp, #4]
  405172:	f043 0301 	orr.w	r3, r3, #1
  405176:	9301      	str	r3, [sp, #4]
  405178:	3820      	subs	r0, #32
  40517a:	b280      	uxth	r0, r0
  40517c:	e7eb      	b.n	405156 <follow_path+0x262>
	if (ni == 8) b <<= 2;
  40517e:	9b01      	ldr	r3, [sp, #4]
  405180:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  405184:	fa5f f38b 	uxtb.w	r3, fp
  405188:	9301      	str	r3, [sp, #4]
  40518a:	e78c      	b.n	4050a6 <follow_path+0x1b2>
		cf |= NS_LFN;
  40518c:	f046 0602 	orr.w	r6, r6, #2
  405190:	e792      	b.n	4050b8 <follow_path+0x1c4>
  405192:	2306      	movs	r3, #6
}
  405194:	4618      	mov	r0, r3
  405196:	b003      	add	sp, #12
  405198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  40519c:	2804      	cmp	r0, #4
  40519e:	d1f9      	bne.n	405194 <follow_path+0x2a0>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  4051a0:	f002 0204 	and.w	r2, r2, #4
  4051a4:	2a00      	cmp	r2, #0
  4051a6:	bf14      	ite	ne
  4051a8:	4603      	movne	r3, r0
  4051aa:	2305      	moveq	r3, #5
  4051ac:	e7f2      	b.n	405194 <follow_path+0x2a0>
				res = FR_NO_PATH; break;
  4051ae:	2305      	movs	r3, #5
  4051b0:	e7f0      	b.n	405194 <follow_path+0x2a0>
		w = p[si++];					/* Get a character */
  4051b2:	2301      	movs	r3, #1
	si = di = 0;
  4051b4:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
  4051b6:	18fc      	adds	r4, r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  4051b8:	2604      	movs	r6, #4
  4051ba:	e003      	b.n	4051c4 <follow_path+0x2d0>
		w = p[si++];					/* Get a character */
  4051bc:	2301      	movs	r3, #1
	si = di = 0;
  4051be:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
  4051c0:	18fc      	adds	r4, r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  4051c2:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
  4051c4:	2d00      	cmp	r5, #0
  4051c6:	d0e4      	beq.n	405192 <follow_path+0x29e>
  4051c8:	eb0b 0245 	add.w	r2, fp, r5, lsl #1
  4051cc:	e6f8      	b.n	404fc0 <follow_path+0xcc>
		w = p[si++];					/* Get a character */
  4051ce:	2301      	movs	r3, #1
	si = di = 0;
  4051d0:	2500      	movs	r5, #0
  4051d2:	e7f5      	b.n	4051c0 <follow_path+0x2cc>
			if (ni == 11) {				/* Long extension */
  4051d4:	9b00      	ldr	r3, [sp, #0]
  4051d6:	2b0b      	cmp	r3, #11
  4051d8:	d09f      	beq.n	40511a <follow_path+0x226>
			b <<= 2; continue;
  4051da:	9b01      	ldr	r3, [sp, #4]
  4051dc:	009b      	lsls	r3, r3, #2
  4051de:	b2db      	uxtb	r3, r3
  4051e0:	9301      	str	r3, [sp, #4]
  4051e2:	462b      	mov	r3, r5
			si = di; i = 8; ni = 11;	/* Enter extension section */
  4051e4:	220b      	movs	r2, #11
  4051e6:	9200      	str	r2, [sp, #0]
  4051e8:	f04f 0808 	mov.w	r8, #8
  4051ec:	e724      	b.n	405038 <follow_path+0x144>
			cf |= NS_LFN;				/* Force create LFN entry */
  4051ee:	f046 0602 	orr.w	r6, r6, #2
  4051f2:	e7ad      	b.n	405150 <follow_path+0x25c>
  4051f4:	00404435 	.word	0x00404435
  4051f8:	0040aad9 	.word	0x0040aad9
  4051fc:	00403d11 	.word	0x00403d11
  405200:	0040aae5 	.word	0x0040aae5
  405204:	00404881 	.word	0x00404881
  405208:	0040aa58 	.word	0x0040aa58
  40520c:	00405761 	.word	0x00405761

00405210 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  405210:	2807      	cmp	r0, #7
  405212:	d901      	bls.n	405218 <f_mount+0x8>
		return FR_INVALID_DRIVE;
  405214:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  405216:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  405218:	4b06      	ldr	r3, [pc, #24]	; (405234 <f_mount+0x24>)
  40521a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (rfs) {
  40521e:	b10b      	cbz	r3, 405224 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
  405220:	2200      	movs	r2, #0
  405222:	701a      	strb	r2, [r3, #0]
	if (fs) {
  405224:	b109      	cbz	r1, 40522a <f_mount+0x1a>
		fs->fs_type = 0;		/* Clear new fs object */
  405226:	2300      	movs	r3, #0
  405228:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  40522a:	4b02      	ldr	r3, [pc, #8]	; (405234 <f_mount+0x24>)
  40522c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return FR_OK;
  405230:	2000      	movs	r0, #0
  405232:	4770      	bx	lr
  405234:	200061a4 	.word	0x200061a4

00405238 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  405238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40523c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  405240:	4605      	mov	r5, r0
  405242:	9101      	str	r1, [sp, #4]
  405244:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  405246:	2300      	movs	r3, #0
  405248:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  40524a:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  40524e:	f002 021e 	and.w	r2, r2, #30
  405252:	a985      	add	r1, sp, #532	; 0x214
  405254:	a801      	add	r0, sp, #4
  405256:	4b58      	ldr	r3, [pc, #352]	; (4053b8 <f_open+0x180>)
  405258:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  40525a:	ab82      	add	r3, sp, #520	; 0x208
  40525c:	938b      	str	r3, [sp, #556]	; 0x22c
  40525e:	ab02      	add	r3, sp, #8
  405260:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  405262:	b140      	cbz	r0, 405276 <f_open+0x3e>
  405264:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  405266:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  405268:	f016 0f1c 	tst.w	r6, #28
  40526c:	d117      	bne.n	40529e <f_open+0x66>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  40526e:	2b00      	cmp	r3, #0
  405270:	f040 8092 	bne.w	405398 <f_open+0x160>
  405274:	e00d      	b.n	405292 <f_open+0x5a>
		res = follow_path(&dj, path);	/* Follow the file path */
  405276:	9901      	ldr	r1, [sp, #4]
  405278:	a885      	add	r0, sp, #532	; 0x214
  40527a:	4b50      	ldr	r3, [pc, #320]	; (4053bc <f_open+0x184>)
  40527c:	4798      	blx	r3
	dir = dj.dir;
  40527e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
  405280:	4603      	mov	r3, r0
  405282:	2800      	cmp	r0, #0
  405284:	d1f0      	bne.n	405268 <f_open+0x30>
		if (!dir)	/* Current dir itself */
  405286:	2c00      	cmp	r4, #0
  405288:	f000 808b 	beq.w	4053a2 <f_open+0x16a>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  40528c:	f016 0f1c 	tst.w	r6, #28
  405290:	d116      	bne.n	4052c0 <f_open+0x88>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  405292:	7ae3      	ldrb	r3, [r4, #11]
  405294:	f013 0f10 	tst.w	r3, #16
  405298:	d04f      	beq.n	40533a <f_open+0x102>
				res = FR_NO_FILE;
  40529a:	2304      	movs	r3, #4
  40529c:	e07c      	b.n	405398 <f_open+0x160>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  40529e:	2b04      	cmp	r3, #4
  4052a0:	d005      	beq.n	4052ae <f_open+0x76>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  4052a2:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  4052a6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  4052a8:	2b00      	cmp	r3, #0
  4052aa:	d057      	beq.n	40535c <f_open+0x124>
  4052ac:	e074      	b.n	405398 <f_open+0x160>
				res = dir_register(&dj);
  4052ae:	a885      	add	r0, sp, #532	; 0x214
  4052b0:	4b43      	ldr	r3, [pc, #268]	; (4053c0 <f_open+0x188>)
  4052b2:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  4052b4:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  4052b8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  4052ba:	4603      	mov	r3, r0
  4052bc:	b138      	cbz	r0, 4052ce <f_open+0x96>
  4052be:	e06b      	b.n	405398 <f_open+0x160>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  4052c0:	7ae3      	ldrb	r3, [r4, #11]
  4052c2:	f013 0f11 	tst.w	r3, #17
  4052c6:	d173      	bne.n	4053b0 <f_open+0x178>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  4052c8:	f016 0f04 	tst.w	r6, #4
  4052cc:	d172      	bne.n	4053b4 <f_open+0x17c>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  4052ce:	f017 0f08 	tst.w	r7, #8
  4052d2:	d03f      	beq.n	405354 <f_open+0x11c>
			dw = get_fattime();					/* Created time */
  4052d4:	4b3b      	ldr	r3, [pc, #236]	; (4053c4 <f_open+0x18c>)
  4052d6:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  4052d8:	73a0      	strb	r0, [r4, #14]
  4052da:	f3c0 2307 	ubfx	r3, r0, #8, #8
  4052de:	73e3      	strb	r3, [r4, #15]
  4052e0:	0c03      	lsrs	r3, r0, #16
  4052e2:	7423      	strb	r3, [r4, #16]
  4052e4:	0e00      	lsrs	r0, r0, #24
  4052e6:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  4052e8:	2300      	movs	r3, #0
  4052ea:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  4052ec:	7723      	strb	r3, [r4, #28]
  4052ee:	7763      	strb	r3, [r4, #29]
  4052f0:	77a3      	strb	r3, [r4, #30]
  4052f2:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  4052f4:	7d62      	ldrb	r2, [r4, #21]
  4052f6:	7d26      	ldrb	r6, [r4, #20]
  4052f8:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  4052fc:	7ee1      	ldrb	r1, [r4, #27]
  4052fe:	7ea2      	ldrb	r2, [r4, #26]
  405300:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  405304:	76a3      	strb	r3, [r4, #26]
  405306:	76e3      	strb	r3, [r4, #27]
  405308:	7523      	strb	r3, [r4, #20]
  40530a:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  40530c:	9885      	ldr	r0, [sp, #532]	; 0x214
  40530e:	2301      	movs	r3, #1
  405310:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  405312:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  405316:	d01b      	beq.n	405350 <f_open+0x118>
				dw = dj.fs->winsect;
  405318:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  40531c:	4631      	mov	r1, r6
  40531e:	4b2a      	ldr	r3, [pc, #168]	; (4053c8 <f_open+0x190>)
  405320:	4798      	blx	r3
				if (res == FR_OK) {
  405322:	4603      	mov	r3, r0
  405324:	2800      	cmp	r0, #0
  405326:	d137      	bne.n	405398 <f_open+0x160>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  405328:	9885      	ldr	r0, [sp, #532]	; 0x214
  40532a:	3e01      	subs	r6, #1
  40532c:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  40532e:	4641      	mov	r1, r8
  405330:	4b26      	ldr	r3, [pc, #152]	; (4053cc <f_open+0x194>)
  405332:	4798      	blx	r3
	if (res == FR_OK) {
  405334:	4603      	mov	r3, r0
  405336:	b158      	cbz	r0, 405350 <f_open+0x118>
  405338:	e02e      	b.n	405398 <f_open+0x160>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  40533a:	f016 0f02 	tst.w	r6, #2
  40533e:	d004      	beq.n	40534a <f_open+0x112>
  405340:	f013 0f01 	tst.w	r3, #1
  405344:	d001      	beq.n	40534a <f_open+0x112>
					res = FR_DENIED;
  405346:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  405348:	e026      	b.n	405398 <f_open+0x160>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  40534a:	f016 0f08 	tst.w	r6, #8
  40534e:	d001      	beq.n	405354 <f_open+0x11c>
			mode |= FA__WRITTEN;
  405350:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  405354:	9b85      	ldr	r3, [sp, #532]	; 0x214
  405356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405358:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  40535a:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  40535c:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  40535e:	7d62      	ldrb	r2, [r4, #21]
  405360:	7d23      	ldrb	r3, [r4, #20]
  405362:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  405366:	7ee1      	ldrb	r1, [r4, #27]
  405368:	7ea3      	ldrb	r3, [r4, #26]
  40536a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  40536e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405372:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  405374:	7fe2      	ldrb	r2, [r4, #31]
  405376:	7fa3      	ldrb	r3, [r4, #30]
  405378:	041b      	lsls	r3, r3, #16
  40537a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40537e:	7f22      	ldrb	r2, [r4, #28]
  405380:	4313      	orrs	r3, r2
  405382:	7f62      	ldrb	r2, [r4, #29]
  405384:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  405388:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  40538a:	2300      	movs	r3, #0
  40538c:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  40538e:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  405390:	9a85      	ldr	r2, [sp, #532]	; 0x214
  405392:	602a      	str	r2, [r5, #0]
  405394:	88d2      	ldrh	r2, [r2, #6]
  405396:	80aa      	strh	r2, [r5, #4]
}
  405398:	4618      	mov	r0, r3
  40539a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  40539e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  4053a2:	f016 0f1c 	tst.w	r6, #28
  4053a6:	d101      	bne.n	4053ac <f_open+0x174>
			res = FR_INVALID_NAME;
  4053a8:	2306      	movs	r3, #6
  4053aa:	e77d      	b.n	4052a8 <f_open+0x70>
  4053ac:	2306      	movs	r3, #6
  4053ae:	e778      	b.n	4052a2 <f_open+0x6a>
				res = FR_DENIED;
  4053b0:	2307      	movs	r3, #7
  4053b2:	e7f1      	b.n	405398 <f_open+0x160>
					res = FR_EXIST;
  4053b4:	2308      	movs	r3, #8
  4053b6:	e7ef      	b.n	405398 <f_open+0x160>
  4053b8:	00403e19 	.word	0x00403e19
  4053bc:	00404ef5 	.word	0x00404ef5
  4053c0:	00404a2d 	.word	0x00404a2d
  4053c4:	00403ca5 	.word	0x00403ca5
  4053c8:	004046cd 	.word	0x004046cd
  4053cc:	004042bd 	.word	0x004042bd

004053d0 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
  4053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4053d4:	b083      	sub	sp, #12
  4053d6:	4604      	mov	r4, r0
  4053d8:	4689      	mov	r9, r1
  4053da:	4615      	mov	r5, r2
  4053dc:	4698      	mov	r8, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
  4053de:	2300      	movs	r3, #0
  4053e0:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);				/* Check validity */
  4053e4:	8881      	ldrh	r1, [r0, #4]
  4053e6:	6800      	ldr	r0, [r0, #0]
  4053e8:	4b58      	ldr	r3, [pc, #352]	; (40554c <f_read+0x17c>)
  4053ea:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  4053ec:	9001      	str	r0, [sp, #4]
  4053ee:	2800      	cmp	r0, #0
  4053f0:	f040 80a8 	bne.w	405544 <f_read+0x174>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
  4053f4:	79a3      	ldrb	r3, [r4, #6]
  4053f6:	f013 0f80 	tst.w	r3, #128	; 0x80
  4053fa:	f040 80a1 	bne.w	405540 <f_read+0x170>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
  4053fe:	f013 0f01 	tst.w	r3, #1
  405402:	d102      	bne.n	40540a <f_read+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  405404:	2307      	movs	r3, #7
  405406:	9301      	str	r3, [sp, #4]
  405408:	e09c      	b.n	405544 <f_read+0x174>
	remain = fp->fsize - fp->fptr;
  40540a:	68e6      	ldr	r6, [r4, #12]
  40540c:	68a3      	ldr	r3, [r4, #8]
  40540e:	1af6      	subs	r6, r6, r3
  405410:	42ae      	cmp	r6, r5
  405412:	bf28      	it	cs
  405414:	462e      	movcs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
  405416:	2e00      	cmp	r6, #0
  405418:	d14c      	bne.n	4054b4 <f_read+0xe4>
  40541a:	e093      	b.n	405544 <f_read+0x174>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
  40541c:	6961      	ldr	r1, [r4, #20]
  40541e:	4b4c      	ldr	r3, [pc, #304]	; (405550 <f_read+0x180>)
  405420:	4798      	blx	r3
  405422:	e057      	b.n	4054d4 <f_read+0x104>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  405424:	79a3      	ldrb	r3, [r4, #6]
  405426:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40542a:	71a3      	strb	r3, [r4, #6]
  40542c:	2302      	movs	r3, #2
  40542e:	9301      	str	r3, [sp, #4]
  405430:	e088      	b.n	405544 <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  405432:	79a3      	ldrb	r3, [r4, #6]
  405434:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405438:	71a3      	strb	r3, [r4, #6]
  40543a:	2301      	movs	r3, #1
  40543c:	9301      	str	r3, [sp, #4]
  40543e:	e081      	b.n	405544 <f_read+0x174>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  405440:	79a3      	ldrb	r3, [r4, #6]
  405442:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405446:	71a3      	strb	r3, [r4, #6]
  405448:	2302      	movs	r3, #2
  40544a:	9301      	str	r3, [sp, #4]
  40544c:	e07a      	b.n	405544 <f_read+0x174>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
  40544e:	79a3      	ldrb	r3, [r4, #6]
  405450:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405454:	71a3      	strb	r3, [r4, #6]
  405456:	2301      	movs	r3, #1
  405458:	9301      	str	r3, [sp, #4]
  40545a:	e073      	b.n	405544 <f_read+0x174>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
  40545c:	f44f 7200 	mov.w	r2, #512	; 0x200
  405460:	3130      	adds	r1, #48	; 0x30
  405462:	eb09 2040 	add.w	r0, r9, r0, lsl #9
  405466:	4b3b      	ldr	r3, [pc, #236]	; (405554 <f_read+0x184>)
  405468:	4798      	blx	r3
  40546a:	e05f      	b.n	40552c <f_read+0x15c>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
  40546c:	61a5      	str	r5, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
  40546e:	68a5      	ldr	r5, [r4, #8]
  405470:	f3c5 0508 	ubfx	r5, r5, #0, #9
  405474:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  405478:	42b5      	cmp	r5, r6
  40547a:	bf28      	it	cs
  40547c:	4635      	movcs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
  40547e:	69a1      	ldr	r1, [r4, #24]
  405480:	6820      	ldr	r0, [r4, #0]
  405482:	4b35      	ldr	r3, [pc, #212]	; (405558 <f_read+0x188>)
  405484:	4798      	blx	r3
  405486:	2800      	cmp	r0, #0
  405488:	d153      	bne.n	405532 <f_read+0x162>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
  40548a:	68a1      	ldr	r1, [r4, #8]
  40548c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  405490:	3130      	adds	r1, #48	; 0x30
  405492:	6823      	ldr	r3, [r4, #0]
  405494:	462a      	mov	r2, r5
  405496:	4419      	add	r1, r3
  405498:	4648      	mov	r0, r9
  40549a:	4b2e      	ldr	r3, [pc, #184]	; (405554 <f_read+0x184>)
  40549c:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  40549e:	44a9      	add	r9, r5
  4054a0:	68a3      	ldr	r3, [r4, #8]
  4054a2:	442b      	add	r3, r5
  4054a4:	60a3      	str	r3, [r4, #8]
  4054a6:	f8d8 3000 	ldr.w	r3, [r8]
  4054aa:	442b      	add	r3, r5
  4054ac:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
  4054b0:	1b76      	subs	r6, r6, r5
  4054b2:	d047      	beq.n	405544 <f_read+0x174>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
  4054b4:	68a2      	ldr	r2, [r4, #8]
  4054b6:	f3c2 0308 	ubfx	r3, r2, #0, #9
  4054ba:	2b00      	cmp	r3, #0
  4054bc:	d1d7      	bne.n	40546e <f_read+0x9e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  4054be:	6820      	ldr	r0, [r4, #0]
  4054c0:	7883      	ldrb	r3, [r0, #2]
  4054c2:	3b01      	subs	r3, #1
  4054c4:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {						/* On the cluster boundary? */
  4054c8:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  4054cc:	d108      	bne.n	4054e0 <f_read+0x110>
				if (fp->fptr == 0) {			/* On the top of the file? */
  4054ce:	2a00      	cmp	r2, #0
  4054d0:	d1a4      	bne.n	40541c <f_read+0x4c>
					clst = fp->sclust;			/* Follow from the origin */
  4054d2:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  4054d4:	2801      	cmp	r0, #1
  4054d6:	d9a5      	bls.n	405424 <f_read+0x54>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4054d8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4054dc:	d0a9      	beq.n	405432 <f_read+0x62>
				fp->clust = clst;				/* Update current cluster */
  4054de:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  4054e0:	f8d4 a000 	ldr.w	sl, [r4]
  4054e4:	6961      	ldr	r1, [r4, #20]
  4054e6:	4650      	mov	r0, sl
  4054e8:	4b1c      	ldr	r3, [pc, #112]	; (40555c <f_read+0x18c>)
  4054ea:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  4054ec:	4605      	mov	r5, r0
  4054ee:	2800      	cmp	r0, #0
  4054f0:	d0a6      	beq.n	405440 <f_read+0x70>
			sect += csect;
  4054f2:	443d      	add	r5, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
  4054f4:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  4054f8:	d0b8      	beq.n	40546c <f_read+0x9c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  4054fa:	f89a 3002 	ldrb.w	r3, [sl, #2]
  4054fe:	eb07 020b 	add.w	r2, r7, fp
  405502:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  405504:	bf88      	it	hi
  405506:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
  40550a:	fa5f f38b 	uxtb.w	r3, fp
  40550e:	462a      	mov	r2, r5
  405510:	4649      	mov	r1, r9
  405512:	f89a 0001 	ldrb.w	r0, [sl, #1]
  405516:	4f12      	ldr	r7, [pc, #72]	; (405560 <f_read+0x190>)
  405518:	47b8      	blx	r7
  40551a:	2800      	cmp	r0, #0
  40551c:	d197      	bne.n	40544e <f_read+0x7e>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
  40551e:	6821      	ldr	r1, [r4, #0]
  405520:	790b      	ldrb	r3, [r1, #4]
  405522:	b11b      	cbz	r3, 40552c <f_read+0x15c>
  405524:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
  405526:	1b40      	subs	r0, r0, r5
  405528:	4583      	cmp	fp, r0
  40552a:	d897      	bhi.n	40545c <f_read+0x8c>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
  40552c:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  405530:	e7b5      	b.n	40549e <f_read+0xce>
			ABORT(fp->fs, FR_DISK_ERR);
  405532:	79a3      	ldrb	r3, [r4, #6]
  405534:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405538:	71a3      	strb	r3, [r4, #6]
  40553a:	2301      	movs	r3, #1
  40553c:	9301      	str	r3, [sp, #4]
  40553e:	e001      	b.n	405544 <f_read+0x174>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  405540:	2302      	movs	r3, #2
  405542:	9301      	str	r3, [sp, #4]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
  405544:	9801      	ldr	r0, [sp, #4]
  405546:	b003      	add	sp, #12
  405548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40554c:	00403d55 	.word	0x00403d55
  405550:	0040434d 	.word	0x0040434d
  405554:	00403cfd 	.word	0x00403cfd
  405558:	004042bd 	.word	0x004042bd
  40555c:	00403d1f 	.word	0x00403d1f
  405560:	00403b55 	.word	0x00403b55

00405564 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  405564:	b538      	push	{r3, r4, r5, lr}
  405566:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  405568:	8881      	ldrh	r1, [r0, #4]
  40556a:	6800      	ldr	r0, [r0, #0]
  40556c:	4b1f      	ldr	r3, [pc, #124]	; (4055ec <f_sync+0x88>)
  40556e:	4798      	blx	r3
	if (res == FR_OK) {
  405570:	4603      	mov	r3, r0
  405572:	b918      	cbnz	r0, 40557c <f_sync+0x18>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  405574:	79a2      	ldrb	r2, [r4, #6]
  405576:	f012 0f20 	tst.w	r2, #32
  40557a:	d101      	bne.n	405580 <f_sync+0x1c>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  40557c:	4618      	mov	r0, r3
  40557e:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
  405580:	69e1      	ldr	r1, [r4, #28]
  405582:	6820      	ldr	r0, [r4, #0]
  405584:	4b1a      	ldr	r3, [pc, #104]	; (4055f0 <f_sync+0x8c>)
  405586:	4798      	blx	r3
			if (res == FR_OK) {
  405588:	4603      	mov	r3, r0
  40558a:	2800      	cmp	r0, #0
  40558c:	d1f6      	bne.n	40557c <f_sync+0x18>
				dir = fp->dir_ptr;
  40558e:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  405590:	7aeb      	ldrb	r3, [r5, #11]
  405592:	f043 0320 	orr.w	r3, r3, #32
  405596:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  405598:	68e3      	ldr	r3, [r4, #12]
  40559a:	772b      	strb	r3, [r5, #28]
  40559c:	89a3      	ldrh	r3, [r4, #12]
  40559e:	0a1b      	lsrs	r3, r3, #8
  4055a0:	776b      	strb	r3, [r5, #29]
  4055a2:	89e3      	ldrh	r3, [r4, #14]
  4055a4:	77ab      	strb	r3, [r5, #30]
  4055a6:	7be3      	ldrb	r3, [r4, #15]
  4055a8:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  4055aa:	6923      	ldr	r3, [r4, #16]
  4055ac:	76ab      	strb	r3, [r5, #26]
  4055ae:	8a23      	ldrh	r3, [r4, #16]
  4055b0:	0a1b      	lsrs	r3, r3, #8
  4055b2:	76eb      	strb	r3, [r5, #27]
  4055b4:	8a63      	ldrh	r3, [r4, #18]
  4055b6:	752b      	strb	r3, [r5, #20]
  4055b8:	8a63      	ldrh	r3, [r4, #18]
  4055ba:	0a1b      	lsrs	r3, r3, #8
  4055bc:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  4055be:	4b0d      	ldr	r3, [pc, #52]	; (4055f4 <f_sync+0x90>)
  4055c0:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  4055c2:	75a8      	strb	r0, [r5, #22]
  4055c4:	f3c0 2307 	ubfx	r3, r0, #8, #8
  4055c8:	75eb      	strb	r3, [r5, #23]
  4055ca:	0c03      	lsrs	r3, r0, #16
  4055cc:	762b      	strb	r3, [r5, #24]
  4055ce:	0e00      	lsrs	r0, r0, #24
  4055d0:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  4055d2:	79a3      	ldrb	r3, [r4, #6]
  4055d4:	f023 0320 	bic.w	r3, r3, #32
  4055d8:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  4055da:	6823      	ldr	r3, [r4, #0]
  4055dc:	2201      	movs	r2, #1
  4055de:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  4055e0:	6820      	ldr	r0, [r4, #0]
  4055e2:	4b05      	ldr	r3, [pc, #20]	; (4055f8 <f_sync+0x94>)
  4055e4:	4798      	blx	r3
  4055e6:	4603      	mov	r3, r0
  4055e8:	e7c8      	b.n	40557c <f_sync+0x18>
  4055ea:	bf00      	nop
  4055ec:	00403d55 	.word	0x00403d55
  4055f0:	004042bd 	.word	0x004042bd
  4055f4:	00403ca5 	.word	0x00403ca5
  4055f8:	00404e29 	.word	0x00404e29

004055fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  4055fc:	b510      	push	{r4, lr}
  4055fe:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  405600:	4b03      	ldr	r3, [pc, #12]	; (405610 <f_close+0x14>)
  405602:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  405604:	4603      	mov	r3, r0
  405606:	b908      	cbnz	r0, 40560c <f_close+0x10>
  405608:	2200      	movs	r2, #0
  40560a:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  40560c:	4618      	mov	r0, r3
  40560e:	bd10      	pop	{r4, pc}
  405610:	00405565 	.word	0x00405565

00405614 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
  405614:	b510      	push	{r4, lr}
  405616:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
  40561a:	4604      	mov	r4, r0
  40561c:	9101      	str	r1, [sp, #4]
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
  40561e:	2200      	movs	r2, #0
  405620:	4601      	mov	r1, r0
  405622:	a801      	add	r0, sp, #4
  405624:	4b18      	ldr	r3, [pc, #96]	; (405688 <f_opendir+0x74>)
  405626:	4798      	blx	r3
	if (res == FR_OK) {
  405628:	4603      	mov	r3, r0
  40562a:	b118      	cbz	r0, 405634 <f_opendir+0x20>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
  40562c:	4618      	mov	r0, r3
  40562e:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
  405632:	bd10      	pop	{r4, pc}
		INIT_BUF(*dj);
  405634:	ab83      	add	r3, sp, #524	; 0x20c
  405636:	61a3      	str	r3, [r4, #24]
  405638:	ab03      	add	r3, sp, #12
  40563a:	61e3      	str	r3, [r4, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
  40563c:	9901      	ldr	r1, [sp, #4]
  40563e:	4620      	mov	r0, r4
  405640:	4b12      	ldr	r3, [pc, #72]	; (40568c <f_opendir+0x78>)
  405642:	4798      	blx	r3
		if (res == FR_OK) {						/* Follow completed */
  405644:	4603      	mov	r3, r0
  405646:	b9c0      	cbnz	r0, 40567a <f_opendir+0x66>
			if (dj->dir) {						/* It is not the root dir */
  405648:	6963      	ldr	r3, [r4, #20]
  40564a:	b173      	cbz	r3, 40566a <f_opendir+0x56>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
  40564c:	7ada      	ldrb	r2, [r3, #11]
  40564e:	f012 0f10 	tst.w	r2, #16
  405652:	d016      	beq.n	405682 <f_opendir+0x6e>
					dj->sclust = LD_CLUST(dj->dir);
  405654:	7d59      	ldrb	r1, [r3, #21]
  405656:	7d1a      	ldrb	r2, [r3, #20]
  405658:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  40565c:	7ed9      	ldrb	r1, [r3, #27]
  40565e:	7e9b      	ldrb	r3, [r3, #26]
  405660:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  405664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405668:	60a3      	str	r3, [r4, #8]
				dj->id = dj->fs->id;
  40566a:	6823      	ldr	r3, [r4, #0]
  40566c:	88db      	ldrh	r3, [r3, #6]
  40566e:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
  405670:	2100      	movs	r1, #0
  405672:	4620      	mov	r0, r4
  405674:	4b06      	ldr	r3, [pc, #24]	; (405690 <f_opendir+0x7c>)
  405676:	4798      	blx	r3
  405678:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
  40567a:	2b04      	cmp	r3, #4
  40567c:	bf08      	it	eq
  40567e:	2305      	moveq	r3, #5
  405680:	e7d4      	b.n	40562c <f_opendir+0x18>
					res = FR_NO_PATH;
  405682:	2305      	movs	r3, #5
	LEAVE_FF(dj->fs, res);
  405684:	e7d2      	b.n	40562c <f_opendir+0x18>
  405686:	bf00      	nop
  405688:	00403e19 	.word	0x00403e19
  40568c:	00404ef5 	.word	0x00404ef5
  405690:	00404435 	.word	0x00404435

00405694 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
  405694:	b570      	push	{r4, r5, r6, lr}
  405696:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
  40569a:	4604      	mov	r4, r0
  40569c:	460e      	mov	r6, r1
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
  40569e:	8881      	ldrh	r1, [r0, #4]
  4056a0:	6800      	ldr	r0, [r0, #0]
  4056a2:	4b15      	ldr	r3, [pc, #84]	; (4056f8 <f_readdir+0x64>)
  4056a4:	4798      	blx	r3
	if (res == FR_OK) {
  4056a6:	4605      	mov	r5, r0
  4056a8:	b958      	cbnz	r0, 4056c2 <f_readdir+0x2e>
		if (!fno) {
  4056aa:	b176      	cbz	r6, 4056ca <f_readdir+0x36>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
  4056ac:	ab81      	add	r3, sp, #516	; 0x204
  4056ae:	61a3      	str	r3, [r4, #24]
  4056b0:	ab01      	add	r3, sp, #4
  4056b2:	61e3      	str	r3, [r4, #28]
			res = dir_read(dj);				/* Read an directory item */
  4056b4:	4620      	mov	r0, r4
  4056b6:	4b11      	ldr	r3, [pc, #68]	; (4056fc <f_readdir+0x68>)
  4056b8:	4798      	blx	r3
			if (res == FR_NO_FILE) {		/* Reached end of dir */
  4056ba:	2804      	cmp	r0, #4
  4056bc:	d00b      	beq.n	4056d6 <f_readdir+0x42>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
  4056be:	b160      	cbz	r0, 4056da <f_readdir+0x46>
			res = dir_read(dj);				/* Read an directory item */
  4056c0:	4605      	mov	r5, r0
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
  4056c2:	4628      	mov	r0, r5
  4056c4:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
  4056c8:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
  4056ca:	2100      	movs	r1, #0
  4056cc:	4620      	mov	r0, r4
  4056ce:	4b0c      	ldr	r3, [pc, #48]	; (405700 <f_readdir+0x6c>)
  4056d0:	4798      	blx	r3
  4056d2:	4605      	mov	r5, r0
  4056d4:	e7f5      	b.n	4056c2 <f_readdir+0x2e>
				dj->sect = 0;
  4056d6:	2300      	movs	r3, #0
  4056d8:	6123      	str	r3, [r4, #16]
				get_fileinfo(dj, fno);		/* Get the object information */
  4056da:	4631      	mov	r1, r6
  4056dc:	4620      	mov	r0, r4
  4056de:	4b09      	ldr	r3, [pc, #36]	; (405704 <f_readdir+0x70>)
  4056e0:	4798      	blx	r3
				res = dir_next(dj, 0);		/* Increment index for next */
  4056e2:	2100      	movs	r1, #0
  4056e4:	4620      	mov	r0, r4
  4056e6:	4b08      	ldr	r3, [pc, #32]	; (405708 <f_readdir+0x74>)
  4056e8:	4798      	blx	r3
				if (res == FR_NO_FILE) {
  4056ea:	2804      	cmp	r0, #4
  4056ec:	d001      	beq.n	4056f2 <f_readdir+0x5e>
				res = dir_next(dj, 0);		/* Increment index for next */
  4056ee:	4605      	mov	r5, r0
  4056f0:	e7e7      	b.n	4056c2 <f_readdir+0x2e>
					dj->sect = 0;
  4056f2:	2300      	movs	r3, #0
  4056f4:	6123      	str	r3, [r4, #16]
  4056f6:	e7e4      	b.n	4056c2 <f_readdir+0x2e>
  4056f8:	00403d55 	.word	0x00403d55
  4056fc:	00404d09 	.word	0x00404d09
  405700:	00404435 	.word	0x00404435
  405704:	00404185 	.word	0x00404185
  405708:	00404749 	.word	0x00404749

0040570c <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
  40570c:	b530      	push	{r4, r5, lr}
  40570e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  405712:	9001      	str	r0, [sp, #4]
  405714:	460d      	mov	r5, r1
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
  405716:	2200      	movs	r2, #0
  405718:	a985      	add	r1, sp, #532	; 0x214
  40571a:	a801      	add	r0, sp, #4
  40571c:	4b0d      	ldr	r3, [pc, #52]	; (405754 <f_stat+0x48>)
  40571e:	4798      	blx	r3
	if (res == FR_OK) {
  405720:	4604      	mov	r4, r0
  405722:	b118      	cbz	r0, 40572c <f_stat+0x20>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
  405724:	4620      	mov	r0, r4
  405726:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  40572a:	bd30      	pop	{r4, r5, pc}
		INIT_BUF(dj);
  40572c:	ab82      	add	r3, sp, #520	; 0x208
  40572e:	938b      	str	r3, [sp, #556]	; 0x22c
  405730:	ab02      	add	r3, sp, #8
  405732:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
  405734:	9901      	ldr	r1, [sp, #4]
  405736:	a885      	add	r0, sp, #532	; 0x214
  405738:	4b07      	ldr	r3, [pc, #28]	; (405758 <f_stat+0x4c>)
  40573a:	4798      	blx	r3
		if (res == FR_OK) {				/* Follow completed */
  40573c:	4604      	mov	r4, r0
  40573e:	2800      	cmp	r0, #0
  405740:	d1f0      	bne.n	405724 <f_stat+0x18>
			if (dj.dir)		/* Found an object */
  405742:	9b8a      	ldr	r3, [sp, #552]	; 0x228
  405744:	b123      	cbz	r3, 405750 <f_stat+0x44>
				get_fileinfo(&dj, fno);
  405746:	4629      	mov	r1, r5
  405748:	a885      	add	r0, sp, #532	; 0x214
  40574a:	4b04      	ldr	r3, [pc, #16]	; (40575c <f_stat+0x50>)
  40574c:	4798      	blx	r3
  40574e:	e7e9      	b.n	405724 <f_stat+0x18>
				res = FR_INVALID_NAME;
  405750:	2406      	movs	r4, #6
  405752:	e7e7      	b.n	405724 <f_stat+0x18>
  405754:	00403e19 	.word	0x00403e19
  405758:	00404ef5 	.word	0x00404ef5
  40575c:	00404185 	.word	0x00404185

00405760 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  405760:	287f      	cmp	r0, #127	; 0x7f
  405762:	d919      	bls.n	405798 <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  405764:	b971      	cbnz	r1, 405784 <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  405766:	28c7      	cmp	r0, #199	; 0xc7
  405768:	d013      	beq.n	405792 <ff_convert+0x32>
  40576a:	4a0c      	ldr	r2, [pc, #48]	; (40579c <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  40576c:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  40576e:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  405772:	4281      	cmp	r1, r0
  405774:	d003      	beq.n	40577e <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  405776:	3301      	adds	r3, #1
  405778:	b29b      	uxth	r3, r3
  40577a:	2b80      	cmp	r3, #128	; 0x80
  40577c:	d1f7      	bne.n	40576e <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  40577e:	3380      	adds	r3, #128	; 0x80
  405780:	b2d8      	uxtb	r0, r3
  405782:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  405784:	28ff      	cmp	r0, #255	; 0xff
  405786:	d806      	bhi.n	405796 <ff_convert+0x36>
  405788:	3880      	subs	r0, #128	; 0x80
  40578a:	4b04      	ldr	r3, [pc, #16]	; (40579c <ff_convert+0x3c>)
  40578c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  405790:	4770      	bx	lr
				if (src == Tbl[c]) break;
  405792:	2300      	movs	r3, #0
  405794:	e7f3      	b.n	40577e <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  405796:	2000      	movs	r0, #0
		}
	}

	return c;
}
  405798:	4770      	bx	lr
  40579a:	bf00      	nop
  40579c:	0040aaec 	.word	0x0040aaec

004057a0 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  4057a0:	2861      	cmp	r0, #97	; 0x61
  4057a2:	d010      	beq.n	4057c6 <ff_wtoupper+0x26>
  4057a4:	4909      	ldr	r1, [pc, #36]	; (4057cc <ff_wtoupper+0x2c>)
  4057a6:	2201      	movs	r2, #1
  4057a8:	2362      	movs	r3, #98	; 0x62
  4057aa:	4298      	cmp	r0, r3
  4057ac:	d005      	beq.n	4057ba <ff_wtoupper+0x1a>
  4057ae:	3201      	adds	r2, #1
  4057b0:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  4057b4:	2b00      	cmp	r3, #0
  4057b6:	d1f8      	bne.n	4057aa <ff_wtoupper+0xa>
  4057b8:	e003      	b.n	4057c2 <ff_wtoupper+0x22>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  4057ba:	b118      	cbz	r0, 4057c4 <ff_wtoupper+0x24>
  4057bc:	4b04      	ldr	r3, [pc, #16]	; (4057d0 <ff_wtoupper+0x30>)
  4057be:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  4057c2:	4770      	bx	lr
  4057c4:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  4057c6:	2200      	movs	r2, #0
  4057c8:	e7f8      	b.n	4057bc <ff_wtoupper+0x1c>
  4057ca:	bf00      	nop
  4057cc:	0040abee 	.word	0x0040abee
  4057d0:	0040adcc 	.word	0x0040adcc

004057d4 <main>:
#if (!defined(SYS_INIT_FROM_CONSOLE) && !defined(SYS_INIT_FROM_DEFAPP)) || (defined(SYS_INIT_FROM_CONSOLE) && defined(SYS_INIT_FROM_DEFAPP))
#error "Define either SYS_INIT_FROM_CONSOLE or SYS_INIT_FROM_DEFAPP. Not both or none. See system.h"
#endif

int main(void)
{
  4057d4:	b508      	push	{r3, lr}
	//Initializes the system
	system_init();
  4057d6:	4b02      	ldr	r3, [pc, #8]	; (4057e0 <main+0xc>)
  4057d8:	4798      	blx	r3
	
#ifdef SYS_INIT_FROM_CONSOLE
	//Execute the console
	console_begin();	
  4057da:	4b02      	ldr	r3, [pc, #8]	; (4057e4 <main+0x10>)
  4057dc:	4798      	blx	r3
  4057de:	e7fe      	b.n	4057de <main+0xa>
  4057e0:	004013d5 	.word	0x004013d5
  4057e4:	00400341 	.word	0x00400341

004057e8 <__aeabi_drsub>:
  4057e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4057ec:	e002      	b.n	4057f4 <__adddf3>
  4057ee:	bf00      	nop

004057f0 <__aeabi_dsub>:
  4057f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004057f4 <__adddf3>:
  4057f4:	b530      	push	{r4, r5, lr}
  4057f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4057fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4057fe:	ea94 0f05 	teq	r4, r5
  405802:	bf08      	it	eq
  405804:	ea90 0f02 	teqeq	r0, r2
  405808:	bf1f      	itttt	ne
  40580a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40580e:	ea55 0c02 	orrsne.w	ip, r5, r2
  405812:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405816:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40581a:	f000 80e2 	beq.w	4059e2 <__adddf3+0x1ee>
  40581e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405822:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405826:	bfb8      	it	lt
  405828:	426d      	neglt	r5, r5
  40582a:	dd0c      	ble.n	405846 <__adddf3+0x52>
  40582c:	442c      	add	r4, r5
  40582e:	ea80 0202 	eor.w	r2, r0, r2
  405832:	ea81 0303 	eor.w	r3, r1, r3
  405836:	ea82 0000 	eor.w	r0, r2, r0
  40583a:	ea83 0101 	eor.w	r1, r3, r1
  40583e:	ea80 0202 	eor.w	r2, r0, r2
  405842:	ea81 0303 	eor.w	r3, r1, r3
  405846:	2d36      	cmp	r5, #54	; 0x36
  405848:	bf88      	it	hi
  40584a:	bd30      	pophi	{r4, r5, pc}
  40584c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405850:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405854:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405858:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40585c:	d002      	beq.n	405864 <__adddf3+0x70>
  40585e:	4240      	negs	r0, r0
  405860:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405864:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405868:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40586c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405870:	d002      	beq.n	405878 <__adddf3+0x84>
  405872:	4252      	negs	r2, r2
  405874:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405878:	ea94 0f05 	teq	r4, r5
  40587c:	f000 80a7 	beq.w	4059ce <__adddf3+0x1da>
  405880:	f1a4 0401 	sub.w	r4, r4, #1
  405884:	f1d5 0e20 	rsbs	lr, r5, #32
  405888:	db0d      	blt.n	4058a6 <__adddf3+0xb2>
  40588a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40588e:	fa22 f205 	lsr.w	r2, r2, r5
  405892:	1880      	adds	r0, r0, r2
  405894:	f141 0100 	adc.w	r1, r1, #0
  405898:	fa03 f20e 	lsl.w	r2, r3, lr
  40589c:	1880      	adds	r0, r0, r2
  40589e:	fa43 f305 	asr.w	r3, r3, r5
  4058a2:	4159      	adcs	r1, r3
  4058a4:	e00e      	b.n	4058c4 <__adddf3+0xd0>
  4058a6:	f1a5 0520 	sub.w	r5, r5, #32
  4058aa:	f10e 0e20 	add.w	lr, lr, #32
  4058ae:	2a01      	cmp	r2, #1
  4058b0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4058b4:	bf28      	it	cs
  4058b6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4058ba:	fa43 f305 	asr.w	r3, r3, r5
  4058be:	18c0      	adds	r0, r0, r3
  4058c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4058c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4058c8:	d507      	bpl.n	4058da <__adddf3+0xe6>
  4058ca:	f04f 0e00 	mov.w	lr, #0
  4058ce:	f1dc 0c00 	rsbs	ip, ip, #0
  4058d2:	eb7e 0000 	sbcs.w	r0, lr, r0
  4058d6:	eb6e 0101 	sbc.w	r1, lr, r1
  4058da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4058de:	d31b      	bcc.n	405918 <__adddf3+0x124>
  4058e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4058e4:	d30c      	bcc.n	405900 <__adddf3+0x10c>
  4058e6:	0849      	lsrs	r1, r1, #1
  4058e8:	ea5f 0030 	movs.w	r0, r0, rrx
  4058ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4058f0:	f104 0401 	add.w	r4, r4, #1
  4058f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4058f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4058fc:	f080 809a 	bcs.w	405a34 <__adddf3+0x240>
  405900:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405904:	bf08      	it	eq
  405906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40590a:	f150 0000 	adcs.w	r0, r0, #0
  40590e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405912:	ea41 0105 	orr.w	r1, r1, r5
  405916:	bd30      	pop	{r4, r5, pc}
  405918:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40591c:	4140      	adcs	r0, r0
  40591e:	eb41 0101 	adc.w	r1, r1, r1
  405922:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405926:	f1a4 0401 	sub.w	r4, r4, #1
  40592a:	d1e9      	bne.n	405900 <__adddf3+0x10c>
  40592c:	f091 0f00 	teq	r1, #0
  405930:	bf04      	itt	eq
  405932:	4601      	moveq	r1, r0
  405934:	2000      	moveq	r0, #0
  405936:	fab1 f381 	clz	r3, r1
  40593a:	bf08      	it	eq
  40593c:	3320      	addeq	r3, #32
  40593e:	f1a3 030b 	sub.w	r3, r3, #11
  405942:	f1b3 0220 	subs.w	r2, r3, #32
  405946:	da0c      	bge.n	405962 <__adddf3+0x16e>
  405948:	320c      	adds	r2, #12
  40594a:	dd08      	ble.n	40595e <__adddf3+0x16a>
  40594c:	f102 0c14 	add.w	ip, r2, #20
  405950:	f1c2 020c 	rsb	r2, r2, #12
  405954:	fa01 f00c 	lsl.w	r0, r1, ip
  405958:	fa21 f102 	lsr.w	r1, r1, r2
  40595c:	e00c      	b.n	405978 <__adddf3+0x184>
  40595e:	f102 0214 	add.w	r2, r2, #20
  405962:	bfd8      	it	le
  405964:	f1c2 0c20 	rsble	ip, r2, #32
  405968:	fa01 f102 	lsl.w	r1, r1, r2
  40596c:	fa20 fc0c 	lsr.w	ip, r0, ip
  405970:	bfdc      	itt	le
  405972:	ea41 010c 	orrle.w	r1, r1, ip
  405976:	4090      	lslle	r0, r2
  405978:	1ae4      	subs	r4, r4, r3
  40597a:	bfa2      	ittt	ge
  40597c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405980:	4329      	orrge	r1, r5
  405982:	bd30      	popge	{r4, r5, pc}
  405984:	ea6f 0404 	mvn.w	r4, r4
  405988:	3c1f      	subs	r4, #31
  40598a:	da1c      	bge.n	4059c6 <__adddf3+0x1d2>
  40598c:	340c      	adds	r4, #12
  40598e:	dc0e      	bgt.n	4059ae <__adddf3+0x1ba>
  405990:	f104 0414 	add.w	r4, r4, #20
  405994:	f1c4 0220 	rsb	r2, r4, #32
  405998:	fa20 f004 	lsr.w	r0, r0, r4
  40599c:	fa01 f302 	lsl.w	r3, r1, r2
  4059a0:	ea40 0003 	orr.w	r0, r0, r3
  4059a4:	fa21 f304 	lsr.w	r3, r1, r4
  4059a8:	ea45 0103 	orr.w	r1, r5, r3
  4059ac:	bd30      	pop	{r4, r5, pc}
  4059ae:	f1c4 040c 	rsb	r4, r4, #12
  4059b2:	f1c4 0220 	rsb	r2, r4, #32
  4059b6:	fa20 f002 	lsr.w	r0, r0, r2
  4059ba:	fa01 f304 	lsl.w	r3, r1, r4
  4059be:	ea40 0003 	orr.w	r0, r0, r3
  4059c2:	4629      	mov	r1, r5
  4059c4:	bd30      	pop	{r4, r5, pc}
  4059c6:	fa21 f004 	lsr.w	r0, r1, r4
  4059ca:	4629      	mov	r1, r5
  4059cc:	bd30      	pop	{r4, r5, pc}
  4059ce:	f094 0f00 	teq	r4, #0
  4059d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4059d6:	bf06      	itte	eq
  4059d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4059dc:	3401      	addeq	r4, #1
  4059de:	3d01      	subne	r5, #1
  4059e0:	e74e      	b.n	405880 <__adddf3+0x8c>
  4059e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4059e6:	bf18      	it	ne
  4059e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4059ec:	d029      	beq.n	405a42 <__adddf3+0x24e>
  4059ee:	ea94 0f05 	teq	r4, r5
  4059f2:	bf08      	it	eq
  4059f4:	ea90 0f02 	teqeq	r0, r2
  4059f8:	d005      	beq.n	405a06 <__adddf3+0x212>
  4059fa:	ea54 0c00 	orrs.w	ip, r4, r0
  4059fe:	bf04      	itt	eq
  405a00:	4619      	moveq	r1, r3
  405a02:	4610      	moveq	r0, r2
  405a04:	bd30      	pop	{r4, r5, pc}
  405a06:	ea91 0f03 	teq	r1, r3
  405a0a:	bf1e      	ittt	ne
  405a0c:	2100      	movne	r1, #0
  405a0e:	2000      	movne	r0, #0
  405a10:	bd30      	popne	{r4, r5, pc}
  405a12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405a16:	d105      	bne.n	405a24 <__adddf3+0x230>
  405a18:	0040      	lsls	r0, r0, #1
  405a1a:	4149      	adcs	r1, r1
  405a1c:	bf28      	it	cs
  405a1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405a22:	bd30      	pop	{r4, r5, pc}
  405a24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405a28:	bf3c      	itt	cc
  405a2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405a2e:	bd30      	popcc	{r4, r5, pc}
  405a30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405a34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405a38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405a3c:	f04f 0000 	mov.w	r0, #0
  405a40:	bd30      	pop	{r4, r5, pc}
  405a42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405a46:	bf1a      	itte	ne
  405a48:	4619      	movne	r1, r3
  405a4a:	4610      	movne	r0, r2
  405a4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405a50:	bf1c      	itt	ne
  405a52:	460b      	movne	r3, r1
  405a54:	4602      	movne	r2, r0
  405a56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405a5a:	bf06      	itte	eq
  405a5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405a60:	ea91 0f03 	teqeq	r1, r3
  405a64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405a68:	bd30      	pop	{r4, r5, pc}
  405a6a:	bf00      	nop

00405a6c <__aeabi_ui2d>:
  405a6c:	f090 0f00 	teq	r0, #0
  405a70:	bf04      	itt	eq
  405a72:	2100      	moveq	r1, #0
  405a74:	4770      	bxeq	lr
  405a76:	b530      	push	{r4, r5, lr}
  405a78:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405a7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405a80:	f04f 0500 	mov.w	r5, #0
  405a84:	f04f 0100 	mov.w	r1, #0
  405a88:	e750      	b.n	40592c <__adddf3+0x138>
  405a8a:	bf00      	nop

00405a8c <__aeabi_i2d>:
  405a8c:	f090 0f00 	teq	r0, #0
  405a90:	bf04      	itt	eq
  405a92:	2100      	moveq	r1, #0
  405a94:	4770      	bxeq	lr
  405a96:	b530      	push	{r4, r5, lr}
  405a98:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405a9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405aa0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405aa4:	bf48      	it	mi
  405aa6:	4240      	negmi	r0, r0
  405aa8:	f04f 0100 	mov.w	r1, #0
  405aac:	e73e      	b.n	40592c <__adddf3+0x138>
  405aae:	bf00      	nop

00405ab0 <__aeabi_f2d>:
  405ab0:	0042      	lsls	r2, r0, #1
  405ab2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405ab6:	ea4f 0131 	mov.w	r1, r1, rrx
  405aba:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405abe:	bf1f      	itttt	ne
  405ac0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405ac4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405ac8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405acc:	4770      	bxne	lr
  405ace:	f092 0f00 	teq	r2, #0
  405ad2:	bf14      	ite	ne
  405ad4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405ad8:	4770      	bxeq	lr
  405ada:	b530      	push	{r4, r5, lr}
  405adc:	f44f 7460 	mov.w	r4, #896	; 0x380
  405ae0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405ae4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405ae8:	e720      	b.n	40592c <__adddf3+0x138>
  405aea:	bf00      	nop

00405aec <__aeabi_ul2d>:
  405aec:	ea50 0201 	orrs.w	r2, r0, r1
  405af0:	bf08      	it	eq
  405af2:	4770      	bxeq	lr
  405af4:	b530      	push	{r4, r5, lr}
  405af6:	f04f 0500 	mov.w	r5, #0
  405afa:	e00a      	b.n	405b12 <__aeabi_l2d+0x16>

00405afc <__aeabi_l2d>:
  405afc:	ea50 0201 	orrs.w	r2, r0, r1
  405b00:	bf08      	it	eq
  405b02:	4770      	bxeq	lr
  405b04:	b530      	push	{r4, r5, lr}
  405b06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405b0a:	d502      	bpl.n	405b12 <__aeabi_l2d+0x16>
  405b0c:	4240      	negs	r0, r0
  405b0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405b12:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405b16:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405b1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405b1e:	f43f aedc 	beq.w	4058da <__adddf3+0xe6>
  405b22:	f04f 0203 	mov.w	r2, #3
  405b26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405b2a:	bf18      	it	ne
  405b2c:	3203      	addne	r2, #3
  405b2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405b32:	bf18      	it	ne
  405b34:	3203      	addne	r2, #3
  405b36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405b3a:	f1c2 0320 	rsb	r3, r2, #32
  405b3e:	fa00 fc03 	lsl.w	ip, r0, r3
  405b42:	fa20 f002 	lsr.w	r0, r0, r2
  405b46:	fa01 fe03 	lsl.w	lr, r1, r3
  405b4a:	ea40 000e 	orr.w	r0, r0, lr
  405b4e:	fa21 f102 	lsr.w	r1, r1, r2
  405b52:	4414      	add	r4, r2
  405b54:	e6c1      	b.n	4058da <__adddf3+0xe6>
  405b56:	bf00      	nop

00405b58 <__aeabi_dmul>:
  405b58:	b570      	push	{r4, r5, r6, lr}
  405b5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405b5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405b62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405b66:	bf1d      	ittte	ne
  405b68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405b6c:	ea94 0f0c 	teqne	r4, ip
  405b70:	ea95 0f0c 	teqne	r5, ip
  405b74:	f000 f8de 	bleq	405d34 <__aeabi_dmul+0x1dc>
  405b78:	442c      	add	r4, r5
  405b7a:	ea81 0603 	eor.w	r6, r1, r3
  405b7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405b82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405b86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405b8a:	bf18      	it	ne
  405b8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405b90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405b98:	d038      	beq.n	405c0c <__aeabi_dmul+0xb4>
  405b9a:	fba0 ce02 	umull	ip, lr, r0, r2
  405b9e:	f04f 0500 	mov.w	r5, #0
  405ba2:	fbe1 e502 	umlal	lr, r5, r1, r2
  405ba6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405baa:	fbe0 e503 	umlal	lr, r5, r0, r3
  405bae:	f04f 0600 	mov.w	r6, #0
  405bb2:	fbe1 5603 	umlal	r5, r6, r1, r3
  405bb6:	f09c 0f00 	teq	ip, #0
  405bba:	bf18      	it	ne
  405bbc:	f04e 0e01 	orrne.w	lr, lr, #1
  405bc0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405bc4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405bc8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405bcc:	d204      	bcs.n	405bd8 <__aeabi_dmul+0x80>
  405bce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405bd2:	416d      	adcs	r5, r5
  405bd4:	eb46 0606 	adc.w	r6, r6, r6
  405bd8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405bdc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405be0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405be4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405be8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405bec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405bf0:	bf88      	it	hi
  405bf2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405bf6:	d81e      	bhi.n	405c36 <__aeabi_dmul+0xde>
  405bf8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405bfc:	bf08      	it	eq
  405bfe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405c02:	f150 0000 	adcs.w	r0, r0, #0
  405c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405c0a:	bd70      	pop	{r4, r5, r6, pc}
  405c0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405c10:	ea46 0101 	orr.w	r1, r6, r1
  405c14:	ea40 0002 	orr.w	r0, r0, r2
  405c18:	ea81 0103 	eor.w	r1, r1, r3
  405c1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405c20:	bfc2      	ittt	gt
  405c22:	ebd4 050c 	rsbsgt	r5, r4, ip
  405c26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405c2a:	bd70      	popgt	{r4, r5, r6, pc}
  405c2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405c30:	f04f 0e00 	mov.w	lr, #0
  405c34:	3c01      	subs	r4, #1
  405c36:	f300 80ab 	bgt.w	405d90 <__aeabi_dmul+0x238>
  405c3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405c3e:	bfde      	ittt	le
  405c40:	2000      	movle	r0, #0
  405c42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405c46:	bd70      	pople	{r4, r5, r6, pc}
  405c48:	f1c4 0400 	rsb	r4, r4, #0
  405c4c:	3c20      	subs	r4, #32
  405c4e:	da35      	bge.n	405cbc <__aeabi_dmul+0x164>
  405c50:	340c      	adds	r4, #12
  405c52:	dc1b      	bgt.n	405c8c <__aeabi_dmul+0x134>
  405c54:	f104 0414 	add.w	r4, r4, #20
  405c58:	f1c4 0520 	rsb	r5, r4, #32
  405c5c:	fa00 f305 	lsl.w	r3, r0, r5
  405c60:	fa20 f004 	lsr.w	r0, r0, r4
  405c64:	fa01 f205 	lsl.w	r2, r1, r5
  405c68:	ea40 0002 	orr.w	r0, r0, r2
  405c6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405c70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405c74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405c78:	fa21 f604 	lsr.w	r6, r1, r4
  405c7c:	eb42 0106 	adc.w	r1, r2, r6
  405c80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405c84:	bf08      	it	eq
  405c86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405c8a:	bd70      	pop	{r4, r5, r6, pc}
  405c8c:	f1c4 040c 	rsb	r4, r4, #12
  405c90:	f1c4 0520 	rsb	r5, r4, #32
  405c94:	fa00 f304 	lsl.w	r3, r0, r4
  405c98:	fa20 f005 	lsr.w	r0, r0, r5
  405c9c:	fa01 f204 	lsl.w	r2, r1, r4
  405ca0:	ea40 0002 	orr.w	r0, r0, r2
  405ca4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405ca8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405cac:	f141 0100 	adc.w	r1, r1, #0
  405cb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405cb4:	bf08      	it	eq
  405cb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405cba:	bd70      	pop	{r4, r5, r6, pc}
  405cbc:	f1c4 0520 	rsb	r5, r4, #32
  405cc0:	fa00 f205 	lsl.w	r2, r0, r5
  405cc4:	ea4e 0e02 	orr.w	lr, lr, r2
  405cc8:	fa20 f304 	lsr.w	r3, r0, r4
  405ccc:	fa01 f205 	lsl.w	r2, r1, r5
  405cd0:	ea43 0302 	orr.w	r3, r3, r2
  405cd4:	fa21 f004 	lsr.w	r0, r1, r4
  405cd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405cdc:	fa21 f204 	lsr.w	r2, r1, r4
  405ce0:	ea20 0002 	bic.w	r0, r0, r2
  405ce4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405ce8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405cec:	bf08      	it	eq
  405cee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405cf2:	bd70      	pop	{r4, r5, r6, pc}
  405cf4:	f094 0f00 	teq	r4, #0
  405cf8:	d10f      	bne.n	405d1a <__aeabi_dmul+0x1c2>
  405cfa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405cfe:	0040      	lsls	r0, r0, #1
  405d00:	eb41 0101 	adc.w	r1, r1, r1
  405d04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405d08:	bf08      	it	eq
  405d0a:	3c01      	subeq	r4, #1
  405d0c:	d0f7      	beq.n	405cfe <__aeabi_dmul+0x1a6>
  405d0e:	ea41 0106 	orr.w	r1, r1, r6
  405d12:	f095 0f00 	teq	r5, #0
  405d16:	bf18      	it	ne
  405d18:	4770      	bxne	lr
  405d1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405d1e:	0052      	lsls	r2, r2, #1
  405d20:	eb43 0303 	adc.w	r3, r3, r3
  405d24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405d28:	bf08      	it	eq
  405d2a:	3d01      	subeq	r5, #1
  405d2c:	d0f7      	beq.n	405d1e <__aeabi_dmul+0x1c6>
  405d2e:	ea43 0306 	orr.w	r3, r3, r6
  405d32:	4770      	bx	lr
  405d34:	ea94 0f0c 	teq	r4, ip
  405d38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405d3c:	bf18      	it	ne
  405d3e:	ea95 0f0c 	teqne	r5, ip
  405d42:	d00c      	beq.n	405d5e <__aeabi_dmul+0x206>
  405d44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405d48:	bf18      	it	ne
  405d4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405d4e:	d1d1      	bne.n	405cf4 <__aeabi_dmul+0x19c>
  405d50:	ea81 0103 	eor.w	r1, r1, r3
  405d54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405d58:	f04f 0000 	mov.w	r0, #0
  405d5c:	bd70      	pop	{r4, r5, r6, pc}
  405d5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405d62:	bf06      	itte	eq
  405d64:	4610      	moveq	r0, r2
  405d66:	4619      	moveq	r1, r3
  405d68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405d6c:	d019      	beq.n	405da2 <__aeabi_dmul+0x24a>
  405d6e:	ea94 0f0c 	teq	r4, ip
  405d72:	d102      	bne.n	405d7a <__aeabi_dmul+0x222>
  405d74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405d78:	d113      	bne.n	405da2 <__aeabi_dmul+0x24a>
  405d7a:	ea95 0f0c 	teq	r5, ip
  405d7e:	d105      	bne.n	405d8c <__aeabi_dmul+0x234>
  405d80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405d84:	bf1c      	itt	ne
  405d86:	4610      	movne	r0, r2
  405d88:	4619      	movne	r1, r3
  405d8a:	d10a      	bne.n	405da2 <__aeabi_dmul+0x24a>
  405d8c:	ea81 0103 	eor.w	r1, r1, r3
  405d90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405d94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405d98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405d9c:	f04f 0000 	mov.w	r0, #0
  405da0:	bd70      	pop	{r4, r5, r6, pc}
  405da2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405da6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405daa:	bd70      	pop	{r4, r5, r6, pc}

00405dac <__aeabi_ddiv>:
  405dac:	b570      	push	{r4, r5, r6, lr}
  405dae:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405db2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405db6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405dba:	bf1d      	ittte	ne
  405dbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405dc0:	ea94 0f0c 	teqne	r4, ip
  405dc4:	ea95 0f0c 	teqne	r5, ip
  405dc8:	f000 f8a7 	bleq	405f1a <__aeabi_ddiv+0x16e>
  405dcc:	eba4 0405 	sub.w	r4, r4, r5
  405dd0:	ea81 0e03 	eor.w	lr, r1, r3
  405dd4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405dd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405ddc:	f000 8088 	beq.w	405ef0 <__aeabi_ddiv+0x144>
  405de0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405de4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405de8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405dec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405df0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405df4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405df8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405dfc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405e00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405e04:	429d      	cmp	r5, r3
  405e06:	bf08      	it	eq
  405e08:	4296      	cmpeq	r6, r2
  405e0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405e0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405e12:	d202      	bcs.n	405e1a <__aeabi_ddiv+0x6e>
  405e14:	085b      	lsrs	r3, r3, #1
  405e16:	ea4f 0232 	mov.w	r2, r2, rrx
  405e1a:	1ab6      	subs	r6, r6, r2
  405e1c:	eb65 0503 	sbc.w	r5, r5, r3
  405e20:	085b      	lsrs	r3, r3, #1
  405e22:	ea4f 0232 	mov.w	r2, r2, rrx
  405e26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  405e2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405e2e:	ebb6 0e02 	subs.w	lr, r6, r2
  405e32:	eb75 0e03 	sbcs.w	lr, r5, r3
  405e36:	bf22      	ittt	cs
  405e38:	1ab6      	subcs	r6, r6, r2
  405e3a:	4675      	movcs	r5, lr
  405e3c:	ea40 000c 	orrcs.w	r0, r0, ip
  405e40:	085b      	lsrs	r3, r3, #1
  405e42:	ea4f 0232 	mov.w	r2, r2, rrx
  405e46:	ebb6 0e02 	subs.w	lr, r6, r2
  405e4a:	eb75 0e03 	sbcs.w	lr, r5, r3
  405e4e:	bf22      	ittt	cs
  405e50:	1ab6      	subcs	r6, r6, r2
  405e52:	4675      	movcs	r5, lr
  405e54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405e58:	085b      	lsrs	r3, r3, #1
  405e5a:	ea4f 0232 	mov.w	r2, r2, rrx
  405e5e:	ebb6 0e02 	subs.w	lr, r6, r2
  405e62:	eb75 0e03 	sbcs.w	lr, r5, r3
  405e66:	bf22      	ittt	cs
  405e68:	1ab6      	subcs	r6, r6, r2
  405e6a:	4675      	movcs	r5, lr
  405e6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405e70:	085b      	lsrs	r3, r3, #1
  405e72:	ea4f 0232 	mov.w	r2, r2, rrx
  405e76:	ebb6 0e02 	subs.w	lr, r6, r2
  405e7a:	eb75 0e03 	sbcs.w	lr, r5, r3
  405e7e:	bf22      	ittt	cs
  405e80:	1ab6      	subcs	r6, r6, r2
  405e82:	4675      	movcs	r5, lr
  405e84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405e88:	ea55 0e06 	orrs.w	lr, r5, r6
  405e8c:	d018      	beq.n	405ec0 <__aeabi_ddiv+0x114>
  405e8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405e92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405e96:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405e9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405e9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405ea2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405ea6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405eaa:	d1c0      	bne.n	405e2e <__aeabi_ddiv+0x82>
  405eac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405eb0:	d10b      	bne.n	405eca <__aeabi_ddiv+0x11e>
  405eb2:	ea41 0100 	orr.w	r1, r1, r0
  405eb6:	f04f 0000 	mov.w	r0, #0
  405eba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405ebe:	e7b6      	b.n	405e2e <__aeabi_ddiv+0x82>
  405ec0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405ec4:	bf04      	itt	eq
  405ec6:	4301      	orreq	r1, r0
  405ec8:	2000      	moveq	r0, #0
  405eca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405ece:	bf88      	it	hi
  405ed0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405ed4:	f63f aeaf 	bhi.w	405c36 <__aeabi_dmul+0xde>
  405ed8:	ebb5 0c03 	subs.w	ip, r5, r3
  405edc:	bf04      	itt	eq
  405ede:	ebb6 0c02 	subseq.w	ip, r6, r2
  405ee2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405ee6:	f150 0000 	adcs.w	r0, r0, #0
  405eea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405eee:	bd70      	pop	{r4, r5, r6, pc}
  405ef0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405ef4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405ef8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405efc:	bfc2      	ittt	gt
  405efe:	ebd4 050c 	rsbsgt	r5, r4, ip
  405f02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405f06:	bd70      	popgt	{r4, r5, r6, pc}
  405f08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405f0c:	f04f 0e00 	mov.w	lr, #0
  405f10:	3c01      	subs	r4, #1
  405f12:	e690      	b.n	405c36 <__aeabi_dmul+0xde>
  405f14:	ea45 0e06 	orr.w	lr, r5, r6
  405f18:	e68d      	b.n	405c36 <__aeabi_dmul+0xde>
  405f1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405f1e:	ea94 0f0c 	teq	r4, ip
  405f22:	bf08      	it	eq
  405f24:	ea95 0f0c 	teqeq	r5, ip
  405f28:	f43f af3b 	beq.w	405da2 <__aeabi_dmul+0x24a>
  405f2c:	ea94 0f0c 	teq	r4, ip
  405f30:	d10a      	bne.n	405f48 <__aeabi_ddiv+0x19c>
  405f32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405f36:	f47f af34 	bne.w	405da2 <__aeabi_dmul+0x24a>
  405f3a:	ea95 0f0c 	teq	r5, ip
  405f3e:	f47f af25 	bne.w	405d8c <__aeabi_dmul+0x234>
  405f42:	4610      	mov	r0, r2
  405f44:	4619      	mov	r1, r3
  405f46:	e72c      	b.n	405da2 <__aeabi_dmul+0x24a>
  405f48:	ea95 0f0c 	teq	r5, ip
  405f4c:	d106      	bne.n	405f5c <__aeabi_ddiv+0x1b0>
  405f4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405f52:	f43f aefd 	beq.w	405d50 <__aeabi_dmul+0x1f8>
  405f56:	4610      	mov	r0, r2
  405f58:	4619      	mov	r1, r3
  405f5a:	e722      	b.n	405da2 <__aeabi_dmul+0x24a>
  405f5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405f60:	bf18      	it	ne
  405f62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405f66:	f47f aec5 	bne.w	405cf4 <__aeabi_dmul+0x19c>
  405f6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405f6e:	f47f af0d 	bne.w	405d8c <__aeabi_dmul+0x234>
  405f72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  405f76:	f47f aeeb 	bne.w	405d50 <__aeabi_dmul+0x1f8>
  405f7a:	e712      	b.n	405da2 <__aeabi_dmul+0x24a>

00405f7c <__aeabi_d2uiz>:
  405f7c:	004a      	lsls	r2, r1, #1
  405f7e:	d211      	bcs.n	405fa4 <__aeabi_d2uiz+0x28>
  405f80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405f84:	d211      	bcs.n	405faa <__aeabi_d2uiz+0x2e>
  405f86:	d50d      	bpl.n	405fa4 <__aeabi_d2uiz+0x28>
  405f88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  405f8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  405f90:	d40e      	bmi.n	405fb0 <__aeabi_d2uiz+0x34>
  405f92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405f96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405f9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  405f9e:	fa23 f002 	lsr.w	r0, r3, r2
  405fa2:	4770      	bx	lr
  405fa4:	f04f 0000 	mov.w	r0, #0
  405fa8:	4770      	bx	lr
  405faa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405fae:	d102      	bne.n	405fb6 <__aeabi_d2uiz+0x3a>
  405fb0:	f04f 30ff 	mov.w	r0, #4294967295
  405fb4:	4770      	bx	lr
  405fb6:	f04f 0000 	mov.w	r0, #0
  405fba:	4770      	bx	lr

00405fbc <__aeabi_uldivmod>:
  405fbc:	b953      	cbnz	r3, 405fd4 <__aeabi_uldivmod+0x18>
  405fbe:	b94a      	cbnz	r2, 405fd4 <__aeabi_uldivmod+0x18>
  405fc0:	2900      	cmp	r1, #0
  405fc2:	bf08      	it	eq
  405fc4:	2800      	cmpeq	r0, #0
  405fc6:	bf1c      	itt	ne
  405fc8:	f04f 31ff 	movne.w	r1, #4294967295
  405fcc:	f04f 30ff 	movne.w	r0, #4294967295
  405fd0:	f000 b97a 	b.w	4062c8 <__aeabi_idiv0>
  405fd4:	f1ad 0c08 	sub.w	ip, sp, #8
  405fd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  405fdc:	f000 f806 	bl	405fec <__udivmoddi4>
  405fe0:	f8dd e004 	ldr.w	lr, [sp, #4]
  405fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405fe8:	b004      	add	sp, #16
  405fea:	4770      	bx	lr

00405fec <__udivmoddi4>:
  405fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405ff0:	468c      	mov	ip, r1
  405ff2:	460d      	mov	r5, r1
  405ff4:	4604      	mov	r4, r0
  405ff6:	9e08      	ldr	r6, [sp, #32]
  405ff8:	2b00      	cmp	r3, #0
  405ffa:	d151      	bne.n	4060a0 <__udivmoddi4+0xb4>
  405ffc:	428a      	cmp	r2, r1
  405ffe:	4617      	mov	r7, r2
  406000:	d96d      	bls.n	4060de <__udivmoddi4+0xf2>
  406002:	fab2 fe82 	clz	lr, r2
  406006:	f1be 0f00 	cmp.w	lr, #0
  40600a:	d00b      	beq.n	406024 <__udivmoddi4+0x38>
  40600c:	f1ce 0c20 	rsb	ip, lr, #32
  406010:	fa01 f50e 	lsl.w	r5, r1, lr
  406014:	fa20 fc0c 	lsr.w	ip, r0, ip
  406018:	fa02 f70e 	lsl.w	r7, r2, lr
  40601c:	ea4c 0c05 	orr.w	ip, ip, r5
  406020:	fa00 f40e 	lsl.w	r4, r0, lr
  406024:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406028:	0c25      	lsrs	r5, r4, #16
  40602a:	fbbc f8fa 	udiv	r8, ip, sl
  40602e:	fa1f f987 	uxth.w	r9, r7
  406032:	fb0a cc18 	mls	ip, sl, r8, ip
  406036:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40603a:	fb08 f309 	mul.w	r3, r8, r9
  40603e:	42ab      	cmp	r3, r5
  406040:	d90a      	bls.n	406058 <__udivmoddi4+0x6c>
  406042:	19ed      	adds	r5, r5, r7
  406044:	f108 32ff 	add.w	r2, r8, #4294967295
  406048:	f080 8123 	bcs.w	406292 <__udivmoddi4+0x2a6>
  40604c:	42ab      	cmp	r3, r5
  40604e:	f240 8120 	bls.w	406292 <__udivmoddi4+0x2a6>
  406052:	f1a8 0802 	sub.w	r8, r8, #2
  406056:	443d      	add	r5, r7
  406058:	1aed      	subs	r5, r5, r3
  40605a:	b2a4      	uxth	r4, r4
  40605c:	fbb5 f0fa 	udiv	r0, r5, sl
  406060:	fb0a 5510 	mls	r5, sl, r0, r5
  406064:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406068:	fb00 f909 	mul.w	r9, r0, r9
  40606c:	45a1      	cmp	r9, r4
  40606e:	d909      	bls.n	406084 <__udivmoddi4+0x98>
  406070:	19e4      	adds	r4, r4, r7
  406072:	f100 33ff 	add.w	r3, r0, #4294967295
  406076:	f080 810a 	bcs.w	40628e <__udivmoddi4+0x2a2>
  40607a:	45a1      	cmp	r9, r4
  40607c:	f240 8107 	bls.w	40628e <__udivmoddi4+0x2a2>
  406080:	3802      	subs	r0, #2
  406082:	443c      	add	r4, r7
  406084:	eba4 0409 	sub.w	r4, r4, r9
  406088:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40608c:	2100      	movs	r1, #0
  40608e:	2e00      	cmp	r6, #0
  406090:	d061      	beq.n	406156 <__udivmoddi4+0x16a>
  406092:	fa24 f40e 	lsr.w	r4, r4, lr
  406096:	2300      	movs	r3, #0
  406098:	6034      	str	r4, [r6, #0]
  40609a:	6073      	str	r3, [r6, #4]
  40609c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4060a0:	428b      	cmp	r3, r1
  4060a2:	d907      	bls.n	4060b4 <__udivmoddi4+0xc8>
  4060a4:	2e00      	cmp	r6, #0
  4060a6:	d054      	beq.n	406152 <__udivmoddi4+0x166>
  4060a8:	2100      	movs	r1, #0
  4060aa:	e886 0021 	stmia.w	r6, {r0, r5}
  4060ae:	4608      	mov	r0, r1
  4060b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4060b4:	fab3 f183 	clz	r1, r3
  4060b8:	2900      	cmp	r1, #0
  4060ba:	f040 808e 	bne.w	4061da <__udivmoddi4+0x1ee>
  4060be:	42ab      	cmp	r3, r5
  4060c0:	d302      	bcc.n	4060c8 <__udivmoddi4+0xdc>
  4060c2:	4282      	cmp	r2, r0
  4060c4:	f200 80fa 	bhi.w	4062bc <__udivmoddi4+0x2d0>
  4060c8:	1a84      	subs	r4, r0, r2
  4060ca:	eb65 0503 	sbc.w	r5, r5, r3
  4060ce:	2001      	movs	r0, #1
  4060d0:	46ac      	mov	ip, r5
  4060d2:	2e00      	cmp	r6, #0
  4060d4:	d03f      	beq.n	406156 <__udivmoddi4+0x16a>
  4060d6:	e886 1010 	stmia.w	r6, {r4, ip}
  4060da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4060de:	b912      	cbnz	r2, 4060e6 <__udivmoddi4+0xfa>
  4060e0:	2701      	movs	r7, #1
  4060e2:	fbb7 f7f2 	udiv	r7, r7, r2
  4060e6:	fab7 fe87 	clz	lr, r7
  4060ea:	f1be 0f00 	cmp.w	lr, #0
  4060ee:	d134      	bne.n	40615a <__udivmoddi4+0x16e>
  4060f0:	1beb      	subs	r3, r5, r7
  4060f2:	0c3a      	lsrs	r2, r7, #16
  4060f4:	fa1f fc87 	uxth.w	ip, r7
  4060f8:	2101      	movs	r1, #1
  4060fa:	fbb3 f8f2 	udiv	r8, r3, r2
  4060fe:	0c25      	lsrs	r5, r4, #16
  406100:	fb02 3318 	mls	r3, r2, r8, r3
  406104:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406108:	fb0c f308 	mul.w	r3, ip, r8
  40610c:	42ab      	cmp	r3, r5
  40610e:	d907      	bls.n	406120 <__udivmoddi4+0x134>
  406110:	19ed      	adds	r5, r5, r7
  406112:	f108 30ff 	add.w	r0, r8, #4294967295
  406116:	d202      	bcs.n	40611e <__udivmoddi4+0x132>
  406118:	42ab      	cmp	r3, r5
  40611a:	f200 80d1 	bhi.w	4062c0 <__udivmoddi4+0x2d4>
  40611e:	4680      	mov	r8, r0
  406120:	1aed      	subs	r5, r5, r3
  406122:	b2a3      	uxth	r3, r4
  406124:	fbb5 f0f2 	udiv	r0, r5, r2
  406128:	fb02 5510 	mls	r5, r2, r0, r5
  40612c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406130:	fb0c fc00 	mul.w	ip, ip, r0
  406134:	45a4      	cmp	ip, r4
  406136:	d907      	bls.n	406148 <__udivmoddi4+0x15c>
  406138:	19e4      	adds	r4, r4, r7
  40613a:	f100 33ff 	add.w	r3, r0, #4294967295
  40613e:	d202      	bcs.n	406146 <__udivmoddi4+0x15a>
  406140:	45a4      	cmp	ip, r4
  406142:	f200 80b8 	bhi.w	4062b6 <__udivmoddi4+0x2ca>
  406146:	4618      	mov	r0, r3
  406148:	eba4 040c 	sub.w	r4, r4, ip
  40614c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406150:	e79d      	b.n	40608e <__udivmoddi4+0xa2>
  406152:	4631      	mov	r1, r6
  406154:	4630      	mov	r0, r6
  406156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40615a:	f1ce 0420 	rsb	r4, lr, #32
  40615e:	fa05 f30e 	lsl.w	r3, r5, lr
  406162:	fa07 f70e 	lsl.w	r7, r7, lr
  406166:	fa20 f804 	lsr.w	r8, r0, r4
  40616a:	0c3a      	lsrs	r2, r7, #16
  40616c:	fa25 f404 	lsr.w	r4, r5, r4
  406170:	ea48 0803 	orr.w	r8, r8, r3
  406174:	fbb4 f1f2 	udiv	r1, r4, r2
  406178:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40617c:	fb02 4411 	mls	r4, r2, r1, r4
  406180:	fa1f fc87 	uxth.w	ip, r7
  406184:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406188:	fb01 f30c 	mul.w	r3, r1, ip
  40618c:	42ab      	cmp	r3, r5
  40618e:	fa00 f40e 	lsl.w	r4, r0, lr
  406192:	d909      	bls.n	4061a8 <__udivmoddi4+0x1bc>
  406194:	19ed      	adds	r5, r5, r7
  406196:	f101 30ff 	add.w	r0, r1, #4294967295
  40619a:	f080 808a 	bcs.w	4062b2 <__udivmoddi4+0x2c6>
  40619e:	42ab      	cmp	r3, r5
  4061a0:	f240 8087 	bls.w	4062b2 <__udivmoddi4+0x2c6>
  4061a4:	3902      	subs	r1, #2
  4061a6:	443d      	add	r5, r7
  4061a8:	1aeb      	subs	r3, r5, r3
  4061aa:	fa1f f588 	uxth.w	r5, r8
  4061ae:	fbb3 f0f2 	udiv	r0, r3, r2
  4061b2:	fb02 3310 	mls	r3, r2, r0, r3
  4061b6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4061ba:	fb00 f30c 	mul.w	r3, r0, ip
  4061be:	42ab      	cmp	r3, r5
  4061c0:	d907      	bls.n	4061d2 <__udivmoddi4+0x1e6>
  4061c2:	19ed      	adds	r5, r5, r7
  4061c4:	f100 38ff 	add.w	r8, r0, #4294967295
  4061c8:	d26f      	bcs.n	4062aa <__udivmoddi4+0x2be>
  4061ca:	42ab      	cmp	r3, r5
  4061cc:	d96d      	bls.n	4062aa <__udivmoddi4+0x2be>
  4061ce:	3802      	subs	r0, #2
  4061d0:	443d      	add	r5, r7
  4061d2:	1aeb      	subs	r3, r5, r3
  4061d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4061d8:	e78f      	b.n	4060fa <__udivmoddi4+0x10e>
  4061da:	f1c1 0720 	rsb	r7, r1, #32
  4061de:	fa22 f807 	lsr.w	r8, r2, r7
  4061e2:	408b      	lsls	r3, r1
  4061e4:	fa05 f401 	lsl.w	r4, r5, r1
  4061e8:	ea48 0303 	orr.w	r3, r8, r3
  4061ec:	fa20 fe07 	lsr.w	lr, r0, r7
  4061f0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4061f4:	40fd      	lsrs	r5, r7
  4061f6:	ea4e 0e04 	orr.w	lr, lr, r4
  4061fa:	fbb5 f9fc 	udiv	r9, r5, ip
  4061fe:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406202:	fb0c 5519 	mls	r5, ip, r9, r5
  406206:	fa1f f883 	uxth.w	r8, r3
  40620a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40620e:	fb09 f408 	mul.w	r4, r9, r8
  406212:	42ac      	cmp	r4, r5
  406214:	fa02 f201 	lsl.w	r2, r2, r1
  406218:	fa00 fa01 	lsl.w	sl, r0, r1
  40621c:	d908      	bls.n	406230 <__udivmoddi4+0x244>
  40621e:	18ed      	adds	r5, r5, r3
  406220:	f109 30ff 	add.w	r0, r9, #4294967295
  406224:	d243      	bcs.n	4062ae <__udivmoddi4+0x2c2>
  406226:	42ac      	cmp	r4, r5
  406228:	d941      	bls.n	4062ae <__udivmoddi4+0x2c2>
  40622a:	f1a9 0902 	sub.w	r9, r9, #2
  40622e:	441d      	add	r5, r3
  406230:	1b2d      	subs	r5, r5, r4
  406232:	fa1f fe8e 	uxth.w	lr, lr
  406236:	fbb5 f0fc 	udiv	r0, r5, ip
  40623a:	fb0c 5510 	mls	r5, ip, r0, r5
  40623e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406242:	fb00 f808 	mul.w	r8, r0, r8
  406246:	45a0      	cmp	r8, r4
  406248:	d907      	bls.n	40625a <__udivmoddi4+0x26e>
  40624a:	18e4      	adds	r4, r4, r3
  40624c:	f100 35ff 	add.w	r5, r0, #4294967295
  406250:	d229      	bcs.n	4062a6 <__udivmoddi4+0x2ba>
  406252:	45a0      	cmp	r8, r4
  406254:	d927      	bls.n	4062a6 <__udivmoddi4+0x2ba>
  406256:	3802      	subs	r0, #2
  406258:	441c      	add	r4, r3
  40625a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40625e:	eba4 0408 	sub.w	r4, r4, r8
  406262:	fba0 8902 	umull	r8, r9, r0, r2
  406266:	454c      	cmp	r4, r9
  406268:	46c6      	mov	lr, r8
  40626a:	464d      	mov	r5, r9
  40626c:	d315      	bcc.n	40629a <__udivmoddi4+0x2ae>
  40626e:	d012      	beq.n	406296 <__udivmoddi4+0x2aa>
  406270:	b156      	cbz	r6, 406288 <__udivmoddi4+0x29c>
  406272:	ebba 030e 	subs.w	r3, sl, lr
  406276:	eb64 0405 	sbc.w	r4, r4, r5
  40627a:	fa04 f707 	lsl.w	r7, r4, r7
  40627e:	40cb      	lsrs	r3, r1
  406280:	431f      	orrs	r7, r3
  406282:	40cc      	lsrs	r4, r1
  406284:	6037      	str	r7, [r6, #0]
  406286:	6074      	str	r4, [r6, #4]
  406288:	2100      	movs	r1, #0
  40628a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40628e:	4618      	mov	r0, r3
  406290:	e6f8      	b.n	406084 <__udivmoddi4+0x98>
  406292:	4690      	mov	r8, r2
  406294:	e6e0      	b.n	406058 <__udivmoddi4+0x6c>
  406296:	45c2      	cmp	sl, r8
  406298:	d2ea      	bcs.n	406270 <__udivmoddi4+0x284>
  40629a:	ebb8 0e02 	subs.w	lr, r8, r2
  40629e:	eb69 0503 	sbc.w	r5, r9, r3
  4062a2:	3801      	subs	r0, #1
  4062a4:	e7e4      	b.n	406270 <__udivmoddi4+0x284>
  4062a6:	4628      	mov	r0, r5
  4062a8:	e7d7      	b.n	40625a <__udivmoddi4+0x26e>
  4062aa:	4640      	mov	r0, r8
  4062ac:	e791      	b.n	4061d2 <__udivmoddi4+0x1e6>
  4062ae:	4681      	mov	r9, r0
  4062b0:	e7be      	b.n	406230 <__udivmoddi4+0x244>
  4062b2:	4601      	mov	r1, r0
  4062b4:	e778      	b.n	4061a8 <__udivmoddi4+0x1bc>
  4062b6:	3802      	subs	r0, #2
  4062b8:	443c      	add	r4, r7
  4062ba:	e745      	b.n	406148 <__udivmoddi4+0x15c>
  4062bc:	4608      	mov	r0, r1
  4062be:	e708      	b.n	4060d2 <__udivmoddi4+0xe6>
  4062c0:	f1a8 0802 	sub.w	r8, r8, #2
  4062c4:	443d      	add	r5, r7
  4062c6:	e72b      	b.n	406120 <__udivmoddi4+0x134>

004062c8 <__aeabi_idiv0>:
  4062c8:	4770      	bx	lr
  4062ca:	bf00      	nop

004062cc <__libc_init_array>:
  4062cc:	b570      	push	{r4, r5, r6, lr}
  4062ce:	4e0f      	ldr	r6, [pc, #60]	; (40630c <__libc_init_array+0x40>)
  4062d0:	4d0f      	ldr	r5, [pc, #60]	; (406310 <__libc_init_array+0x44>)
  4062d2:	1b76      	subs	r6, r6, r5
  4062d4:	10b6      	asrs	r6, r6, #2
  4062d6:	bf18      	it	ne
  4062d8:	2400      	movne	r4, #0
  4062da:	d005      	beq.n	4062e8 <__libc_init_array+0x1c>
  4062dc:	3401      	adds	r4, #1
  4062de:	f855 3b04 	ldr.w	r3, [r5], #4
  4062e2:	4798      	blx	r3
  4062e4:	42a6      	cmp	r6, r4
  4062e6:	d1f9      	bne.n	4062dc <__libc_init_array+0x10>
  4062e8:	4e0a      	ldr	r6, [pc, #40]	; (406314 <__libc_init_array+0x48>)
  4062ea:	4d0b      	ldr	r5, [pc, #44]	; (406318 <__libc_init_array+0x4c>)
  4062ec:	1b76      	subs	r6, r6, r5
  4062ee:	f004 ffa3 	bl	40b238 <_init>
  4062f2:	10b6      	asrs	r6, r6, #2
  4062f4:	bf18      	it	ne
  4062f6:	2400      	movne	r4, #0
  4062f8:	d006      	beq.n	406308 <__libc_init_array+0x3c>
  4062fa:	3401      	adds	r4, #1
  4062fc:	f855 3b04 	ldr.w	r3, [r5], #4
  406300:	4798      	blx	r3
  406302:	42a6      	cmp	r6, r4
  406304:	d1f9      	bne.n	4062fa <__libc_init_array+0x2e>
  406306:	bd70      	pop	{r4, r5, r6, pc}
  406308:	bd70      	pop	{r4, r5, r6, pc}
  40630a:	bf00      	nop
  40630c:	0040b244 	.word	0x0040b244
  406310:	0040b244 	.word	0x0040b244
  406314:	0040b24c 	.word	0x0040b24c
  406318:	0040b244 	.word	0x0040b244

0040631c <memset>:
  40631c:	b470      	push	{r4, r5, r6}
  40631e:	0786      	lsls	r6, r0, #30
  406320:	d046      	beq.n	4063b0 <memset+0x94>
  406322:	1e54      	subs	r4, r2, #1
  406324:	2a00      	cmp	r2, #0
  406326:	d041      	beq.n	4063ac <memset+0x90>
  406328:	b2ca      	uxtb	r2, r1
  40632a:	4603      	mov	r3, r0
  40632c:	e002      	b.n	406334 <memset+0x18>
  40632e:	f114 34ff 	adds.w	r4, r4, #4294967295
  406332:	d33b      	bcc.n	4063ac <memset+0x90>
  406334:	f803 2b01 	strb.w	r2, [r3], #1
  406338:	079d      	lsls	r5, r3, #30
  40633a:	d1f8      	bne.n	40632e <memset+0x12>
  40633c:	2c03      	cmp	r4, #3
  40633e:	d92e      	bls.n	40639e <memset+0x82>
  406340:	b2cd      	uxtb	r5, r1
  406342:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406346:	2c0f      	cmp	r4, #15
  406348:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40634c:	d919      	bls.n	406382 <memset+0x66>
  40634e:	f103 0210 	add.w	r2, r3, #16
  406352:	4626      	mov	r6, r4
  406354:	3e10      	subs	r6, #16
  406356:	2e0f      	cmp	r6, #15
  406358:	f842 5c10 	str.w	r5, [r2, #-16]
  40635c:	f842 5c0c 	str.w	r5, [r2, #-12]
  406360:	f842 5c08 	str.w	r5, [r2, #-8]
  406364:	f842 5c04 	str.w	r5, [r2, #-4]
  406368:	f102 0210 	add.w	r2, r2, #16
  40636c:	d8f2      	bhi.n	406354 <memset+0x38>
  40636e:	f1a4 0210 	sub.w	r2, r4, #16
  406372:	f022 020f 	bic.w	r2, r2, #15
  406376:	f004 040f 	and.w	r4, r4, #15
  40637a:	3210      	adds	r2, #16
  40637c:	2c03      	cmp	r4, #3
  40637e:	4413      	add	r3, r2
  406380:	d90d      	bls.n	40639e <memset+0x82>
  406382:	461e      	mov	r6, r3
  406384:	4622      	mov	r2, r4
  406386:	3a04      	subs	r2, #4
  406388:	2a03      	cmp	r2, #3
  40638a:	f846 5b04 	str.w	r5, [r6], #4
  40638e:	d8fa      	bhi.n	406386 <memset+0x6a>
  406390:	1f22      	subs	r2, r4, #4
  406392:	f022 0203 	bic.w	r2, r2, #3
  406396:	3204      	adds	r2, #4
  406398:	4413      	add	r3, r2
  40639a:	f004 0403 	and.w	r4, r4, #3
  40639e:	b12c      	cbz	r4, 4063ac <memset+0x90>
  4063a0:	b2c9      	uxtb	r1, r1
  4063a2:	441c      	add	r4, r3
  4063a4:	f803 1b01 	strb.w	r1, [r3], #1
  4063a8:	429c      	cmp	r4, r3
  4063aa:	d1fb      	bne.n	4063a4 <memset+0x88>
  4063ac:	bc70      	pop	{r4, r5, r6}
  4063ae:	4770      	bx	lr
  4063b0:	4614      	mov	r4, r2
  4063b2:	4603      	mov	r3, r0
  4063b4:	e7c2      	b.n	40633c <memset+0x20>
  4063b6:	bf00      	nop

004063b8 <sprintf>:
  4063b8:	b40e      	push	{r1, r2, r3}
  4063ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  4063bc:	b09c      	sub	sp, #112	; 0x70
  4063be:	ab21      	add	r3, sp, #132	; 0x84
  4063c0:	490f      	ldr	r1, [pc, #60]	; (406400 <sprintf+0x48>)
  4063c2:	f853 2b04 	ldr.w	r2, [r3], #4
  4063c6:	9301      	str	r3, [sp, #4]
  4063c8:	4605      	mov	r5, r0
  4063ca:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4063ce:	6808      	ldr	r0, [r1, #0]
  4063d0:	9502      	str	r5, [sp, #8]
  4063d2:	f44f 7702 	mov.w	r7, #520	; 0x208
  4063d6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4063da:	a902      	add	r1, sp, #8
  4063dc:	9506      	str	r5, [sp, #24]
  4063de:	f8ad 7014 	strh.w	r7, [sp, #20]
  4063e2:	9404      	str	r4, [sp, #16]
  4063e4:	9407      	str	r4, [sp, #28]
  4063e6:	f8ad 6016 	strh.w	r6, [sp, #22]
  4063ea:	f000 fa57 	bl	40689c <_svfprintf_r>
  4063ee:	9b02      	ldr	r3, [sp, #8]
  4063f0:	2200      	movs	r2, #0
  4063f2:	701a      	strb	r2, [r3, #0]
  4063f4:	b01c      	add	sp, #112	; 0x70
  4063f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4063fa:	b003      	add	sp, #12
  4063fc:	4770      	bx	lr
  4063fe:	bf00      	nop
  406400:	20000484 	.word	0x20000484
	...
  406420:	eba2 0003 	sub.w	r0, r2, r3
  406424:	4770      	bx	lr
  406426:	bf00      	nop

00406428 <strcmp>:
  406428:	7802      	ldrb	r2, [r0, #0]
  40642a:	780b      	ldrb	r3, [r1, #0]
  40642c:	2a01      	cmp	r2, #1
  40642e:	bf28      	it	cs
  406430:	429a      	cmpcs	r2, r3
  406432:	d1f5      	bne.n	406420 <sprintf+0x68>
  406434:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  406438:	ea40 0401 	orr.w	r4, r0, r1
  40643c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  406440:	f06f 0c00 	mvn.w	ip, #0
  406444:	ea4f 7244 	mov.w	r2, r4, lsl #29
  406448:	b312      	cbz	r2, 406490 <strcmp+0x68>
  40644a:	ea80 0401 	eor.w	r4, r0, r1
  40644e:	f014 0f07 	tst.w	r4, #7
  406452:	d16a      	bne.n	40652a <strcmp+0x102>
  406454:	f000 0407 	and.w	r4, r0, #7
  406458:	f020 0007 	bic.w	r0, r0, #7
  40645c:	f004 0503 	and.w	r5, r4, #3
  406460:	f021 0107 	bic.w	r1, r1, #7
  406464:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406468:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40646c:	f014 0f04 	tst.w	r4, #4
  406470:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  406474:	fa0c f405 	lsl.w	r4, ip, r5
  406478:	ea62 0204 	orn	r2, r2, r4
  40647c:	ea66 0604 	orn	r6, r6, r4
  406480:	d00a      	beq.n	406498 <strcmp+0x70>
  406482:	ea63 0304 	orn	r3, r3, r4
  406486:	4662      	mov	r2, ip
  406488:	ea67 0704 	orn	r7, r7, r4
  40648c:	4666      	mov	r6, ip
  40648e:	e003      	b.n	406498 <strcmp+0x70>
  406490:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  406494:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  406498:	fa82 f54c 	uadd8	r5, r2, ip
  40649c:	ea82 0406 	eor.w	r4, r2, r6
  4064a0:	faa4 f48c 	sel	r4, r4, ip
  4064a4:	bb6c      	cbnz	r4, 406502 <strcmp+0xda>
  4064a6:	fa83 f54c 	uadd8	r5, r3, ip
  4064aa:	ea83 0507 	eor.w	r5, r3, r7
  4064ae:	faa5 f58c 	sel	r5, r5, ip
  4064b2:	b995      	cbnz	r5, 4064da <strcmp+0xb2>
  4064b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  4064b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  4064bc:	fa82 f54c 	uadd8	r5, r2, ip
  4064c0:	ea82 0406 	eor.w	r4, r2, r6
  4064c4:	faa4 f48c 	sel	r4, r4, ip
  4064c8:	fa83 f54c 	uadd8	r5, r3, ip
  4064cc:	ea83 0507 	eor.w	r5, r3, r7
  4064d0:	faa5 f58c 	sel	r5, r5, ip
  4064d4:	4325      	orrs	r5, r4
  4064d6:	d0db      	beq.n	406490 <strcmp+0x68>
  4064d8:	b99c      	cbnz	r4, 406502 <strcmp+0xda>
  4064da:	ba2d      	rev	r5, r5
  4064dc:	fab5 f485 	clz	r4, r5
  4064e0:	f024 0407 	bic.w	r4, r4, #7
  4064e4:	fa27 f104 	lsr.w	r1, r7, r4
  4064e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4064ec:	fa23 f304 	lsr.w	r3, r3, r4
  4064f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4064f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4064f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4064fc:	eba0 0001 	sub.w	r0, r0, r1
  406500:	4770      	bx	lr
  406502:	ba24      	rev	r4, r4
  406504:	fab4 f484 	clz	r4, r4
  406508:	f024 0407 	bic.w	r4, r4, #7
  40650c:	fa26 f104 	lsr.w	r1, r6, r4
  406510:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  406514:	fa22 f204 	lsr.w	r2, r2, r4
  406518:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40651c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406520:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  406524:	eba0 0001 	sub.w	r0, r0, r1
  406528:	4770      	bx	lr
  40652a:	f014 0f03 	tst.w	r4, #3
  40652e:	d13c      	bne.n	4065aa <strcmp+0x182>
  406530:	f010 0403 	ands.w	r4, r0, #3
  406534:	d128      	bne.n	406588 <strcmp+0x160>
  406536:	f850 2b08 	ldr.w	r2, [r0], #8
  40653a:	f851 3b08 	ldr.w	r3, [r1], #8
  40653e:	fa82 f54c 	uadd8	r5, r2, ip
  406542:	ea82 0503 	eor.w	r5, r2, r3
  406546:	faa5 f58c 	sel	r5, r5, ip
  40654a:	b95d      	cbnz	r5, 406564 <strcmp+0x13c>
  40654c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406550:	f851 3c04 	ldr.w	r3, [r1, #-4]
  406554:	fa82 f54c 	uadd8	r5, r2, ip
  406558:	ea82 0503 	eor.w	r5, r2, r3
  40655c:	faa5 f58c 	sel	r5, r5, ip
  406560:	2d00      	cmp	r5, #0
  406562:	d0e8      	beq.n	406536 <strcmp+0x10e>
  406564:	ba2d      	rev	r5, r5
  406566:	fab5 f485 	clz	r4, r5
  40656a:	f024 0407 	bic.w	r4, r4, #7
  40656e:	fa23 f104 	lsr.w	r1, r3, r4
  406572:	fa22 f204 	lsr.w	r2, r2, r4
  406576:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40657a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40657e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  406582:	eba0 0001 	sub.w	r0, r0, r1
  406586:	4770      	bx	lr
  406588:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40658c:	f020 0003 	bic.w	r0, r0, #3
  406590:	f850 2b08 	ldr.w	r2, [r0], #8
  406594:	f021 0103 	bic.w	r1, r1, #3
  406598:	f851 3b08 	ldr.w	r3, [r1], #8
  40659c:	fa0c f404 	lsl.w	r4, ip, r4
  4065a0:	ea62 0204 	orn	r2, r2, r4
  4065a4:	ea63 0304 	orn	r3, r3, r4
  4065a8:	e7c9      	b.n	40653e <strcmp+0x116>
  4065aa:	f010 0403 	ands.w	r4, r0, #3
  4065ae:	d01a      	beq.n	4065e6 <strcmp+0x1be>
  4065b0:	eba1 0104 	sub.w	r1, r1, r4
  4065b4:	f020 0003 	bic.w	r0, r0, #3
  4065b8:	07e4      	lsls	r4, r4, #31
  4065ba:	f850 2b04 	ldr.w	r2, [r0], #4
  4065be:	d006      	beq.n	4065ce <strcmp+0x1a6>
  4065c0:	d20f      	bcs.n	4065e2 <strcmp+0x1ba>
  4065c2:	788b      	ldrb	r3, [r1, #2]
  4065c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  4065c8:	1ae4      	subs	r4, r4, r3
  4065ca:	d106      	bne.n	4065da <strcmp+0x1b2>
  4065cc:	b12b      	cbz	r3, 4065da <strcmp+0x1b2>
  4065ce:	78cb      	ldrb	r3, [r1, #3]
  4065d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  4065d4:	1ae4      	subs	r4, r4, r3
  4065d6:	d100      	bne.n	4065da <strcmp+0x1b2>
  4065d8:	b91b      	cbnz	r3, 4065e2 <strcmp+0x1ba>
  4065da:	4620      	mov	r0, r4
  4065dc:	f85d 4b10 	ldr.w	r4, [sp], #16
  4065e0:	4770      	bx	lr
  4065e2:	f101 0104 	add.w	r1, r1, #4
  4065e6:	f850 2b04 	ldr.w	r2, [r0], #4
  4065ea:	07cc      	lsls	r4, r1, #31
  4065ec:	f021 0103 	bic.w	r1, r1, #3
  4065f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4065f4:	d848      	bhi.n	406688 <strcmp+0x260>
  4065f6:	d224      	bcs.n	406642 <strcmp+0x21a>
  4065f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  4065fc:	fa82 f54c 	uadd8	r5, r2, ip
  406600:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  406604:	faa5 f58c 	sel	r5, r5, ip
  406608:	d10a      	bne.n	406620 <strcmp+0x1f8>
  40660a:	b965      	cbnz	r5, 406626 <strcmp+0x1fe>
  40660c:	f851 3b04 	ldr.w	r3, [r1], #4
  406610:	ea84 0402 	eor.w	r4, r4, r2
  406614:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  406618:	d10e      	bne.n	406638 <strcmp+0x210>
  40661a:	f850 2b04 	ldr.w	r2, [r0], #4
  40661e:	e7eb      	b.n	4065f8 <strcmp+0x1d0>
  406620:	ea4f 2313 	mov.w	r3, r3, lsr #8
  406624:	e055      	b.n	4066d2 <strcmp+0x2aa>
  406626:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40662a:	d14d      	bne.n	4066c8 <strcmp+0x2a0>
  40662c:	7808      	ldrb	r0, [r1, #0]
  40662e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  406632:	f1c0 0000 	rsb	r0, r0, #0
  406636:	4770      	bx	lr
  406638:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40663c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  406640:	e047      	b.n	4066d2 <strcmp+0x2aa>
  406642:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  406646:	fa82 f54c 	uadd8	r5, r2, ip
  40664a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40664e:	faa5 f58c 	sel	r5, r5, ip
  406652:	d10a      	bne.n	40666a <strcmp+0x242>
  406654:	b965      	cbnz	r5, 406670 <strcmp+0x248>
  406656:	f851 3b04 	ldr.w	r3, [r1], #4
  40665a:	ea84 0402 	eor.w	r4, r4, r2
  40665e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  406662:	d10c      	bne.n	40667e <strcmp+0x256>
  406664:	f850 2b04 	ldr.w	r2, [r0], #4
  406668:	e7eb      	b.n	406642 <strcmp+0x21a>
  40666a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40666e:	e030      	b.n	4066d2 <strcmp+0x2aa>
  406670:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  406674:	d128      	bne.n	4066c8 <strcmp+0x2a0>
  406676:	880b      	ldrh	r3, [r1, #0]
  406678:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40667c:	e029      	b.n	4066d2 <strcmp+0x2aa>
  40667e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  406682:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  406686:	e024      	b.n	4066d2 <strcmp+0x2aa>
  406688:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40668c:	fa82 f54c 	uadd8	r5, r2, ip
  406690:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  406694:	faa5 f58c 	sel	r5, r5, ip
  406698:	d10a      	bne.n	4066b0 <strcmp+0x288>
  40669a:	b965      	cbnz	r5, 4066b6 <strcmp+0x28e>
  40669c:	f851 3b04 	ldr.w	r3, [r1], #4
  4066a0:	ea84 0402 	eor.w	r4, r4, r2
  4066a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  4066a8:	d109      	bne.n	4066be <strcmp+0x296>
  4066aa:	f850 2b04 	ldr.w	r2, [r0], #4
  4066ae:	e7eb      	b.n	406688 <strcmp+0x260>
  4066b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  4066b4:	e00d      	b.n	4066d2 <strcmp+0x2aa>
  4066b6:	f015 0fff 	tst.w	r5, #255	; 0xff
  4066ba:	d105      	bne.n	4066c8 <strcmp+0x2a0>
  4066bc:	680b      	ldr	r3, [r1, #0]
  4066be:	ea4f 2212 	mov.w	r2, r2, lsr #8
  4066c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4066c6:	e004      	b.n	4066d2 <strcmp+0x2aa>
  4066c8:	f04f 0000 	mov.w	r0, #0
  4066cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4066d0:	4770      	bx	lr
  4066d2:	ba12      	rev	r2, r2
  4066d4:	ba1b      	rev	r3, r3
  4066d6:	fa82 f44c 	uadd8	r4, r2, ip
  4066da:	ea82 0403 	eor.w	r4, r2, r3
  4066de:	faa4 f58c 	sel	r5, r4, ip
  4066e2:	fab5 f485 	clz	r4, r5
  4066e6:	fa02 f204 	lsl.w	r2, r2, r4
  4066ea:	fa03 f304 	lsl.w	r3, r3, r4
  4066ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
  4066f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4066f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  4066fa:	4770      	bx	lr

004066fc <strcpy>:
  4066fc:	ea80 0201 	eor.w	r2, r0, r1
  406700:	4684      	mov	ip, r0
  406702:	f012 0f03 	tst.w	r2, #3
  406706:	d14f      	bne.n	4067a8 <strcpy+0xac>
  406708:	f011 0f03 	tst.w	r1, #3
  40670c:	d132      	bne.n	406774 <strcpy+0x78>
  40670e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  406712:	f011 0f04 	tst.w	r1, #4
  406716:	f851 3b04 	ldr.w	r3, [r1], #4
  40671a:	d00b      	beq.n	406734 <strcpy+0x38>
  40671c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  406720:	439a      	bics	r2, r3
  406722:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406726:	bf04      	itt	eq
  406728:	f84c 3b04 	streq.w	r3, [ip], #4
  40672c:	f851 3b04 	ldreq.w	r3, [r1], #4
  406730:	d116      	bne.n	406760 <strcpy+0x64>
  406732:	bf00      	nop
  406734:	f851 4b04 	ldr.w	r4, [r1], #4
  406738:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40673c:	439a      	bics	r2, r3
  40673e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406742:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  406746:	d10b      	bne.n	406760 <strcpy+0x64>
  406748:	f84c 3b04 	str.w	r3, [ip], #4
  40674c:	43a2      	bics	r2, r4
  40674e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406752:	bf04      	itt	eq
  406754:	f851 3b04 	ldreq.w	r3, [r1], #4
  406758:	f84c 4b04 	streq.w	r4, [ip], #4
  40675c:	d0ea      	beq.n	406734 <strcpy+0x38>
  40675e:	4623      	mov	r3, r4
  406760:	f80c 3b01 	strb.w	r3, [ip], #1
  406764:	f013 0fff 	tst.w	r3, #255	; 0xff
  406768:	ea4f 2333 	mov.w	r3, r3, ror #8
  40676c:	d1f8      	bne.n	406760 <strcpy+0x64>
  40676e:	f85d 4b04 	ldr.w	r4, [sp], #4
  406772:	4770      	bx	lr
  406774:	f011 0f01 	tst.w	r1, #1
  406778:	d006      	beq.n	406788 <strcpy+0x8c>
  40677a:	f811 2b01 	ldrb.w	r2, [r1], #1
  40677e:	f80c 2b01 	strb.w	r2, [ip], #1
  406782:	2a00      	cmp	r2, #0
  406784:	bf08      	it	eq
  406786:	4770      	bxeq	lr
  406788:	f011 0f02 	tst.w	r1, #2
  40678c:	d0bf      	beq.n	40670e <strcpy+0x12>
  40678e:	f831 2b02 	ldrh.w	r2, [r1], #2
  406792:	f012 0fff 	tst.w	r2, #255	; 0xff
  406796:	bf16      	itet	ne
  406798:	f82c 2b02 	strhne.w	r2, [ip], #2
  40679c:	f88c 2000 	strbeq.w	r2, [ip]
  4067a0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  4067a4:	d1b3      	bne.n	40670e <strcpy+0x12>
  4067a6:	4770      	bx	lr
  4067a8:	f811 2b01 	ldrb.w	r2, [r1], #1
  4067ac:	f80c 2b01 	strb.w	r2, [ip], #1
  4067b0:	2a00      	cmp	r2, #0
  4067b2:	d1f9      	bne.n	4067a8 <strcpy+0xac>
  4067b4:	4770      	bx	lr
  4067b6:	bf00      	nop
	...

004067c0 <strlen>:
  4067c0:	f890 f000 	pld	[r0]
  4067c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4067c8:	f020 0107 	bic.w	r1, r0, #7
  4067cc:	f06f 0c00 	mvn.w	ip, #0
  4067d0:	f010 0407 	ands.w	r4, r0, #7
  4067d4:	f891 f020 	pld	[r1, #32]
  4067d8:	f040 8049 	bne.w	40686e <strlen+0xae>
  4067dc:	f04f 0400 	mov.w	r4, #0
  4067e0:	f06f 0007 	mvn.w	r0, #7
  4067e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4067e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4067ec:	f100 0008 	add.w	r0, r0, #8
  4067f0:	fa82 f24c 	uadd8	r2, r2, ip
  4067f4:	faa4 f28c 	sel	r2, r4, ip
  4067f8:	fa83 f34c 	uadd8	r3, r3, ip
  4067fc:	faa2 f38c 	sel	r3, r2, ip
  406800:	bb4b      	cbnz	r3, 406856 <strlen+0x96>
  406802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406806:	fa82 f24c 	uadd8	r2, r2, ip
  40680a:	f100 0008 	add.w	r0, r0, #8
  40680e:	faa4 f28c 	sel	r2, r4, ip
  406812:	fa83 f34c 	uadd8	r3, r3, ip
  406816:	faa2 f38c 	sel	r3, r2, ip
  40681a:	b9e3      	cbnz	r3, 406856 <strlen+0x96>
  40681c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406820:	fa82 f24c 	uadd8	r2, r2, ip
  406824:	f100 0008 	add.w	r0, r0, #8
  406828:	faa4 f28c 	sel	r2, r4, ip
  40682c:	fa83 f34c 	uadd8	r3, r3, ip
  406830:	faa2 f38c 	sel	r3, r2, ip
  406834:	b97b      	cbnz	r3, 406856 <strlen+0x96>
  406836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40683a:	f101 0120 	add.w	r1, r1, #32
  40683e:	fa82 f24c 	uadd8	r2, r2, ip
  406842:	f100 0008 	add.w	r0, r0, #8
  406846:	faa4 f28c 	sel	r2, r4, ip
  40684a:	fa83 f34c 	uadd8	r3, r3, ip
  40684e:	faa2 f38c 	sel	r3, r2, ip
  406852:	2b00      	cmp	r3, #0
  406854:	d0c6      	beq.n	4067e4 <strlen+0x24>
  406856:	2a00      	cmp	r2, #0
  406858:	bf04      	itt	eq
  40685a:	3004      	addeq	r0, #4
  40685c:	461a      	moveq	r2, r3
  40685e:	ba12      	rev	r2, r2
  406860:	fab2 f282 	clz	r2, r2
  406864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40686c:	4770      	bx	lr
  40686e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406872:	f004 0503 	and.w	r5, r4, #3
  406876:	f1c4 0000 	rsb	r0, r4, #0
  40687a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40687e:	f014 0f04 	tst.w	r4, #4
  406882:	f891 f040 	pld	[r1, #64]	; 0x40
  406886:	fa0c f505 	lsl.w	r5, ip, r5
  40688a:	ea62 0205 	orn	r2, r2, r5
  40688e:	bf1c      	itt	ne
  406890:	ea63 0305 	ornne	r3, r3, r5
  406894:	4662      	movne	r2, ip
  406896:	f04f 0400 	mov.w	r4, #0
  40689a:	e7a9      	b.n	4067f0 <strlen+0x30>

0040689c <_svfprintf_r>:
  40689c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4068a0:	b0c3      	sub	sp, #268	; 0x10c
  4068a2:	460c      	mov	r4, r1
  4068a4:	910b      	str	r1, [sp, #44]	; 0x2c
  4068a6:	4692      	mov	sl, r2
  4068a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4068aa:	900c      	str	r0, [sp, #48]	; 0x30
  4068ac:	f002 fb42 	bl	408f34 <_localeconv_r>
  4068b0:	6803      	ldr	r3, [r0, #0]
  4068b2:	931a      	str	r3, [sp, #104]	; 0x68
  4068b4:	4618      	mov	r0, r3
  4068b6:	f7ff ff83 	bl	4067c0 <strlen>
  4068ba:	89a3      	ldrh	r3, [r4, #12]
  4068bc:	9019      	str	r0, [sp, #100]	; 0x64
  4068be:	0619      	lsls	r1, r3, #24
  4068c0:	d503      	bpl.n	4068ca <_svfprintf_r+0x2e>
  4068c2:	6923      	ldr	r3, [r4, #16]
  4068c4:	2b00      	cmp	r3, #0
  4068c6:	f001 8003 	beq.w	4078d0 <_svfprintf_r+0x1034>
  4068ca:	2300      	movs	r3, #0
  4068cc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4068d0:	9313      	str	r3, [sp, #76]	; 0x4c
  4068d2:	9315      	str	r3, [sp, #84]	; 0x54
  4068d4:	9314      	str	r3, [sp, #80]	; 0x50
  4068d6:	9327      	str	r3, [sp, #156]	; 0x9c
  4068d8:	9326      	str	r3, [sp, #152]	; 0x98
  4068da:	9318      	str	r3, [sp, #96]	; 0x60
  4068dc:	931b      	str	r3, [sp, #108]	; 0x6c
  4068de:	9309      	str	r3, [sp, #36]	; 0x24
  4068e0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4068e4:	46c8      	mov	r8, r9
  4068e6:	9316      	str	r3, [sp, #88]	; 0x58
  4068e8:	9317      	str	r3, [sp, #92]	; 0x5c
  4068ea:	f89a 3000 	ldrb.w	r3, [sl]
  4068ee:	4654      	mov	r4, sl
  4068f0:	b1e3      	cbz	r3, 40692c <_svfprintf_r+0x90>
  4068f2:	2b25      	cmp	r3, #37	; 0x25
  4068f4:	d102      	bne.n	4068fc <_svfprintf_r+0x60>
  4068f6:	e019      	b.n	40692c <_svfprintf_r+0x90>
  4068f8:	2b25      	cmp	r3, #37	; 0x25
  4068fa:	d003      	beq.n	406904 <_svfprintf_r+0x68>
  4068fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406900:	2b00      	cmp	r3, #0
  406902:	d1f9      	bne.n	4068f8 <_svfprintf_r+0x5c>
  406904:	eba4 050a 	sub.w	r5, r4, sl
  406908:	b185      	cbz	r5, 40692c <_svfprintf_r+0x90>
  40690a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40690c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40690e:	f8c8 a000 	str.w	sl, [r8]
  406912:	3301      	adds	r3, #1
  406914:	442a      	add	r2, r5
  406916:	2b07      	cmp	r3, #7
  406918:	f8c8 5004 	str.w	r5, [r8, #4]
  40691c:	9227      	str	r2, [sp, #156]	; 0x9c
  40691e:	9326      	str	r3, [sp, #152]	; 0x98
  406920:	dc7f      	bgt.n	406a22 <_svfprintf_r+0x186>
  406922:	f108 0808 	add.w	r8, r8, #8
  406926:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406928:	442b      	add	r3, r5
  40692a:	9309      	str	r3, [sp, #36]	; 0x24
  40692c:	7823      	ldrb	r3, [r4, #0]
  40692e:	2b00      	cmp	r3, #0
  406930:	d07f      	beq.n	406a32 <_svfprintf_r+0x196>
  406932:	2300      	movs	r3, #0
  406934:	461a      	mov	r2, r3
  406936:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40693a:	4619      	mov	r1, r3
  40693c:	930d      	str	r3, [sp, #52]	; 0x34
  40693e:	469b      	mov	fp, r3
  406940:	f04f 30ff 	mov.w	r0, #4294967295
  406944:	7863      	ldrb	r3, [r4, #1]
  406946:	900a      	str	r0, [sp, #40]	; 0x28
  406948:	f104 0a01 	add.w	sl, r4, #1
  40694c:	f10a 0a01 	add.w	sl, sl, #1
  406950:	f1a3 0020 	sub.w	r0, r3, #32
  406954:	2858      	cmp	r0, #88	; 0x58
  406956:	f200 83c1 	bhi.w	4070dc <_svfprintf_r+0x840>
  40695a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40695e:	0238      	.short	0x0238
  406960:	03bf03bf 	.word	0x03bf03bf
  406964:	03bf0240 	.word	0x03bf0240
  406968:	03bf03bf 	.word	0x03bf03bf
  40696c:	03bf03bf 	.word	0x03bf03bf
  406970:	024503bf 	.word	0x024503bf
  406974:	03bf0203 	.word	0x03bf0203
  406978:	026b005d 	.word	0x026b005d
  40697c:	028603bf 	.word	0x028603bf
  406980:	039d039d 	.word	0x039d039d
  406984:	039d039d 	.word	0x039d039d
  406988:	039d039d 	.word	0x039d039d
  40698c:	039d039d 	.word	0x039d039d
  406990:	03bf039d 	.word	0x03bf039d
  406994:	03bf03bf 	.word	0x03bf03bf
  406998:	03bf03bf 	.word	0x03bf03bf
  40699c:	03bf03bf 	.word	0x03bf03bf
  4069a0:	03bf03bf 	.word	0x03bf03bf
  4069a4:	033703bf 	.word	0x033703bf
  4069a8:	03bf0357 	.word	0x03bf0357
  4069ac:	03bf0357 	.word	0x03bf0357
  4069b0:	03bf03bf 	.word	0x03bf03bf
  4069b4:	039803bf 	.word	0x039803bf
  4069b8:	03bf03bf 	.word	0x03bf03bf
  4069bc:	03bf03ad 	.word	0x03bf03ad
  4069c0:	03bf03bf 	.word	0x03bf03bf
  4069c4:	03bf03bf 	.word	0x03bf03bf
  4069c8:	03bf0259 	.word	0x03bf0259
  4069cc:	031e03bf 	.word	0x031e03bf
  4069d0:	03bf03bf 	.word	0x03bf03bf
  4069d4:	03bf03bf 	.word	0x03bf03bf
  4069d8:	03bf03bf 	.word	0x03bf03bf
  4069dc:	03bf03bf 	.word	0x03bf03bf
  4069e0:	03bf03bf 	.word	0x03bf03bf
  4069e4:	02db02c6 	.word	0x02db02c6
  4069e8:	03570357 	.word	0x03570357
  4069ec:	028b0357 	.word	0x028b0357
  4069f0:	03bf02db 	.word	0x03bf02db
  4069f4:	029003bf 	.word	0x029003bf
  4069f8:	029d03bf 	.word	0x029d03bf
  4069fc:	02b401cc 	.word	0x02b401cc
  406a00:	03bf0208 	.word	0x03bf0208
  406a04:	03bf01e1 	.word	0x03bf01e1
  406a08:	03bf007e 	.word	0x03bf007e
  406a0c:	020d03bf 	.word	0x020d03bf
  406a10:	980d      	ldr	r0, [sp, #52]	; 0x34
  406a12:	930f      	str	r3, [sp, #60]	; 0x3c
  406a14:	4240      	negs	r0, r0
  406a16:	900d      	str	r0, [sp, #52]	; 0x34
  406a18:	f04b 0b04 	orr.w	fp, fp, #4
  406a1c:	f89a 3000 	ldrb.w	r3, [sl]
  406a20:	e794      	b.n	40694c <_svfprintf_r+0xb0>
  406a22:	aa25      	add	r2, sp, #148	; 0x94
  406a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406a26:	980c      	ldr	r0, [sp, #48]	; 0x30
  406a28:	f003 fb6e 	bl	40a108 <__ssprint_r>
  406a2c:	b940      	cbnz	r0, 406a40 <_svfprintf_r+0x1a4>
  406a2e:	46c8      	mov	r8, r9
  406a30:	e779      	b.n	406926 <_svfprintf_r+0x8a>
  406a32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  406a34:	b123      	cbz	r3, 406a40 <_svfprintf_r+0x1a4>
  406a36:	980c      	ldr	r0, [sp, #48]	; 0x30
  406a38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406a3a:	aa25      	add	r2, sp, #148	; 0x94
  406a3c:	f003 fb64 	bl	40a108 <__ssprint_r>
  406a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406a42:	899b      	ldrh	r3, [r3, #12]
  406a44:	f013 0f40 	tst.w	r3, #64	; 0x40
  406a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a4a:	bf18      	it	ne
  406a4c:	f04f 33ff 	movne.w	r3, #4294967295
  406a50:	9309      	str	r3, [sp, #36]	; 0x24
  406a52:	9809      	ldr	r0, [sp, #36]	; 0x24
  406a54:	b043      	add	sp, #268	; 0x10c
  406a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a5a:	f01b 0f20 	tst.w	fp, #32
  406a5e:	9311      	str	r3, [sp, #68]	; 0x44
  406a60:	f040 81dd 	bne.w	406e1e <_svfprintf_r+0x582>
  406a64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406a66:	f01b 0f10 	tst.w	fp, #16
  406a6a:	4613      	mov	r3, r2
  406a6c:	f040 856e 	bne.w	40754c <_svfprintf_r+0xcb0>
  406a70:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406a74:	f000 856a 	beq.w	40754c <_svfprintf_r+0xcb0>
  406a78:	8814      	ldrh	r4, [r2, #0]
  406a7a:	3204      	adds	r2, #4
  406a7c:	2500      	movs	r5, #0
  406a7e:	2301      	movs	r3, #1
  406a80:	920f      	str	r2, [sp, #60]	; 0x3c
  406a82:	2700      	movs	r7, #0
  406a84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406a88:	990a      	ldr	r1, [sp, #40]	; 0x28
  406a8a:	1c4a      	adds	r2, r1, #1
  406a8c:	f000 8265 	beq.w	406f5a <_svfprintf_r+0x6be>
  406a90:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  406a94:	9207      	str	r2, [sp, #28]
  406a96:	ea54 0205 	orrs.w	r2, r4, r5
  406a9a:	f040 8264 	bne.w	406f66 <_svfprintf_r+0x6ca>
  406a9e:	2900      	cmp	r1, #0
  406aa0:	f040 843c 	bne.w	40731c <_svfprintf_r+0xa80>
  406aa4:	2b00      	cmp	r3, #0
  406aa6:	f040 84d7 	bne.w	407458 <_svfprintf_r+0xbbc>
  406aaa:	f01b 0301 	ands.w	r3, fp, #1
  406aae:	930e      	str	r3, [sp, #56]	; 0x38
  406ab0:	f000 8604 	beq.w	4076bc <_svfprintf_r+0xe20>
  406ab4:	ae42      	add	r6, sp, #264	; 0x108
  406ab6:	2330      	movs	r3, #48	; 0x30
  406ab8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  406abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406abe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406ac0:	4293      	cmp	r3, r2
  406ac2:	bfb8      	it	lt
  406ac4:	4613      	movlt	r3, r2
  406ac6:	9308      	str	r3, [sp, #32]
  406ac8:	2300      	movs	r3, #0
  406aca:	9312      	str	r3, [sp, #72]	; 0x48
  406acc:	b117      	cbz	r7, 406ad4 <_svfprintf_r+0x238>
  406ace:	9b08      	ldr	r3, [sp, #32]
  406ad0:	3301      	adds	r3, #1
  406ad2:	9308      	str	r3, [sp, #32]
  406ad4:	9b07      	ldr	r3, [sp, #28]
  406ad6:	f013 0302 	ands.w	r3, r3, #2
  406ada:	9310      	str	r3, [sp, #64]	; 0x40
  406adc:	d002      	beq.n	406ae4 <_svfprintf_r+0x248>
  406ade:	9b08      	ldr	r3, [sp, #32]
  406ae0:	3302      	adds	r3, #2
  406ae2:	9308      	str	r3, [sp, #32]
  406ae4:	9b07      	ldr	r3, [sp, #28]
  406ae6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  406aea:	f040 830e 	bne.w	40710a <_svfprintf_r+0x86e>
  406aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406af0:	9a08      	ldr	r2, [sp, #32]
  406af2:	eba3 0b02 	sub.w	fp, r3, r2
  406af6:	f1bb 0f00 	cmp.w	fp, #0
  406afa:	f340 8306 	ble.w	40710a <_svfprintf_r+0x86e>
  406afe:	f1bb 0f10 	cmp.w	fp, #16
  406b02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406b04:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406b06:	dd29      	ble.n	406b5c <_svfprintf_r+0x2c0>
  406b08:	4643      	mov	r3, r8
  406b0a:	4621      	mov	r1, r4
  406b0c:	46a8      	mov	r8, r5
  406b0e:	2710      	movs	r7, #16
  406b10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406b12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406b14:	e006      	b.n	406b24 <_svfprintf_r+0x288>
  406b16:	f1ab 0b10 	sub.w	fp, fp, #16
  406b1a:	f1bb 0f10 	cmp.w	fp, #16
  406b1e:	f103 0308 	add.w	r3, r3, #8
  406b22:	dd18      	ble.n	406b56 <_svfprintf_r+0x2ba>
  406b24:	3201      	adds	r2, #1
  406b26:	48b7      	ldr	r0, [pc, #732]	; (406e04 <_svfprintf_r+0x568>)
  406b28:	9226      	str	r2, [sp, #152]	; 0x98
  406b2a:	3110      	adds	r1, #16
  406b2c:	2a07      	cmp	r2, #7
  406b2e:	9127      	str	r1, [sp, #156]	; 0x9c
  406b30:	e883 0081 	stmia.w	r3, {r0, r7}
  406b34:	ddef      	ble.n	406b16 <_svfprintf_r+0x27a>
  406b36:	aa25      	add	r2, sp, #148	; 0x94
  406b38:	4629      	mov	r1, r5
  406b3a:	4620      	mov	r0, r4
  406b3c:	f003 fae4 	bl	40a108 <__ssprint_r>
  406b40:	2800      	cmp	r0, #0
  406b42:	f47f af7d 	bne.w	406a40 <_svfprintf_r+0x1a4>
  406b46:	f1ab 0b10 	sub.w	fp, fp, #16
  406b4a:	f1bb 0f10 	cmp.w	fp, #16
  406b4e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406b50:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406b52:	464b      	mov	r3, r9
  406b54:	dce6      	bgt.n	406b24 <_svfprintf_r+0x288>
  406b56:	4645      	mov	r5, r8
  406b58:	460c      	mov	r4, r1
  406b5a:	4698      	mov	r8, r3
  406b5c:	3201      	adds	r2, #1
  406b5e:	4ba9      	ldr	r3, [pc, #676]	; (406e04 <_svfprintf_r+0x568>)
  406b60:	9226      	str	r2, [sp, #152]	; 0x98
  406b62:	445c      	add	r4, fp
  406b64:	2a07      	cmp	r2, #7
  406b66:	9427      	str	r4, [sp, #156]	; 0x9c
  406b68:	e888 0808 	stmia.w	r8, {r3, fp}
  406b6c:	f300 8498 	bgt.w	4074a0 <_svfprintf_r+0xc04>
  406b70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406b74:	f108 0808 	add.w	r8, r8, #8
  406b78:	b177      	cbz	r7, 406b98 <_svfprintf_r+0x2fc>
  406b7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406b7c:	3301      	adds	r3, #1
  406b7e:	3401      	adds	r4, #1
  406b80:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  406b84:	2201      	movs	r2, #1
  406b86:	2b07      	cmp	r3, #7
  406b88:	9427      	str	r4, [sp, #156]	; 0x9c
  406b8a:	9326      	str	r3, [sp, #152]	; 0x98
  406b8c:	e888 0006 	stmia.w	r8, {r1, r2}
  406b90:	f300 83db 	bgt.w	40734a <_svfprintf_r+0xaae>
  406b94:	f108 0808 	add.w	r8, r8, #8
  406b98:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406b9a:	b16b      	cbz	r3, 406bb8 <_svfprintf_r+0x31c>
  406b9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406b9e:	3301      	adds	r3, #1
  406ba0:	3402      	adds	r4, #2
  406ba2:	a91e      	add	r1, sp, #120	; 0x78
  406ba4:	2202      	movs	r2, #2
  406ba6:	2b07      	cmp	r3, #7
  406ba8:	9427      	str	r4, [sp, #156]	; 0x9c
  406baa:	9326      	str	r3, [sp, #152]	; 0x98
  406bac:	e888 0006 	stmia.w	r8, {r1, r2}
  406bb0:	f300 83d6 	bgt.w	407360 <_svfprintf_r+0xac4>
  406bb4:	f108 0808 	add.w	r8, r8, #8
  406bb8:	2d80      	cmp	r5, #128	; 0x80
  406bba:	f000 8315 	beq.w	4071e8 <_svfprintf_r+0x94c>
  406bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406bc2:	1a9f      	subs	r7, r3, r2
  406bc4:	2f00      	cmp	r7, #0
  406bc6:	dd36      	ble.n	406c36 <_svfprintf_r+0x39a>
  406bc8:	2f10      	cmp	r7, #16
  406bca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406bcc:	4d8e      	ldr	r5, [pc, #568]	; (406e08 <_svfprintf_r+0x56c>)
  406bce:	dd27      	ble.n	406c20 <_svfprintf_r+0x384>
  406bd0:	4642      	mov	r2, r8
  406bd2:	4621      	mov	r1, r4
  406bd4:	46b0      	mov	r8, r6
  406bd6:	f04f 0b10 	mov.w	fp, #16
  406bda:	462e      	mov	r6, r5
  406bdc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406bde:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406be0:	e004      	b.n	406bec <_svfprintf_r+0x350>
  406be2:	3f10      	subs	r7, #16
  406be4:	2f10      	cmp	r7, #16
  406be6:	f102 0208 	add.w	r2, r2, #8
  406bea:	dd15      	ble.n	406c18 <_svfprintf_r+0x37c>
  406bec:	3301      	adds	r3, #1
  406bee:	3110      	adds	r1, #16
  406bf0:	2b07      	cmp	r3, #7
  406bf2:	9127      	str	r1, [sp, #156]	; 0x9c
  406bf4:	9326      	str	r3, [sp, #152]	; 0x98
  406bf6:	e882 0840 	stmia.w	r2, {r6, fp}
  406bfa:	ddf2      	ble.n	406be2 <_svfprintf_r+0x346>
  406bfc:	aa25      	add	r2, sp, #148	; 0x94
  406bfe:	4629      	mov	r1, r5
  406c00:	4620      	mov	r0, r4
  406c02:	f003 fa81 	bl	40a108 <__ssprint_r>
  406c06:	2800      	cmp	r0, #0
  406c08:	f47f af1a 	bne.w	406a40 <_svfprintf_r+0x1a4>
  406c0c:	3f10      	subs	r7, #16
  406c0e:	2f10      	cmp	r7, #16
  406c10:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406c12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406c14:	464a      	mov	r2, r9
  406c16:	dce9      	bgt.n	406bec <_svfprintf_r+0x350>
  406c18:	4635      	mov	r5, r6
  406c1a:	460c      	mov	r4, r1
  406c1c:	4646      	mov	r6, r8
  406c1e:	4690      	mov	r8, r2
  406c20:	3301      	adds	r3, #1
  406c22:	443c      	add	r4, r7
  406c24:	2b07      	cmp	r3, #7
  406c26:	9427      	str	r4, [sp, #156]	; 0x9c
  406c28:	9326      	str	r3, [sp, #152]	; 0x98
  406c2a:	e888 00a0 	stmia.w	r8, {r5, r7}
  406c2e:	f300 8381 	bgt.w	407334 <_svfprintf_r+0xa98>
  406c32:	f108 0808 	add.w	r8, r8, #8
  406c36:	9b07      	ldr	r3, [sp, #28]
  406c38:	05df      	lsls	r7, r3, #23
  406c3a:	f100 8268 	bmi.w	40710e <_svfprintf_r+0x872>
  406c3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406c40:	990e      	ldr	r1, [sp, #56]	; 0x38
  406c42:	f8c8 6000 	str.w	r6, [r8]
  406c46:	3301      	adds	r3, #1
  406c48:	440c      	add	r4, r1
  406c4a:	2b07      	cmp	r3, #7
  406c4c:	9427      	str	r4, [sp, #156]	; 0x9c
  406c4e:	f8c8 1004 	str.w	r1, [r8, #4]
  406c52:	9326      	str	r3, [sp, #152]	; 0x98
  406c54:	f300 834d 	bgt.w	4072f2 <_svfprintf_r+0xa56>
  406c58:	f108 0808 	add.w	r8, r8, #8
  406c5c:	9b07      	ldr	r3, [sp, #28]
  406c5e:	075b      	lsls	r3, r3, #29
  406c60:	d53a      	bpl.n	406cd8 <_svfprintf_r+0x43c>
  406c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406c64:	9a08      	ldr	r2, [sp, #32]
  406c66:	1a9d      	subs	r5, r3, r2
  406c68:	2d00      	cmp	r5, #0
  406c6a:	dd35      	ble.n	406cd8 <_svfprintf_r+0x43c>
  406c6c:	2d10      	cmp	r5, #16
  406c6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406c70:	dd20      	ble.n	406cb4 <_svfprintf_r+0x418>
  406c72:	2610      	movs	r6, #16
  406c74:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406c76:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  406c7a:	e004      	b.n	406c86 <_svfprintf_r+0x3ea>
  406c7c:	3d10      	subs	r5, #16
  406c7e:	2d10      	cmp	r5, #16
  406c80:	f108 0808 	add.w	r8, r8, #8
  406c84:	dd16      	ble.n	406cb4 <_svfprintf_r+0x418>
  406c86:	3301      	adds	r3, #1
  406c88:	4a5e      	ldr	r2, [pc, #376]	; (406e04 <_svfprintf_r+0x568>)
  406c8a:	9326      	str	r3, [sp, #152]	; 0x98
  406c8c:	3410      	adds	r4, #16
  406c8e:	2b07      	cmp	r3, #7
  406c90:	9427      	str	r4, [sp, #156]	; 0x9c
  406c92:	e888 0044 	stmia.w	r8, {r2, r6}
  406c96:	ddf1      	ble.n	406c7c <_svfprintf_r+0x3e0>
  406c98:	aa25      	add	r2, sp, #148	; 0x94
  406c9a:	4659      	mov	r1, fp
  406c9c:	4638      	mov	r0, r7
  406c9e:	f003 fa33 	bl	40a108 <__ssprint_r>
  406ca2:	2800      	cmp	r0, #0
  406ca4:	f47f aecc 	bne.w	406a40 <_svfprintf_r+0x1a4>
  406ca8:	3d10      	subs	r5, #16
  406caa:	2d10      	cmp	r5, #16
  406cac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406cae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406cb0:	46c8      	mov	r8, r9
  406cb2:	dce8      	bgt.n	406c86 <_svfprintf_r+0x3ea>
  406cb4:	3301      	adds	r3, #1
  406cb6:	4a53      	ldr	r2, [pc, #332]	; (406e04 <_svfprintf_r+0x568>)
  406cb8:	9326      	str	r3, [sp, #152]	; 0x98
  406cba:	442c      	add	r4, r5
  406cbc:	2b07      	cmp	r3, #7
  406cbe:	9427      	str	r4, [sp, #156]	; 0x9c
  406cc0:	e888 0024 	stmia.w	r8, {r2, r5}
  406cc4:	dd08      	ble.n	406cd8 <_svfprintf_r+0x43c>
  406cc6:	aa25      	add	r2, sp, #148	; 0x94
  406cc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406cca:	980c      	ldr	r0, [sp, #48]	; 0x30
  406ccc:	f003 fa1c 	bl	40a108 <__ssprint_r>
  406cd0:	2800      	cmp	r0, #0
  406cd2:	f47f aeb5 	bne.w	406a40 <_svfprintf_r+0x1a4>
  406cd6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406cda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406cdc:	9908      	ldr	r1, [sp, #32]
  406cde:	428a      	cmp	r2, r1
  406ce0:	bfac      	ite	ge
  406ce2:	189b      	addge	r3, r3, r2
  406ce4:	185b      	addlt	r3, r3, r1
  406ce6:	9309      	str	r3, [sp, #36]	; 0x24
  406ce8:	2c00      	cmp	r4, #0
  406cea:	f040 830d 	bne.w	407308 <_svfprintf_r+0xa6c>
  406cee:	2300      	movs	r3, #0
  406cf0:	9326      	str	r3, [sp, #152]	; 0x98
  406cf2:	46c8      	mov	r8, r9
  406cf4:	e5f9      	b.n	4068ea <_svfprintf_r+0x4e>
  406cf6:	9311      	str	r3, [sp, #68]	; 0x44
  406cf8:	f01b 0320 	ands.w	r3, fp, #32
  406cfc:	f040 81e3 	bne.w	4070c6 <_svfprintf_r+0x82a>
  406d00:	f01b 0210 	ands.w	r2, fp, #16
  406d04:	f040 842e 	bne.w	407564 <_svfprintf_r+0xcc8>
  406d08:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  406d0c:	f000 842a 	beq.w	407564 <_svfprintf_r+0xcc8>
  406d10:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406d12:	4613      	mov	r3, r2
  406d14:	460a      	mov	r2, r1
  406d16:	3204      	adds	r2, #4
  406d18:	880c      	ldrh	r4, [r1, #0]
  406d1a:	920f      	str	r2, [sp, #60]	; 0x3c
  406d1c:	2500      	movs	r5, #0
  406d1e:	e6b0      	b.n	406a82 <_svfprintf_r+0x1e6>
  406d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406d22:	9311      	str	r3, [sp, #68]	; 0x44
  406d24:	6816      	ldr	r6, [r2, #0]
  406d26:	2400      	movs	r4, #0
  406d28:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  406d2c:	1d15      	adds	r5, r2, #4
  406d2e:	2e00      	cmp	r6, #0
  406d30:	f000 86a7 	beq.w	407a82 <_svfprintf_r+0x11e6>
  406d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406d36:	1c53      	adds	r3, r2, #1
  406d38:	f000 8609 	beq.w	40794e <_svfprintf_r+0x10b2>
  406d3c:	4621      	mov	r1, r4
  406d3e:	4630      	mov	r0, r6
  406d40:	f002 fbd6 	bl	4094f0 <memchr>
  406d44:	2800      	cmp	r0, #0
  406d46:	f000 86e1 	beq.w	407b0c <_svfprintf_r+0x1270>
  406d4a:	1b83      	subs	r3, r0, r6
  406d4c:	930e      	str	r3, [sp, #56]	; 0x38
  406d4e:	940a      	str	r4, [sp, #40]	; 0x28
  406d50:	950f      	str	r5, [sp, #60]	; 0x3c
  406d52:	f8cd b01c 	str.w	fp, [sp, #28]
  406d56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406d5a:	9308      	str	r3, [sp, #32]
  406d5c:	9412      	str	r4, [sp, #72]	; 0x48
  406d5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406d62:	e6b3      	b.n	406acc <_svfprintf_r+0x230>
  406d64:	f89a 3000 	ldrb.w	r3, [sl]
  406d68:	2201      	movs	r2, #1
  406d6a:	212b      	movs	r1, #43	; 0x2b
  406d6c:	e5ee      	b.n	40694c <_svfprintf_r+0xb0>
  406d6e:	f04b 0b20 	orr.w	fp, fp, #32
  406d72:	f89a 3000 	ldrb.w	r3, [sl]
  406d76:	e5e9      	b.n	40694c <_svfprintf_r+0xb0>
  406d78:	9311      	str	r3, [sp, #68]	; 0x44
  406d7a:	2a00      	cmp	r2, #0
  406d7c:	f040 8795 	bne.w	407caa <_svfprintf_r+0x140e>
  406d80:	4b22      	ldr	r3, [pc, #136]	; (406e0c <_svfprintf_r+0x570>)
  406d82:	9318      	str	r3, [sp, #96]	; 0x60
  406d84:	f01b 0f20 	tst.w	fp, #32
  406d88:	f040 8111 	bne.w	406fae <_svfprintf_r+0x712>
  406d8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406d8e:	f01b 0f10 	tst.w	fp, #16
  406d92:	4613      	mov	r3, r2
  406d94:	f040 83e1 	bne.w	40755a <_svfprintf_r+0xcbe>
  406d98:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406d9c:	f000 83dd 	beq.w	40755a <_svfprintf_r+0xcbe>
  406da0:	3304      	adds	r3, #4
  406da2:	8814      	ldrh	r4, [r2, #0]
  406da4:	930f      	str	r3, [sp, #60]	; 0x3c
  406da6:	2500      	movs	r5, #0
  406da8:	f01b 0f01 	tst.w	fp, #1
  406dac:	f000 810c 	beq.w	406fc8 <_svfprintf_r+0x72c>
  406db0:	ea54 0305 	orrs.w	r3, r4, r5
  406db4:	f000 8108 	beq.w	406fc8 <_svfprintf_r+0x72c>
  406db8:	2330      	movs	r3, #48	; 0x30
  406dba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  406dbe:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  406dc2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  406dc6:	f04b 0b02 	orr.w	fp, fp, #2
  406dca:	2302      	movs	r3, #2
  406dcc:	e659      	b.n	406a82 <_svfprintf_r+0x1e6>
  406dce:	f89a 3000 	ldrb.w	r3, [sl]
  406dd2:	2900      	cmp	r1, #0
  406dd4:	f47f adba 	bne.w	40694c <_svfprintf_r+0xb0>
  406dd8:	2201      	movs	r2, #1
  406dda:	2120      	movs	r1, #32
  406ddc:	e5b6      	b.n	40694c <_svfprintf_r+0xb0>
  406dde:	f04b 0b01 	orr.w	fp, fp, #1
  406de2:	f89a 3000 	ldrb.w	r3, [sl]
  406de6:	e5b1      	b.n	40694c <_svfprintf_r+0xb0>
  406de8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  406dea:	6823      	ldr	r3, [r4, #0]
  406dec:	930d      	str	r3, [sp, #52]	; 0x34
  406dee:	4618      	mov	r0, r3
  406df0:	2800      	cmp	r0, #0
  406df2:	4623      	mov	r3, r4
  406df4:	f103 0304 	add.w	r3, r3, #4
  406df8:	f6ff ae0a 	blt.w	406a10 <_svfprintf_r+0x174>
  406dfc:	930f      	str	r3, [sp, #60]	; 0x3c
  406dfe:	f89a 3000 	ldrb.w	r3, [sl]
  406e02:	e5a3      	b.n	40694c <_svfprintf_r+0xb0>
  406e04:	0040aff4 	.word	0x0040aff4
  406e08:	0040b004 	.word	0x0040b004
  406e0c:	0040afd4 	.word	0x0040afd4
  406e10:	f04b 0b10 	orr.w	fp, fp, #16
  406e14:	f01b 0f20 	tst.w	fp, #32
  406e18:	9311      	str	r3, [sp, #68]	; 0x44
  406e1a:	f43f ae23 	beq.w	406a64 <_svfprintf_r+0x1c8>
  406e1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406e20:	3507      	adds	r5, #7
  406e22:	f025 0307 	bic.w	r3, r5, #7
  406e26:	f103 0208 	add.w	r2, r3, #8
  406e2a:	e9d3 4500 	ldrd	r4, r5, [r3]
  406e2e:	920f      	str	r2, [sp, #60]	; 0x3c
  406e30:	2301      	movs	r3, #1
  406e32:	e626      	b.n	406a82 <_svfprintf_r+0x1e6>
  406e34:	f89a 3000 	ldrb.w	r3, [sl]
  406e38:	2b2a      	cmp	r3, #42	; 0x2a
  406e3a:	f10a 0401 	add.w	r4, sl, #1
  406e3e:	f000 8727 	beq.w	407c90 <_svfprintf_r+0x13f4>
  406e42:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406e46:	2809      	cmp	r0, #9
  406e48:	46a2      	mov	sl, r4
  406e4a:	f200 86ad 	bhi.w	407ba8 <_svfprintf_r+0x130c>
  406e4e:	2300      	movs	r3, #0
  406e50:	461c      	mov	r4, r3
  406e52:	f81a 3b01 	ldrb.w	r3, [sl], #1
  406e56:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406e5a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  406e5e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406e62:	2809      	cmp	r0, #9
  406e64:	d9f5      	bls.n	406e52 <_svfprintf_r+0x5b6>
  406e66:	940a      	str	r4, [sp, #40]	; 0x28
  406e68:	e572      	b.n	406950 <_svfprintf_r+0xb4>
  406e6a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  406e6e:	f89a 3000 	ldrb.w	r3, [sl]
  406e72:	e56b      	b.n	40694c <_svfprintf_r+0xb0>
  406e74:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  406e78:	f89a 3000 	ldrb.w	r3, [sl]
  406e7c:	e566      	b.n	40694c <_svfprintf_r+0xb0>
  406e7e:	f89a 3000 	ldrb.w	r3, [sl]
  406e82:	2b6c      	cmp	r3, #108	; 0x6c
  406e84:	bf03      	ittte	eq
  406e86:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  406e8a:	f04b 0b20 	orreq.w	fp, fp, #32
  406e8e:	f10a 0a01 	addeq.w	sl, sl, #1
  406e92:	f04b 0b10 	orrne.w	fp, fp, #16
  406e96:	e559      	b.n	40694c <_svfprintf_r+0xb0>
  406e98:	2a00      	cmp	r2, #0
  406e9a:	f040 8711 	bne.w	407cc0 <_svfprintf_r+0x1424>
  406e9e:	f01b 0f20 	tst.w	fp, #32
  406ea2:	f040 84f9 	bne.w	407898 <_svfprintf_r+0xffc>
  406ea6:	f01b 0f10 	tst.w	fp, #16
  406eaa:	f040 84ac 	bne.w	407806 <_svfprintf_r+0xf6a>
  406eae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406eb2:	f000 84a8 	beq.w	407806 <_svfprintf_r+0xf6a>
  406eb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406eb8:	6813      	ldr	r3, [r2, #0]
  406eba:	3204      	adds	r2, #4
  406ebc:	920f      	str	r2, [sp, #60]	; 0x3c
  406ebe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  406ec2:	801a      	strh	r2, [r3, #0]
  406ec4:	e511      	b.n	4068ea <_svfprintf_r+0x4e>
  406ec6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406ec8:	4bb3      	ldr	r3, [pc, #716]	; (407198 <_svfprintf_r+0x8fc>)
  406eca:	680c      	ldr	r4, [r1, #0]
  406ecc:	9318      	str	r3, [sp, #96]	; 0x60
  406ece:	2230      	movs	r2, #48	; 0x30
  406ed0:	2378      	movs	r3, #120	; 0x78
  406ed2:	3104      	adds	r1, #4
  406ed4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  406ed8:	9311      	str	r3, [sp, #68]	; 0x44
  406eda:	f04b 0b02 	orr.w	fp, fp, #2
  406ede:	910f      	str	r1, [sp, #60]	; 0x3c
  406ee0:	2500      	movs	r5, #0
  406ee2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  406ee6:	2302      	movs	r3, #2
  406ee8:	e5cb      	b.n	406a82 <_svfprintf_r+0x1e6>
  406eea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406eec:	9311      	str	r3, [sp, #68]	; 0x44
  406eee:	680a      	ldr	r2, [r1, #0]
  406ef0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  406ef4:	2300      	movs	r3, #0
  406ef6:	460a      	mov	r2, r1
  406ef8:	461f      	mov	r7, r3
  406efa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  406efe:	3204      	adds	r2, #4
  406f00:	2301      	movs	r3, #1
  406f02:	9308      	str	r3, [sp, #32]
  406f04:	f8cd b01c 	str.w	fp, [sp, #28]
  406f08:	970a      	str	r7, [sp, #40]	; 0x28
  406f0a:	9712      	str	r7, [sp, #72]	; 0x48
  406f0c:	920f      	str	r2, [sp, #60]	; 0x3c
  406f0e:	930e      	str	r3, [sp, #56]	; 0x38
  406f10:	ae28      	add	r6, sp, #160	; 0xa0
  406f12:	e5df      	b.n	406ad4 <_svfprintf_r+0x238>
  406f14:	9311      	str	r3, [sp, #68]	; 0x44
  406f16:	2a00      	cmp	r2, #0
  406f18:	f040 86ea 	bne.w	407cf0 <_svfprintf_r+0x1454>
  406f1c:	f01b 0f20 	tst.w	fp, #32
  406f20:	d15d      	bne.n	406fde <_svfprintf_r+0x742>
  406f22:	f01b 0f10 	tst.w	fp, #16
  406f26:	f040 8308 	bne.w	40753a <_svfprintf_r+0xc9e>
  406f2a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406f2e:	f000 8304 	beq.w	40753a <_svfprintf_r+0xc9e>
  406f32:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406f34:	f9b1 4000 	ldrsh.w	r4, [r1]
  406f38:	3104      	adds	r1, #4
  406f3a:	17e5      	asrs	r5, r4, #31
  406f3c:	4622      	mov	r2, r4
  406f3e:	462b      	mov	r3, r5
  406f40:	910f      	str	r1, [sp, #60]	; 0x3c
  406f42:	2a00      	cmp	r2, #0
  406f44:	f173 0300 	sbcs.w	r3, r3, #0
  406f48:	db58      	blt.n	406ffc <_svfprintf_r+0x760>
  406f4a:	990a      	ldr	r1, [sp, #40]	; 0x28
  406f4c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406f50:	1c4a      	adds	r2, r1, #1
  406f52:	f04f 0301 	mov.w	r3, #1
  406f56:	f47f ad9b 	bne.w	406a90 <_svfprintf_r+0x1f4>
  406f5a:	ea54 0205 	orrs.w	r2, r4, r5
  406f5e:	f000 81df 	beq.w	407320 <_svfprintf_r+0xa84>
  406f62:	f8cd b01c 	str.w	fp, [sp, #28]
  406f66:	2b01      	cmp	r3, #1
  406f68:	f000 827b 	beq.w	407462 <_svfprintf_r+0xbc6>
  406f6c:	2b02      	cmp	r3, #2
  406f6e:	f040 8206 	bne.w	40737e <_svfprintf_r+0xae2>
  406f72:	9818      	ldr	r0, [sp, #96]	; 0x60
  406f74:	464e      	mov	r6, r9
  406f76:	0923      	lsrs	r3, r4, #4
  406f78:	f004 010f 	and.w	r1, r4, #15
  406f7c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  406f80:	092a      	lsrs	r2, r5, #4
  406f82:	461c      	mov	r4, r3
  406f84:	4615      	mov	r5, r2
  406f86:	5c43      	ldrb	r3, [r0, r1]
  406f88:	f806 3d01 	strb.w	r3, [r6, #-1]!
  406f8c:	ea54 0305 	orrs.w	r3, r4, r5
  406f90:	d1f1      	bne.n	406f76 <_svfprintf_r+0x6da>
  406f92:	eba9 0306 	sub.w	r3, r9, r6
  406f96:	930e      	str	r3, [sp, #56]	; 0x38
  406f98:	e590      	b.n	406abc <_svfprintf_r+0x220>
  406f9a:	9311      	str	r3, [sp, #68]	; 0x44
  406f9c:	2a00      	cmp	r2, #0
  406f9e:	f040 86a3 	bne.w	407ce8 <_svfprintf_r+0x144c>
  406fa2:	4b7e      	ldr	r3, [pc, #504]	; (40719c <_svfprintf_r+0x900>)
  406fa4:	9318      	str	r3, [sp, #96]	; 0x60
  406fa6:	f01b 0f20 	tst.w	fp, #32
  406faa:	f43f aeef 	beq.w	406d8c <_svfprintf_r+0x4f0>
  406fae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406fb0:	3507      	adds	r5, #7
  406fb2:	f025 0307 	bic.w	r3, r5, #7
  406fb6:	f103 0208 	add.w	r2, r3, #8
  406fba:	f01b 0f01 	tst.w	fp, #1
  406fbe:	920f      	str	r2, [sp, #60]	; 0x3c
  406fc0:	e9d3 4500 	ldrd	r4, r5, [r3]
  406fc4:	f47f aef4 	bne.w	406db0 <_svfprintf_r+0x514>
  406fc8:	2302      	movs	r3, #2
  406fca:	e55a      	b.n	406a82 <_svfprintf_r+0x1e6>
  406fcc:	9311      	str	r3, [sp, #68]	; 0x44
  406fce:	2a00      	cmp	r2, #0
  406fd0:	f040 8686 	bne.w	407ce0 <_svfprintf_r+0x1444>
  406fd4:	f04b 0b10 	orr.w	fp, fp, #16
  406fd8:	f01b 0f20 	tst.w	fp, #32
  406fdc:	d0a1      	beq.n	406f22 <_svfprintf_r+0x686>
  406fde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406fe0:	3507      	adds	r5, #7
  406fe2:	f025 0507 	bic.w	r5, r5, #7
  406fe6:	e9d5 2300 	ldrd	r2, r3, [r5]
  406fea:	2a00      	cmp	r2, #0
  406fec:	f105 0108 	add.w	r1, r5, #8
  406ff0:	461d      	mov	r5, r3
  406ff2:	f173 0300 	sbcs.w	r3, r3, #0
  406ff6:	910f      	str	r1, [sp, #60]	; 0x3c
  406ff8:	4614      	mov	r4, r2
  406ffa:	daa6      	bge.n	406f4a <_svfprintf_r+0x6ae>
  406ffc:	272d      	movs	r7, #45	; 0x2d
  406ffe:	4264      	negs	r4, r4
  407000:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  407004:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407008:	2301      	movs	r3, #1
  40700a:	e53d      	b.n	406a88 <_svfprintf_r+0x1ec>
  40700c:	9311      	str	r3, [sp, #68]	; 0x44
  40700e:	2a00      	cmp	r2, #0
  407010:	f040 8662 	bne.w	407cd8 <_svfprintf_r+0x143c>
  407014:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407016:	3507      	adds	r5, #7
  407018:	f025 0307 	bic.w	r3, r5, #7
  40701c:	f103 0208 	add.w	r2, r3, #8
  407020:	920f      	str	r2, [sp, #60]	; 0x3c
  407022:	681a      	ldr	r2, [r3, #0]
  407024:	9215      	str	r2, [sp, #84]	; 0x54
  407026:	685b      	ldr	r3, [r3, #4]
  407028:	9314      	str	r3, [sp, #80]	; 0x50
  40702a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40702c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40702e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  407032:	4628      	mov	r0, r5
  407034:	4621      	mov	r1, r4
  407036:	f04f 32ff 	mov.w	r2, #4294967295
  40703a:	4b59      	ldr	r3, [pc, #356]	; (4071a0 <_svfprintf_r+0x904>)
  40703c:	f003 fa0a 	bl	40a454 <__aeabi_dcmpun>
  407040:	2800      	cmp	r0, #0
  407042:	f040 834a 	bne.w	4076da <_svfprintf_r+0xe3e>
  407046:	4628      	mov	r0, r5
  407048:	4621      	mov	r1, r4
  40704a:	f04f 32ff 	mov.w	r2, #4294967295
  40704e:	4b54      	ldr	r3, [pc, #336]	; (4071a0 <_svfprintf_r+0x904>)
  407050:	f003 f9e2 	bl	40a418 <__aeabi_dcmple>
  407054:	2800      	cmp	r0, #0
  407056:	f040 8340 	bne.w	4076da <_svfprintf_r+0xe3e>
  40705a:	a815      	add	r0, sp, #84	; 0x54
  40705c:	c80d      	ldmia	r0, {r0, r2, r3}
  40705e:	9914      	ldr	r1, [sp, #80]	; 0x50
  407060:	f003 f9d0 	bl	40a404 <__aeabi_dcmplt>
  407064:	2800      	cmp	r0, #0
  407066:	f040 8530 	bne.w	407aca <_svfprintf_r+0x122e>
  40706a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40706e:	4e4d      	ldr	r6, [pc, #308]	; (4071a4 <_svfprintf_r+0x908>)
  407070:	4b4d      	ldr	r3, [pc, #308]	; (4071a8 <_svfprintf_r+0x90c>)
  407072:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  407076:	9007      	str	r0, [sp, #28]
  407078:	9811      	ldr	r0, [sp, #68]	; 0x44
  40707a:	2203      	movs	r2, #3
  40707c:	2100      	movs	r1, #0
  40707e:	9208      	str	r2, [sp, #32]
  407080:	910a      	str	r1, [sp, #40]	; 0x28
  407082:	2847      	cmp	r0, #71	; 0x47
  407084:	bfd8      	it	le
  407086:	461e      	movle	r6, r3
  407088:	920e      	str	r2, [sp, #56]	; 0x38
  40708a:	9112      	str	r1, [sp, #72]	; 0x48
  40708c:	e51e      	b.n	406acc <_svfprintf_r+0x230>
  40708e:	f04b 0b08 	orr.w	fp, fp, #8
  407092:	f89a 3000 	ldrb.w	r3, [sl]
  407096:	e459      	b.n	40694c <_svfprintf_r+0xb0>
  407098:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40709c:	2300      	movs	r3, #0
  40709e:	461c      	mov	r4, r3
  4070a0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4070a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4070a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4070ac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4070b0:	2809      	cmp	r0, #9
  4070b2:	d9f5      	bls.n	4070a0 <_svfprintf_r+0x804>
  4070b4:	940d      	str	r4, [sp, #52]	; 0x34
  4070b6:	e44b      	b.n	406950 <_svfprintf_r+0xb4>
  4070b8:	f04b 0b10 	orr.w	fp, fp, #16
  4070bc:	9311      	str	r3, [sp, #68]	; 0x44
  4070be:	f01b 0320 	ands.w	r3, fp, #32
  4070c2:	f43f ae1d 	beq.w	406d00 <_svfprintf_r+0x464>
  4070c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4070c8:	3507      	adds	r5, #7
  4070ca:	f025 0307 	bic.w	r3, r5, #7
  4070ce:	f103 0208 	add.w	r2, r3, #8
  4070d2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4070d6:	920f      	str	r2, [sp, #60]	; 0x3c
  4070d8:	2300      	movs	r3, #0
  4070da:	e4d2      	b.n	406a82 <_svfprintf_r+0x1e6>
  4070dc:	9311      	str	r3, [sp, #68]	; 0x44
  4070de:	2a00      	cmp	r2, #0
  4070e0:	f040 85e7 	bne.w	407cb2 <_svfprintf_r+0x1416>
  4070e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4070e6:	2a00      	cmp	r2, #0
  4070e8:	f43f aca3 	beq.w	406a32 <_svfprintf_r+0x196>
  4070ec:	2300      	movs	r3, #0
  4070ee:	2101      	movs	r1, #1
  4070f0:	461f      	mov	r7, r3
  4070f2:	9108      	str	r1, [sp, #32]
  4070f4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4070f8:	f8cd b01c 	str.w	fp, [sp, #28]
  4070fc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  407100:	930a      	str	r3, [sp, #40]	; 0x28
  407102:	9312      	str	r3, [sp, #72]	; 0x48
  407104:	910e      	str	r1, [sp, #56]	; 0x38
  407106:	ae28      	add	r6, sp, #160	; 0xa0
  407108:	e4e4      	b.n	406ad4 <_svfprintf_r+0x238>
  40710a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40710c:	e534      	b.n	406b78 <_svfprintf_r+0x2dc>
  40710e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407110:	2b65      	cmp	r3, #101	; 0x65
  407112:	f340 80a7 	ble.w	407264 <_svfprintf_r+0x9c8>
  407116:	a815      	add	r0, sp, #84	; 0x54
  407118:	c80d      	ldmia	r0, {r0, r2, r3}
  40711a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40711c:	f003 f968 	bl	40a3f0 <__aeabi_dcmpeq>
  407120:	2800      	cmp	r0, #0
  407122:	f000 8150 	beq.w	4073c6 <_svfprintf_r+0xb2a>
  407126:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407128:	4a20      	ldr	r2, [pc, #128]	; (4071ac <_svfprintf_r+0x910>)
  40712a:	f8c8 2000 	str.w	r2, [r8]
  40712e:	3301      	adds	r3, #1
  407130:	3401      	adds	r4, #1
  407132:	2201      	movs	r2, #1
  407134:	2b07      	cmp	r3, #7
  407136:	9427      	str	r4, [sp, #156]	; 0x9c
  407138:	9326      	str	r3, [sp, #152]	; 0x98
  40713a:	f8c8 2004 	str.w	r2, [r8, #4]
  40713e:	f300 836a 	bgt.w	407816 <_svfprintf_r+0xf7a>
  407142:	f108 0808 	add.w	r8, r8, #8
  407146:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407148:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40714a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40714c:	4293      	cmp	r3, r2
  40714e:	db03      	blt.n	407158 <_svfprintf_r+0x8bc>
  407150:	9b07      	ldr	r3, [sp, #28]
  407152:	07dd      	lsls	r5, r3, #31
  407154:	f57f ad82 	bpl.w	406c5c <_svfprintf_r+0x3c0>
  407158:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40715a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40715c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40715e:	f8c8 2000 	str.w	r2, [r8]
  407162:	3301      	adds	r3, #1
  407164:	440c      	add	r4, r1
  407166:	2b07      	cmp	r3, #7
  407168:	f8c8 1004 	str.w	r1, [r8, #4]
  40716c:	9427      	str	r4, [sp, #156]	; 0x9c
  40716e:	9326      	str	r3, [sp, #152]	; 0x98
  407170:	f300 839e 	bgt.w	4078b0 <_svfprintf_r+0x1014>
  407174:	f108 0808 	add.w	r8, r8, #8
  407178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40717a:	1e5e      	subs	r6, r3, #1
  40717c:	2e00      	cmp	r6, #0
  40717e:	f77f ad6d 	ble.w	406c5c <_svfprintf_r+0x3c0>
  407182:	2e10      	cmp	r6, #16
  407184:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407186:	4d0a      	ldr	r5, [pc, #40]	; (4071b0 <_svfprintf_r+0x914>)
  407188:	f340 81f5 	ble.w	407576 <_svfprintf_r+0xcda>
  40718c:	4622      	mov	r2, r4
  40718e:	2710      	movs	r7, #16
  407190:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407194:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407196:	e013      	b.n	4071c0 <_svfprintf_r+0x924>
  407198:	0040afd4 	.word	0x0040afd4
  40719c:	0040afc0 	.word	0x0040afc0
  4071a0:	7fefffff 	.word	0x7fefffff
  4071a4:	0040afb4 	.word	0x0040afb4
  4071a8:	0040afb0 	.word	0x0040afb0
  4071ac:	0040aff0 	.word	0x0040aff0
  4071b0:	0040b004 	.word	0x0040b004
  4071b4:	f108 0808 	add.w	r8, r8, #8
  4071b8:	3e10      	subs	r6, #16
  4071ba:	2e10      	cmp	r6, #16
  4071bc:	f340 81da 	ble.w	407574 <_svfprintf_r+0xcd8>
  4071c0:	3301      	adds	r3, #1
  4071c2:	3210      	adds	r2, #16
  4071c4:	2b07      	cmp	r3, #7
  4071c6:	9227      	str	r2, [sp, #156]	; 0x9c
  4071c8:	9326      	str	r3, [sp, #152]	; 0x98
  4071ca:	e888 00a0 	stmia.w	r8, {r5, r7}
  4071ce:	ddf1      	ble.n	4071b4 <_svfprintf_r+0x918>
  4071d0:	aa25      	add	r2, sp, #148	; 0x94
  4071d2:	4621      	mov	r1, r4
  4071d4:	4658      	mov	r0, fp
  4071d6:	f002 ff97 	bl	40a108 <__ssprint_r>
  4071da:	2800      	cmp	r0, #0
  4071dc:	f47f ac30 	bne.w	406a40 <_svfprintf_r+0x1a4>
  4071e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4071e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4071e4:	46c8      	mov	r8, r9
  4071e6:	e7e7      	b.n	4071b8 <_svfprintf_r+0x91c>
  4071e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4071ea:	9a08      	ldr	r2, [sp, #32]
  4071ec:	1a9f      	subs	r7, r3, r2
  4071ee:	2f00      	cmp	r7, #0
  4071f0:	f77f ace5 	ble.w	406bbe <_svfprintf_r+0x322>
  4071f4:	2f10      	cmp	r7, #16
  4071f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4071f8:	4db6      	ldr	r5, [pc, #728]	; (4074d4 <_svfprintf_r+0xc38>)
  4071fa:	dd27      	ble.n	40724c <_svfprintf_r+0x9b0>
  4071fc:	4642      	mov	r2, r8
  4071fe:	4621      	mov	r1, r4
  407200:	46b0      	mov	r8, r6
  407202:	f04f 0b10 	mov.w	fp, #16
  407206:	462e      	mov	r6, r5
  407208:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40720a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40720c:	e004      	b.n	407218 <_svfprintf_r+0x97c>
  40720e:	3f10      	subs	r7, #16
  407210:	2f10      	cmp	r7, #16
  407212:	f102 0208 	add.w	r2, r2, #8
  407216:	dd15      	ble.n	407244 <_svfprintf_r+0x9a8>
  407218:	3301      	adds	r3, #1
  40721a:	3110      	adds	r1, #16
  40721c:	2b07      	cmp	r3, #7
  40721e:	9127      	str	r1, [sp, #156]	; 0x9c
  407220:	9326      	str	r3, [sp, #152]	; 0x98
  407222:	e882 0840 	stmia.w	r2, {r6, fp}
  407226:	ddf2      	ble.n	40720e <_svfprintf_r+0x972>
  407228:	aa25      	add	r2, sp, #148	; 0x94
  40722a:	4629      	mov	r1, r5
  40722c:	4620      	mov	r0, r4
  40722e:	f002 ff6b 	bl	40a108 <__ssprint_r>
  407232:	2800      	cmp	r0, #0
  407234:	f47f ac04 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407238:	3f10      	subs	r7, #16
  40723a:	2f10      	cmp	r7, #16
  40723c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40723e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407240:	464a      	mov	r2, r9
  407242:	dce9      	bgt.n	407218 <_svfprintf_r+0x97c>
  407244:	4635      	mov	r5, r6
  407246:	460c      	mov	r4, r1
  407248:	4646      	mov	r6, r8
  40724a:	4690      	mov	r8, r2
  40724c:	3301      	adds	r3, #1
  40724e:	443c      	add	r4, r7
  407250:	2b07      	cmp	r3, #7
  407252:	9427      	str	r4, [sp, #156]	; 0x9c
  407254:	9326      	str	r3, [sp, #152]	; 0x98
  407256:	e888 00a0 	stmia.w	r8, {r5, r7}
  40725a:	f300 8232 	bgt.w	4076c2 <_svfprintf_r+0xe26>
  40725e:	f108 0808 	add.w	r8, r8, #8
  407262:	e4ac      	b.n	406bbe <_svfprintf_r+0x322>
  407264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407266:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407268:	2b01      	cmp	r3, #1
  40726a:	f340 81fe 	ble.w	40766a <_svfprintf_r+0xdce>
  40726e:	3701      	adds	r7, #1
  407270:	3401      	adds	r4, #1
  407272:	2301      	movs	r3, #1
  407274:	2f07      	cmp	r7, #7
  407276:	9427      	str	r4, [sp, #156]	; 0x9c
  407278:	9726      	str	r7, [sp, #152]	; 0x98
  40727a:	f8c8 6000 	str.w	r6, [r8]
  40727e:	f8c8 3004 	str.w	r3, [r8, #4]
  407282:	f300 8203 	bgt.w	40768c <_svfprintf_r+0xdf0>
  407286:	f108 0808 	add.w	r8, r8, #8
  40728a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40728c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40728e:	f8c8 3000 	str.w	r3, [r8]
  407292:	3701      	adds	r7, #1
  407294:	4414      	add	r4, r2
  407296:	2f07      	cmp	r7, #7
  407298:	9427      	str	r4, [sp, #156]	; 0x9c
  40729a:	9726      	str	r7, [sp, #152]	; 0x98
  40729c:	f8c8 2004 	str.w	r2, [r8, #4]
  4072a0:	f300 8200 	bgt.w	4076a4 <_svfprintf_r+0xe08>
  4072a4:	f108 0808 	add.w	r8, r8, #8
  4072a8:	a815      	add	r0, sp, #84	; 0x54
  4072aa:	c80d      	ldmia	r0, {r0, r2, r3}
  4072ac:	9914      	ldr	r1, [sp, #80]	; 0x50
  4072ae:	f003 f89f 	bl	40a3f0 <__aeabi_dcmpeq>
  4072b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4072b4:	2800      	cmp	r0, #0
  4072b6:	f040 8101 	bne.w	4074bc <_svfprintf_r+0xc20>
  4072ba:	3b01      	subs	r3, #1
  4072bc:	3701      	adds	r7, #1
  4072be:	3601      	adds	r6, #1
  4072c0:	441c      	add	r4, r3
  4072c2:	2f07      	cmp	r7, #7
  4072c4:	9726      	str	r7, [sp, #152]	; 0x98
  4072c6:	9427      	str	r4, [sp, #156]	; 0x9c
  4072c8:	f8c8 6000 	str.w	r6, [r8]
  4072cc:	f8c8 3004 	str.w	r3, [r8, #4]
  4072d0:	f300 8127 	bgt.w	407522 <_svfprintf_r+0xc86>
  4072d4:	f108 0808 	add.w	r8, r8, #8
  4072d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4072da:	f8c8 2004 	str.w	r2, [r8, #4]
  4072de:	3701      	adds	r7, #1
  4072e0:	4414      	add	r4, r2
  4072e2:	ab21      	add	r3, sp, #132	; 0x84
  4072e4:	2f07      	cmp	r7, #7
  4072e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4072e8:	9726      	str	r7, [sp, #152]	; 0x98
  4072ea:	f8c8 3000 	str.w	r3, [r8]
  4072ee:	f77f acb3 	ble.w	406c58 <_svfprintf_r+0x3bc>
  4072f2:	aa25      	add	r2, sp, #148	; 0x94
  4072f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4072f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4072f8:	f002 ff06 	bl	40a108 <__ssprint_r>
  4072fc:	2800      	cmp	r0, #0
  4072fe:	f47f ab9f 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407302:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407304:	46c8      	mov	r8, r9
  407306:	e4a9      	b.n	406c5c <_svfprintf_r+0x3c0>
  407308:	aa25      	add	r2, sp, #148	; 0x94
  40730a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40730c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40730e:	f002 fefb 	bl	40a108 <__ssprint_r>
  407312:	2800      	cmp	r0, #0
  407314:	f43f aceb 	beq.w	406cee <_svfprintf_r+0x452>
  407318:	f7ff bb92 	b.w	406a40 <_svfprintf_r+0x1a4>
  40731c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407320:	2b01      	cmp	r3, #1
  407322:	f000 8134 	beq.w	40758e <_svfprintf_r+0xcf2>
  407326:	2b02      	cmp	r3, #2
  407328:	d125      	bne.n	407376 <_svfprintf_r+0xada>
  40732a:	f8cd b01c 	str.w	fp, [sp, #28]
  40732e:	2400      	movs	r4, #0
  407330:	2500      	movs	r5, #0
  407332:	e61e      	b.n	406f72 <_svfprintf_r+0x6d6>
  407334:	aa25      	add	r2, sp, #148	; 0x94
  407336:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407338:	980c      	ldr	r0, [sp, #48]	; 0x30
  40733a:	f002 fee5 	bl	40a108 <__ssprint_r>
  40733e:	2800      	cmp	r0, #0
  407340:	f47f ab7e 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407344:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407346:	46c8      	mov	r8, r9
  407348:	e475      	b.n	406c36 <_svfprintf_r+0x39a>
  40734a:	aa25      	add	r2, sp, #148	; 0x94
  40734c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40734e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407350:	f002 feda 	bl	40a108 <__ssprint_r>
  407354:	2800      	cmp	r0, #0
  407356:	f47f ab73 	bne.w	406a40 <_svfprintf_r+0x1a4>
  40735a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40735c:	46c8      	mov	r8, r9
  40735e:	e41b      	b.n	406b98 <_svfprintf_r+0x2fc>
  407360:	aa25      	add	r2, sp, #148	; 0x94
  407362:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407364:	980c      	ldr	r0, [sp, #48]	; 0x30
  407366:	f002 fecf 	bl	40a108 <__ssprint_r>
  40736a:	2800      	cmp	r0, #0
  40736c:	f47f ab68 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407370:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407372:	46c8      	mov	r8, r9
  407374:	e420      	b.n	406bb8 <_svfprintf_r+0x31c>
  407376:	f8cd b01c 	str.w	fp, [sp, #28]
  40737a:	2400      	movs	r4, #0
  40737c:	2500      	movs	r5, #0
  40737e:	4649      	mov	r1, r9
  407380:	e000      	b.n	407384 <_svfprintf_r+0xae8>
  407382:	4631      	mov	r1, r6
  407384:	08e2      	lsrs	r2, r4, #3
  407386:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40738a:	08e8      	lsrs	r0, r5, #3
  40738c:	f004 0307 	and.w	r3, r4, #7
  407390:	4605      	mov	r5, r0
  407392:	4614      	mov	r4, r2
  407394:	3330      	adds	r3, #48	; 0x30
  407396:	ea54 0205 	orrs.w	r2, r4, r5
  40739a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40739e:	f101 36ff 	add.w	r6, r1, #4294967295
  4073a2:	d1ee      	bne.n	407382 <_svfprintf_r+0xae6>
  4073a4:	9a07      	ldr	r2, [sp, #28]
  4073a6:	07d2      	lsls	r2, r2, #31
  4073a8:	f57f adf3 	bpl.w	406f92 <_svfprintf_r+0x6f6>
  4073ac:	2b30      	cmp	r3, #48	; 0x30
  4073ae:	f43f adf0 	beq.w	406f92 <_svfprintf_r+0x6f6>
  4073b2:	3902      	subs	r1, #2
  4073b4:	2330      	movs	r3, #48	; 0x30
  4073b6:	f806 3c01 	strb.w	r3, [r6, #-1]
  4073ba:	eba9 0301 	sub.w	r3, r9, r1
  4073be:	930e      	str	r3, [sp, #56]	; 0x38
  4073c0:	460e      	mov	r6, r1
  4073c2:	f7ff bb7b 	b.w	406abc <_svfprintf_r+0x220>
  4073c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4073c8:	2900      	cmp	r1, #0
  4073ca:	f340 822e 	ble.w	40782a <_svfprintf_r+0xf8e>
  4073ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4073d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4073d2:	4293      	cmp	r3, r2
  4073d4:	bfa8      	it	ge
  4073d6:	4613      	movge	r3, r2
  4073d8:	2b00      	cmp	r3, #0
  4073da:	461f      	mov	r7, r3
  4073dc:	dd0d      	ble.n	4073fa <_svfprintf_r+0xb5e>
  4073de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4073e0:	f8c8 6000 	str.w	r6, [r8]
  4073e4:	3301      	adds	r3, #1
  4073e6:	443c      	add	r4, r7
  4073e8:	2b07      	cmp	r3, #7
  4073ea:	9427      	str	r4, [sp, #156]	; 0x9c
  4073ec:	f8c8 7004 	str.w	r7, [r8, #4]
  4073f0:	9326      	str	r3, [sp, #152]	; 0x98
  4073f2:	f300 831f 	bgt.w	407a34 <_svfprintf_r+0x1198>
  4073f6:	f108 0808 	add.w	r8, r8, #8
  4073fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4073fc:	2f00      	cmp	r7, #0
  4073fe:	bfa8      	it	ge
  407400:	1bdb      	subge	r3, r3, r7
  407402:	2b00      	cmp	r3, #0
  407404:	461f      	mov	r7, r3
  407406:	f340 80d6 	ble.w	4075b6 <_svfprintf_r+0xd1a>
  40740a:	2f10      	cmp	r7, #16
  40740c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40740e:	4d31      	ldr	r5, [pc, #196]	; (4074d4 <_svfprintf_r+0xc38>)
  407410:	f340 81ed 	ble.w	4077ee <_svfprintf_r+0xf52>
  407414:	4642      	mov	r2, r8
  407416:	4621      	mov	r1, r4
  407418:	46b0      	mov	r8, r6
  40741a:	f04f 0b10 	mov.w	fp, #16
  40741e:	462e      	mov	r6, r5
  407420:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407422:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407424:	e004      	b.n	407430 <_svfprintf_r+0xb94>
  407426:	3208      	adds	r2, #8
  407428:	3f10      	subs	r7, #16
  40742a:	2f10      	cmp	r7, #16
  40742c:	f340 81db 	ble.w	4077e6 <_svfprintf_r+0xf4a>
  407430:	3301      	adds	r3, #1
  407432:	3110      	adds	r1, #16
  407434:	2b07      	cmp	r3, #7
  407436:	9127      	str	r1, [sp, #156]	; 0x9c
  407438:	9326      	str	r3, [sp, #152]	; 0x98
  40743a:	e882 0840 	stmia.w	r2, {r6, fp}
  40743e:	ddf2      	ble.n	407426 <_svfprintf_r+0xb8a>
  407440:	aa25      	add	r2, sp, #148	; 0x94
  407442:	4629      	mov	r1, r5
  407444:	4620      	mov	r0, r4
  407446:	f002 fe5f 	bl	40a108 <__ssprint_r>
  40744a:	2800      	cmp	r0, #0
  40744c:	f47f aaf8 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407450:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407452:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407454:	464a      	mov	r2, r9
  407456:	e7e7      	b.n	407428 <_svfprintf_r+0xb8c>
  407458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40745a:	930e      	str	r3, [sp, #56]	; 0x38
  40745c:	464e      	mov	r6, r9
  40745e:	f7ff bb2d 	b.w	406abc <_svfprintf_r+0x220>
  407462:	2d00      	cmp	r5, #0
  407464:	bf08      	it	eq
  407466:	2c0a      	cmpeq	r4, #10
  407468:	f0c0 808f 	bcc.w	40758a <_svfprintf_r+0xcee>
  40746c:	464e      	mov	r6, r9
  40746e:	4620      	mov	r0, r4
  407470:	4629      	mov	r1, r5
  407472:	220a      	movs	r2, #10
  407474:	2300      	movs	r3, #0
  407476:	f7fe fda1 	bl	405fbc <__aeabi_uldivmod>
  40747a:	3230      	adds	r2, #48	; 0x30
  40747c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  407480:	4620      	mov	r0, r4
  407482:	4629      	mov	r1, r5
  407484:	2300      	movs	r3, #0
  407486:	220a      	movs	r2, #10
  407488:	f7fe fd98 	bl	405fbc <__aeabi_uldivmod>
  40748c:	4604      	mov	r4, r0
  40748e:	460d      	mov	r5, r1
  407490:	ea54 0305 	orrs.w	r3, r4, r5
  407494:	d1eb      	bne.n	40746e <_svfprintf_r+0xbd2>
  407496:	eba9 0306 	sub.w	r3, r9, r6
  40749a:	930e      	str	r3, [sp, #56]	; 0x38
  40749c:	f7ff bb0e 	b.w	406abc <_svfprintf_r+0x220>
  4074a0:	aa25      	add	r2, sp, #148	; 0x94
  4074a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4074a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4074a6:	f002 fe2f 	bl	40a108 <__ssprint_r>
  4074aa:	2800      	cmp	r0, #0
  4074ac:	f47f aac8 	bne.w	406a40 <_svfprintf_r+0x1a4>
  4074b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4074b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4074b6:	46c8      	mov	r8, r9
  4074b8:	f7ff bb5e 	b.w	406b78 <_svfprintf_r+0x2dc>
  4074bc:	1e5e      	subs	r6, r3, #1
  4074be:	2e00      	cmp	r6, #0
  4074c0:	f77f af0a 	ble.w	4072d8 <_svfprintf_r+0xa3c>
  4074c4:	2e10      	cmp	r6, #16
  4074c6:	4d03      	ldr	r5, [pc, #12]	; (4074d4 <_svfprintf_r+0xc38>)
  4074c8:	dd22      	ble.n	407510 <_svfprintf_r+0xc74>
  4074ca:	4622      	mov	r2, r4
  4074cc:	f04f 0b10 	mov.w	fp, #16
  4074d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4074d2:	e006      	b.n	4074e2 <_svfprintf_r+0xc46>
  4074d4:	0040b004 	.word	0x0040b004
  4074d8:	3e10      	subs	r6, #16
  4074da:	2e10      	cmp	r6, #16
  4074dc:	f108 0808 	add.w	r8, r8, #8
  4074e0:	dd15      	ble.n	40750e <_svfprintf_r+0xc72>
  4074e2:	3701      	adds	r7, #1
  4074e4:	3210      	adds	r2, #16
  4074e6:	2f07      	cmp	r7, #7
  4074e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4074ea:	9726      	str	r7, [sp, #152]	; 0x98
  4074ec:	e888 0820 	stmia.w	r8, {r5, fp}
  4074f0:	ddf2      	ble.n	4074d8 <_svfprintf_r+0xc3c>
  4074f2:	aa25      	add	r2, sp, #148	; 0x94
  4074f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4074f6:	4620      	mov	r0, r4
  4074f8:	f002 fe06 	bl	40a108 <__ssprint_r>
  4074fc:	2800      	cmp	r0, #0
  4074fe:	f47f aa9f 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407502:	3e10      	subs	r6, #16
  407504:	2e10      	cmp	r6, #16
  407506:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407508:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40750a:	46c8      	mov	r8, r9
  40750c:	dce9      	bgt.n	4074e2 <_svfprintf_r+0xc46>
  40750e:	4614      	mov	r4, r2
  407510:	3701      	adds	r7, #1
  407512:	4434      	add	r4, r6
  407514:	2f07      	cmp	r7, #7
  407516:	9427      	str	r4, [sp, #156]	; 0x9c
  407518:	9726      	str	r7, [sp, #152]	; 0x98
  40751a:	e888 0060 	stmia.w	r8, {r5, r6}
  40751e:	f77f aed9 	ble.w	4072d4 <_svfprintf_r+0xa38>
  407522:	aa25      	add	r2, sp, #148	; 0x94
  407524:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407526:	980c      	ldr	r0, [sp, #48]	; 0x30
  407528:	f002 fdee 	bl	40a108 <__ssprint_r>
  40752c:	2800      	cmp	r0, #0
  40752e:	f47f aa87 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407532:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407534:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407536:	46c8      	mov	r8, r9
  407538:	e6ce      	b.n	4072d8 <_svfprintf_r+0xa3c>
  40753a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40753c:	6814      	ldr	r4, [r2, #0]
  40753e:	4613      	mov	r3, r2
  407540:	3304      	adds	r3, #4
  407542:	17e5      	asrs	r5, r4, #31
  407544:	930f      	str	r3, [sp, #60]	; 0x3c
  407546:	4622      	mov	r2, r4
  407548:	462b      	mov	r3, r5
  40754a:	e4fa      	b.n	406f42 <_svfprintf_r+0x6a6>
  40754c:	3204      	adds	r2, #4
  40754e:	681c      	ldr	r4, [r3, #0]
  407550:	920f      	str	r2, [sp, #60]	; 0x3c
  407552:	2301      	movs	r3, #1
  407554:	2500      	movs	r5, #0
  407556:	f7ff ba94 	b.w	406a82 <_svfprintf_r+0x1e6>
  40755a:	681c      	ldr	r4, [r3, #0]
  40755c:	3304      	adds	r3, #4
  40755e:	930f      	str	r3, [sp, #60]	; 0x3c
  407560:	2500      	movs	r5, #0
  407562:	e421      	b.n	406da8 <_svfprintf_r+0x50c>
  407564:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407566:	460a      	mov	r2, r1
  407568:	3204      	adds	r2, #4
  40756a:	680c      	ldr	r4, [r1, #0]
  40756c:	920f      	str	r2, [sp, #60]	; 0x3c
  40756e:	2500      	movs	r5, #0
  407570:	f7ff ba87 	b.w	406a82 <_svfprintf_r+0x1e6>
  407574:	4614      	mov	r4, r2
  407576:	3301      	adds	r3, #1
  407578:	4434      	add	r4, r6
  40757a:	2b07      	cmp	r3, #7
  40757c:	9427      	str	r4, [sp, #156]	; 0x9c
  40757e:	9326      	str	r3, [sp, #152]	; 0x98
  407580:	e888 0060 	stmia.w	r8, {r5, r6}
  407584:	f77f ab68 	ble.w	406c58 <_svfprintf_r+0x3bc>
  407588:	e6b3      	b.n	4072f2 <_svfprintf_r+0xa56>
  40758a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40758e:	f8cd b01c 	str.w	fp, [sp, #28]
  407592:	ae42      	add	r6, sp, #264	; 0x108
  407594:	3430      	adds	r4, #48	; 0x30
  407596:	2301      	movs	r3, #1
  407598:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40759c:	930e      	str	r3, [sp, #56]	; 0x38
  40759e:	f7ff ba8d 	b.w	406abc <_svfprintf_r+0x220>
  4075a2:	aa25      	add	r2, sp, #148	; 0x94
  4075a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4075a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4075a8:	f002 fdae 	bl	40a108 <__ssprint_r>
  4075ac:	2800      	cmp	r0, #0
  4075ae:	f47f aa47 	bne.w	406a40 <_svfprintf_r+0x1a4>
  4075b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4075b4:	46c8      	mov	r8, r9
  4075b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4075b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4075ba:	429a      	cmp	r2, r3
  4075bc:	db44      	blt.n	407648 <_svfprintf_r+0xdac>
  4075be:	9b07      	ldr	r3, [sp, #28]
  4075c0:	07d9      	lsls	r1, r3, #31
  4075c2:	d441      	bmi.n	407648 <_svfprintf_r+0xdac>
  4075c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4075c6:	9812      	ldr	r0, [sp, #72]	; 0x48
  4075c8:	1a9a      	subs	r2, r3, r2
  4075ca:	1a1d      	subs	r5, r3, r0
  4075cc:	4295      	cmp	r5, r2
  4075ce:	bfa8      	it	ge
  4075d0:	4615      	movge	r5, r2
  4075d2:	2d00      	cmp	r5, #0
  4075d4:	dd0e      	ble.n	4075f4 <_svfprintf_r+0xd58>
  4075d6:	9926      	ldr	r1, [sp, #152]	; 0x98
  4075d8:	f8c8 5004 	str.w	r5, [r8, #4]
  4075dc:	3101      	adds	r1, #1
  4075de:	4406      	add	r6, r0
  4075e0:	442c      	add	r4, r5
  4075e2:	2907      	cmp	r1, #7
  4075e4:	f8c8 6000 	str.w	r6, [r8]
  4075e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4075ea:	9126      	str	r1, [sp, #152]	; 0x98
  4075ec:	f300 823b 	bgt.w	407a66 <_svfprintf_r+0x11ca>
  4075f0:	f108 0808 	add.w	r8, r8, #8
  4075f4:	2d00      	cmp	r5, #0
  4075f6:	bfac      	ite	ge
  4075f8:	1b56      	subge	r6, r2, r5
  4075fa:	4616      	movlt	r6, r2
  4075fc:	2e00      	cmp	r6, #0
  4075fe:	f77f ab2d 	ble.w	406c5c <_svfprintf_r+0x3c0>
  407602:	2e10      	cmp	r6, #16
  407604:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407606:	4db0      	ldr	r5, [pc, #704]	; (4078c8 <_svfprintf_r+0x102c>)
  407608:	ddb5      	ble.n	407576 <_svfprintf_r+0xcda>
  40760a:	4622      	mov	r2, r4
  40760c:	2710      	movs	r7, #16
  40760e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407612:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407614:	e004      	b.n	407620 <_svfprintf_r+0xd84>
  407616:	f108 0808 	add.w	r8, r8, #8
  40761a:	3e10      	subs	r6, #16
  40761c:	2e10      	cmp	r6, #16
  40761e:	dda9      	ble.n	407574 <_svfprintf_r+0xcd8>
  407620:	3301      	adds	r3, #1
  407622:	3210      	adds	r2, #16
  407624:	2b07      	cmp	r3, #7
  407626:	9227      	str	r2, [sp, #156]	; 0x9c
  407628:	9326      	str	r3, [sp, #152]	; 0x98
  40762a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40762e:	ddf2      	ble.n	407616 <_svfprintf_r+0xd7a>
  407630:	aa25      	add	r2, sp, #148	; 0x94
  407632:	4621      	mov	r1, r4
  407634:	4658      	mov	r0, fp
  407636:	f002 fd67 	bl	40a108 <__ssprint_r>
  40763a:	2800      	cmp	r0, #0
  40763c:	f47f aa00 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407640:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407642:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407644:	46c8      	mov	r8, r9
  407646:	e7e8      	b.n	40761a <_svfprintf_r+0xd7e>
  407648:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40764a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40764c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40764e:	f8c8 1000 	str.w	r1, [r8]
  407652:	3301      	adds	r3, #1
  407654:	4404      	add	r4, r0
  407656:	2b07      	cmp	r3, #7
  407658:	9427      	str	r4, [sp, #156]	; 0x9c
  40765a:	f8c8 0004 	str.w	r0, [r8, #4]
  40765e:	9326      	str	r3, [sp, #152]	; 0x98
  407660:	f300 81f5 	bgt.w	407a4e <_svfprintf_r+0x11b2>
  407664:	f108 0808 	add.w	r8, r8, #8
  407668:	e7ac      	b.n	4075c4 <_svfprintf_r+0xd28>
  40766a:	9b07      	ldr	r3, [sp, #28]
  40766c:	07da      	lsls	r2, r3, #31
  40766e:	f53f adfe 	bmi.w	40726e <_svfprintf_r+0x9d2>
  407672:	3701      	adds	r7, #1
  407674:	3401      	adds	r4, #1
  407676:	2301      	movs	r3, #1
  407678:	2f07      	cmp	r7, #7
  40767a:	9427      	str	r4, [sp, #156]	; 0x9c
  40767c:	9726      	str	r7, [sp, #152]	; 0x98
  40767e:	f8c8 6000 	str.w	r6, [r8]
  407682:	f8c8 3004 	str.w	r3, [r8, #4]
  407686:	f77f ae25 	ble.w	4072d4 <_svfprintf_r+0xa38>
  40768a:	e74a      	b.n	407522 <_svfprintf_r+0xc86>
  40768c:	aa25      	add	r2, sp, #148	; 0x94
  40768e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407690:	980c      	ldr	r0, [sp, #48]	; 0x30
  407692:	f002 fd39 	bl	40a108 <__ssprint_r>
  407696:	2800      	cmp	r0, #0
  407698:	f47f a9d2 	bne.w	406a40 <_svfprintf_r+0x1a4>
  40769c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40769e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4076a0:	46c8      	mov	r8, r9
  4076a2:	e5f2      	b.n	40728a <_svfprintf_r+0x9ee>
  4076a4:	aa25      	add	r2, sp, #148	; 0x94
  4076a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4076a8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4076aa:	f002 fd2d 	bl	40a108 <__ssprint_r>
  4076ae:	2800      	cmp	r0, #0
  4076b0:	f47f a9c6 	bne.w	406a40 <_svfprintf_r+0x1a4>
  4076b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4076b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4076b8:	46c8      	mov	r8, r9
  4076ba:	e5f5      	b.n	4072a8 <_svfprintf_r+0xa0c>
  4076bc:	464e      	mov	r6, r9
  4076be:	f7ff b9fd 	b.w	406abc <_svfprintf_r+0x220>
  4076c2:	aa25      	add	r2, sp, #148	; 0x94
  4076c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4076c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4076c8:	f002 fd1e 	bl	40a108 <__ssprint_r>
  4076cc:	2800      	cmp	r0, #0
  4076ce:	f47f a9b7 	bne.w	406a40 <_svfprintf_r+0x1a4>
  4076d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4076d4:	46c8      	mov	r8, r9
  4076d6:	f7ff ba72 	b.w	406bbe <_svfprintf_r+0x322>
  4076da:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4076dc:	4622      	mov	r2, r4
  4076de:	4620      	mov	r0, r4
  4076e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4076e2:	4623      	mov	r3, r4
  4076e4:	4621      	mov	r1, r4
  4076e6:	f002 feb5 	bl	40a454 <__aeabi_dcmpun>
  4076ea:	2800      	cmp	r0, #0
  4076ec:	f040 8286 	bne.w	407bfc <_svfprintf_r+0x1360>
  4076f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4076f2:	3301      	adds	r3, #1
  4076f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4076f6:	f023 0320 	bic.w	r3, r3, #32
  4076fa:	930e      	str	r3, [sp, #56]	; 0x38
  4076fc:	f000 81e2 	beq.w	407ac4 <_svfprintf_r+0x1228>
  407700:	2b47      	cmp	r3, #71	; 0x47
  407702:	f000 811e 	beq.w	407942 <_svfprintf_r+0x10a6>
  407706:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40770a:	9307      	str	r3, [sp, #28]
  40770c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40770e:	1e1f      	subs	r7, r3, #0
  407710:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407712:	9308      	str	r3, [sp, #32]
  407714:	bfbb      	ittet	lt
  407716:	463b      	movlt	r3, r7
  407718:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40771c:	2300      	movge	r3, #0
  40771e:	232d      	movlt	r3, #45	; 0x2d
  407720:	9310      	str	r3, [sp, #64]	; 0x40
  407722:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407724:	2b66      	cmp	r3, #102	; 0x66
  407726:	f000 81bb 	beq.w	407aa0 <_svfprintf_r+0x1204>
  40772a:	2b46      	cmp	r3, #70	; 0x46
  40772c:	f000 80df 	beq.w	4078ee <_svfprintf_r+0x1052>
  407730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407732:	9a08      	ldr	r2, [sp, #32]
  407734:	2b45      	cmp	r3, #69	; 0x45
  407736:	bf0c      	ite	eq
  407738:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40773a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40773c:	a823      	add	r0, sp, #140	; 0x8c
  40773e:	a920      	add	r1, sp, #128	; 0x80
  407740:	bf08      	it	eq
  407742:	1c5d      	addeq	r5, r3, #1
  407744:	9004      	str	r0, [sp, #16]
  407746:	9103      	str	r1, [sp, #12]
  407748:	a81f      	add	r0, sp, #124	; 0x7c
  40774a:	2102      	movs	r1, #2
  40774c:	463b      	mov	r3, r7
  40774e:	9002      	str	r0, [sp, #8]
  407750:	9501      	str	r5, [sp, #4]
  407752:	9100      	str	r1, [sp, #0]
  407754:	980c      	ldr	r0, [sp, #48]	; 0x30
  407756:	f000 fb73 	bl	407e40 <_dtoa_r>
  40775a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40775c:	2b67      	cmp	r3, #103	; 0x67
  40775e:	4606      	mov	r6, r0
  407760:	f040 81e0 	bne.w	407b24 <_svfprintf_r+0x1288>
  407764:	f01b 0f01 	tst.w	fp, #1
  407768:	f000 8246 	beq.w	407bf8 <_svfprintf_r+0x135c>
  40776c:	1974      	adds	r4, r6, r5
  40776e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407770:	9808      	ldr	r0, [sp, #32]
  407772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407774:	4639      	mov	r1, r7
  407776:	f002 fe3b 	bl	40a3f0 <__aeabi_dcmpeq>
  40777a:	2800      	cmp	r0, #0
  40777c:	f040 8165 	bne.w	407a4a <_svfprintf_r+0x11ae>
  407780:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407782:	42a3      	cmp	r3, r4
  407784:	d206      	bcs.n	407794 <_svfprintf_r+0xef8>
  407786:	2130      	movs	r1, #48	; 0x30
  407788:	1c5a      	adds	r2, r3, #1
  40778a:	9223      	str	r2, [sp, #140]	; 0x8c
  40778c:	7019      	strb	r1, [r3, #0]
  40778e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407790:	429c      	cmp	r4, r3
  407792:	d8f9      	bhi.n	407788 <_svfprintf_r+0xeec>
  407794:	1b9b      	subs	r3, r3, r6
  407796:	9313      	str	r3, [sp, #76]	; 0x4c
  407798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40779a:	2b47      	cmp	r3, #71	; 0x47
  40779c:	f000 80e9 	beq.w	407972 <_svfprintf_r+0x10d6>
  4077a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4077a2:	2b65      	cmp	r3, #101	; 0x65
  4077a4:	f340 81cd 	ble.w	407b42 <_svfprintf_r+0x12a6>
  4077a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4077aa:	2b66      	cmp	r3, #102	; 0x66
  4077ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4077ae:	9312      	str	r3, [sp, #72]	; 0x48
  4077b0:	f000 819e 	beq.w	407af0 <_svfprintf_r+0x1254>
  4077b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4077b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4077b8:	4619      	mov	r1, r3
  4077ba:	4291      	cmp	r1, r2
  4077bc:	f300 818a 	bgt.w	407ad4 <_svfprintf_r+0x1238>
  4077c0:	f01b 0f01 	tst.w	fp, #1
  4077c4:	f040 8213 	bne.w	407bee <_svfprintf_r+0x1352>
  4077c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4077cc:	9308      	str	r3, [sp, #32]
  4077ce:	2367      	movs	r3, #103	; 0x67
  4077d0:	920e      	str	r2, [sp, #56]	; 0x38
  4077d2:	9311      	str	r3, [sp, #68]	; 0x44
  4077d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4077d6:	2b00      	cmp	r3, #0
  4077d8:	f040 80c4 	bne.w	407964 <_svfprintf_r+0x10c8>
  4077dc:	930a      	str	r3, [sp, #40]	; 0x28
  4077de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4077e2:	f7ff b973 	b.w	406acc <_svfprintf_r+0x230>
  4077e6:	4635      	mov	r5, r6
  4077e8:	460c      	mov	r4, r1
  4077ea:	4646      	mov	r6, r8
  4077ec:	4690      	mov	r8, r2
  4077ee:	3301      	adds	r3, #1
  4077f0:	443c      	add	r4, r7
  4077f2:	2b07      	cmp	r3, #7
  4077f4:	9427      	str	r4, [sp, #156]	; 0x9c
  4077f6:	9326      	str	r3, [sp, #152]	; 0x98
  4077f8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4077fc:	f73f aed1 	bgt.w	4075a2 <_svfprintf_r+0xd06>
  407800:	f108 0808 	add.w	r8, r8, #8
  407804:	e6d7      	b.n	4075b6 <_svfprintf_r+0xd1a>
  407806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407808:	6813      	ldr	r3, [r2, #0]
  40780a:	3204      	adds	r2, #4
  40780c:	920f      	str	r2, [sp, #60]	; 0x3c
  40780e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407810:	601a      	str	r2, [r3, #0]
  407812:	f7ff b86a 	b.w	4068ea <_svfprintf_r+0x4e>
  407816:	aa25      	add	r2, sp, #148	; 0x94
  407818:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40781a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40781c:	f002 fc74 	bl	40a108 <__ssprint_r>
  407820:	2800      	cmp	r0, #0
  407822:	f47f a90d 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407826:	46c8      	mov	r8, r9
  407828:	e48d      	b.n	407146 <_svfprintf_r+0x8aa>
  40782a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40782c:	4a27      	ldr	r2, [pc, #156]	; (4078cc <_svfprintf_r+0x1030>)
  40782e:	f8c8 2000 	str.w	r2, [r8]
  407832:	3301      	adds	r3, #1
  407834:	3401      	adds	r4, #1
  407836:	2201      	movs	r2, #1
  407838:	2b07      	cmp	r3, #7
  40783a:	9427      	str	r4, [sp, #156]	; 0x9c
  40783c:	9326      	str	r3, [sp, #152]	; 0x98
  40783e:	f8c8 2004 	str.w	r2, [r8, #4]
  407842:	dc72      	bgt.n	40792a <_svfprintf_r+0x108e>
  407844:	f108 0808 	add.w	r8, r8, #8
  407848:	b929      	cbnz	r1, 407856 <_svfprintf_r+0xfba>
  40784a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40784c:	b91b      	cbnz	r3, 407856 <_svfprintf_r+0xfba>
  40784e:	9b07      	ldr	r3, [sp, #28]
  407850:	07d8      	lsls	r0, r3, #31
  407852:	f57f aa03 	bpl.w	406c5c <_svfprintf_r+0x3c0>
  407856:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407858:	9819      	ldr	r0, [sp, #100]	; 0x64
  40785a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40785c:	f8c8 2000 	str.w	r2, [r8]
  407860:	3301      	adds	r3, #1
  407862:	4602      	mov	r2, r0
  407864:	4422      	add	r2, r4
  407866:	2b07      	cmp	r3, #7
  407868:	9227      	str	r2, [sp, #156]	; 0x9c
  40786a:	f8c8 0004 	str.w	r0, [r8, #4]
  40786e:	9326      	str	r3, [sp, #152]	; 0x98
  407870:	f300 818d 	bgt.w	407b8e <_svfprintf_r+0x12f2>
  407874:	f108 0808 	add.w	r8, r8, #8
  407878:	2900      	cmp	r1, #0
  40787a:	f2c0 8165 	blt.w	407b48 <_svfprintf_r+0x12ac>
  40787e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  407880:	f8c8 6000 	str.w	r6, [r8]
  407884:	3301      	adds	r3, #1
  407886:	188c      	adds	r4, r1, r2
  407888:	2b07      	cmp	r3, #7
  40788a:	9427      	str	r4, [sp, #156]	; 0x9c
  40788c:	9326      	str	r3, [sp, #152]	; 0x98
  40788e:	f8c8 1004 	str.w	r1, [r8, #4]
  407892:	f77f a9e1 	ble.w	406c58 <_svfprintf_r+0x3bc>
  407896:	e52c      	b.n	4072f2 <_svfprintf_r+0xa56>
  407898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40789a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40789c:	6813      	ldr	r3, [r2, #0]
  40789e:	17cd      	asrs	r5, r1, #31
  4078a0:	4608      	mov	r0, r1
  4078a2:	3204      	adds	r2, #4
  4078a4:	4629      	mov	r1, r5
  4078a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4078a8:	e9c3 0100 	strd	r0, r1, [r3]
  4078ac:	f7ff b81d 	b.w	4068ea <_svfprintf_r+0x4e>
  4078b0:	aa25      	add	r2, sp, #148	; 0x94
  4078b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4078b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4078b6:	f002 fc27 	bl	40a108 <__ssprint_r>
  4078ba:	2800      	cmp	r0, #0
  4078bc:	f47f a8c0 	bne.w	406a40 <_svfprintf_r+0x1a4>
  4078c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4078c2:	46c8      	mov	r8, r9
  4078c4:	e458      	b.n	407178 <_svfprintf_r+0x8dc>
  4078c6:	bf00      	nop
  4078c8:	0040b004 	.word	0x0040b004
  4078cc:	0040aff0 	.word	0x0040aff0
  4078d0:	2140      	movs	r1, #64	; 0x40
  4078d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4078d4:	f001 fb40 	bl	408f58 <_malloc_r>
  4078d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4078da:	6010      	str	r0, [r2, #0]
  4078dc:	6110      	str	r0, [r2, #16]
  4078de:	2800      	cmp	r0, #0
  4078e0:	f000 81f2 	beq.w	407cc8 <_svfprintf_r+0x142c>
  4078e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4078e6:	2340      	movs	r3, #64	; 0x40
  4078e8:	6153      	str	r3, [r2, #20]
  4078ea:	f7fe bfee 	b.w	4068ca <_svfprintf_r+0x2e>
  4078ee:	a823      	add	r0, sp, #140	; 0x8c
  4078f0:	a920      	add	r1, sp, #128	; 0x80
  4078f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4078f4:	9004      	str	r0, [sp, #16]
  4078f6:	9103      	str	r1, [sp, #12]
  4078f8:	a81f      	add	r0, sp, #124	; 0x7c
  4078fa:	2103      	movs	r1, #3
  4078fc:	9002      	str	r0, [sp, #8]
  4078fe:	9a08      	ldr	r2, [sp, #32]
  407900:	9401      	str	r4, [sp, #4]
  407902:	463b      	mov	r3, r7
  407904:	9100      	str	r1, [sp, #0]
  407906:	980c      	ldr	r0, [sp, #48]	; 0x30
  407908:	f000 fa9a 	bl	407e40 <_dtoa_r>
  40790c:	4625      	mov	r5, r4
  40790e:	4606      	mov	r6, r0
  407910:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407912:	2b46      	cmp	r3, #70	; 0x46
  407914:	eb06 0405 	add.w	r4, r6, r5
  407918:	f47f af29 	bne.w	40776e <_svfprintf_r+0xed2>
  40791c:	7833      	ldrb	r3, [r6, #0]
  40791e:	2b30      	cmp	r3, #48	; 0x30
  407920:	f000 8178 	beq.w	407c14 <_svfprintf_r+0x1378>
  407924:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  407926:	442c      	add	r4, r5
  407928:	e721      	b.n	40776e <_svfprintf_r+0xed2>
  40792a:	aa25      	add	r2, sp, #148	; 0x94
  40792c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40792e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407930:	f002 fbea 	bl	40a108 <__ssprint_r>
  407934:	2800      	cmp	r0, #0
  407936:	f47f a883 	bne.w	406a40 <_svfprintf_r+0x1a4>
  40793a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40793c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40793e:	46c8      	mov	r8, r9
  407940:	e782      	b.n	407848 <_svfprintf_r+0xfac>
  407942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407944:	2b00      	cmp	r3, #0
  407946:	bf08      	it	eq
  407948:	2301      	moveq	r3, #1
  40794a:	930a      	str	r3, [sp, #40]	; 0x28
  40794c:	e6db      	b.n	407706 <_svfprintf_r+0xe6a>
  40794e:	4630      	mov	r0, r6
  407950:	940a      	str	r4, [sp, #40]	; 0x28
  407952:	f7fe ff35 	bl	4067c0 <strlen>
  407956:	950f      	str	r5, [sp, #60]	; 0x3c
  407958:	900e      	str	r0, [sp, #56]	; 0x38
  40795a:	f8cd b01c 	str.w	fp, [sp, #28]
  40795e:	4603      	mov	r3, r0
  407960:	f7ff b9f9 	b.w	406d56 <_svfprintf_r+0x4ba>
  407964:	272d      	movs	r7, #45	; 0x2d
  407966:	2300      	movs	r3, #0
  407968:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40796c:	930a      	str	r3, [sp, #40]	; 0x28
  40796e:	f7ff b8ae 	b.w	406ace <_svfprintf_r+0x232>
  407972:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407974:	9312      	str	r3, [sp, #72]	; 0x48
  407976:	461a      	mov	r2, r3
  407978:	3303      	adds	r3, #3
  40797a:	db04      	blt.n	407986 <_svfprintf_r+0x10ea>
  40797c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40797e:	4619      	mov	r1, r3
  407980:	4291      	cmp	r1, r2
  407982:	f6bf af17 	bge.w	4077b4 <_svfprintf_r+0xf18>
  407986:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407988:	3b02      	subs	r3, #2
  40798a:	9311      	str	r3, [sp, #68]	; 0x44
  40798c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  407990:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  407994:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407996:	3b01      	subs	r3, #1
  407998:	2b00      	cmp	r3, #0
  40799a:	931f      	str	r3, [sp, #124]	; 0x7c
  40799c:	bfbd      	ittte	lt
  40799e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4079a0:	f1c3 0301 	rsblt	r3, r3, #1
  4079a4:	222d      	movlt	r2, #45	; 0x2d
  4079a6:	222b      	movge	r2, #43	; 0x2b
  4079a8:	2b09      	cmp	r3, #9
  4079aa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4079ae:	f340 8116 	ble.w	407bde <_svfprintf_r+0x1342>
  4079b2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4079b6:	4620      	mov	r0, r4
  4079b8:	4dab      	ldr	r5, [pc, #684]	; (407c68 <_svfprintf_r+0x13cc>)
  4079ba:	e000      	b.n	4079be <_svfprintf_r+0x1122>
  4079bc:	4610      	mov	r0, r2
  4079be:	fb85 1203 	smull	r1, r2, r5, r3
  4079c2:	17d9      	asrs	r1, r3, #31
  4079c4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4079c8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4079cc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4079d0:	3230      	adds	r2, #48	; 0x30
  4079d2:	2909      	cmp	r1, #9
  4079d4:	f800 2c01 	strb.w	r2, [r0, #-1]
  4079d8:	460b      	mov	r3, r1
  4079da:	f100 32ff 	add.w	r2, r0, #4294967295
  4079de:	dced      	bgt.n	4079bc <_svfprintf_r+0x1120>
  4079e0:	3330      	adds	r3, #48	; 0x30
  4079e2:	3802      	subs	r0, #2
  4079e4:	b2d9      	uxtb	r1, r3
  4079e6:	4284      	cmp	r4, r0
  4079e8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4079ec:	f240 8165 	bls.w	407cba <_svfprintf_r+0x141e>
  4079f0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4079f4:	4613      	mov	r3, r2
  4079f6:	e001      	b.n	4079fc <_svfprintf_r+0x1160>
  4079f8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4079fc:	f800 1b01 	strb.w	r1, [r0], #1
  407a00:	42a3      	cmp	r3, r4
  407a02:	d1f9      	bne.n	4079f8 <_svfprintf_r+0x115c>
  407a04:	3301      	adds	r3, #1
  407a06:	1a9b      	subs	r3, r3, r2
  407a08:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  407a0c:	4413      	add	r3, r2
  407a0e:	aa21      	add	r2, sp, #132	; 0x84
  407a10:	1a9b      	subs	r3, r3, r2
  407a12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407a14:	931b      	str	r3, [sp, #108]	; 0x6c
  407a16:	2a01      	cmp	r2, #1
  407a18:	4413      	add	r3, r2
  407a1a:	930e      	str	r3, [sp, #56]	; 0x38
  407a1c:	f340 8119 	ble.w	407c52 <_svfprintf_r+0x13b6>
  407a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407a22:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407a24:	4413      	add	r3, r2
  407a26:	930e      	str	r3, [sp, #56]	; 0x38
  407a28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407a2c:	9308      	str	r3, [sp, #32]
  407a2e:	2300      	movs	r3, #0
  407a30:	9312      	str	r3, [sp, #72]	; 0x48
  407a32:	e6cf      	b.n	4077d4 <_svfprintf_r+0xf38>
  407a34:	aa25      	add	r2, sp, #148	; 0x94
  407a36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407a38:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a3a:	f002 fb65 	bl	40a108 <__ssprint_r>
  407a3e:	2800      	cmp	r0, #0
  407a40:	f47e affe 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407a44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407a46:	46c8      	mov	r8, r9
  407a48:	e4d7      	b.n	4073fa <_svfprintf_r+0xb5e>
  407a4a:	4623      	mov	r3, r4
  407a4c:	e6a2      	b.n	407794 <_svfprintf_r+0xef8>
  407a4e:	aa25      	add	r2, sp, #148	; 0x94
  407a50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407a52:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a54:	f002 fb58 	bl	40a108 <__ssprint_r>
  407a58:	2800      	cmp	r0, #0
  407a5a:	f47e aff1 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407a5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407a60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407a62:	46c8      	mov	r8, r9
  407a64:	e5ae      	b.n	4075c4 <_svfprintf_r+0xd28>
  407a66:	aa25      	add	r2, sp, #148	; 0x94
  407a68:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407a6a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a6c:	f002 fb4c 	bl	40a108 <__ssprint_r>
  407a70:	2800      	cmp	r0, #0
  407a72:	f47e afe5 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407a76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407a78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407a7a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407a7c:	1a9a      	subs	r2, r3, r2
  407a7e:	46c8      	mov	r8, r9
  407a80:	e5b8      	b.n	4075f4 <_svfprintf_r+0xd58>
  407a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407a84:	9612      	str	r6, [sp, #72]	; 0x48
  407a86:	2b06      	cmp	r3, #6
  407a88:	bf28      	it	cs
  407a8a:	2306      	movcs	r3, #6
  407a8c:	960a      	str	r6, [sp, #40]	; 0x28
  407a8e:	4637      	mov	r7, r6
  407a90:	9308      	str	r3, [sp, #32]
  407a92:	950f      	str	r5, [sp, #60]	; 0x3c
  407a94:	f8cd b01c 	str.w	fp, [sp, #28]
  407a98:	930e      	str	r3, [sp, #56]	; 0x38
  407a9a:	4e74      	ldr	r6, [pc, #464]	; (407c6c <_svfprintf_r+0x13d0>)
  407a9c:	f7ff b816 	b.w	406acc <_svfprintf_r+0x230>
  407aa0:	a823      	add	r0, sp, #140	; 0x8c
  407aa2:	a920      	add	r1, sp, #128	; 0x80
  407aa4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407aa6:	9004      	str	r0, [sp, #16]
  407aa8:	9103      	str	r1, [sp, #12]
  407aaa:	a81f      	add	r0, sp, #124	; 0x7c
  407aac:	2103      	movs	r1, #3
  407aae:	9002      	str	r0, [sp, #8]
  407ab0:	9a08      	ldr	r2, [sp, #32]
  407ab2:	9501      	str	r5, [sp, #4]
  407ab4:	463b      	mov	r3, r7
  407ab6:	9100      	str	r1, [sp, #0]
  407ab8:	980c      	ldr	r0, [sp, #48]	; 0x30
  407aba:	f000 f9c1 	bl	407e40 <_dtoa_r>
  407abe:	4606      	mov	r6, r0
  407ac0:	1944      	adds	r4, r0, r5
  407ac2:	e72b      	b.n	40791c <_svfprintf_r+0x1080>
  407ac4:	2306      	movs	r3, #6
  407ac6:	930a      	str	r3, [sp, #40]	; 0x28
  407ac8:	e61d      	b.n	407706 <_svfprintf_r+0xe6a>
  407aca:	272d      	movs	r7, #45	; 0x2d
  407acc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407ad0:	f7ff bacd 	b.w	40706e <_svfprintf_r+0x7d2>
  407ad4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407ad6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407ad8:	4413      	add	r3, r2
  407ada:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407adc:	930e      	str	r3, [sp, #56]	; 0x38
  407ade:	2a00      	cmp	r2, #0
  407ae0:	f340 80b0 	ble.w	407c44 <_svfprintf_r+0x13a8>
  407ae4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407ae8:	9308      	str	r3, [sp, #32]
  407aea:	2367      	movs	r3, #103	; 0x67
  407aec:	9311      	str	r3, [sp, #68]	; 0x44
  407aee:	e671      	b.n	4077d4 <_svfprintf_r+0xf38>
  407af0:	2b00      	cmp	r3, #0
  407af2:	f340 80c3 	ble.w	407c7c <_svfprintf_r+0x13e0>
  407af6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407af8:	2a00      	cmp	r2, #0
  407afa:	f040 8099 	bne.w	407c30 <_svfprintf_r+0x1394>
  407afe:	f01b 0f01 	tst.w	fp, #1
  407b02:	f040 8095 	bne.w	407c30 <_svfprintf_r+0x1394>
  407b06:	9308      	str	r3, [sp, #32]
  407b08:	930e      	str	r3, [sp, #56]	; 0x38
  407b0a:	e663      	b.n	4077d4 <_svfprintf_r+0xf38>
  407b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b0e:	9308      	str	r3, [sp, #32]
  407b10:	930e      	str	r3, [sp, #56]	; 0x38
  407b12:	900a      	str	r0, [sp, #40]	; 0x28
  407b14:	950f      	str	r5, [sp, #60]	; 0x3c
  407b16:	f8cd b01c 	str.w	fp, [sp, #28]
  407b1a:	9012      	str	r0, [sp, #72]	; 0x48
  407b1c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407b20:	f7fe bfd4 	b.w	406acc <_svfprintf_r+0x230>
  407b24:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407b26:	2b47      	cmp	r3, #71	; 0x47
  407b28:	f47f ae20 	bne.w	40776c <_svfprintf_r+0xed0>
  407b2c:	f01b 0f01 	tst.w	fp, #1
  407b30:	f47f aeee 	bne.w	407910 <_svfprintf_r+0x1074>
  407b34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407b36:	1b9b      	subs	r3, r3, r6
  407b38:	9313      	str	r3, [sp, #76]	; 0x4c
  407b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407b3c:	2b47      	cmp	r3, #71	; 0x47
  407b3e:	f43f af18 	beq.w	407972 <_svfprintf_r+0x10d6>
  407b42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407b44:	9312      	str	r3, [sp, #72]	; 0x48
  407b46:	e721      	b.n	40798c <_svfprintf_r+0x10f0>
  407b48:	424f      	negs	r7, r1
  407b4a:	3110      	adds	r1, #16
  407b4c:	4d48      	ldr	r5, [pc, #288]	; (407c70 <_svfprintf_r+0x13d4>)
  407b4e:	da2f      	bge.n	407bb0 <_svfprintf_r+0x1314>
  407b50:	2410      	movs	r4, #16
  407b52:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407b56:	e004      	b.n	407b62 <_svfprintf_r+0x12c6>
  407b58:	f108 0808 	add.w	r8, r8, #8
  407b5c:	3f10      	subs	r7, #16
  407b5e:	2f10      	cmp	r7, #16
  407b60:	dd26      	ble.n	407bb0 <_svfprintf_r+0x1314>
  407b62:	3301      	adds	r3, #1
  407b64:	3210      	adds	r2, #16
  407b66:	2b07      	cmp	r3, #7
  407b68:	9227      	str	r2, [sp, #156]	; 0x9c
  407b6a:	9326      	str	r3, [sp, #152]	; 0x98
  407b6c:	f8c8 5000 	str.w	r5, [r8]
  407b70:	f8c8 4004 	str.w	r4, [r8, #4]
  407b74:	ddf0      	ble.n	407b58 <_svfprintf_r+0x12bc>
  407b76:	aa25      	add	r2, sp, #148	; 0x94
  407b78:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407b7a:	4658      	mov	r0, fp
  407b7c:	f002 fac4 	bl	40a108 <__ssprint_r>
  407b80:	2800      	cmp	r0, #0
  407b82:	f47e af5d 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407b86:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407b88:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407b8a:	46c8      	mov	r8, r9
  407b8c:	e7e6      	b.n	407b5c <_svfprintf_r+0x12c0>
  407b8e:	aa25      	add	r2, sp, #148	; 0x94
  407b90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407b92:	980c      	ldr	r0, [sp, #48]	; 0x30
  407b94:	f002 fab8 	bl	40a108 <__ssprint_r>
  407b98:	2800      	cmp	r0, #0
  407b9a:	f47e af51 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407b9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407ba0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407ba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407ba4:	46c8      	mov	r8, r9
  407ba6:	e667      	b.n	407878 <_svfprintf_r+0xfdc>
  407ba8:	2000      	movs	r0, #0
  407baa:	900a      	str	r0, [sp, #40]	; 0x28
  407bac:	f7fe bed0 	b.w	406950 <_svfprintf_r+0xb4>
  407bb0:	3301      	adds	r3, #1
  407bb2:	443a      	add	r2, r7
  407bb4:	2b07      	cmp	r3, #7
  407bb6:	e888 00a0 	stmia.w	r8, {r5, r7}
  407bba:	9227      	str	r2, [sp, #156]	; 0x9c
  407bbc:	9326      	str	r3, [sp, #152]	; 0x98
  407bbe:	f108 0808 	add.w	r8, r8, #8
  407bc2:	f77f ae5c 	ble.w	40787e <_svfprintf_r+0xfe2>
  407bc6:	aa25      	add	r2, sp, #148	; 0x94
  407bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407bca:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bcc:	f002 fa9c 	bl	40a108 <__ssprint_r>
  407bd0:	2800      	cmp	r0, #0
  407bd2:	f47e af35 	bne.w	406a40 <_svfprintf_r+0x1a4>
  407bd6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407bd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407bda:	46c8      	mov	r8, r9
  407bdc:	e64f      	b.n	40787e <_svfprintf_r+0xfe2>
  407bde:	3330      	adds	r3, #48	; 0x30
  407be0:	2230      	movs	r2, #48	; 0x30
  407be2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  407be6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  407bea:	ab22      	add	r3, sp, #136	; 0x88
  407bec:	e70f      	b.n	407a0e <_svfprintf_r+0x1172>
  407bee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407bf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407bf2:	4413      	add	r3, r2
  407bf4:	930e      	str	r3, [sp, #56]	; 0x38
  407bf6:	e775      	b.n	407ae4 <_svfprintf_r+0x1248>
  407bf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407bfa:	e5cb      	b.n	407794 <_svfprintf_r+0xef8>
  407bfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407bfe:	4e1d      	ldr	r6, [pc, #116]	; (407c74 <_svfprintf_r+0x13d8>)
  407c00:	2b00      	cmp	r3, #0
  407c02:	bfb6      	itet	lt
  407c04:	272d      	movlt	r7, #45	; 0x2d
  407c06:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  407c0a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  407c0e:	4b1a      	ldr	r3, [pc, #104]	; (407c78 <_svfprintf_r+0x13dc>)
  407c10:	f7ff ba2f 	b.w	407072 <_svfprintf_r+0x7d6>
  407c14:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407c16:	9808      	ldr	r0, [sp, #32]
  407c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407c1a:	4639      	mov	r1, r7
  407c1c:	f002 fbe8 	bl	40a3f0 <__aeabi_dcmpeq>
  407c20:	2800      	cmp	r0, #0
  407c22:	f47f ae7f 	bne.w	407924 <_svfprintf_r+0x1088>
  407c26:	f1c5 0501 	rsb	r5, r5, #1
  407c2a:	951f      	str	r5, [sp, #124]	; 0x7c
  407c2c:	442c      	add	r4, r5
  407c2e:	e59e      	b.n	40776e <_svfprintf_r+0xed2>
  407c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407c32:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407c34:	4413      	add	r3, r2
  407c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407c38:	441a      	add	r2, r3
  407c3a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407c3e:	920e      	str	r2, [sp, #56]	; 0x38
  407c40:	9308      	str	r3, [sp, #32]
  407c42:	e5c7      	b.n	4077d4 <_svfprintf_r+0xf38>
  407c44:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407c46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407c48:	f1c3 0301 	rsb	r3, r3, #1
  407c4c:	441a      	add	r2, r3
  407c4e:	4613      	mov	r3, r2
  407c50:	e7d0      	b.n	407bf4 <_svfprintf_r+0x1358>
  407c52:	f01b 0301 	ands.w	r3, fp, #1
  407c56:	9312      	str	r3, [sp, #72]	; 0x48
  407c58:	f47f aee2 	bne.w	407a20 <_svfprintf_r+0x1184>
  407c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407c5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407c62:	9308      	str	r3, [sp, #32]
  407c64:	e5b6      	b.n	4077d4 <_svfprintf_r+0xf38>
  407c66:	bf00      	nop
  407c68:	66666667 	.word	0x66666667
  407c6c:	0040afe8 	.word	0x0040afe8
  407c70:	0040b004 	.word	0x0040b004
  407c74:	0040afbc 	.word	0x0040afbc
  407c78:	0040afb8 	.word	0x0040afb8
  407c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c7e:	b913      	cbnz	r3, 407c86 <_svfprintf_r+0x13ea>
  407c80:	f01b 0f01 	tst.w	fp, #1
  407c84:	d002      	beq.n	407c8c <_svfprintf_r+0x13f0>
  407c86:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407c88:	3301      	adds	r3, #1
  407c8a:	e7d4      	b.n	407c36 <_svfprintf_r+0x139a>
  407c8c:	2301      	movs	r3, #1
  407c8e:	e73a      	b.n	407b06 <_svfprintf_r+0x126a>
  407c90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407c92:	f89a 3001 	ldrb.w	r3, [sl, #1]
  407c96:	6828      	ldr	r0, [r5, #0]
  407c98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  407c9c:	900a      	str	r0, [sp, #40]	; 0x28
  407c9e:	4628      	mov	r0, r5
  407ca0:	3004      	adds	r0, #4
  407ca2:	46a2      	mov	sl, r4
  407ca4:	900f      	str	r0, [sp, #60]	; 0x3c
  407ca6:	f7fe be51 	b.w	40694c <_svfprintf_r+0xb0>
  407caa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407cae:	f7ff b867 	b.w	406d80 <_svfprintf_r+0x4e4>
  407cb2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407cb6:	f7ff ba15 	b.w	4070e4 <_svfprintf_r+0x848>
  407cba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  407cbe:	e6a6      	b.n	407a0e <_svfprintf_r+0x1172>
  407cc0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407cc4:	f7ff b8eb 	b.w	406e9e <_svfprintf_r+0x602>
  407cc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407cca:	230c      	movs	r3, #12
  407ccc:	6013      	str	r3, [r2, #0]
  407cce:	f04f 33ff 	mov.w	r3, #4294967295
  407cd2:	9309      	str	r3, [sp, #36]	; 0x24
  407cd4:	f7fe bebd 	b.w	406a52 <_svfprintf_r+0x1b6>
  407cd8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407cdc:	f7ff b99a 	b.w	407014 <_svfprintf_r+0x778>
  407ce0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407ce4:	f7ff b976 	b.w	406fd4 <_svfprintf_r+0x738>
  407ce8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407cec:	f7ff b959 	b.w	406fa2 <_svfprintf_r+0x706>
  407cf0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407cf4:	f7ff b912 	b.w	406f1c <_svfprintf_r+0x680>

00407cf8 <register_fini>:
  407cf8:	4b02      	ldr	r3, [pc, #8]	; (407d04 <register_fini+0xc>)
  407cfa:	b113      	cbz	r3, 407d02 <register_fini+0xa>
  407cfc:	4802      	ldr	r0, [pc, #8]	; (407d08 <register_fini+0x10>)
  407cfe:	f000 b805 	b.w	407d0c <atexit>
  407d02:	4770      	bx	lr
  407d04:	00000000 	.word	0x00000000
  407d08:	00408c95 	.word	0x00408c95

00407d0c <atexit>:
  407d0c:	2300      	movs	r3, #0
  407d0e:	4601      	mov	r1, r0
  407d10:	461a      	mov	r2, r3
  407d12:	4618      	mov	r0, r3
  407d14:	f002 ba84 	b.w	40a220 <__register_exitproc>

00407d18 <quorem>:
  407d18:	6902      	ldr	r2, [r0, #16]
  407d1a:	690b      	ldr	r3, [r1, #16]
  407d1c:	4293      	cmp	r3, r2
  407d1e:	f300 808d 	bgt.w	407e3c <quorem+0x124>
  407d22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d26:	f103 38ff 	add.w	r8, r3, #4294967295
  407d2a:	f101 0714 	add.w	r7, r1, #20
  407d2e:	f100 0b14 	add.w	fp, r0, #20
  407d32:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  407d36:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  407d3a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  407d3e:	b083      	sub	sp, #12
  407d40:	3201      	adds	r2, #1
  407d42:	fbb3 f9f2 	udiv	r9, r3, r2
  407d46:	eb0b 0304 	add.w	r3, fp, r4
  407d4a:	9400      	str	r4, [sp, #0]
  407d4c:	eb07 0a04 	add.w	sl, r7, r4
  407d50:	9301      	str	r3, [sp, #4]
  407d52:	f1b9 0f00 	cmp.w	r9, #0
  407d56:	d039      	beq.n	407dcc <quorem+0xb4>
  407d58:	2500      	movs	r5, #0
  407d5a:	462e      	mov	r6, r5
  407d5c:	46bc      	mov	ip, r7
  407d5e:	46de      	mov	lr, fp
  407d60:	f85c 4b04 	ldr.w	r4, [ip], #4
  407d64:	f8de 3000 	ldr.w	r3, [lr]
  407d68:	b2a2      	uxth	r2, r4
  407d6a:	fb09 5502 	mla	r5, r9, r2, r5
  407d6e:	0c22      	lsrs	r2, r4, #16
  407d70:	0c2c      	lsrs	r4, r5, #16
  407d72:	fb09 4202 	mla	r2, r9, r2, r4
  407d76:	b2ad      	uxth	r5, r5
  407d78:	1b75      	subs	r5, r6, r5
  407d7a:	b296      	uxth	r6, r2
  407d7c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  407d80:	fa15 f383 	uxtah	r3, r5, r3
  407d84:	eb06 4623 	add.w	r6, r6, r3, asr #16
  407d88:	b29b      	uxth	r3, r3
  407d8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  407d8e:	45e2      	cmp	sl, ip
  407d90:	ea4f 4512 	mov.w	r5, r2, lsr #16
  407d94:	f84e 3b04 	str.w	r3, [lr], #4
  407d98:	ea4f 4626 	mov.w	r6, r6, asr #16
  407d9c:	d2e0      	bcs.n	407d60 <quorem+0x48>
  407d9e:	9b00      	ldr	r3, [sp, #0]
  407da0:	f85b 3003 	ldr.w	r3, [fp, r3]
  407da4:	b993      	cbnz	r3, 407dcc <quorem+0xb4>
  407da6:	9c01      	ldr	r4, [sp, #4]
  407da8:	1f23      	subs	r3, r4, #4
  407daa:	459b      	cmp	fp, r3
  407dac:	d20c      	bcs.n	407dc8 <quorem+0xb0>
  407dae:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407db2:	b94b      	cbnz	r3, 407dc8 <quorem+0xb0>
  407db4:	f1a4 0308 	sub.w	r3, r4, #8
  407db8:	e002      	b.n	407dc0 <quorem+0xa8>
  407dba:	681a      	ldr	r2, [r3, #0]
  407dbc:	3b04      	subs	r3, #4
  407dbe:	b91a      	cbnz	r2, 407dc8 <quorem+0xb0>
  407dc0:	459b      	cmp	fp, r3
  407dc2:	f108 38ff 	add.w	r8, r8, #4294967295
  407dc6:	d3f8      	bcc.n	407dba <quorem+0xa2>
  407dc8:	f8c0 8010 	str.w	r8, [r0, #16]
  407dcc:	4604      	mov	r4, r0
  407dce:	f001 fee7 	bl	409ba0 <__mcmp>
  407dd2:	2800      	cmp	r0, #0
  407dd4:	db2e      	blt.n	407e34 <quorem+0x11c>
  407dd6:	f109 0901 	add.w	r9, r9, #1
  407dda:	465d      	mov	r5, fp
  407ddc:	2300      	movs	r3, #0
  407dde:	f857 1b04 	ldr.w	r1, [r7], #4
  407de2:	6828      	ldr	r0, [r5, #0]
  407de4:	b28a      	uxth	r2, r1
  407de6:	1a9a      	subs	r2, r3, r2
  407de8:	0c0b      	lsrs	r3, r1, #16
  407dea:	fa12 f280 	uxtah	r2, r2, r0
  407dee:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  407df2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407df6:	b292      	uxth	r2, r2
  407df8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407dfc:	45ba      	cmp	sl, r7
  407dfe:	f845 2b04 	str.w	r2, [r5], #4
  407e02:	ea4f 4323 	mov.w	r3, r3, asr #16
  407e06:	d2ea      	bcs.n	407dde <quorem+0xc6>
  407e08:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407e0c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  407e10:	b982      	cbnz	r2, 407e34 <quorem+0x11c>
  407e12:	1f1a      	subs	r2, r3, #4
  407e14:	4593      	cmp	fp, r2
  407e16:	d20b      	bcs.n	407e30 <quorem+0x118>
  407e18:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407e1c:	b942      	cbnz	r2, 407e30 <quorem+0x118>
  407e1e:	3b08      	subs	r3, #8
  407e20:	e002      	b.n	407e28 <quorem+0x110>
  407e22:	681a      	ldr	r2, [r3, #0]
  407e24:	3b04      	subs	r3, #4
  407e26:	b91a      	cbnz	r2, 407e30 <quorem+0x118>
  407e28:	459b      	cmp	fp, r3
  407e2a:	f108 38ff 	add.w	r8, r8, #4294967295
  407e2e:	d3f8      	bcc.n	407e22 <quorem+0x10a>
  407e30:	f8c4 8010 	str.w	r8, [r4, #16]
  407e34:	4648      	mov	r0, r9
  407e36:	b003      	add	sp, #12
  407e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e3c:	2000      	movs	r0, #0
  407e3e:	4770      	bx	lr

00407e40 <_dtoa_r>:
  407e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407e44:	6c01      	ldr	r1, [r0, #64]	; 0x40
  407e46:	b09b      	sub	sp, #108	; 0x6c
  407e48:	4604      	mov	r4, r0
  407e4a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  407e4c:	4692      	mov	sl, r2
  407e4e:	469b      	mov	fp, r3
  407e50:	b141      	cbz	r1, 407e64 <_dtoa_r+0x24>
  407e52:	6c42      	ldr	r2, [r0, #68]	; 0x44
  407e54:	604a      	str	r2, [r1, #4]
  407e56:	2301      	movs	r3, #1
  407e58:	4093      	lsls	r3, r2
  407e5a:	608b      	str	r3, [r1, #8]
  407e5c:	f001 fcc8 	bl	4097f0 <_Bfree>
  407e60:	2300      	movs	r3, #0
  407e62:	6423      	str	r3, [r4, #64]	; 0x40
  407e64:	f1bb 0f00 	cmp.w	fp, #0
  407e68:	465d      	mov	r5, fp
  407e6a:	db35      	blt.n	407ed8 <_dtoa_r+0x98>
  407e6c:	2300      	movs	r3, #0
  407e6e:	6033      	str	r3, [r6, #0]
  407e70:	4b9d      	ldr	r3, [pc, #628]	; (4080e8 <_dtoa_r+0x2a8>)
  407e72:	43ab      	bics	r3, r5
  407e74:	d015      	beq.n	407ea2 <_dtoa_r+0x62>
  407e76:	4650      	mov	r0, sl
  407e78:	4659      	mov	r1, fp
  407e7a:	2200      	movs	r2, #0
  407e7c:	2300      	movs	r3, #0
  407e7e:	f002 fab7 	bl	40a3f0 <__aeabi_dcmpeq>
  407e82:	4680      	mov	r8, r0
  407e84:	2800      	cmp	r0, #0
  407e86:	d02d      	beq.n	407ee4 <_dtoa_r+0xa4>
  407e88:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407e8a:	2301      	movs	r3, #1
  407e8c:	6013      	str	r3, [r2, #0]
  407e8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407e90:	2b00      	cmp	r3, #0
  407e92:	f000 80bd 	beq.w	408010 <_dtoa_r+0x1d0>
  407e96:	4895      	ldr	r0, [pc, #596]	; (4080ec <_dtoa_r+0x2ac>)
  407e98:	6018      	str	r0, [r3, #0]
  407e9a:	3801      	subs	r0, #1
  407e9c:	b01b      	add	sp, #108	; 0x6c
  407e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ea2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407ea4:	f242 730f 	movw	r3, #9999	; 0x270f
  407ea8:	6013      	str	r3, [r2, #0]
  407eaa:	f1ba 0f00 	cmp.w	sl, #0
  407eae:	d10d      	bne.n	407ecc <_dtoa_r+0x8c>
  407eb0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  407eb4:	b955      	cbnz	r5, 407ecc <_dtoa_r+0x8c>
  407eb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407eb8:	488d      	ldr	r0, [pc, #564]	; (4080f0 <_dtoa_r+0x2b0>)
  407eba:	2b00      	cmp	r3, #0
  407ebc:	d0ee      	beq.n	407e9c <_dtoa_r+0x5c>
  407ebe:	f100 0308 	add.w	r3, r0, #8
  407ec2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  407ec4:	6013      	str	r3, [r2, #0]
  407ec6:	b01b      	add	sp, #108	; 0x6c
  407ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ecc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407ece:	4889      	ldr	r0, [pc, #548]	; (4080f4 <_dtoa_r+0x2b4>)
  407ed0:	2b00      	cmp	r3, #0
  407ed2:	d0e3      	beq.n	407e9c <_dtoa_r+0x5c>
  407ed4:	1cc3      	adds	r3, r0, #3
  407ed6:	e7f4      	b.n	407ec2 <_dtoa_r+0x82>
  407ed8:	2301      	movs	r3, #1
  407eda:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  407ede:	6033      	str	r3, [r6, #0]
  407ee0:	46ab      	mov	fp, r5
  407ee2:	e7c5      	b.n	407e70 <_dtoa_r+0x30>
  407ee4:	aa18      	add	r2, sp, #96	; 0x60
  407ee6:	ab19      	add	r3, sp, #100	; 0x64
  407ee8:	9201      	str	r2, [sp, #4]
  407eea:	9300      	str	r3, [sp, #0]
  407eec:	4652      	mov	r2, sl
  407eee:	465b      	mov	r3, fp
  407ef0:	4620      	mov	r0, r4
  407ef2:	f001 fef5 	bl	409ce0 <__d2b>
  407ef6:	0d2b      	lsrs	r3, r5, #20
  407ef8:	4681      	mov	r9, r0
  407efa:	d071      	beq.n	407fe0 <_dtoa_r+0x1a0>
  407efc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  407f00:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  407f04:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407f06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  407f0a:	4650      	mov	r0, sl
  407f0c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  407f10:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  407f14:	2200      	movs	r2, #0
  407f16:	4b78      	ldr	r3, [pc, #480]	; (4080f8 <_dtoa_r+0x2b8>)
  407f18:	f7fd fc6a 	bl	4057f0 <__aeabi_dsub>
  407f1c:	a36c      	add	r3, pc, #432	; (adr r3, 4080d0 <_dtoa_r+0x290>)
  407f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f22:	f7fd fe19 	bl	405b58 <__aeabi_dmul>
  407f26:	a36c      	add	r3, pc, #432	; (adr r3, 4080d8 <_dtoa_r+0x298>)
  407f28:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f2c:	f7fd fc62 	bl	4057f4 <__adddf3>
  407f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407f34:	4630      	mov	r0, r6
  407f36:	f7fd fda9 	bl	405a8c <__aeabi_i2d>
  407f3a:	a369      	add	r3, pc, #420	; (adr r3, 4080e0 <_dtoa_r+0x2a0>)
  407f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f40:	f7fd fe0a 	bl	405b58 <__aeabi_dmul>
  407f44:	4602      	mov	r2, r0
  407f46:	460b      	mov	r3, r1
  407f48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407f4c:	f7fd fc52 	bl	4057f4 <__adddf3>
  407f50:	e9cd 0104 	strd	r0, r1, [sp, #16]
  407f54:	f002 fa94 	bl	40a480 <__aeabi_d2iz>
  407f58:	2200      	movs	r2, #0
  407f5a:	9002      	str	r0, [sp, #8]
  407f5c:	2300      	movs	r3, #0
  407f5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407f62:	f002 fa4f 	bl	40a404 <__aeabi_dcmplt>
  407f66:	2800      	cmp	r0, #0
  407f68:	f040 8173 	bne.w	408252 <_dtoa_r+0x412>
  407f6c:	9d02      	ldr	r5, [sp, #8]
  407f6e:	2d16      	cmp	r5, #22
  407f70:	f200 815d 	bhi.w	40822e <_dtoa_r+0x3ee>
  407f74:	4b61      	ldr	r3, [pc, #388]	; (4080fc <_dtoa_r+0x2bc>)
  407f76:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  407f7a:	e9d3 0100 	ldrd	r0, r1, [r3]
  407f7e:	4652      	mov	r2, sl
  407f80:	465b      	mov	r3, fp
  407f82:	f002 fa5d 	bl	40a440 <__aeabi_dcmpgt>
  407f86:	2800      	cmp	r0, #0
  407f88:	f000 81c5 	beq.w	408316 <_dtoa_r+0x4d6>
  407f8c:	1e6b      	subs	r3, r5, #1
  407f8e:	9302      	str	r3, [sp, #8]
  407f90:	2300      	movs	r3, #0
  407f92:	930e      	str	r3, [sp, #56]	; 0x38
  407f94:	1bbf      	subs	r7, r7, r6
  407f96:	1e7b      	subs	r3, r7, #1
  407f98:	9306      	str	r3, [sp, #24]
  407f9a:	f100 8154 	bmi.w	408246 <_dtoa_r+0x406>
  407f9e:	2300      	movs	r3, #0
  407fa0:	9308      	str	r3, [sp, #32]
  407fa2:	9b02      	ldr	r3, [sp, #8]
  407fa4:	2b00      	cmp	r3, #0
  407fa6:	f2c0 8145 	blt.w	408234 <_dtoa_r+0x3f4>
  407faa:	9a06      	ldr	r2, [sp, #24]
  407fac:	930d      	str	r3, [sp, #52]	; 0x34
  407fae:	4611      	mov	r1, r2
  407fb0:	4419      	add	r1, r3
  407fb2:	2300      	movs	r3, #0
  407fb4:	9106      	str	r1, [sp, #24]
  407fb6:	930c      	str	r3, [sp, #48]	; 0x30
  407fb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407fba:	2b09      	cmp	r3, #9
  407fbc:	d82a      	bhi.n	408014 <_dtoa_r+0x1d4>
  407fbe:	2b05      	cmp	r3, #5
  407fc0:	f340 865b 	ble.w	408c7a <_dtoa_r+0xe3a>
  407fc4:	3b04      	subs	r3, #4
  407fc6:	9324      	str	r3, [sp, #144]	; 0x90
  407fc8:	2500      	movs	r5, #0
  407fca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407fcc:	3b02      	subs	r3, #2
  407fce:	2b03      	cmp	r3, #3
  407fd0:	f200 8642 	bhi.w	408c58 <_dtoa_r+0xe18>
  407fd4:	e8df f013 	tbh	[pc, r3, lsl #1]
  407fd8:	02c903d4 	.word	0x02c903d4
  407fdc:	046103df 	.word	0x046103df
  407fe0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407fe2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  407fe4:	443e      	add	r6, r7
  407fe6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  407fea:	2b20      	cmp	r3, #32
  407fec:	f340 818e 	ble.w	40830c <_dtoa_r+0x4cc>
  407ff0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  407ff4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  407ff8:	409d      	lsls	r5, r3
  407ffa:	fa2a f000 	lsr.w	r0, sl, r0
  407ffe:	4328      	orrs	r0, r5
  408000:	f7fd fd34 	bl	405a6c <__aeabi_ui2d>
  408004:	2301      	movs	r3, #1
  408006:	3e01      	subs	r6, #1
  408008:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40800c:	9314      	str	r3, [sp, #80]	; 0x50
  40800e:	e781      	b.n	407f14 <_dtoa_r+0xd4>
  408010:	483b      	ldr	r0, [pc, #236]	; (408100 <_dtoa_r+0x2c0>)
  408012:	e743      	b.n	407e9c <_dtoa_r+0x5c>
  408014:	2100      	movs	r1, #0
  408016:	6461      	str	r1, [r4, #68]	; 0x44
  408018:	4620      	mov	r0, r4
  40801a:	9125      	str	r1, [sp, #148]	; 0x94
  40801c:	f001 fbc2 	bl	4097a4 <_Balloc>
  408020:	f04f 33ff 	mov.w	r3, #4294967295
  408024:	930a      	str	r3, [sp, #40]	; 0x28
  408026:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408028:	930f      	str	r3, [sp, #60]	; 0x3c
  40802a:	2301      	movs	r3, #1
  40802c:	9004      	str	r0, [sp, #16]
  40802e:	6420      	str	r0, [r4, #64]	; 0x40
  408030:	9224      	str	r2, [sp, #144]	; 0x90
  408032:	930b      	str	r3, [sp, #44]	; 0x2c
  408034:	9b19      	ldr	r3, [sp, #100]	; 0x64
  408036:	2b00      	cmp	r3, #0
  408038:	f2c0 80d9 	blt.w	4081ee <_dtoa_r+0x3ae>
  40803c:	9a02      	ldr	r2, [sp, #8]
  40803e:	2a0e      	cmp	r2, #14
  408040:	f300 80d5 	bgt.w	4081ee <_dtoa_r+0x3ae>
  408044:	4b2d      	ldr	r3, [pc, #180]	; (4080fc <_dtoa_r+0x2bc>)
  408046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40804a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40804e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  408052:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408054:	2b00      	cmp	r3, #0
  408056:	f2c0 83ba 	blt.w	4087ce <_dtoa_r+0x98e>
  40805a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40805e:	4650      	mov	r0, sl
  408060:	462a      	mov	r2, r5
  408062:	4633      	mov	r3, r6
  408064:	4659      	mov	r1, fp
  408066:	f7fd fea1 	bl	405dac <__aeabi_ddiv>
  40806a:	f002 fa09 	bl	40a480 <__aeabi_d2iz>
  40806e:	4680      	mov	r8, r0
  408070:	f7fd fd0c 	bl	405a8c <__aeabi_i2d>
  408074:	462a      	mov	r2, r5
  408076:	4633      	mov	r3, r6
  408078:	f7fd fd6e 	bl	405b58 <__aeabi_dmul>
  40807c:	460b      	mov	r3, r1
  40807e:	4602      	mov	r2, r0
  408080:	4659      	mov	r1, fp
  408082:	4650      	mov	r0, sl
  408084:	f7fd fbb4 	bl	4057f0 <__aeabi_dsub>
  408088:	9d04      	ldr	r5, [sp, #16]
  40808a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40808e:	702b      	strb	r3, [r5, #0]
  408090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408092:	2b01      	cmp	r3, #1
  408094:	4606      	mov	r6, r0
  408096:	460f      	mov	r7, r1
  408098:	f105 0501 	add.w	r5, r5, #1
  40809c:	d068      	beq.n	408170 <_dtoa_r+0x330>
  40809e:	2200      	movs	r2, #0
  4080a0:	4b18      	ldr	r3, [pc, #96]	; (408104 <_dtoa_r+0x2c4>)
  4080a2:	f7fd fd59 	bl	405b58 <__aeabi_dmul>
  4080a6:	2200      	movs	r2, #0
  4080a8:	2300      	movs	r3, #0
  4080aa:	4606      	mov	r6, r0
  4080ac:	460f      	mov	r7, r1
  4080ae:	f002 f99f 	bl	40a3f0 <__aeabi_dcmpeq>
  4080b2:	2800      	cmp	r0, #0
  4080b4:	f040 8088 	bne.w	4081c8 <_dtoa_r+0x388>
  4080b8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4080bc:	f04f 0a00 	mov.w	sl, #0
  4080c0:	f8df b040 	ldr.w	fp, [pc, #64]	; 408104 <_dtoa_r+0x2c4>
  4080c4:	940c      	str	r4, [sp, #48]	; 0x30
  4080c6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4080ca:	e028      	b.n	40811e <_dtoa_r+0x2de>
  4080cc:	f3af 8000 	nop.w
  4080d0:	636f4361 	.word	0x636f4361
  4080d4:	3fd287a7 	.word	0x3fd287a7
  4080d8:	8b60c8b3 	.word	0x8b60c8b3
  4080dc:	3fc68a28 	.word	0x3fc68a28
  4080e0:	509f79fb 	.word	0x509f79fb
  4080e4:	3fd34413 	.word	0x3fd34413
  4080e8:	7ff00000 	.word	0x7ff00000
  4080ec:	0040aff1 	.word	0x0040aff1
  4080f0:	0040b014 	.word	0x0040b014
  4080f4:	0040b020 	.word	0x0040b020
  4080f8:	3ff80000 	.word	0x3ff80000
  4080fc:	0040b060 	.word	0x0040b060
  408100:	0040aff0 	.word	0x0040aff0
  408104:	40240000 	.word	0x40240000
  408108:	f7fd fd26 	bl	405b58 <__aeabi_dmul>
  40810c:	2200      	movs	r2, #0
  40810e:	2300      	movs	r3, #0
  408110:	4606      	mov	r6, r0
  408112:	460f      	mov	r7, r1
  408114:	f002 f96c 	bl	40a3f0 <__aeabi_dcmpeq>
  408118:	2800      	cmp	r0, #0
  40811a:	f040 83c1 	bne.w	4088a0 <_dtoa_r+0xa60>
  40811e:	4642      	mov	r2, r8
  408120:	464b      	mov	r3, r9
  408122:	4630      	mov	r0, r6
  408124:	4639      	mov	r1, r7
  408126:	f7fd fe41 	bl	405dac <__aeabi_ddiv>
  40812a:	f002 f9a9 	bl	40a480 <__aeabi_d2iz>
  40812e:	4604      	mov	r4, r0
  408130:	f7fd fcac 	bl	405a8c <__aeabi_i2d>
  408134:	4642      	mov	r2, r8
  408136:	464b      	mov	r3, r9
  408138:	f7fd fd0e 	bl	405b58 <__aeabi_dmul>
  40813c:	4602      	mov	r2, r0
  40813e:	460b      	mov	r3, r1
  408140:	4630      	mov	r0, r6
  408142:	4639      	mov	r1, r7
  408144:	f7fd fb54 	bl	4057f0 <__aeabi_dsub>
  408148:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40814c:	9e04      	ldr	r6, [sp, #16]
  40814e:	f805 eb01 	strb.w	lr, [r5], #1
  408152:	eba5 0e06 	sub.w	lr, r5, r6
  408156:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  408158:	45b6      	cmp	lr, r6
  40815a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40815e:	4652      	mov	r2, sl
  408160:	465b      	mov	r3, fp
  408162:	d1d1      	bne.n	408108 <_dtoa_r+0x2c8>
  408164:	46a0      	mov	r8, r4
  408166:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40816a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40816c:	4606      	mov	r6, r0
  40816e:	460f      	mov	r7, r1
  408170:	4632      	mov	r2, r6
  408172:	463b      	mov	r3, r7
  408174:	4630      	mov	r0, r6
  408176:	4639      	mov	r1, r7
  408178:	f7fd fb3c 	bl	4057f4 <__adddf3>
  40817c:	4606      	mov	r6, r0
  40817e:	460f      	mov	r7, r1
  408180:	4602      	mov	r2, r0
  408182:	460b      	mov	r3, r1
  408184:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408188:	f002 f93c 	bl	40a404 <__aeabi_dcmplt>
  40818c:	b948      	cbnz	r0, 4081a2 <_dtoa_r+0x362>
  40818e:	4632      	mov	r2, r6
  408190:	463b      	mov	r3, r7
  408192:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408196:	f002 f92b 	bl	40a3f0 <__aeabi_dcmpeq>
  40819a:	b1a8      	cbz	r0, 4081c8 <_dtoa_r+0x388>
  40819c:	f018 0f01 	tst.w	r8, #1
  4081a0:	d012      	beq.n	4081c8 <_dtoa_r+0x388>
  4081a2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4081a6:	9a04      	ldr	r2, [sp, #16]
  4081a8:	1e6b      	subs	r3, r5, #1
  4081aa:	e004      	b.n	4081b6 <_dtoa_r+0x376>
  4081ac:	429a      	cmp	r2, r3
  4081ae:	f000 8401 	beq.w	4089b4 <_dtoa_r+0xb74>
  4081b2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4081b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4081ba:	f103 0501 	add.w	r5, r3, #1
  4081be:	d0f5      	beq.n	4081ac <_dtoa_r+0x36c>
  4081c0:	f108 0801 	add.w	r8, r8, #1
  4081c4:	f883 8000 	strb.w	r8, [r3]
  4081c8:	4649      	mov	r1, r9
  4081ca:	4620      	mov	r0, r4
  4081cc:	f001 fb10 	bl	4097f0 <_Bfree>
  4081d0:	2200      	movs	r2, #0
  4081d2:	9b02      	ldr	r3, [sp, #8]
  4081d4:	702a      	strb	r2, [r5, #0]
  4081d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4081d8:	3301      	adds	r3, #1
  4081da:	6013      	str	r3, [r2, #0]
  4081dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4081de:	2b00      	cmp	r3, #0
  4081e0:	f000 839e 	beq.w	408920 <_dtoa_r+0xae0>
  4081e4:	9804      	ldr	r0, [sp, #16]
  4081e6:	601d      	str	r5, [r3, #0]
  4081e8:	b01b      	add	sp, #108	; 0x6c
  4081ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4081f0:	2a00      	cmp	r2, #0
  4081f2:	d03e      	beq.n	408272 <_dtoa_r+0x432>
  4081f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4081f6:	2a01      	cmp	r2, #1
  4081f8:	f340 8311 	ble.w	40881e <_dtoa_r+0x9de>
  4081fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4081fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408200:	1e5f      	subs	r7, r3, #1
  408202:	42ba      	cmp	r2, r7
  408204:	f2c0 838f 	blt.w	408926 <_dtoa_r+0xae6>
  408208:	1bd7      	subs	r7, r2, r7
  40820a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40820c:	2b00      	cmp	r3, #0
  40820e:	f2c0 848b 	blt.w	408b28 <_dtoa_r+0xce8>
  408212:	9d08      	ldr	r5, [sp, #32]
  408214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408216:	9a08      	ldr	r2, [sp, #32]
  408218:	441a      	add	r2, r3
  40821a:	9208      	str	r2, [sp, #32]
  40821c:	9a06      	ldr	r2, [sp, #24]
  40821e:	2101      	movs	r1, #1
  408220:	441a      	add	r2, r3
  408222:	4620      	mov	r0, r4
  408224:	9206      	str	r2, [sp, #24]
  408226:	f001 fb7d 	bl	409924 <__i2b>
  40822a:	4606      	mov	r6, r0
  40822c:	e024      	b.n	408278 <_dtoa_r+0x438>
  40822e:	2301      	movs	r3, #1
  408230:	930e      	str	r3, [sp, #56]	; 0x38
  408232:	e6af      	b.n	407f94 <_dtoa_r+0x154>
  408234:	9a08      	ldr	r2, [sp, #32]
  408236:	9b02      	ldr	r3, [sp, #8]
  408238:	1ad2      	subs	r2, r2, r3
  40823a:	425b      	negs	r3, r3
  40823c:	930c      	str	r3, [sp, #48]	; 0x30
  40823e:	2300      	movs	r3, #0
  408240:	9208      	str	r2, [sp, #32]
  408242:	930d      	str	r3, [sp, #52]	; 0x34
  408244:	e6b8      	b.n	407fb8 <_dtoa_r+0x178>
  408246:	f1c7 0301 	rsb	r3, r7, #1
  40824a:	9308      	str	r3, [sp, #32]
  40824c:	2300      	movs	r3, #0
  40824e:	9306      	str	r3, [sp, #24]
  408250:	e6a7      	b.n	407fa2 <_dtoa_r+0x162>
  408252:	9d02      	ldr	r5, [sp, #8]
  408254:	4628      	mov	r0, r5
  408256:	f7fd fc19 	bl	405a8c <__aeabi_i2d>
  40825a:	4602      	mov	r2, r0
  40825c:	460b      	mov	r3, r1
  40825e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408262:	f002 f8c5 	bl	40a3f0 <__aeabi_dcmpeq>
  408266:	2800      	cmp	r0, #0
  408268:	f47f ae80 	bne.w	407f6c <_dtoa_r+0x12c>
  40826c:	1e6b      	subs	r3, r5, #1
  40826e:	9302      	str	r3, [sp, #8]
  408270:	e67c      	b.n	407f6c <_dtoa_r+0x12c>
  408272:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408274:	9d08      	ldr	r5, [sp, #32]
  408276:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  408278:	2d00      	cmp	r5, #0
  40827a:	dd0c      	ble.n	408296 <_dtoa_r+0x456>
  40827c:	9906      	ldr	r1, [sp, #24]
  40827e:	2900      	cmp	r1, #0
  408280:	460b      	mov	r3, r1
  408282:	dd08      	ble.n	408296 <_dtoa_r+0x456>
  408284:	42a9      	cmp	r1, r5
  408286:	9a08      	ldr	r2, [sp, #32]
  408288:	bfa8      	it	ge
  40828a:	462b      	movge	r3, r5
  40828c:	1ad2      	subs	r2, r2, r3
  40828e:	1aed      	subs	r5, r5, r3
  408290:	1acb      	subs	r3, r1, r3
  408292:	9208      	str	r2, [sp, #32]
  408294:	9306      	str	r3, [sp, #24]
  408296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408298:	b1d3      	cbz	r3, 4082d0 <_dtoa_r+0x490>
  40829a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40829c:	2b00      	cmp	r3, #0
  40829e:	f000 82b7 	beq.w	408810 <_dtoa_r+0x9d0>
  4082a2:	2f00      	cmp	r7, #0
  4082a4:	dd10      	ble.n	4082c8 <_dtoa_r+0x488>
  4082a6:	4631      	mov	r1, r6
  4082a8:	463a      	mov	r2, r7
  4082aa:	4620      	mov	r0, r4
  4082ac:	f001 fbd6 	bl	409a5c <__pow5mult>
  4082b0:	464a      	mov	r2, r9
  4082b2:	4601      	mov	r1, r0
  4082b4:	4606      	mov	r6, r0
  4082b6:	4620      	mov	r0, r4
  4082b8:	f001 fb3e 	bl	409938 <__multiply>
  4082bc:	4649      	mov	r1, r9
  4082be:	4680      	mov	r8, r0
  4082c0:	4620      	mov	r0, r4
  4082c2:	f001 fa95 	bl	4097f0 <_Bfree>
  4082c6:	46c1      	mov	r9, r8
  4082c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4082ca:	1bda      	subs	r2, r3, r7
  4082cc:	f040 82a1 	bne.w	408812 <_dtoa_r+0x9d2>
  4082d0:	2101      	movs	r1, #1
  4082d2:	4620      	mov	r0, r4
  4082d4:	f001 fb26 	bl	409924 <__i2b>
  4082d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4082da:	2b00      	cmp	r3, #0
  4082dc:	4680      	mov	r8, r0
  4082de:	dd1c      	ble.n	40831a <_dtoa_r+0x4da>
  4082e0:	4601      	mov	r1, r0
  4082e2:	461a      	mov	r2, r3
  4082e4:	4620      	mov	r0, r4
  4082e6:	f001 fbb9 	bl	409a5c <__pow5mult>
  4082ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4082ec:	2b01      	cmp	r3, #1
  4082ee:	4680      	mov	r8, r0
  4082f0:	f340 8254 	ble.w	40879c <_dtoa_r+0x95c>
  4082f4:	2300      	movs	r3, #0
  4082f6:	930c      	str	r3, [sp, #48]	; 0x30
  4082f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4082fc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  408300:	6918      	ldr	r0, [r3, #16]
  408302:	f001 fabf 	bl	409884 <__hi0bits>
  408306:	f1c0 0020 	rsb	r0, r0, #32
  40830a:	e010      	b.n	40832e <_dtoa_r+0x4ee>
  40830c:	f1c3 0520 	rsb	r5, r3, #32
  408310:	fa0a f005 	lsl.w	r0, sl, r5
  408314:	e674      	b.n	408000 <_dtoa_r+0x1c0>
  408316:	900e      	str	r0, [sp, #56]	; 0x38
  408318:	e63c      	b.n	407f94 <_dtoa_r+0x154>
  40831a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40831c:	2b01      	cmp	r3, #1
  40831e:	f340 8287 	ble.w	408830 <_dtoa_r+0x9f0>
  408322:	2300      	movs	r3, #0
  408324:	930c      	str	r3, [sp, #48]	; 0x30
  408326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408328:	2001      	movs	r0, #1
  40832a:	2b00      	cmp	r3, #0
  40832c:	d1e4      	bne.n	4082f8 <_dtoa_r+0x4b8>
  40832e:	9a06      	ldr	r2, [sp, #24]
  408330:	4410      	add	r0, r2
  408332:	f010 001f 	ands.w	r0, r0, #31
  408336:	f000 80a1 	beq.w	40847c <_dtoa_r+0x63c>
  40833a:	f1c0 0320 	rsb	r3, r0, #32
  40833e:	2b04      	cmp	r3, #4
  408340:	f340 849e 	ble.w	408c80 <_dtoa_r+0xe40>
  408344:	9b08      	ldr	r3, [sp, #32]
  408346:	f1c0 001c 	rsb	r0, r0, #28
  40834a:	4403      	add	r3, r0
  40834c:	9308      	str	r3, [sp, #32]
  40834e:	4613      	mov	r3, r2
  408350:	4403      	add	r3, r0
  408352:	4405      	add	r5, r0
  408354:	9306      	str	r3, [sp, #24]
  408356:	9b08      	ldr	r3, [sp, #32]
  408358:	2b00      	cmp	r3, #0
  40835a:	dd05      	ble.n	408368 <_dtoa_r+0x528>
  40835c:	4649      	mov	r1, r9
  40835e:	461a      	mov	r2, r3
  408360:	4620      	mov	r0, r4
  408362:	f001 fbcb 	bl	409afc <__lshift>
  408366:	4681      	mov	r9, r0
  408368:	9b06      	ldr	r3, [sp, #24]
  40836a:	2b00      	cmp	r3, #0
  40836c:	dd05      	ble.n	40837a <_dtoa_r+0x53a>
  40836e:	4641      	mov	r1, r8
  408370:	461a      	mov	r2, r3
  408372:	4620      	mov	r0, r4
  408374:	f001 fbc2 	bl	409afc <__lshift>
  408378:	4680      	mov	r8, r0
  40837a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40837c:	2b00      	cmp	r3, #0
  40837e:	f040 8086 	bne.w	40848e <_dtoa_r+0x64e>
  408382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408384:	2b00      	cmp	r3, #0
  408386:	f340 8266 	ble.w	408856 <_dtoa_r+0xa16>
  40838a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40838c:	2b00      	cmp	r3, #0
  40838e:	f000 8098 	beq.w	4084c2 <_dtoa_r+0x682>
  408392:	2d00      	cmp	r5, #0
  408394:	dd05      	ble.n	4083a2 <_dtoa_r+0x562>
  408396:	4631      	mov	r1, r6
  408398:	462a      	mov	r2, r5
  40839a:	4620      	mov	r0, r4
  40839c:	f001 fbae 	bl	409afc <__lshift>
  4083a0:	4606      	mov	r6, r0
  4083a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4083a4:	2b00      	cmp	r3, #0
  4083a6:	f040 8337 	bne.w	408a18 <_dtoa_r+0xbd8>
  4083aa:	9606      	str	r6, [sp, #24]
  4083ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4083ae:	9a04      	ldr	r2, [sp, #16]
  4083b0:	f8dd b018 	ldr.w	fp, [sp, #24]
  4083b4:	3b01      	subs	r3, #1
  4083b6:	18d3      	adds	r3, r2, r3
  4083b8:	930b      	str	r3, [sp, #44]	; 0x2c
  4083ba:	f00a 0301 	and.w	r3, sl, #1
  4083be:	930c      	str	r3, [sp, #48]	; 0x30
  4083c0:	4617      	mov	r7, r2
  4083c2:	46c2      	mov	sl, r8
  4083c4:	4651      	mov	r1, sl
  4083c6:	4648      	mov	r0, r9
  4083c8:	f7ff fca6 	bl	407d18 <quorem>
  4083cc:	4631      	mov	r1, r6
  4083ce:	4605      	mov	r5, r0
  4083d0:	4648      	mov	r0, r9
  4083d2:	f001 fbe5 	bl	409ba0 <__mcmp>
  4083d6:	465a      	mov	r2, fp
  4083d8:	900a      	str	r0, [sp, #40]	; 0x28
  4083da:	4651      	mov	r1, sl
  4083dc:	4620      	mov	r0, r4
  4083de:	f001 fbfb 	bl	409bd8 <__mdiff>
  4083e2:	68c2      	ldr	r2, [r0, #12]
  4083e4:	4680      	mov	r8, r0
  4083e6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4083ea:	2a00      	cmp	r2, #0
  4083ec:	f040 822b 	bne.w	408846 <_dtoa_r+0xa06>
  4083f0:	4601      	mov	r1, r0
  4083f2:	4648      	mov	r0, r9
  4083f4:	9308      	str	r3, [sp, #32]
  4083f6:	f001 fbd3 	bl	409ba0 <__mcmp>
  4083fa:	4641      	mov	r1, r8
  4083fc:	9006      	str	r0, [sp, #24]
  4083fe:	4620      	mov	r0, r4
  408400:	f001 f9f6 	bl	4097f0 <_Bfree>
  408404:	9a06      	ldr	r2, [sp, #24]
  408406:	9b08      	ldr	r3, [sp, #32]
  408408:	b932      	cbnz	r2, 408418 <_dtoa_r+0x5d8>
  40840a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40840c:	b921      	cbnz	r1, 408418 <_dtoa_r+0x5d8>
  40840e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408410:	2a00      	cmp	r2, #0
  408412:	f000 83ef 	beq.w	408bf4 <_dtoa_r+0xdb4>
  408416:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408418:	990a      	ldr	r1, [sp, #40]	; 0x28
  40841a:	2900      	cmp	r1, #0
  40841c:	f2c0 829f 	blt.w	40895e <_dtoa_r+0xb1e>
  408420:	d105      	bne.n	40842e <_dtoa_r+0x5ee>
  408422:	9924      	ldr	r1, [sp, #144]	; 0x90
  408424:	b919      	cbnz	r1, 40842e <_dtoa_r+0x5ee>
  408426:	990c      	ldr	r1, [sp, #48]	; 0x30
  408428:	2900      	cmp	r1, #0
  40842a:	f000 8298 	beq.w	40895e <_dtoa_r+0xb1e>
  40842e:	2a00      	cmp	r2, #0
  408430:	f300 8306 	bgt.w	408a40 <_dtoa_r+0xc00>
  408434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408436:	703b      	strb	r3, [r7, #0]
  408438:	f107 0801 	add.w	r8, r7, #1
  40843c:	4297      	cmp	r7, r2
  40843e:	4645      	mov	r5, r8
  408440:	f000 830c 	beq.w	408a5c <_dtoa_r+0xc1c>
  408444:	4649      	mov	r1, r9
  408446:	2300      	movs	r3, #0
  408448:	220a      	movs	r2, #10
  40844a:	4620      	mov	r0, r4
  40844c:	f001 f9da 	bl	409804 <__multadd>
  408450:	455e      	cmp	r6, fp
  408452:	4681      	mov	r9, r0
  408454:	4631      	mov	r1, r6
  408456:	f04f 0300 	mov.w	r3, #0
  40845a:	f04f 020a 	mov.w	r2, #10
  40845e:	4620      	mov	r0, r4
  408460:	f000 81eb 	beq.w	40883a <_dtoa_r+0x9fa>
  408464:	f001 f9ce 	bl	409804 <__multadd>
  408468:	4659      	mov	r1, fp
  40846a:	4606      	mov	r6, r0
  40846c:	2300      	movs	r3, #0
  40846e:	220a      	movs	r2, #10
  408470:	4620      	mov	r0, r4
  408472:	f001 f9c7 	bl	409804 <__multadd>
  408476:	4647      	mov	r7, r8
  408478:	4683      	mov	fp, r0
  40847a:	e7a3      	b.n	4083c4 <_dtoa_r+0x584>
  40847c:	201c      	movs	r0, #28
  40847e:	9b08      	ldr	r3, [sp, #32]
  408480:	4403      	add	r3, r0
  408482:	9308      	str	r3, [sp, #32]
  408484:	9b06      	ldr	r3, [sp, #24]
  408486:	4403      	add	r3, r0
  408488:	4405      	add	r5, r0
  40848a:	9306      	str	r3, [sp, #24]
  40848c:	e763      	b.n	408356 <_dtoa_r+0x516>
  40848e:	4641      	mov	r1, r8
  408490:	4648      	mov	r0, r9
  408492:	f001 fb85 	bl	409ba0 <__mcmp>
  408496:	2800      	cmp	r0, #0
  408498:	f6bf af73 	bge.w	408382 <_dtoa_r+0x542>
  40849c:	9f02      	ldr	r7, [sp, #8]
  40849e:	4649      	mov	r1, r9
  4084a0:	2300      	movs	r3, #0
  4084a2:	220a      	movs	r2, #10
  4084a4:	4620      	mov	r0, r4
  4084a6:	3f01      	subs	r7, #1
  4084a8:	9702      	str	r7, [sp, #8]
  4084aa:	f001 f9ab 	bl	409804 <__multadd>
  4084ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4084b0:	4681      	mov	r9, r0
  4084b2:	2b00      	cmp	r3, #0
  4084b4:	f040 83b6 	bne.w	408c24 <_dtoa_r+0xde4>
  4084b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4084ba:	2b00      	cmp	r3, #0
  4084bc:	f340 83bf 	ble.w	408c3e <_dtoa_r+0xdfe>
  4084c0:	930a      	str	r3, [sp, #40]	; 0x28
  4084c2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4084c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4084c8:	465d      	mov	r5, fp
  4084ca:	e002      	b.n	4084d2 <_dtoa_r+0x692>
  4084cc:	f001 f99a 	bl	409804 <__multadd>
  4084d0:	4681      	mov	r9, r0
  4084d2:	4641      	mov	r1, r8
  4084d4:	4648      	mov	r0, r9
  4084d6:	f7ff fc1f 	bl	407d18 <quorem>
  4084da:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4084de:	f805 ab01 	strb.w	sl, [r5], #1
  4084e2:	eba5 030b 	sub.w	r3, r5, fp
  4084e6:	42bb      	cmp	r3, r7
  4084e8:	f04f 020a 	mov.w	r2, #10
  4084ec:	f04f 0300 	mov.w	r3, #0
  4084f0:	4649      	mov	r1, r9
  4084f2:	4620      	mov	r0, r4
  4084f4:	dbea      	blt.n	4084cc <_dtoa_r+0x68c>
  4084f6:	9b04      	ldr	r3, [sp, #16]
  4084f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4084fa:	2a01      	cmp	r2, #1
  4084fc:	bfac      	ite	ge
  4084fe:	189b      	addge	r3, r3, r2
  408500:	3301      	addlt	r3, #1
  408502:	461d      	mov	r5, r3
  408504:	f04f 0b00 	mov.w	fp, #0
  408508:	4649      	mov	r1, r9
  40850a:	2201      	movs	r2, #1
  40850c:	4620      	mov	r0, r4
  40850e:	f001 faf5 	bl	409afc <__lshift>
  408512:	4641      	mov	r1, r8
  408514:	4681      	mov	r9, r0
  408516:	f001 fb43 	bl	409ba0 <__mcmp>
  40851a:	2800      	cmp	r0, #0
  40851c:	f340 823d 	ble.w	40899a <_dtoa_r+0xb5a>
  408520:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  408524:	9904      	ldr	r1, [sp, #16]
  408526:	1e6b      	subs	r3, r5, #1
  408528:	e004      	b.n	408534 <_dtoa_r+0x6f4>
  40852a:	428b      	cmp	r3, r1
  40852c:	f000 81ae 	beq.w	40888c <_dtoa_r+0xa4c>
  408530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  408534:	2a39      	cmp	r2, #57	; 0x39
  408536:	f103 0501 	add.w	r5, r3, #1
  40853a:	d0f6      	beq.n	40852a <_dtoa_r+0x6ea>
  40853c:	3201      	adds	r2, #1
  40853e:	701a      	strb	r2, [r3, #0]
  408540:	4641      	mov	r1, r8
  408542:	4620      	mov	r0, r4
  408544:	f001 f954 	bl	4097f0 <_Bfree>
  408548:	2e00      	cmp	r6, #0
  40854a:	f43f ae3d 	beq.w	4081c8 <_dtoa_r+0x388>
  40854e:	f1bb 0f00 	cmp.w	fp, #0
  408552:	d005      	beq.n	408560 <_dtoa_r+0x720>
  408554:	45b3      	cmp	fp, r6
  408556:	d003      	beq.n	408560 <_dtoa_r+0x720>
  408558:	4659      	mov	r1, fp
  40855a:	4620      	mov	r0, r4
  40855c:	f001 f948 	bl	4097f0 <_Bfree>
  408560:	4631      	mov	r1, r6
  408562:	4620      	mov	r0, r4
  408564:	f001 f944 	bl	4097f0 <_Bfree>
  408568:	e62e      	b.n	4081c8 <_dtoa_r+0x388>
  40856a:	2300      	movs	r3, #0
  40856c:	930b      	str	r3, [sp, #44]	; 0x2c
  40856e:	9b02      	ldr	r3, [sp, #8]
  408570:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408572:	4413      	add	r3, r2
  408574:	930f      	str	r3, [sp, #60]	; 0x3c
  408576:	3301      	adds	r3, #1
  408578:	2b01      	cmp	r3, #1
  40857a:	461f      	mov	r7, r3
  40857c:	461e      	mov	r6, r3
  40857e:	930a      	str	r3, [sp, #40]	; 0x28
  408580:	bfb8      	it	lt
  408582:	2701      	movlt	r7, #1
  408584:	2100      	movs	r1, #0
  408586:	2f17      	cmp	r7, #23
  408588:	6461      	str	r1, [r4, #68]	; 0x44
  40858a:	d90a      	bls.n	4085a2 <_dtoa_r+0x762>
  40858c:	2201      	movs	r2, #1
  40858e:	2304      	movs	r3, #4
  408590:	005b      	lsls	r3, r3, #1
  408592:	f103 0014 	add.w	r0, r3, #20
  408596:	4287      	cmp	r7, r0
  408598:	4611      	mov	r1, r2
  40859a:	f102 0201 	add.w	r2, r2, #1
  40859e:	d2f7      	bcs.n	408590 <_dtoa_r+0x750>
  4085a0:	6461      	str	r1, [r4, #68]	; 0x44
  4085a2:	4620      	mov	r0, r4
  4085a4:	f001 f8fe 	bl	4097a4 <_Balloc>
  4085a8:	2e0e      	cmp	r6, #14
  4085aa:	9004      	str	r0, [sp, #16]
  4085ac:	6420      	str	r0, [r4, #64]	; 0x40
  4085ae:	f63f ad41 	bhi.w	408034 <_dtoa_r+0x1f4>
  4085b2:	2d00      	cmp	r5, #0
  4085b4:	f43f ad3e 	beq.w	408034 <_dtoa_r+0x1f4>
  4085b8:	9902      	ldr	r1, [sp, #8]
  4085ba:	2900      	cmp	r1, #0
  4085bc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4085c0:	f340 8202 	ble.w	4089c8 <_dtoa_r+0xb88>
  4085c4:	4bb8      	ldr	r3, [pc, #736]	; (4088a8 <_dtoa_r+0xa68>)
  4085c6:	f001 020f 	and.w	r2, r1, #15
  4085ca:	110d      	asrs	r5, r1, #4
  4085cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4085d0:	06e9      	lsls	r1, r5, #27
  4085d2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4085d6:	f140 81ae 	bpl.w	408936 <_dtoa_r+0xaf6>
  4085da:	4bb4      	ldr	r3, [pc, #720]	; (4088ac <_dtoa_r+0xa6c>)
  4085dc:	4650      	mov	r0, sl
  4085de:	4659      	mov	r1, fp
  4085e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4085e4:	f7fd fbe2 	bl	405dac <__aeabi_ddiv>
  4085e8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4085ec:	f005 050f 	and.w	r5, r5, #15
  4085f0:	f04f 0a03 	mov.w	sl, #3
  4085f4:	b18d      	cbz	r5, 40861a <_dtoa_r+0x7da>
  4085f6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4088ac <_dtoa_r+0xa6c>
  4085fa:	07ea      	lsls	r2, r5, #31
  4085fc:	d509      	bpl.n	408612 <_dtoa_r+0x7d2>
  4085fe:	4630      	mov	r0, r6
  408600:	4639      	mov	r1, r7
  408602:	e9d8 2300 	ldrd	r2, r3, [r8]
  408606:	f7fd faa7 	bl	405b58 <__aeabi_dmul>
  40860a:	f10a 0a01 	add.w	sl, sl, #1
  40860e:	4606      	mov	r6, r0
  408610:	460f      	mov	r7, r1
  408612:	106d      	asrs	r5, r5, #1
  408614:	f108 0808 	add.w	r8, r8, #8
  408618:	d1ef      	bne.n	4085fa <_dtoa_r+0x7ba>
  40861a:	463b      	mov	r3, r7
  40861c:	4632      	mov	r2, r6
  40861e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  408622:	f7fd fbc3 	bl	405dac <__aeabi_ddiv>
  408626:	4607      	mov	r7, r0
  408628:	4688      	mov	r8, r1
  40862a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40862c:	b143      	cbz	r3, 408640 <_dtoa_r+0x800>
  40862e:	2200      	movs	r2, #0
  408630:	4b9f      	ldr	r3, [pc, #636]	; (4088b0 <_dtoa_r+0xa70>)
  408632:	4638      	mov	r0, r7
  408634:	4641      	mov	r1, r8
  408636:	f001 fee5 	bl	40a404 <__aeabi_dcmplt>
  40863a:	2800      	cmp	r0, #0
  40863c:	f040 8286 	bne.w	408b4c <_dtoa_r+0xd0c>
  408640:	4650      	mov	r0, sl
  408642:	f7fd fa23 	bl	405a8c <__aeabi_i2d>
  408646:	463a      	mov	r2, r7
  408648:	4643      	mov	r3, r8
  40864a:	f7fd fa85 	bl	405b58 <__aeabi_dmul>
  40864e:	4b99      	ldr	r3, [pc, #612]	; (4088b4 <_dtoa_r+0xa74>)
  408650:	2200      	movs	r2, #0
  408652:	f7fd f8cf 	bl	4057f4 <__adddf3>
  408656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408658:	4605      	mov	r5, r0
  40865a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40865e:	2b00      	cmp	r3, #0
  408660:	f000 813e 	beq.w	4088e0 <_dtoa_r+0xaa0>
  408664:	9b02      	ldr	r3, [sp, #8]
  408666:	9315      	str	r3, [sp, #84]	; 0x54
  408668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40866a:	9312      	str	r3, [sp, #72]	; 0x48
  40866c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40866e:	2b00      	cmp	r3, #0
  408670:	f000 81fa 	beq.w	408a68 <_dtoa_r+0xc28>
  408674:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408676:	4b8c      	ldr	r3, [pc, #560]	; (4088a8 <_dtoa_r+0xa68>)
  408678:	498f      	ldr	r1, [pc, #572]	; (4088b8 <_dtoa_r+0xa78>)
  40867a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40867e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  408682:	2000      	movs	r0, #0
  408684:	f7fd fb92 	bl	405dac <__aeabi_ddiv>
  408688:	462a      	mov	r2, r5
  40868a:	4633      	mov	r3, r6
  40868c:	f7fd f8b0 	bl	4057f0 <__aeabi_dsub>
  408690:	4682      	mov	sl, r0
  408692:	468b      	mov	fp, r1
  408694:	4638      	mov	r0, r7
  408696:	4641      	mov	r1, r8
  408698:	f001 fef2 	bl	40a480 <__aeabi_d2iz>
  40869c:	4605      	mov	r5, r0
  40869e:	f7fd f9f5 	bl	405a8c <__aeabi_i2d>
  4086a2:	4602      	mov	r2, r0
  4086a4:	460b      	mov	r3, r1
  4086a6:	4638      	mov	r0, r7
  4086a8:	4641      	mov	r1, r8
  4086aa:	f7fd f8a1 	bl	4057f0 <__aeabi_dsub>
  4086ae:	3530      	adds	r5, #48	; 0x30
  4086b0:	fa5f f885 	uxtb.w	r8, r5
  4086b4:	9d04      	ldr	r5, [sp, #16]
  4086b6:	4606      	mov	r6, r0
  4086b8:	460f      	mov	r7, r1
  4086ba:	f885 8000 	strb.w	r8, [r5]
  4086be:	4602      	mov	r2, r0
  4086c0:	460b      	mov	r3, r1
  4086c2:	4650      	mov	r0, sl
  4086c4:	4659      	mov	r1, fp
  4086c6:	3501      	adds	r5, #1
  4086c8:	f001 feba 	bl	40a440 <__aeabi_dcmpgt>
  4086cc:	2800      	cmp	r0, #0
  4086ce:	d154      	bne.n	40877a <_dtoa_r+0x93a>
  4086d0:	4632      	mov	r2, r6
  4086d2:	463b      	mov	r3, r7
  4086d4:	2000      	movs	r0, #0
  4086d6:	4976      	ldr	r1, [pc, #472]	; (4088b0 <_dtoa_r+0xa70>)
  4086d8:	f7fd f88a 	bl	4057f0 <__aeabi_dsub>
  4086dc:	4602      	mov	r2, r0
  4086de:	460b      	mov	r3, r1
  4086e0:	4650      	mov	r0, sl
  4086e2:	4659      	mov	r1, fp
  4086e4:	f001 feac 	bl	40a440 <__aeabi_dcmpgt>
  4086e8:	2800      	cmp	r0, #0
  4086ea:	f040 8270 	bne.w	408bce <_dtoa_r+0xd8e>
  4086ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4086f0:	2a01      	cmp	r2, #1
  4086f2:	f000 8111 	beq.w	408918 <_dtoa_r+0xad8>
  4086f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4086f8:	9a04      	ldr	r2, [sp, #16]
  4086fa:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4086fe:	4413      	add	r3, r2
  408700:	4699      	mov	r9, r3
  408702:	e00d      	b.n	408720 <_dtoa_r+0x8e0>
  408704:	2000      	movs	r0, #0
  408706:	496a      	ldr	r1, [pc, #424]	; (4088b0 <_dtoa_r+0xa70>)
  408708:	f7fd f872 	bl	4057f0 <__aeabi_dsub>
  40870c:	4652      	mov	r2, sl
  40870e:	465b      	mov	r3, fp
  408710:	f001 fe78 	bl	40a404 <__aeabi_dcmplt>
  408714:	2800      	cmp	r0, #0
  408716:	f040 8258 	bne.w	408bca <_dtoa_r+0xd8a>
  40871a:	454d      	cmp	r5, r9
  40871c:	f000 80fa 	beq.w	408914 <_dtoa_r+0xad4>
  408720:	4650      	mov	r0, sl
  408722:	4659      	mov	r1, fp
  408724:	2200      	movs	r2, #0
  408726:	4b65      	ldr	r3, [pc, #404]	; (4088bc <_dtoa_r+0xa7c>)
  408728:	f7fd fa16 	bl	405b58 <__aeabi_dmul>
  40872c:	2200      	movs	r2, #0
  40872e:	4b63      	ldr	r3, [pc, #396]	; (4088bc <_dtoa_r+0xa7c>)
  408730:	4682      	mov	sl, r0
  408732:	468b      	mov	fp, r1
  408734:	4630      	mov	r0, r6
  408736:	4639      	mov	r1, r7
  408738:	f7fd fa0e 	bl	405b58 <__aeabi_dmul>
  40873c:	460f      	mov	r7, r1
  40873e:	4606      	mov	r6, r0
  408740:	f001 fe9e 	bl	40a480 <__aeabi_d2iz>
  408744:	4680      	mov	r8, r0
  408746:	f7fd f9a1 	bl	405a8c <__aeabi_i2d>
  40874a:	4602      	mov	r2, r0
  40874c:	460b      	mov	r3, r1
  40874e:	4630      	mov	r0, r6
  408750:	4639      	mov	r1, r7
  408752:	f7fd f84d 	bl	4057f0 <__aeabi_dsub>
  408756:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40875a:	fa5f f888 	uxtb.w	r8, r8
  40875e:	4652      	mov	r2, sl
  408760:	465b      	mov	r3, fp
  408762:	f805 8b01 	strb.w	r8, [r5], #1
  408766:	4606      	mov	r6, r0
  408768:	460f      	mov	r7, r1
  40876a:	f001 fe4b 	bl	40a404 <__aeabi_dcmplt>
  40876e:	4632      	mov	r2, r6
  408770:	463b      	mov	r3, r7
  408772:	2800      	cmp	r0, #0
  408774:	d0c6      	beq.n	408704 <_dtoa_r+0x8c4>
  408776:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40877a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40877c:	9302      	str	r3, [sp, #8]
  40877e:	e523      	b.n	4081c8 <_dtoa_r+0x388>
  408780:	2300      	movs	r3, #0
  408782:	930b      	str	r3, [sp, #44]	; 0x2c
  408784:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408786:	2b00      	cmp	r3, #0
  408788:	f340 80dc 	ble.w	408944 <_dtoa_r+0xb04>
  40878c:	461f      	mov	r7, r3
  40878e:	461e      	mov	r6, r3
  408790:	930f      	str	r3, [sp, #60]	; 0x3c
  408792:	930a      	str	r3, [sp, #40]	; 0x28
  408794:	e6f6      	b.n	408584 <_dtoa_r+0x744>
  408796:	2301      	movs	r3, #1
  408798:	930b      	str	r3, [sp, #44]	; 0x2c
  40879a:	e7f3      	b.n	408784 <_dtoa_r+0x944>
  40879c:	f1ba 0f00 	cmp.w	sl, #0
  4087a0:	f47f ada8 	bne.w	4082f4 <_dtoa_r+0x4b4>
  4087a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4087a8:	2b00      	cmp	r3, #0
  4087aa:	f47f adba 	bne.w	408322 <_dtoa_r+0x4e2>
  4087ae:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4087b2:	0d3f      	lsrs	r7, r7, #20
  4087b4:	053f      	lsls	r7, r7, #20
  4087b6:	2f00      	cmp	r7, #0
  4087b8:	f000 820d 	beq.w	408bd6 <_dtoa_r+0xd96>
  4087bc:	9b08      	ldr	r3, [sp, #32]
  4087be:	3301      	adds	r3, #1
  4087c0:	9308      	str	r3, [sp, #32]
  4087c2:	9b06      	ldr	r3, [sp, #24]
  4087c4:	3301      	adds	r3, #1
  4087c6:	9306      	str	r3, [sp, #24]
  4087c8:	2301      	movs	r3, #1
  4087ca:	930c      	str	r3, [sp, #48]	; 0x30
  4087cc:	e5ab      	b.n	408326 <_dtoa_r+0x4e6>
  4087ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4087d0:	2b00      	cmp	r3, #0
  4087d2:	f73f ac42 	bgt.w	40805a <_dtoa_r+0x21a>
  4087d6:	f040 8221 	bne.w	408c1c <_dtoa_r+0xddc>
  4087da:	2200      	movs	r2, #0
  4087dc:	4b38      	ldr	r3, [pc, #224]	; (4088c0 <_dtoa_r+0xa80>)
  4087de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4087e2:	f7fd f9b9 	bl	405b58 <__aeabi_dmul>
  4087e6:	4652      	mov	r2, sl
  4087e8:	465b      	mov	r3, fp
  4087ea:	f001 fe1f 	bl	40a42c <__aeabi_dcmpge>
  4087ee:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4087f2:	4646      	mov	r6, r8
  4087f4:	2800      	cmp	r0, #0
  4087f6:	d041      	beq.n	40887c <_dtoa_r+0xa3c>
  4087f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4087fa:	9d04      	ldr	r5, [sp, #16]
  4087fc:	43db      	mvns	r3, r3
  4087fe:	9302      	str	r3, [sp, #8]
  408800:	4641      	mov	r1, r8
  408802:	4620      	mov	r0, r4
  408804:	f000 fff4 	bl	4097f0 <_Bfree>
  408808:	2e00      	cmp	r6, #0
  40880a:	f43f acdd 	beq.w	4081c8 <_dtoa_r+0x388>
  40880e:	e6a7      	b.n	408560 <_dtoa_r+0x720>
  408810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408812:	4649      	mov	r1, r9
  408814:	4620      	mov	r0, r4
  408816:	f001 f921 	bl	409a5c <__pow5mult>
  40881a:	4681      	mov	r9, r0
  40881c:	e558      	b.n	4082d0 <_dtoa_r+0x490>
  40881e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408820:	2a00      	cmp	r2, #0
  408822:	f000 8187 	beq.w	408b34 <_dtoa_r+0xcf4>
  408826:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40882a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40882c:	9d08      	ldr	r5, [sp, #32]
  40882e:	e4f2      	b.n	408216 <_dtoa_r+0x3d6>
  408830:	f1ba 0f00 	cmp.w	sl, #0
  408834:	f47f ad75 	bne.w	408322 <_dtoa_r+0x4e2>
  408838:	e7b4      	b.n	4087a4 <_dtoa_r+0x964>
  40883a:	f000 ffe3 	bl	409804 <__multadd>
  40883e:	4647      	mov	r7, r8
  408840:	4606      	mov	r6, r0
  408842:	4683      	mov	fp, r0
  408844:	e5be      	b.n	4083c4 <_dtoa_r+0x584>
  408846:	4601      	mov	r1, r0
  408848:	4620      	mov	r0, r4
  40884a:	9306      	str	r3, [sp, #24]
  40884c:	f000 ffd0 	bl	4097f0 <_Bfree>
  408850:	2201      	movs	r2, #1
  408852:	9b06      	ldr	r3, [sp, #24]
  408854:	e5e0      	b.n	408418 <_dtoa_r+0x5d8>
  408856:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408858:	2b02      	cmp	r3, #2
  40885a:	f77f ad96 	ble.w	40838a <_dtoa_r+0x54a>
  40885e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408860:	2b00      	cmp	r3, #0
  408862:	d1c9      	bne.n	4087f8 <_dtoa_r+0x9b8>
  408864:	4641      	mov	r1, r8
  408866:	2205      	movs	r2, #5
  408868:	4620      	mov	r0, r4
  40886a:	f000 ffcb 	bl	409804 <__multadd>
  40886e:	4601      	mov	r1, r0
  408870:	4680      	mov	r8, r0
  408872:	4648      	mov	r0, r9
  408874:	f001 f994 	bl	409ba0 <__mcmp>
  408878:	2800      	cmp	r0, #0
  40887a:	ddbd      	ble.n	4087f8 <_dtoa_r+0x9b8>
  40887c:	9a02      	ldr	r2, [sp, #8]
  40887e:	9904      	ldr	r1, [sp, #16]
  408880:	2331      	movs	r3, #49	; 0x31
  408882:	3201      	adds	r2, #1
  408884:	9202      	str	r2, [sp, #8]
  408886:	700b      	strb	r3, [r1, #0]
  408888:	1c4d      	adds	r5, r1, #1
  40888a:	e7b9      	b.n	408800 <_dtoa_r+0x9c0>
  40888c:	9a02      	ldr	r2, [sp, #8]
  40888e:	3201      	adds	r2, #1
  408890:	9202      	str	r2, [sp, #8]
  408892:	9a04      	ldr	r2, [sp, #16]
  408894:	2331      	movs	r3, #49	; 0x31
  408896:	7013      	strb	r3, [r2, #0]
  408898:	e652      	b.n	408540 <_dtoa_r+0x700>
  40889a:	2301      	movs	r3, #1
  40889c:	930b      	str	r3, [sp, #44]	; 0x2c
  40889e:	e666      	b.n	40856e <_dtoa_r+0x72e>
  4088a0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4088a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4088a6:	e48f      	b.n	4081c8 <_dtoa_r+0x388>
  4088a8:	0040b060 	.word	0x0040b060
  4088ac:	0040b038 	.word	0x0040b038
  4088b0:	3ff00000 	.word	0x3ff00000
  4088b4:	401c0000 	.word	0x401c0000
  4088b8:	3fe00000 	.word	0x3fe00000
  4088bc:	40240000 	.word	0x40240000
  4088c0:	40140000 	.word	0x40140000
  4088c4:	4650      	mov	r0, sl
  4088c6:	f7fd f8e1 	bl	405a8c <__aeabi_i2d>
  4088ca:	463a      	mov	r2, r7
  4088cc:	4643      	mov	r3, r8
  4088ce:	f7fd f943 	bl	405b58 <__aeabi_dmul>
  4088d2:	2200      	movs	r2, #0
  4088d4:	4bc1      	ldr	r3, [pc, #772]	; (408bdc <_dtoa_r+0xd9c>)
  4088d6:	f7fc ff8d 	bl	4057f4 <__adddf3>
  4088da:	4605      	mov	r5, r0
  4088dc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4088e0:	4641      	mov	r1, r8
  4088e2:	2200      	movs	r2, #0
  4088e4:	4bbe      	ldr	r3, [pc, #760]	; (408be0 <_dtoa_r+0xda0>)
  4088e6:	4638      	mov	r0, r7
  4088e8:	f7fc ff82 	bl	4057f0 <__aeabi_dsub>
  4088ec:	462a      	mov	r2, r5
  4088ee:	4633      	mov	r3, r6
  4088f0:	4682      	mov	sl, r0
  4088f2:	468b      	mov	fp, r1
  4088f4:	f001 fda4 	bl	40a440 <__aeabi_dcmpgt>
  4088f8:	4680      	mov	r8, r0
  4088fa:	2800      	cmp	r0, #0
  4088fc:	f040 8110 	bne.w	408b20 <_dtoa_r+0xce0>
  408900:	462a      	mov	r2, r5
  408902:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  408906:	4650      	mov	r0, sl
  408908:	4659      	mov	r1, fp
  40890a:	f001 fd7b 	bl	40a404 <__aeabi_dcmplt>
  40890e:	b118      	cbz	r0, 408918 <_dtoa_r+0xad8>
  408910:	4646      	mov	r6, r8
  408912:	e771      	b.n	4087f8 <_dtoa_r+0x9b8>
  408914:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408918:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40891c:	f7ff bb8a 	b.w	408034 <_dtoa_r+0x1f4>
  408920:	9804      	ldr	r0, [sp, #16]
  408922:	f7ff babb 	b.w	407e9c <_dtoa_r+0x5c>
  408926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40892a:	970c      	str	r7, [sp, #48]	; 0x30
  40892c:	1afb      	subs	r3, r7, r3
  40892e:	441a      	add	r2, r3
  408930:	920d      	str	r2, [sp, #52]	; 0x34
  408932:	2700      	movs	r7, #0
  408934:	e469      	b.n	40820a <_dtoa_r+0x3ca>
  408936:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40893a:	f04f 0a02 	mov.w	sl, #2
  40893e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  408942:	e657      	b.n	4085f4 <_dtoa_r+0x7b4>
  408944:	2100      	movs	r1, #0
  408946:	2301      	movs	r3, #1
  408948:	6461      	str	r1, [r4, #68]	; 0x44
  40894a:	4620      	mov	r0, r4
  40894c:	9325      	str	r3, [sp, #148]	; 0x94
  40894e:	f000 ff29 	bl	4097a4 <_Balloc>
  408952:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408954:	9004      	str	r0, [sp, #16]
  408956:	6420      	str	r0, [r4, #64]	; 0x40
  408958:	930a      	str	r3, [sp, #40]	; 0x28
  40895a:	930f      	str	r3, [sp, #60]	; 0x3c
  40895c:	e629      	b.n	4085b2 <_dtoa_r+0x772>
  40895e:	2a00      	cmp	r2, #0
  408960:	46d0      	mov	r8, sl
  408962:	f8cd b018 	str.w	fp, [sp, #24]
  408966:	469a      	mov	sl, r3
  408968:	dd11      	ble.n	40898e <_dtoa_r+0xb4e>
  40896a:	4649      	mov	r1, r9
  40896c:	2201      	movs	r2, #1
  40896e:	4620      	mov	r0, r4
  408970:	f001 f8c4 	bl	409afc <__lshift>
  408974:	4641      	mov	r1, r8
  408976:	4681      	mov	r9, r0
  408978:	f001 f912 	bl	409ba0 <__mcmp>
  40897c:	2800      	cmp	r0, #0
  40897e:	f340 8146 	ble.w	408c0e <_dtoa_r+0xdce>
  408982:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  408986:	f000 8106 	beq.w	408b96 <_dtoa_r+0xd56>
  40898a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40898e:	46b3      	mov	fp, r6
  408990:	f887 a000 	strb.w	sl, [r7]
  408994:	1c7d      	adds	r5, r7, #1
  408996:	9e06      	ldr	r6, [sp, #24]
  408998:	e5d2      	b.n	408540 <_dtoa_r+0x700>
  40899a:	d104      	bne.n	4089a6 <_dtoa_r+0xb66>
  40899c:	f01a 0f01 	tst.w	sl, #1
  4089a0:	d001      	beq.n	4089a6 <_dtoa_r+0xb66>
  4089a2:	e5bd      	b.n	408520 <_dtoa_r+0x6e0>
  4089a4:	4615      	mov	r5, r2
  4089a6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4089aa:	2b30      	cmp	r3, #48	; 0x30
  4089ac:	f105 32ff 	add.w	r2, r5, #4294967295
  4089b0:	d0f8      	beq.n	4089a4 <_dtoa_r+0xb64>
  4089b2:	e5c5      	b.n	408540 <_dtoa_r+0x700>
  4089b4:	9904      	ldr	r1, [sp, #16]
  4089b6:	2230      	movs	r2, #48	; 0x30
  4089b8:	700a      	strb	r2, [r1, #0]
  4089ba:	9a02      	ldr	r2, [sp, #8]
  4089bc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4089c0:	3201      	adds	r2, #1
  4089c2:	9202      	str	r2, [sp, #8]
  4089c4:	f7ff bbfc 	b.w	4081c0 <_dtoa_r+0x380>
  4089c8:	f000 80bb 	beq.w	408b42 <_dtoa_r+0xd02>
  4089cc:	9b02      	ldr	r3, [sp, #8]
  4089ce:	425d      	negs	r5, r3
  4089d0:	4b84      	ldr	r3, [pc, #528]	; (408be4 <_dtoa_r+0xda4>)
  4089d2:	f005 020f 	and.w	r2, r5, #15
  4089d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4089da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4089e2:	f7fd f8b9 	bl	405b58 <__aeabi_dmul>
  4089e6:	112d      	asrs	r5, r5, #4
  4089e8:	4607      	mov	r7, r0
  4089ea:	4688      	mov	r8, r1
  4089ec:	f000 812c 	beq.w	408c48 <_dtoa_r+0xe08>
  4089f0:	4e7d      	ldr	r6, [pc, #500]	; (408be8 <_dtoa_r+0xda8>)
  4089f2:	f04f 0a02 	mov.w	sl, #2
  4089f6:	07eb      	lsls	r3, r5, #31
  4089f8:	d509      	bpl.n	408a0e <_dtoa_r+0xbce>
  4089fa:	4638      	mov	r0, r7
  4089fc:	4641      	mov	r1, r8
  4089fe:	e9d6 2300 	ldrd	r2, r3, [r6]
  408a02:	f7fd f8a9 	bl	405b58 <__aeabi_dmul>
  408a06:	f10a 0a01 	add.w	sl, sl, #1
  408a0a:	4607      	mov	r7, r0
  408a0c:	4688      	mov	r8, r1
  408a0e:	106d      	asrs	r5, r5, #1
  408a10:	f106 0608 	add.w	r6, r6, #8
  408a14:	d1ef      	bne.n	4089f6 <_dtoa_r+0xbb6>
  408a16:	e608      	b.n	40862a <_dtoa_r+0x7ea>
  408a18:	6871      	ldr	r1, [r6, #4]
  408a1a:	4620      	mov	r0, r4
  408a1c:	f000 fec2 	bl	4097a4 <_Balloc>
  408a20:	6933      	ldr	r3, [r6, #16]
  408a22:	3302      	adds	r3, #2
  408a24:	009a      	lsls	r2, r3, #2
  408a26:	4605      	mov	r5, r0
  408a28:	f106 010c 	add.w	r1, r6, #12
  408a2c:	300c      	adds	r0, #12
  408a2e:	f000 fdaf 	bl	409590 <memcpy>
  408a32:	4629      	mov	r1, r5
  408a34:	2201      	movs	r2, #1
  408a36:	4620      	mov	r0, r4
  408a38:	f001 f860 	bl	409afc <__lshift>
  408a3c:	9006      	str	r0, [sp, #24]
  408a3e:	e4b5      	b.n	4083ac <_dtoa_r+0x56c>
  408a40:	2b39      	cmp	r3, #57	; 0x39
  408a42:	f8cd b018 	str.w	fp, [sp, #24]
  408a46:	46d0      	mov	r8, sl
  408a48:	f000 80a5 	beq.w	408b96 <_dtoa_r+0xd56>
  408a4c:	f103 0a01 	add.w	sl, r3, #1
  408a50:	46b3      	mov	fp, r6
  408a52:	f887 a000 	strb.w	sl, [r7]
  408a56:	1c7d      	adds	r5, r7, #1
  408a58:	9e06      	ldr	r6, [sp, #24]
  408a5a:	e571      	b.n	408540 <_dtoa_r+0x700>
  408a5c:	465a      	mov	r2, fp
  408a5e:	46d0      	mov	r8, sl
  408a60:	46b3      	mov	fp, r6
  408a62:	469a      	mov	sl, r3
  408a64:	4616      	mov	r6, r2
  408a66:	e54f      	b.n	408508 <_dtoa_r+0x6c8>
  408a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408a6a:	495e      	ldr	r1, [pc, #376]	; (408be4 <_dtoa_r+0xda4>)
  408a6c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408a70:	462a      	mov	r2, r5
  408a72:	4633      	mov	r3, r6
  408a74:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  408a78:	f7fd f86e 	bl	405b58 <__aeabi_dmul>
  408a7c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  408a80:	4638      	mov	r0, r7
  408a82:	4641      	mov	r1, r8
  408a84:	f001 fcfc 	bl	40a480 <__aeabi_d2iz>
  408a88:	4605      	mov	r5, r0
  408a8a:	f7fc ffff 	bl	405a8c <__aeabi_i2d>
  408a8e:	460b      	mov	r3, r1
  408a90:	4602      	mov	r2, r0
  408a92:	4641      	mov	r1, r8
  408a94:	4638      	mov	r0, r7
  408a96:	f7fc feab 	bl	4057f0 <__aeabi_dsub>
  408a9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408a9c:	460f      	mov	r7, r1
  408a9e:	9904      	ldr	r1, [sp, #16]
  408aa0:	3530      	adds	r5, #48	; 0x30
  408aa2:	2b01      	cmp	r3, #1
  408aa4:	700d      	strb	r5, [r1, #0]
  408aa6:	4606      	mov	r6, r0
  408aa8:	f101 0501 	add.w	r5, r1, #1
  408aac:	d026      	beq.n	408afc <_dtoa_r+0xcbc>
  408aae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408ab0:	9a04      	ldr	r2, [sp, #16]
  408ab2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408bf0 <_dtoa_r+0xdb0>
  408ab6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  408aba:	4413      	add	r3, r2
  408abc:	f04f 0a00 	mov.w	sl, #0
  408ac0:	4699      	mov	r9, r3
  408ac2:	4652      	mov	r2, sl
  408ac4:	465b      	mov	r3, fp
  408ac6:	4630      	mov	r0, r6
  408ac8:	4639      	mov	r1, r7
  408aca:	f7fd f845 	bl	405b58 <__aeabi_dmul>
  408ace:	460f      	mov	r7, r1
  408ad0:	4606      	mov	r6, r0
  408ad2:	f001 fcd5 	bl	40a480 <__aeabi_d2iz>
  408ad6:	4680      	mov	r8, r0
  408ad8:	f7fc ffd8 	bl	405a8c <__aeabi_i2d>
  408adc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408ae0:	4602      	mov	r2, r0
  408ae2:	460b      	mov	r3, r1
  408ae4:	4630      	mov	r0, r6
  408ae6:	4639      	mov	r1, r7
  408ae8:	f7fc fe82 	bl	4057f0 <__aeabi_dsub>
  408aec:	f805 8b01 	strb.w	r8, [r5], #1
  408af0:	454d      	cmp	r5, r9
  408af2:	4606      	mov	r6, r0
  408af4:	460f      	mov	r7, r1
  408af6:	d1e4      	bne.n	408ac2 <_dtoa_r+0xc82>
  408af8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408afc:	4b3b      	ldr	r3, [pc, #236]	; (408bec <_dtoa_r+0xdac>)
  408afe:	2200      	movs	r2, #0
  408b00:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408b04:	f7fc fe76 	bl	4057f4 <__adddf3>
  408b08:	4632      	mov	r2, r6
  408b0a:	463b      	mov	r3, r7
  408b0c:	f001 fc7a 	bl	40a404 <__aeabi_dcmplt>
  408b10:	2800      	cmp	r0, #0
  408b12:	d046      	beq.n	408ba2 <_dtoa_r+0xd62>
  408b14:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408b16:	9302      	str	r3, [sp, #8]
  408b18:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408b1c:	f7ff bb43 	b.w	4081a6 <_dtoa_r+0x366>
  408b20:	f04f 0800 	mov.w	r8, #0
  408b24:	4646      	mov	r6, r8
  408b26:	e6a9      	b.n	40887c <_dtoa_r+0xa3c>
  408b28:	9b08      	ldr	r3, [sp, #32]
  408b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408b2c:	1a9d      	subs	r5, r3, r2
  408b2e:	2300      	movs	r3, #0
  408b30:	f7ff bb71 	b.w	408216 <_dtoa_r+0x3d6>
  408b34:	9b18      	ldr	r3, [sp, #96]	; 0x60
  408b36:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408b38:	9d08      	ldr	r5, [sp, #32]
  408b3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  408b3e:	f7ff bb6a 	b.w	408216 <_dtoa_r+0x3d6>
  408b42:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  408b46:	f04f 0a02 	mov.w	sl, #2
  408b4a:	e56e      	b.n	40862a <_dtoa_r+0x7ea>
  408b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408b4e:	2b00      	cmp	r3, #0
  408b50:	f43f aeb8 	beq.w	4088c4 <_dtoa_r+0xa84>
  408b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408b56:	2b00      	cmp	r3, #0
  408b58:	f77f aede 	ble.w	408918 <_dtoa_r+0xad8>
  408b5c:	2200      	movs	r2, #0
  408b5e:	4b24      	ldr	r3, [pc, #144]	; (408bf0 <_dtoa_r+0xdb0>)
  408b60:	4638      	mov	r0, r7
  408b62:	4641      	mov	r1, r8
  408b64:	f7fc fff8 	bl	405b58 <__aeabi_dmul>
  408b68:	4607      	mov	r7, r0
  408b6a:	4688      	mov	r8, r1
  408b6c:	f10a 0001 	add.w	r0, sl, #1
  408b70:	f7fc ff8c 	bl	405a8c <__aeabi_i2d>
  408b74:	463a      	mov	r2, r7
  408b76:	4643      	mov	r3, r8
  408b78:	f7fc ffee 	bl	405b58 <__aeabi_dmul>
  408b7c:	2200      	movs	r2, #0
  408b7e:	4b17      	ldr	r3, [pc, #92]	; (408bdc <_dtoa_r+0xd9c>)
  408b80:	f7fc fe38 	bl	4057f4 <__adddf3>
  408b84:	9a02      	ldr	r2, [sp, #8]
  408b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408b88:	9312      	str	r3, [sp, #72]	; 0x48
  408b8a:	3a01      	subs	r2, #1
  408b8c:	4605      	mov	r5, r0
  408b8e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408b92:	9215      	str	r2, [sp, #84]	; 0x54
  408b94:	e56a      	b.n	40866c <_dtoa_r+0x82c>
  408b96:	2239      	movs	r2, #57	; 0x39
  408b98:	46b3      	mov	fp, r6
  408b9a:	703a      	strb	r2, [r7, #0]
  408b9c:	9e06      	ldr	r6, [sp, #24]
  408b9e:	1c7d      	adds	r5, r7, #1
  408ba0:	e4c0      	b.n	408524 <_dtoa_r+0x6e4>
  408ba2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  408ba6:	2000      	movs	r0, #0
  408ba8:	4910      	ldr	r1, [pc, #64]	; (408bec <_dtoa_r+0xdac>)
  408baa:	f7fc fe21 	bl	4057f0 <__aeabi_dsub>
  408bae:	4632      	mov	r2, r6
  408bb0:	463b      	mov	r3, r7
  408bb2:	f001 fc45 	bl	40a440 <__aeabi_dcmpgt>
  408bb6:	b908      	cbnz	r0, 408bbc <_dtoa_r+0xd7c>
  408bb8:	e6ae      	b.n	408918 <_dtoa_r+0xad8>
  408bba:	4615      	mov	r5, r2
  408bbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408bc0:	2b30      	cmp	r3, #48	; 0x30
  408bc2:	f105 32ff 	add.w	r2, r5, #4294967295
  408bc6:	d0f8      	beq.n	408bba <_dtoa_r+0xd7a>
  408bc8:	e5d7      	b.n	40877a <_dtoa_r+0x93a>
  408bca:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408bce:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408bd0:	9302      	str	r3, [sp, #8]
  408bd2:	f7ff bae8 	b.w	4081a6 <_dtoa_r+0x366>
  408bd6:	970c      	str	r7, [sp, #48]	; 0x30
  408bd8:	f7ff bba5 	b.w	408326 <_dtoa_r+0x4e6>
  408bdc:	401c0000 	.word	0x401c0000
  408be0:	40140000 	.word	0x40140000
  408be4:	0040b060 	.word	0x0040b060
  408be8:	0040b038 	.word	0x0040b038
  408bec:	3fe00000 	.word	0x3fe00000
  408bf0:	40240000 	.word	0x40240000
  408bf4:	2b39      	cmp	r3, #57	; 0x39
  408bf6:	f8cd b018 	str.w	fp, [sp, #24]
  408bfa:	46d0      	mov	r8, sl
  408bfc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408c00:	469a      	mov	sl, r3
  408c02:	d0c8      	beq.n	408b96 <_dtoa_r+0xd56>
  408c04:	f1bb 0f00 	cmp.w	fp, #0
  408c08:	f73f aebf 	bgt.w	40898a <_dtoa_r+0xb4a>
  408c0c:	e6bf      	b.n	40898e <_dtoa_r+0xb4e>
  408c0e:	f47f aebe 	bne.w	40898e <_dtoa_r+0xb4e>
  408c12:	f01a 0f01 	tst.w	sl, #1
  408c16:	f43f aeba 	beq.w	40898e <_dtoa_r+0xb4e>
  408c1a:	e6b2      	b.n	408982 <_dtoa_r+0xb42>
  408c1c:	f04f 0800 	mov.w	r8, #0
  408c20:	4646      	mov	r6, r8
  408c22:	e5e9      	b.n	4087f8 <_dtoa_r+0x9b8>
  408c24:	4631      	mov	r1, r6
  408c26:	2300      	movs	r3, #0
  408c28:	220a      	movs	r2, #10
  408c2a:	4620      	mov	r0, r4
  408c2c:	f000 fdea 	bl	409804 <__multadd>
  408c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408c32:	2b00      	cmp	r3, #0
  408c34:	4606      	mov	r6, r0
  408c36:	dd0a      	ble.n	408c4e <_dtoa_r+0xe0e>
  408c38:	930a      	str	r3, [sp, #40]	; 0x28
  408c3a:	f7ff bbaa 	b.w	408392 <_dtoa_r+0x552>
  408c3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c40:	2b02      	cmp	r3, #2
  408c42:	dc23      	bgt.n	408c8c <_dtoa_r+0xe4c>
  408c44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408c46:	e43b      	b.n	4084c0 <_dtoa_r+0x680>
  408c48:	f04f 0a02 	mov.w	sl, #2
  408c4c:	e4ed      	b.n	40862a <_dtoa_r+0x7ea>
  408c4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c50:	2b02      	cmp	r3, #2
  408c52:	dc1b      	bgt.n	408c8c <_dtoa_r+0xe4c>
  408c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408c56:	e7ef      	b.n	408c38 <_dtoa_r+0xdf8>
  408c58:	2500      	movs	r5, #0
  408c5a:	6465      	str	r5, [r4, #68]	; 0x44
  408c5c:	4629      	mov	r1, r5
  408c5e:	4620      	mov	r0, r4
  408c60:	f000 fda0 	bl	4097a4 <_Balloc>
  408c64:	f04f 33ff 	mov.w	r3, #4294967295
  408c68:	930a      	str	r3, [sp, #40]	; 0x28
  408c6a:	930f      	str	r3, [sp, #60]	; 0x3c
  408c6c:	2301      	movs	r3, #1
  408c6e:	9004      	str	r0, [sp, #16]
  408c70:	9525      	str	r5, [sp, #148]	; 0x94
  408c72:	6420      	str	r0, [r4, #64]	; 0x40
  408c74:	930b      	str	r3, [sp, #44]	; 0x2c
  408c76:	f7ff b9dd 	b.w	408034 <_dtoa_r+0x1f4>
  408c7a:	2501      	movs	r5, #1
  408c7c:	f7ff b9a5 	b.w	407fca <_dtoa_r+0x18a>
  408c80:	f43f ab69 	beq.w	408356 <_dtoa_r+0x516>
  408c84:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  408c88:	f7ff bbf9 	b.w	40847e <_dtoa_r+0x63e>
  408c8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408c8e:	930a      	str	r3, [sp, #40]	; 0x28
  408c90:	e5e5      	b.n	40885e <_dtoa_r+0xa1e>
  408c92:	bf00      	nop

00408c94 <__libc_fini_array>:
  408c94:	b538      	push	{r3, r4, r5, lr}
  408c96:	4c0a      	ldr	r4, [pc, #40]	; (408cc0 <__libc_fini_array+0x2c>)
  408c98:	4d0a      	ldr	r5, [pc, #40]	; (408cc4 <__libc_fini_array+0x30>)
  408c9a:	1b64      	subs	r4, r4, r5
  408c9c:	10a4      	asrs	r4, r4, #2
  408c9e:	d00a      	beq.n	408cb6 <__libc_fini_array+0x22>
  408ca0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408ca4:	3b01      	subs	r3, #1
  408ca6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408caa:	3c01      	subs	r4, #1
  408cac:	f855 3904 	ldr.w	r3, [r5], #-4
  408cb0:	4798      	blx	r3
  408cb2:	2c00      	cmp	r4, #0
  408cb4:	d1f9      	bne.n	408caa <__libc_fini_array+0x16>
  408cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408cba:	f002 bac7 	b.w	40b24c <_fini>
  408cbe:	bf00      	nop
  408cc0:	0040b25c 	.word	0x0040b25c
  408cc4:	0040b258 	.word	0x0040b258

00408cc8 <_malloc_trim_r>:
  408cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408cca:	4f24      	ldr	r7, [pc, #144]	; (408d5c <_malloc_trim_r+0x94>)
  408ccc:	460c      	mov	r4, r1
  408cce:	4606      	mov	r6, r0
  408cd0:	f000 fd5c 	bl	40978c <__malloc_lock>
  408cd4:	68bb      	ldr	r3, [r7, #8]
  408cd6:	685d      	ldr	r5, [r3, #4]
  408cd8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408cdc:	310f      	adds	r1, #15
  408cde:	f025 0503 	bic.w	r5, r5, #3
  408ce2:	4429      	add	r1, r5
  408ce4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408ce8:	f021 010f 	bic.w	r1, r1, #15
  408cec:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408cf0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408cf4:	db07      	blt.n	408d06 <_malloc_trim_r+0x3e>
  408cf6:	2100      	movs	r1, #0
  408cf8:	4630      	mov	r0, r6
  408cfa:	f001 f9f3 	bl	40a0e4 <_sbrk_r>
  408cfe:	68bb      	ldr	r3, [r7, #8]
  408d00:	442b      	add	r3, r5
  408d02:	4298      	cmp	r0, r3
  408d04:	d004      	beq.n	408d10 <_malloc_trim_r+0x48>
  408d06:	4630      	mov	r0, r6
  408d08:	f000 fd46 	bl	409798 <__malloc_unlock>
  408d0c:	2000      	movs	r0, #0
  408d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408d10:	4261      	negs	r1, r4
  408d12:	4630      	mov	r0, r6
  408d14:	f001 f9e6 	bl	40a0e4 <_sbrk_r>
  408d18:	3001      	adds	r0, #1
  408d1a:	d00d      	beq.n	408d38 <_malloc_trim_r+0x70>
  408d1c:	4b10      	ldr	r3, [pc, #64]	; (408d60 <_malloc_trim_r+0x98>)
  408d1e:	68ba      	ldr	r2, [r7, #8]
  408d20:	6819      	ldr	r1, [r3, #0]
  408d22:	1b2d      	subs	r5, r5, r4
  408d24:	f045 0501 	orr.w	r5, r5, #1
  408d28:	4630      	mov	r0, r6
  408d2a:	1b09      	subs	r1, r1, r4
  408d2c:	6055      	str	r5, [r2, #4]
  408d2e:	6019      	str	r1, [r3, #0]
  408d30:	f000 fd32 	bl	409798 <__malloc_unlock>
  408d34:	2001      	movs	r0, #1
  408d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408d38:	2100      	movs	r1, #0
  408d3a:	4630      	mov	r0, r6
  408d3c:	f001 f9d2 	bl	40a0e4 <_sbrk_r>
  408d40:	68ba      	ldr	r2, [r7, #8]
  408d42:	1a83      	subs	r3, r0, r2
  408d44:	2b0f      	cmp	r3, #15
  408d46:	ddde      	ble.n	408d06 <_malloc_trim_r+0x3e>
  408d48:	4c06      	ldr	r4, [pc, #24]	; (408d64 <_malloc_trim_r+0x9c>)
  408d4a:	4905      	ldr	r1, [pc, #20]	; (408d60 <_malloc_trim_r+0x98>)
  408d4c:	6824      	ldr	r4, [r4, #0]
  408d4e:	f043 0301 	orr.w	r3, r3, #1
  408d52:	1b00      	subs	r0, r0, r4
  408d54:	6053      	str	r3, [r2, #4]
  408d56:	6008      	str	r0, [r1, #0]
  408d58:	e7d5      	b.n	408d06 <_malloc_trim_r+0x3e>
  408d5a:	bf00      	nop
  408d5c:	20000a20 	.word	0x20000a20
  408d60:	200061c8 	.word	0x200061c8
  408d64:	20000e28 	.word	0x20000e28

00408d68 <_free_r>:
  408d68:	2900      	cmp	r1, #0
  408d6a:	d044      	beq.n	408df6 <_free_r+0x8e>
  408d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408d70:	460d      	mov	r5, r1
  408d72:	4680      	mov	r8, r0
  408d74:	f000 fd0a 	bl	40978c <__malloc_lock>
  408d78:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408d7c:	4969      	ldr	r1, [pc, #420]	; (408f24 <_free_r+0x1bc>)
  408d7e:	f027 0301 	bic.w	r3, r7, #1
  408d82:	f1a5 0408 	sub.w	r4, r5, #8
  408d86:	18e2      	adds	r2, r4, r3
  408d88:	688e      	ldr	r6, [r1, #8]
  408d8a:	6850      	ldr	r0, [r2, #4]
  408d8c:	42b2      	cmp	r2, r6
  408d8e:	f020 0003 	bic.w	r0, r0, #3
  408d92:	d05e      	beq.n	408e52 <_free_r+0xea>
  408d94:	07fe      	lsls	r6, r7, #31
  408d96:	6050      	str	r0, [r2, #4]
  408d98:	d40b      	bmi.n	408db2 <_free_r+0x4a>
  408d9a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408d9e:	1be4      	subs	r4, r4, r7
  408da0:	f101 0e08 	add.w	lr, r1, #8
  408da4:	68a5      	ldr	r5, [r4, #8]
  408da6:	4575      	cmp	r5, lr
  408da8:	443b      	add	r3, r7
  408daa:	d06d      	beq.n	408e88 <_free_r+0x120>
  408dac:	68e7      	ldr	r7, [r4, #12]
  408dae:	60ef      	str	r7, [r5, #12]
  408db0:	60bd      	str	r5, [r7, #8]
  408db2:	1815      	adds	r5, r2, r0
  408db4:	686d      	ldr	r5, [r5, #4]
  408db6:	07ed      	lsls	r5, r5, #31
  408db8:	d53e      	bpl.n	408e38 <_free_r+0xd0>
  408dba:	f043 0201 	orr.w	r2, r3, #1
  408dbe:	6062      	str	r2, [r4, #4]
  408dc0:	50e3      	str	r3, [r4, r3]
  408dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408dc6:	d217      	bcs.n	408df8 <_free_r+0x90>
  408dc8:	08db      	lsrs	r3, r3, #3
  408dca:	1c58      	adds	r0, r3, #1
  408dcc:	109a      	asrs	r2, r3, #2
  408dce:	684d      	ldr	r5, [r1, #4]
  408dd0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408dd4:	60a7      	str	r7, [r4, #8]
  408dd6:	2301      	movs	r3, #1
  408dd8:	4093      	lsls	r3, r2
  408dda:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  408dde:	432b      	orrs	r3, r5
  408de0:	3a08      	subs	r2, #8
  408de2:	60e2      	str	r2, [r4, #12]
  408de4:	604b      	str	r3, [r1, #4]
  408de6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408dea:	60fc      	str	r4, [r7, #12]
  408dec:	4640      	mov	r0, r8
  408dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408df2:	f000 bcd1 	b.w	409798 <__malloc_unlock>
  408df6:	4770      	bx	lr
  408df8:	0a5a      	lsrs	r2, r3, #9
  408dfa:	2a04      	cmp	r2, #4
  408dfc:	d852      	bhi.n	408ea4 <_free_r+0x13c>
  408dfe:	099a      	lsrs	r2, r3, #6
  408e00:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408e04:	00ff      	lsls	r7, r7, #3
  408e06:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408e0a:	19c8      	adds	r0, r1, r7
  408e0c:	59ca      	ldr	r2, [r1, r7]
  408e0e:	3808      	subs	r0, #8
  408e10:	4290      	cmp	r0, r2
  408e12:	d04f      	beq.n	408eb4 <_free_r+0x14c>
  408e14:	6851      	ldr	r1, [r2, #4]
  408e16:	f021 0103 	bic.w	r1, r1, #3
  408e1a:	428b      	cmp	r3, r1
  408e1c:	d232      	bcs.n	408e84 <_free_r+0x11c>
  408e1e:	6892      	ldr	r2, [r2, #8]
  408e20:	4290      	cmp	r0, r2
  408e22:	d1f7      	bne.n	408e14 <_free_r+0xac>
  408e24:	68c3      	ldr	r3, [r0, #12]
  408e26:	60a0      	str	r0, [r4, #8]
  408e28:	60e3      	str	r3, [r4, #12]
  408e2a:	609c      	str	r4, [r3, #8]
  408e2c:	60c4      	str	r4, [r0, #12]
  408e2e:	4640      	mov	r0, r8
  408e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408e34:	f000 bcb0 	b.w	409798 <__malloc_unlock>
  408e38:	6895      	ldr	r5, [r2, #8]
  408e3a:	4f3b      	ldr	r7, [pc, #236]	; (408f28 <_free_r+0x1c0>)
  408e3c:	42bd      	cmp	r5, r7
  408e3e:	4403      	add	r3, r0
  408e40:	d040      	beq.n	408ec4 <_free_r+0x15c>
  408e42:	68d0      	ldr	r0, [r2, #12]
  408e44:	60e8      	str	r0, [r5, #12]
  408e46:	f043 0201 	orr.w	r2, r3, #1
  408e4a:	6085      	str	r5, [r0, #8]
  408e4c:	6062      	str	r2, [r4, #4]
  408e4e:	50e3      	str	r3, [r4, r3]
  408e50:	e7b7      	b.n	408dc2 <_free_r+0x5a>
  408e52:	07ff      	lsls	r7, r7, #31
  408e54:	4403      	add	r3, r0
  408e56:	d407      	bmi.n	408e68 <_free_r+0x100>
  408e58:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408e5c:	1aa4      	subs	r4, r4, r2
  408e5e:	4413      	add	r3, r2
  408e60:	68a0      	ldr	r0, [r4, #8]
  408e62:	68e2      	ldr	r2, [r4, #12]
  408e64:	60c2      	str	r2, [r0, #12]
  408e66:	6090      	str	r0, [r2, #8]
  408e68:	4a30      	ldr	r2, [pc, #192]	; (408f2c <_free_r+0x1c4>)
  408e6a:	6812      	ldr	r2, [r2, #0]
  408e6c:	f043 0001 	orr.w	r0, r3, #1
  408e70:	4293      	cmp	r3, r2
  408e72:	6060      	str	r0, [r4, #4]
  408e74:	608c      	str	r4, [r1, #8]
  408e76:	d3b9      	bcc.n	408dec <_free_r+0x84>
  408e78:	4b2d      	ldr	r3, [pc, #180]	; (408f30 <_free_r+0x1c8>)
  408e7a:	4640      	mov	r0, r8
  408e7c:	6819      	ldr	r1, [r3, #0]
  408e7e:	f7ff ff23 	bl	408cc8 <_malloc_trim_r>
  408e82:	e7b3      	b.n	408dec <_free_r+0x84>
  408e84:	4610      	mov	r0, r2
  408e86:	e7cd      	b.n	408e24 <_free_r+0xbc>
  408e88:	1811      	adds	r1, r2, r0
  408e8a:	6849      	ldr	r1, [r1, #4]
  408e8c:	07c9      	lsls	r1, r1, #31
  408e8e:	d444      	bmi.n	408f1a <_free_r+0x1b2>
  408e90:	6891      	ldr	r1, [r2, #8]
  408e92:	68d2      	ldr	r2, [r2, #12]
  408e94:	60ca      	str	r2, [r1, #12]
  408e96:	4403      	add	r3, r0
  408e98:	f043 0001 	orr.w	r0, r3, #1
  408e9c:	6091      	str	r1, [r2, #8]
  408e9e:	6060      	str	r0, [r4, #4]
  408ea0:	50e3      	str	r3, [r4, r3]
  408ea2:	e7a3      	b.n	408dec <_free_r+0x84>
  408ea4:	2a14      	cmp	r2, #20
  408ea6:	d816      	bhi.n	408ed6 <_free_r+0x16e>
  408ea8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408eac:	00ff      	lsls	r7, r7, #3
  408eae:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  408eb2:	e7aa      	b.n	408e0a <_free_r+0xa2>
  408eb4:	10aa      	asrs	r2, r5, #2
  408eb6:	2301      	movs	r3, #1
  408eb8:	684d      	ldr	r5, [r1, #4]
  408eba:	4093      	lsls	r3, r2
  408ebc:	432b      	orrs	r3, r5
  408ebe:	604b      	str	r3, [r1, #4]
  408ec0:	4603      	mov	r3, r0
  408ec2:	e7b0      	b.n	408e26 <_free_r+0xbe>
  408ec4:	f043 0201 	orr.w	r2, r3, #1
  408ec8:	614c      	str	r4, [r1, #20]
  408eca:	610c      	str	r4, [r1, #16]
  408ecc:	60e5      	str	r5, [r4, #12]
  408ece:	60a5      	str	r5, [r4, #8]
  408ed0:	6062      	str	r2, [r4, #4]
  408ed2:	50e3      	str	r3, [r4, r3]
  408ed4:	e78a      	b.n	408dec <_free_r+0x84>
  408ed6:	2a54      	cmp	r2, #84	; 0x54
  408ed8:	d806      	bhi.n	408ee8 <_free_r+0x180>
  408eda:	0b1a      	lsrs	r2, r3, #12
  408edc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408ee0:	00ff      	lsls	r7, r7, #3
  408ee2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408ee6:	e790      	b.n	408e0a <_free_r+0xa2>
  408ee8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408eec:	d806      	bhi.n	408efc <_free_r+0x194>
  408eee:	0bda      	lsrs	r2, r3, #15
  408ef0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408ef4:	00ff      	lsls	r7, r7, #3
  408ef6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  408efa:	e786      	b.n	408e0a <_free_r+0xa2>
  408efc:	f240 5054 	movw	r0, #1364	; 0x554
  408f00:	4282      	cmp	r2, r0
  408f02:	d806      	bhi.n	408f12 <_free_r+0x1aa>
  408f04:	0c9a      	lsrs	r2, r3, #18
  408f06:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  408f0a:	00ff      	lsls	r7, r7, #3
  408f0c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408f10:	e77b      	b.n	408e0a <_free_r+0xa2>
  408f12:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  408f16:	257e      	movs	r5, #126	; 0x7e
  408f18:	e777      	b.n	408e0a <_free_r+0xa2>
  408f1a:	f043 0101 	orr.w	r1, r3, #1
  408f1e:	6061      	str	r1, [r4, #4]
  408f20:	6013      	str	r3, [r2, #0]
  408f22:	e763      	b.n	408dec <_free_r+0x84>
  408f24:	20000a20 	.word	0x20000a20
  408f28:	20000a28 	.word	0x20000a28
  408f2c:	20000e2c 	.word	0x20000e2c
  408f30:	200061f8 	.word	0x200061f8

00408f34 <_localeconv_r>:
  408f34:	4a04      	ldr	r2, [pc, #16]	; (408f48 <_localeconv_r+0x14>)
  408f36:	4b05      	ldr	r3, [pc, #20]	; (408f4c <_localeconv_r+0x18>)
  408f38:	6812      	ldr	r2, [r2, #0]
  408f3a:	6b50      	ldr	r0, [r2, #52]	; 0x34
  408f3c:	2800      	cmp	r0, #0
  408f3e:	bf08      	it	eq
  408f40:	4618      	moveq	r0, r3
  408f42:	30f0      	adds	r0, #240	; 0xf0
  408f44:	4770      	bx	lr
  408f46:	bf00      	nop
  408f48:	20000484 	.word	0x20000484
  408f4c:	200008b4 	.word	0x200008b4

00408f50 <__retarget_lock_acquire_recursive>:
  408f50:	4770      	bx	lr
  408f52:	bf00      	nop

00408f54 <__retarget_lock_release_recursive>:
  408f54:	4770      	bx	lr
  408f56:	bf00      	nop

00408f58 <_malloc_r>:
  408f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408f5c:	f101 060b 	add.w	r6, r1, #11
  408f60:	2e16      	cmp	r6, #22
  408f62:	b083      	sub	sp, #12
  408f64:	4605      	mov	r5, r0
  408f66:	f240 809e 	bls.w	4090a6 <_malloc_r+0x14e>
  408f6a:	f036 0607 	bics.w	r6, r6, #7
  408f6e:	f100 80bd 	bmi.w	4090ec <_malloc_r+0x194>
  408f72:	42b1      	cmp	r1, r6
  408f74:	f200 80ba 	bhi.w	4090ec <_malloc_r+0x194>
  408f78:	f000 fc08 	bl	40978c <__malloc_lock>
  408f7c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  408f80:	f0c0 8293 	bcc.w	4094aa <_malloc_r+0x552>
  408f84:	0a73      	lsrs	r3, r6, #9
  408f86:	f000 80b8 	beq.w	4090fa <_malloc_r+0x1a2>
  408f8a:	2b04      	cmp	r3, #4
  408f8c:	f200 8179 	bhi.w	409282 <_malloc_r+0x32a>
  408f90:	09b3      	lsrs	r3, r6, #6
  408f92:	f103 0039 	add.w	r0, r3, #57	; 0x39
  408f96:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  408f9a:	00c3      	lsls	r3, r0, #3
  408f9c:	4fbf      	ldr	r7, [pc, #764]	; (40929c <_malloc_r+0x344>)
  408f9e:	443b      	add	r3, r7
  408fa0:	f1a3 0108 	sub.w	r1, r3, #8
  408fa4:	685c      	ldr	r4, [r3, #4]
  408fa6:	42a1      	cmp	r1, r4
  408fa8:	d106      	bne.n	408fb8 <_malloc_r+0x60>
  408faa:	e00c      	b.n	408fc6 <_malloc_r+0x6e>
  408fac:	2a00      	cmp	r2, #0
  408fae:	f280 80aa 	bge.w	409106 <_malloc_r+0x1ae>
  408fb2:	68e4      	ldr	r4, [r4, #12]
  408fb4:	42a1      	cmp	r1, r4
  408fb6:	d006      	beq.n	408fc6 <_malloc_r+0x6e>
  408fb8:	6863      	ldr	r3, [r4, #4]
  408fba:	f023 0303 	bic.w	r3, r3, #3
  408fbe:	1b9a      	subs	r2, r3, r6
  408fc0:	2a0f      	cmp	r2, #15
  408fc2:	ddf3      	ble.n	408fac <_malloc_r+0x54>
  408fc4:	4670      	mov	r0, lr
  408fc6:	693c      	ldr	r4, [r7, #16]
  408fc8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4092b0 <_malloc_r+0x358>
  408fcc:	4574      	cmp	r4, lr
  408fce:	f000 81ab 	beq.w	409328 <_malloc_r+0x3d0>
  408fd2:	6863      	ldr	r3, [r4, #4]
  408fd4:	f023 0303 	bic.w	r3, r3, #3
  408fd8:	1b9a      	subs	r2, r3, r6
  408fda:	2a0f      	cmp	r2, #15
  408fdc:	f300 8190 	bgt.w	409300 <_malloc_r+0x3a8>
  408fe0:	2a00      	cmp	r2, #0
  408fe2:	f8c7 e014 	str.w	lr, [r7, #20]
  408fe6:	f8c7 e010 	str.w	lr, [r7, #16]
  408fea:	f280 809d 	bge.w	409128 <_malloc_r+0x1d0>
  408fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408ff2:	f080 8161 	bcs.w	4092b8 <_malloc_r+0x360>
  408ff6:	08db      	lsrs	r3, r3, #3
  408ff8:	f103 0c01 	add.w	ip, r3, #1
  408ffc:	1099      	asrs	r1, r3, #2
  408ffe:	687a      	ldr	r2, [r7, #4]
  409000:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  409004:	f8c4 8008 	str.w	r8, [r4, #8]
  409008:	2301      	movs	r3, #1
  40900a:	408b      	lsls	r3, r1
  40900c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  409010:	4313      	orrs	r3, r2
  409012:	3908      	subs	r1, #8
  409014:	60e1      	str	r1, [r4, #12]
  409016:	607b      	str	r3, [r7, #4]
  409018:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40901c:	f8c8 400c 	str.w	r4, [r8, #12]
  409020:	1082      	asrs	r2, r0, #2
  409022:	2401      	movs	r4, #1
  409024:	4094      	lsls	r4, r2
  409026:	429c      	cmp	r4, r3
  409028:	f200 808b 	bhi.w	409142 <_malloc_r+0x1ea>
  40902c:	421c      	tst	r4, r3
  40902e:	d106      	bne.n	40903e <_malloc_r+0xe6>
  409030:	f020 0003 	bic.w	r0, r0, #3
  409034:	0064      	lsls	r4, r4, #1
  409036:	421c      	tst	r4, r3
  409038:	f100 0004 	add.w	r0, r0, #4
  40903c:	d0fa      	beq.n	409034 <_malloc_r+0xdc>
  40903e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  409042:	46cc      	mov	ip, r9
  409044:	4680      	mov	r8, r0
  409046:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40904a:	459c      	cmp	ip, r3
  40904c:	d107      	bne.n	40905e <_malloc_r+0x106>
  40904e:	e16d      	b.n	40932c <_malloc_r+0x3d4>
  409050:	2a00      	cmp	r2, #0
  409052:	f280 817b 	bge.w	40934c <_malloc_r+0x3f4>
  409056:	68db      	ldr	r3, [r3, #12]
  409058:	459c      	cmp	ip, r3
  40905a:	f000 8167 	beq.w	40932c <_malloc_r+0x3d4>
  40905e:	6859      	ldr	r1, [r3, #4]
  409060:	f021 0103 	bic.w	r1, r1, #3
  409064:	1b8a      	subs	r2, r1, r6
  409066:	2a0f      	cmp	r2, #15
  409068:	ddf2      	ble.n	409050 <_malloc_r+0xf8>
  40906a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40906e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  409072:	9300      	str	r3, [sp, #0]
  409074:	199c      	adds	r4, r3, r6
  409076:	4628      	mov	r0, r5
  409078:	f046 0601 	orr.w	r6, r6, #1
  40907c:	f042 0501 	orr.w	r5, r2, #1
  409080:	605e      	str	r6, [r3, #4]
  409082:	f8c8 c00c 	str.w	ip, [r8, #12]
  409086:	f8cc 8008 	str.w	r8, [ip, #8]
  40908a:	617c      	str	r4, [r7, #20]
  40908c:	613c      	str	r4, [r7, #16]
  40908e:	f8c4 e00c 	str.w	lr, [r4, #12]
  409092:	f8c4 e008 	str.w	lr, [r4, #8]
  409096:	6065      	str	r5, [r4, #4]
  409098:	505a      	str	r2, [r3, r1]
  40909a:	f000 fb7d 	bl	409798 <__malloc_unlock>
  40909e:	9b00      	ldr	r3, [sp, #0]
  4090a0:	f103 0408 	add.w	r4, r3, #8
  4090a4:	e01e      	b.n	4090e4 <_malloc_r+0x18c>
  4090a6:	2910      	cmp	r1, #16
  4090a8:	d820      	bhi.n	4090ec <_malloc_r+0x194>
  4090aa:	f000 fb6f 	bl	40978c <__malloc_lock>
  4090ae:	2610      	movs	r6, #16
  4090b0:	2318      	movs	r3, #24
  4090b2:	2002      	movs	r0, #2
  4090b4:	4f79      	ldr	r7, [pc, #484]	; (40929c <_malloc_r+0x344>)
  4090b6:	443b      	add	r3, r7
  4090b8:	f1a3 0208 	sub.w	r2, r3, #8
  4090bc:	685c      	ldr	r4, [r3, #4]
  4090be:	4294      	cmp	r4, r2
  4090c0:	f000 813d 	beq.w	40933e <_malloc_r+0x3e6>
  4090c4:	6863      	ldr	r3, [r4, #4]
  4090c6:	68e1      	ldr	r1, [r4, #12]
  4090c8:	68a6      	ldr	r6, [r4, #8]
  4090ca:	f023 0303 	bic.w	r3, r3, #3
  4090ce:	4423      	add	r3, r4
  4090d0:	4628      	mov	r0, r5
  4090d2:	685a      	ldr	r2, [r3, #4]
  4090d4:	60f1      	str	r1, [r6, #12]
  4090d6:	f042 0201 	orr.w	r2, r2, #1
  4090da:	608e      	str	r6, [r1, #8]
  4090dc:	605a      	str	r2, [r3, #4]
  4090de:	f000 fb5b 	bl	409798 <__malloc_unlock>
  4090e2:	3408      	adds	r4, #8
  4090e4:	4620      	mov	r0, r4
  4090e6:	b003      	add	sp, #12
  4090e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4090ec:	2400      	movs	r4, #0
  4090ee:	230c      	movs	r3, #12
  4090f0:	4620      	mov	r0, r4
  4090f2:	602b      	str	r3, [r5, #0]
  4090f4:	b003      	add	sp, #12
  4090f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4090fa:	2040      	movs	r0, #64	; 0x40
  4090fc:	f44f 7300 	mov.w	r3, #512	; 0x200
  409100:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  409104:	e74a      	b.n	408f9c <_malloc_r+0x44>
  409106:	4423      	add	r3, r4
  409108:	68e1      	ldr	r1, [r4, #12]
  40910a:	685a      	ldr	r2, [r3, #4]
  40910c:	68a6      	ldr	r6, [r4, #8]
  40910e:	f042 0201 	orr.w	r2, r2, #1
  409112:	60f1      	str	r1, [r6, #12]
  409114:	4628      	mov	r0, r5
  409116:	608e      	str	r6, [r1, #8]
  409118:	605a      	str	r2, [r3, #4]
  40911a:	f000 fb3d 	bl	409798 <__malloc_unlock>
  40911e:	3408      	adds	r4, #8
  409120:	4620      	mov	r0, r4
  409122:	b003      	add	sp, #12
  409124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409128:	4423      	add	r3, r4
  40912a:	4628      	mov	r0, r5
  40912c:	685a      	ldr	r2, [r3, #4]
  40912e:	f042 0201 	orr.w	r2, r2, #1
  409132:	605a      	str	r2, [r3, #4]
  409134:	f000 fb30 	bl	409798 <__malloc_unlock>
  409138:	3408      	adds	r4, #8
  40913a:	4620      	mov	r0, r4
  40913c:	b003      	add	sp, #12
  40913e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409142:	68bc      	ldr	r4, [r7, #8]
  409144:	6863      	ldr	r3, [r4, #4]
  409146:	f023 0803 	bic.w	r8, r3, #3
  40914a:	45b0      	cmp	r8, r6
  40914c:	d304      	bcc.n	409158 <_malloc_r+0x200>
  40914e:	eba8 0306 	sub.w	r3, r8, r6
  409152:	2b0f      	cmp	r3, #15
  409154:	f300 8085 	bgt.w	409262 <_malloc_r+0x30a>
  409158:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4092b4 <_malloc_r+0x35c>
  40915c:	4b50      	ldr	r3, [pc, #320]	; (4092a0 <_malloc_r+0x348>)
  40915e:	f8d9 2000 	ldr.w	r2, [r9]
  409162:	681b      	ldr	r3, [r3, #0]
  409164:	3201      	adds	r2, #1
  409166:	4433      	add	r3, r6
  409168:	eb04 0a08 	add.w	sl, r4, r8
  40916c:	f000 8155 	beq.w	40941a <_malloc_r+0x4c2>
  409170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  409174:	330f      	adds	r3, #15
  409176:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40917a:	f02b 0b0f 	bic.w	fp, fp, #15
  40917e:	4659      	mov	r1, fp
  409180:	4628      	mov	r0, r5
  409182:	f000 ffaf 	bl	40a0e4 <_sbrk_r>
  409186:	1c41      	adds	r1, r0, #1
  409188:	4602      	mov	r2, r0
  40918a:	f000 80fc 	beq.w	409386 <_malloc_r+0x42e>
  40918e:	4582      	cmp	sl, r0
  409190:	f200 80f7 	bhi.w	409382 <_malloc_r+0x42a>
  409194:	4b43      	ldr	r3, [pc, #268]	; (4092a4 <_malloc_r+0x34c>)
  409196:	6819      	ldr	r1, [r3, #0]
  409198:	4459      	add	r1, fp
  40919a:	6019      	str	r1, [r3, #0]
  40919c:	f000 814d 	beq.w	40943a <_malloc_r+0x4e2>
  4091a0:	f8d9 0000 	ldr.w	r0, [r9]
  4091a4:	3001      	adds	r0, #1
  4091a6:	bf1b      	ittet	ne
  4091a8:	eba2 0a0a 	subne.w	sl, r2, sl
  4091ac:	4451      	addne	r1, sl
  4091ae:	f8c9 2000 	streq.w	r2, [r9]
  4091b2:	6019      	strne	r1, [r3, #0]
  4091b4:	f012 0107 	ands.w	r1, r2, #7
  4091b8:	f000 8115 	beq.w	4093e6 <_malloc_r+0x48e>
  4091bc:	f1c1 0008 	rsb	r0, r1, #8
  4091c0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4091c4:	4402      	add	r2, r0
  4091c6:	3108      	adds	r1, #8
  4091c8:	eb02 090b 	add.w	r9, r2, fp
  4091cc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4091d0:	eba1 0909 	sub.w	r9, r1, r9
  4091d4:	4649      	mov	r1, r9
  4091d6:	4628      	mov	r0, r5
  4091d8:	9301      	str	r3, [sp, #4]
  4091da:	9200      	str	r2, [sp, #0]
  4091dc:	f000 ff82 	bl	40a0e4 <_sbrk_r>
  4091e0:	1c43      	adds	r3, r0, #1
  4091e2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4091e6:	f000 8143 	beq.w	409470 <_malloc_r+0x518>
  4091ea:	1a80      	subs	r0, r0, r2
  4091ec:	4448      	add	r0, r9
  4091ee:	f040 0001 	orr.w	r0, r0, #1
  4091f2:	6819      	ldr	r1, [r3, #0]
  4091f4:	60ba      	str	r2, [r7, #8]
  4091f6:	4449      	add	r1, r9
  4091f8:	42bc      	cmp	r4, r7
  4091fa:	6050      	str	r0, [r2, #4]
  4091fc:	6019      	str	r1, [r3, #0]
  4091fe:	d017      	beq.n	409230 <_malloc_r+0x2d8>
  409200:	f1b8 0f0f 	cmp.w	r8, #15
  409204:	f240 80fb 	bls.w	4093fe <_malloc_r+0x4a6>
  409208:	6860      	ldr	r0, [r4, #4]
  40920a:	f1a8 020c 	sub.w	r2, r8, #12
  40920e:	f022 0207 	bic.w	r2, r2, #7
  409212:	eb04 0e02 	add.w	lr, r4, r2
  409216:	f000 0001 	and.w	r0, r0, #1
  40921a:	f04f 0c05 	mov.w	ip, #5
  40921e:	4310      	orrs	r0, r2
  409220:	2a0f      	cmp	r2, #15
  409222:	6060      	str	r0, [r4, #4]
  409224:	f8ce c004 	str.w	ip, [lr, #4]
  409228:	f8ce c008 	str.w	ip, [lr, #8]
  40922c:	f200 8117 	bhi.w	40945e <_malloc_r+0x506>
  409230:	4b1d      	ldr	r3, [pc, #116]	; (4092a8 <_malloc_r+0x350>)
  409232:	68bc      	ldr	r4, [r7, #8]
  409234:	681a      	ldr	r2, [r3, #0]
  409236:	4291      	cmp	r1, r2
  409238:	bf88      	it	hi
  40923a:	6019      	strhi	r1, [r3, #0]
  40923c:	4b1b      	ldr	r3, [pc, #108]	; (4092ac <_malloc_r+0x354>)
  40923e:	681a      	ldr	r2, [r3, #0]
  409240:	4291      	cmp	r1, r2
  409242:	6862      	ldr	r2, [r4, #4]
  409244:	bf88      	it	hi
  409246:	6019      	strhi	r1, [r3, #0]
  409248:	f022 0203 	bic.w	r2, r2, #3
  40924c:	4296      	cmp	r6, r2
  40924e:	eba2 0306 	sub.w	r3, r2, r6
  409252:	d801      	bhi.n	409258 <_malloc_r+0x300>
  409254:	2b0f      	cmp	r3, #15
  409256:	dc04      	bgt.n	409262 <_malloc_r+0x30a>
  409258:	4628      	mov	r0, r5
  40925a:	f000 fa9d 	bl	409798 <__malloc_unlock>
  40925e:	2400      	movs	r4, #0
  409260:	e740      	b.n	4090e4 <_malloc_r+0x18c>
  409262:	19a2      	adds	r2, r4, r6
  409264:	f043 0301 	orr.w	r3, r3, #1
  409268:	f046 0601 	orr.w	r6, r6, #1
  40926c:	6066      	str	r6, [r4, #4]
  40926e:	4628      	mov	r0, r5
  409270:	60ba      	str	r2, [r7, #8]
  409272:	6053      	str	r3, [r2, #4]
  409274:	f000 fa90 	bl	409798 <__malloc_unlock>
  409278:	3408      	adds	r4, #8
  40927a:	4620      	mov	r0, r4
  40927c:	b003      	add	sp, #12
  40927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409282:	2b14      	cmp	r3, #20
  409284:	d971      	bls.n	40936a <_malloc_r+0x412>
  409286:	2b54      	cmp	r3, #84	; 0x54
  409288:	f200 80a3 	bhi.w	4093d2 <_malloc_r+0x47a>
  40928c:	0b33      	lsrs	r3, r6, #12
  40928e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  409292:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  409296:	00c3      	lsls	r3, r0, #3
  409298:	e680      	b.n	408f9c <_malloc_r+0x44>
  40929a:	bf00      	nop
  40929c:	20000a20 	.word	0x20000a20
  4092a0:	200061f8 	.word	0x200061f8
  4092a4:	200061c8 	.word	0x200061c8
  4092a8:	200061f0 	.word	0x200061f0
  4092ac:	200061f4 	.word	0x200061f4
  4092b0:	20000a28 	.word	0x20000a28
  4092b4:	20000e28 	.word	0x20000e28
  4092b8:	0a5a      	lsrs	r2, r3, #9
  4092ba:	2a04      	cmp	r2, #4
  4092bc:	d95b      	bls.n	409376 <_malloc_r+0x41e>
  4092be:	2a14      	cmp	r2, #20
  4092c0:	f200 80ae 	bhi.w	409420 <_malloc_r+0x4c8>
  4092c4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4092c8:	00c9      	lsls	r1, r1, #3
  4092ca:	325b      	adds	r2, #91	; 0x5b
  4092cc:	eb07 0c01 	add.w	ip, r7, r1
  4092d0:	5879      	ldr	r1, [r7, r1]
  4092d2:	f1ac 0c08 	sub.w	ip, ip, #8
  4092d6:	458c      	cmp	ip, r1
  4092d8:	f000 8088 	beq.w	4093ec <_malloc_r+0x494>
  4092dc:	684a      	ldr	r2, [r1, #4]
  4092de:	f022 0203 	bic.w	r2, r2, #3
  4092e2:	4293      	cmp	r3, r2
  4092e4:	d273      	bcs.n	4093ce <_malloc_r+0x476>
  4092e6:	6889      	ldr	r1, [r1, #8]
  4092e8:	458c      	cmp	ip, r1
  4092ea:	d1f7      	bne.n	4092dc <_malloc_r+0x384>
  4092ec:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4092f0:	687b      	ldr	r3, [r7, #4]
  4092f2:	60e2      	str	r2, [r4, #12]
  4092f4:	f8c4 c008 	str.w	ip, [r4, #8]
  4092f8:	6094      	str	r4, [r2, #8]
  4092fa:	f8cc 400c 	str.w	r4, [ip, #12]
  4092fe:	e68f      	b.n	409020 <_malloc_r+0xc8>
  409300:	19a1      	adds	r1, r4, r6
  409302:	f046 0c01 	orr.w	ip, r6, #1
  409306:	f042 0601 	orr.w	r6, r2, #1
  40930a:	f8c4 c004 	str.w	ip, [r4, #4]
  40930e:	4628      	mov	r0, r5
  409310:	6179      	str	r1, [r7, #20]
  409312:	6139      	str	r1, [r7, #16]
  409314:	f8c1 e00c 	str.w	lr, [r1, #12]
  409318:	f8c1 e008 	str.w	lr, [r1, #8]
  40931c:	604e      	str	r6, [r1, #4]
  40931e:	50e2      	str	r2, [r4, r3]
  409320:	f000 fa3a 	bl	409798 <__malloc_unlock>
  409324:	3408      	adds	r4, #8
  409326:	e6dd      	b.n	4090e4 <_malloc_r+0x18c>
  409328:	687b      	ldr	r3, [r7, #4]
  40932a:	e679      	b.n	409020 <_malloc_r+0xc8>
  40932c:	f108 0801 	add.w	r8, r8, #1
  409330:	f018 0f03 	tst.w	r8, #3
  409334:	f10c 0c08 	add.w	ip, ip, #8
  409338:	f47f ae85 	bne.w	409046 <_malloc_r+0xee>
  40933c:	e02d      	b.n	40939a <_malloc_r+0x442>
  40933e:	68dc      	ldr	r4, [r3, #12]
  409340:	42a3      	cmp	r3, r4
  409342:	bf08      	it	eq
  409344:	3002      	addeq	r0, #2
  409346:	f43f ae3e 	beq.w	408fc6 <_malloc_r+0x6e>
  40934a:	e6bb      	b.n	4090c4 <_malloc_r+0x16c>
  40934c:	4419      	add	r1, r3
  40934e:	461c      	mov	r4, r3
  409350:	684a      	ldr	r2, [r1, #4]
  409352:	68db      	ldr	r3, [r3, #12]
  409354:	f854 6f08 	ldr.w	r6, [r4, #8]!
  409358:	f042 0201 	orr.w	r2, r2, #1
  40935c:	604a      	str	r2, [r1, #4]
  40935e:	4628      	mov	r0, r5
  409360:	60f3      	str	r3, [r6, #12]
  409362:	609e      	str	r6, [r3, #8]
  409364:	f000 fa18 	bl	409798 <__malloc_unlock>
  409368:	e6bc      	b.n	4090e4 <_malloc_r+0x18c>
  40936a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40936e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  409372:	00c3      	lsls	r3, r0, #3
  409374:	e612      	b.n	408f9c <_malloc_r+0x44>
  409376:	099a      	lsrs	r2, r3, #6
  409378:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40937c:	00c9      	lsls	r1, r1, #3
  40937e:	3238      	adds	r2, #56	; 0x38
  409380:	e7a4      	b.n	4092cc <_malloc_r+0x374>
  409382:	42bc      	cmp	r4, r7
  409384:	d054      	beq.n	409430 <_malloc_r+0x4d8>
  409386:	68bc      	ldr	r4, [r7, #8]
  409388:	6862      	ldr	r2, [r4, #4]
  40938a:	f022 0203 	bic.w	r2, r2, #3
  40938e:	e75d      	b.n	40924c <_malloc_r+0x2f4>
  409390:	f859 3908 	ldr.w	r3, [r9], #-8
  409394:	4599      	cmp	r9, r3
  409396:	f040 8086 	bne.w	4094a6 <_malloc_r+0x54e>
  40939a:	f010 0f03 	tst.w	r0, #3
  40939e:	f100 30ff 	add.w	r0, r0, #4294967295
  4093a2:	d1f5      	bne.n	409390 <_malloc_r+0x438>
  4093a4:	687b      	ldr	r3, [r7, #4]
  4093a6:	ea23 0304 	bic.w	r3, r3, r4
  4093aa:	607b      	str	r3, [r7, #4]
  4093ac:	0064      	lsls	r4, r4, #1
  4093ae:	429c      	cmp	r4, r3
  4093b0:	f63f aec7 	bhi.w	409142 <_malloc_r+0x1ea>
  4093b4:	2c00      	cmp	r4, #0
  4093b6:	f43f aec4 	beq.w	409142 <_malloc_r+0x1ea>
  4093ba:	421c      	tst	r4, r3
  4093bc:	4640      	mov	r0, r8
  4093be:	f47f ae3e 	bne.w	40903e <_malloc_r+0xe6>
  4093c2:	0064      	lsls	r4, r4, #1
  4093c4:	421c      	tst	r4, r3
  4093c6:	f100 0004 	add.w	r0, r0, #4
  4093ca:	d0fa      	beq.n	4093c2 <_malloc_r+0x46a>
  4093cc:	e637      	b.n	40903e <_malloc_r+0xe6>
  4093ce:	468c      	mov	ip, r1
  4093d0:	e78c      	b.n	4092ec <_malloc_r+0x394>
  4093d2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4093d6:	d815      	bhi.n	409404 <_malloc_r+0x4ac>
  4093d8:	0bf3      	lsrs	r3, r6, #15
  4093da:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4093de:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4093e2:	00c3      	lsls	r3, r0, #3
  4093e4:	e5da      	b.n	408f9c <_malloc_r+0x44>
  4093e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4093ea:	e6ed      	b.n	4091c8 <_malloc_r+0x270>
  4093ec:	687b      	ldr	r3, [r7, #4]
  4093ee:	1092      	asrs	r2, r2, #2
  4093f0:	2101      	movs	r1, #1
  4093f2:	fa01 f202 	lsl.w	r2, r1, r2
  4093f6:	4313      	orrs	r3, r2
  4093f8:	607b      	str	r3, [r7, #4]
  4093fa:	4662      	mov	r2, ip
  4093fc:	e779      	b.n	4092f2 <_malloc_r+0x39a>
  4093fe:	2301      	movs	r3, #1
  409400:	6053      	str	r3, [r2, #4]
  409402:	e729      	b.n	409258 <_malloc_r+0x300>
  409404:	f240 5254 	movw	r2, #1364	; 0x554
  409408:	4293      	cmp	r3, r2
  40940a:	d822      	bhi.n	409452 <_malloc_r+0x4fa>
  40940c:	0cb3      	lsrs	r3, r6, #18
  40940e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  409412:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  409416:	00c3      	lsls	r3, r0, #3
  409418:	e5c0      	b.n	408f9c <_malloc_r+0x44>
  40941a:	f103 0b10 	add.w	fp, r3, #16
  40941e:	e6ae      	b.n	40917e <_malloc_r+0x226>
  409420:	2a54      	cmp	r2, #84	; 0x54
  409422:	d829      	bhi.n	409478 <_malloc_r+0x520>
  409424:	0b1a      	lsrs	r2, r3, #12
  409426:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40942a:	00c9      	lsls	r1, r1, #3
  40942c:	326e      	adds	r2, #110	; 0x6e
  40942e:	e74d      	b.n	4092cc <_malloc_r+0x374>
  409430:	4b20      	ldr	r3, [pc, #128]	; (4094b4 <_malloc_r+0x55c>)
  409432:	6819      	ldr	r1, [r3, #0]
  409434:	4459      	add	r1, fp
  409436:	6019      	str	r1, [r3, #0]
  409438:	e6b2      	b.n	4091a0 <_malloc_r+0x248>
  40943a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40943e:	2800      	cmp	r0, #0
  409440:	f47f aeae 	bne.w	4091a0 <_malloc_r+0x248>
  409444:	eb08 030b 	add.w	r3, r8, fp
  409448:	68ba      	ldr	r2, [r7, #8]
  40944a:	f043 0301 	orr.w	r3, r3, #1
  40944e:	6053      	str	r3, [r2, #4]
  409450:	e6ee      	b.n	409230 <_malloc_r+0x2d8>
  409452:	207f      	movs	r0, #127	; 0x7f
  409454:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  409458:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40945c:	e59e      	b.n	408f9c <_malloc_r+0x44>
  40945e:	f104 0108 	add.w	r1, r4, #8
  409462:	4628      	mov	r0, r5
  409464:	9300      	str	r3, [sp, #0]
  409466:	f7ff fc7f 	bl	408d68 <_free_r>
  40946a:	9b00      	ldr	r3, [sp, #0]
  40946c:	6819      	ldr	r1, [r3, #0]
  40946e:	e6df      	b.n	409230 <_malloc_r+0x2d8>
  409470:	2001      	movs	r0, #1
  409472:	f04f 0900 	mov.w	r9, #0
  409476:	e6bc      	b.n	4091f2 <_malloc_r+0x29a>
  409478:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40947c:	d805      	bhi.n	40948a <_malloc_r+0x532>
  40947e:	0bda      	lsrs	r2, r3, #15
  409480:	f102 0178 	add.w	r1, r2, #120	; 0x78
  409484:	00c9      	lsls	r1, r1, #3
  409486:	3277      	adds	r2, #119	; 0x77
  409488:	e720      	b.n	4092cc <_malloc_r+0x374>
  40948a:	f240 5154 	movw	r1, #1364	; 0x554
  40948e:	428a      	cmp	r2, r1
  409490:	d805      	bhi.n	40949e <_malloc_r+0x546>
  409492:	0c9a      	lsrs	r2, r3, #18
  409494:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  409498:	00c9      	lsls	r1, r1, #3
  40949a:	327c      	adds	r2, #124	; 0x7c
  40949c:	e716      	b.n	4092cc <_malloc_r+0x374>
  40949e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4094a2:	227e      	movs	r2, #126	; 0x7e
  4094a4:	e712      	b.n	4092cc <_malloc_r+0x374>
  4094a6:	687b      	ldr	r3, [r7, #4]
  4094a8:	e780      	b.n	4093ac <_malloc_r+0x454>
  4094aa:	08f0      	lsrs	r0, r6, #3
  4094ac:	f106 0308 	add.w	r3, r6, #8
  4094b0:	e600      	b.n	4090b4 <_malloc_r+0x15c>
  4094b2:	bf00      	nop
  4094b4:	200061c8 	.word	0x200061c8

004094b8 <__ascii_mbtowc>:
  4094b8:	b082      	sub	sp, #8
  4094ba:	b149      	cbz	r1, 4094d0 <__ascii_mbtowc+0x18>
  4094bc:	b15a      	cbz	r2, 4094d6 <__ascii_mbtowc+0x1e>
  4094be:	b16b      	cbz	r3, 4094dc <__ascii_mbtowc+0x24>
  4094c0:	7813      	ldrb	r3, [r2, #0]
  4094c2:	600b      	str	r3, [r1, #0]
  4094c4:	7812      	ldrb	r2, [r2, #0]
  4094c6:	1c10      	adds	r0, r2, #0
  4094c8:	bf18      	it	ne
  4094ca:	2001      	movne	r0, #1
  4094cc:	b002      	add	sp, #8
  4094ce:	4770      	bx	lr
  4094d0:	a901      	add	r1, sp, #4
  4094d2:	2a00      	cmp	r2, #0
  4094d4:	d1f3      	bne.n	4094be <__ascii_mbtowc+0x6>
  4094d6:	4610      	mov	r0, r2
  4094d8:	b002      	add	sp, #8
  4094da:	4770      	bx	lr
  4094dc:	f06f 0001 	mvn.w	r0, #1
  4094e0:	e7f4      	b.n	4094cc <__ascii_mbtowc+0x14>
  4094e2:	bf00      	nop
	...

004094f0 <memchr>:
  4094f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4094f4:	2a10      	cmp	r2, #16
  4094f6:	db2b      	blt.n	409550 <memchr+0x60>
  4094f8:	f010 0f07 	tst.w	r0, #7
  4094fc:	d008      	beq.n	409510 <memchr+0x20>
  4094fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  409502:	3a01      	subs	r2, #1
  409504:	428b      	cmp	r3, r1
  409506:	d02d      	beq.n	409564 <memchr+0x74>
  409508:	f010 0f07 	tst.w	r0, #7
  40950c:	b342      	cbz	r2, 409560 <memchr+0x70>
  40950e:	d1f6      	bne.n	4094fe <memchr+0xe>
  409510:	b4f0      	push	{r4, r5, r6, r7}
  409512:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409516:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40951a:	f022 0407 	bic.w	r4, r2, #7
  40951e:	f07f 0700 	mvns.w	r7, #0
  409522:	2300      	movs	r3, #0
  409524:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409528:	3c08      	subs	r4, #8
  40952a:	ea85 0501 	eor.w	r5, r5, r1
  40952e:	ea86 0601 	eor.w	r6, r6, r1
  409532:	fa85 f547 	uadd8	r5, r5, r7
  409536:	faa3 f587 	sel	r5, r3, r7
  40953a:	fa86 f647 	uadd8	r6, r6, r7
  40953e:	faa5 f687 	sel	r6, r5, r7
  409542:	b98e      	cbnz	r6, 409568 <memchr+0x78>
  409544:	d1ee      	bne.n	409524 <memchr+0x34>
  409546:	bcf0      	pop	{r4, r5, r6, r7}
  409548:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40954c:	f002 0207 	and.w	r2, r2, #7
  409550:	b132      	cbz	r2, 409560 <memchr+0x70>
  409552:	f810 3b01 	ldrb.w	r3, [r0], #1
  409556:	3a01      	subs	r2, #1
  409558:	ea83 0301 	eor.w	r3, r3, r1
  40955c:	b113      	cbz	r3, 409564 <memchr+0x74>
  40955e:	d1f8      	bne.n	409552 <memchr+0x62>
  409560:	2000      	movs	r0, #0
  409562:	4770      	bx	lr
  409564:	3801      	subs	r0, #1
  409566:	4770      	bx	lr
  409568:	2d00      	cmp	r5, #0
  40956a:	bf06      	itte	eq
  40956c:	4635      	moveq	r5, r6
  40956e:	3803      	subeq	r0, #3
  409570:	3807      	subne	r0, #7
  409572:	f015 0f01 	tst.w	r5, #1
  409576:	d107      	bne.n	409588 <memchr+0x98>
  409578:	3001      	adds	r0, #1
  40957a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40957e:	bf02      	ittt	eq
  409580:	3001      	addeq	r0, #1
  409582:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409586:	3001      	addeq	r0, #1
  409588:	bcf0      	pop	{r4, r5, r6, r7}
  40958a:	3801      	subs	r0, #1
  40958c:	4770      	bx	lr
  40958e:	bf00      	nop

00409590 <memcpy>:
  409590:	4684      	mov	ip, r0
  409592:	ea41 0300 	orr.w	r3, r1, r0
  409596:	f013 0303 	ands.w	r3, r3, #3
  40959a:	d16d      	bne.n	409678 <memcpy+0xe8>
  40959c:	3a40      	subs	r2, #64	; 0x40
  40959e:	d341      	bcc.n	409624 <memcpy+0x94>
  4095a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4095a4:	f840 3b04 	str.w	r3, [r0], #4
  4095a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4095ac:	f840 3b04 	str.w	r3, [r0], #4
  4095b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4095b4:	f840 3b04 	str.w	r3, [r0], #4
  4095b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4095bc:	f840 3b04 	str.w	r3, [r0], #4
  4095c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4095c4:	f840 3b04 	str.w	r3, [r0], #4
  4095c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4095cc:	f840 3b04 	str.w	r3, [r0], #4
  4095d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4095d4:	f840 3b04 	str.w	r3, [r0], #4
  4095d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4095dc:	f840 3b04 	str.w	r3, [r0], #4
  4095e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4095e4:	f840 3b04 	str.w	r3, [r0], #4
  4095e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4095ec:	f840 3b04 	str.w	r3, [r0], #4
  4095f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4095f4:	f840 3b04 	str.w	r3, [r0], #4
  4095f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4095fc:	f840 3b04 	str.w	r3, [r0], #4
  409600:	f851 3b04 	ldr.w	r3, [r1], #4
  409604:	f840 3b04 	str.w	r3, [r0], #4
  409608:	f851 3b04 	ldr.w	r3, [r1], #4
  40960c:	f840 3b04 	str.w	r3, [r0], #4
  409610:	f851 3b04 	ldr.w	r3, [r1], #4
  409614:	f840 3b04 	str.w	r3, [r0], #4
  409618:	f851 3b04 	ldr.w	r3, [r1], #4
  40961c:	f840 3b04 	str.w	r3, [r0], #4
  409620:	3a40      	subs	r2, #64	; 0x40
  409622:	d2bd      	bcs.n	4095a0 <memcpy+0x10>
  409624:	3230      	adds	r2, #48	; 0x30
  409626:	d311      	bcc.n	40964c <memcpy+0xbc>
  409628:	f851 3b04 	ldr.w	r3, [r1], #4
  40962c:	f840 3b04 	str.w	r3, [r0], #4
  409630:	f851 3b04 	ldr.w	r3, [r1], #4
  409634:	f840 3b04 	str.w	r3, [r0], #4
  409638:	f851 3b04 	ldr.w	r3, [r1], #4
  40963c:	f840 3b04 	str.w	r3, [r0], #4
  409640:	f851 3b04 	ldr.w	r3, [r1], #4
  409644:	f840 3b04 	str.w	r3, [r0], #4
  409648:	3a10      	subs	r2, #16
  40964a:	d2ed      	bcs.n	409628 <memcpy+0x98>
  40964c:	320c      	adds	r2, #12
  40964e:	d305      	bcc.n	40965c <memcpy+0xcc>
  409650:	f851 3b04 	ldr.w	r3, [r1], #4
  409654:	f840 3b04 	str.w	r3, [r0], #4
  409658:	3a04      	subs	r2, #4
  40965a:	d2f9      	bcs.n	409650 <memcpy+0xc0>
  40965c:	3204      	adds	r2, #4
  40965e:	d008      	beq.n	409672 <memcpy+0xe2>
  409660:	07d2      	lsls	r2, r2, #31
  409662:	bf1c      	itt	ne
  409664:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409668:	f800 3b01 	strbne.w	r3, [r0], #1
  40966c:	d301      	bcc.n	409672 <memcpy+0xe2>
  40966e:	880b      	ldrh	r3, [r1, #0]
  409670:	8003      	strh	r3, [r0, #0]
  409672:	4660      	mov	r0, ip
  409674:	4770      	bx	lr
  409676:	bf00      	nop
  409678:	2a08      	cmp	r2, #8
  40967a:	d313      	bcc.n	4096a4 <memcpy+0x114>
  40967c:	078b      	lsls	r3, r1, #30
  40967e:	d08d      	beq.n	40959c <memcpy+0xc>
  409680:	f010 0303 	ands.w	r3, r0, #3
  409684:	d08a      	beq.n	40959c <memcpy+0xc>
  409686:	f1c3 0304 	rsb	r3, r3, #4
  40968a:	1ad2      	subs	r2, r2, r3
  40968c:	07db      	lsls	r3, r3, #31
  40968e:	bf1c      	itt	ne
  409690:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409694:	f800 3b01 	strbne.w	r3, [r0], #1
  409698:	d380      	bcc.n	40959c <memcpy+0xc>
  40969a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40969e:	f820 3b02 	strh.w	r3, [r0], #2
  4096a2:	e77b      	b.n	40959c <memcpy+0xc>
  4096a4:	3a04      	subs	r2, #4
  4096a6:	d3d9      	bcc.n	40965c <memcpy+0xcc>
  4096a8:	3a01      	subs	r2, #1
  4096aa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4096ae:	f800 3b01 	strb.w	r3, [r0], #1
  4096b2:	d2f9      	bcs.n	4096a8 <memcpy+0x118>
  4096b4:	780b      	ldrb	r3, [r1, #0]
  4096b6:	7003      	strb	r3, [r0, #0]
  4096b8:	784b      	ldrb	r3, [r1, #1]
  4096ba:	7043      	strb	r3, [r0, #1]
  4096bc:	788b      	ldrb	r3, [r1, #2]
  4096be:	7083      	strb	r3, [r0, #2]
  4096c0:	4660      	mov	r0, ip
  4096c2:	4770      	bx	lr

004096c4 <memmove>:
  4096c4:	4288      	cmp	r0, r1
  4096c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4096c8:	d90d      	bls.n	4096e6 <memmove+0x22>
  4096ca:	188b      	adds	r3, r1, r2
  4096cc:	4298      	cmp	r0, r3
  4096ce:	d20a      	bcs.n	4096e6 <memmove+0x22>
  4096d0:	1884      	adds	r4, r0, r2
  4096d2:	2a00      	cmp	r2, #0
  4096d4:	d051      	beq.n	40977a <memmove+0xb6>
  4096d6:	4622      	mov	r2, r4
  4096d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4096dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4096e0:	4299      	cmp	r1, r3
  4096e2:	d1f9      	bne.n	4096d8 <memmove+0x14>
  4096e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4096e6:	2a0f      	cmp	r2, #15
  4096e8:	d948      	bls.n	40977c <memmove+0xb8>
  4096ea:	ea41 0300 	orr.w	r3, r1, r0
  4096ee:	079b      	lsls	r3, r3, #30
  4096f0:	d146      	bne.n	409780 <memmove+0xbc>
  4096f2:	f100 0410 	add.w	r4, r0, #16
  4096f6:	f101 0310 	add.w	r3, r1, #16
  4096fa:	4615      	mov	r5, r2
  4096fc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  409700:	f844 6c10 	str.w	r6, [r4, #-16]
  409704:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409708:	f844 6c0c 	str.w	r6, [r4, #-12]
  40970c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  409710:	f844 6c08 	str.w	r6, [r4, #-8]
  409714:	3d10      	subs	r5, #16
  409716:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40971a:	f844 6c04 	str.w	r6, [r4, #-4]
  40971e:	2d0f      	cmp	r5, #15
  409720:	f103 0310 	add.w	r3, r3, #16
  409724:	f104 0410 	add.w	r4, r4, #16
  409728:	d8e8      	bhi.n	4096fc <memmove+0x38>
  40972a:	f1a2 0310 	sub.w	r3, r2, #16
  40972e:	f023 030f 	bic.w	r3, r3, #15
  409732:	f002 0e0f 	and.w	lr, r2, #15
  409736:	3310      	adds	r3, #16
  409738:	f1be 0f03 	cmp.w	lr, #3
  40973c:	4419      	add	r1, r3
  40973e:	4403      	add	r3, r0
  409740:	d921      	bls.n	409786 <memmove+0xc2>
  409742:	1f1e      	subs	r6, r3, #4
  409744:	460d      	mov	r5, r1
  409746:	4674      	mov	r4, lr
  409748:	3c04      	subs	r4, #4
  40974a:	f855 7b04 	ldr.w	r7, [r5], #4
  40974e:	f846 7f04 	str.w	r7, [r6, #4]!
  409752:	2c03      	cmp	r4, #3
  409754:	d8f8      	bhi.n	409748 <memmove+0x84>
  409756:	f1ae 0404 	sub.w	r4, lr, #4
  40975a:	f024 0403 	bic.w	r4, r4, #3
  40975e:	3404      	adds	r4, #4
  409760:	4421      	add	r1, r4
  409762:	4423      	add	r3, r4
  409764:	f002 0203 	and.w	r2, r2, #3
  409768:	b162      	cbz	r2, 409784 <memmove+0xc0>
  40976a:	3b01      	subs	r3, #1
  40976c:	440a      	add	r2, r1
  40976e:	f811 4b01 	ldrb.w	r4, [r1], #1
  409772:	f803 4f01 	strb.w	r4, [r3, #1]!
  409776:	428a      	cmp	r2, r1
  409778:	d1f9      	bne.n	40976e <memmove+0xaa>
  40977a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40977c:	4603      	mov	r3, r0
  40977e:	e7f3      	b.n	409768 <memmove+0xa4>
  409780:	4603      	mov	r3, r0
  409782:	e7f2      	b.n	40976a <memmove+0xa6>
  409784:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409786:	4672      	mov	r2, lr
  409788:	e7ee      	b.n	409768 <memmove+0xa4>
  40978a:	bf00      	nop

0040978c <__malloc_lock>:
  40978c:	4801      	ldr	r0, [pc, #4]	; (409794 <__malloc_lock+0x8>)
  40978e:	f7ff bbdf 	b.w	408f50 <__retarget_lock_acquire_recursive>
  409792:	bf00      	nop
  409794:	20006244 	.word	0x20006244

00409798 <__malloc_unlock>:
  409798:	4801      	ldr	r0, [pc, #4]	; (4097a0 <__malloc_unlock+0x8>)
  40979a:	f7ff bbdb 	b.w	408f54 <__retarget_lock_release_recursive>
  40979e:	bf00      	nop
  4097a0:	20006244 	.word	0x20006244

004097a4 <_Balloc>:
  4097a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4097a6:	b570      	push	{r4, r5, r6, lr}
  4097a8:	4605      	mov	r5, r0
  4097aa:	460c      	mov	r4, r1
  4097ac:	b14b      	cbz	r3, 4097c2 <_Balloc+0x1e>
  4097ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4097b2:	b180      	cbz	r0, 4097d6 <_Balloc+0x32>
  4097b4:	6802      	ldr	r2, [r0, #0]
  4097b6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4097ba:	2300      	movs	r3, #0
  4097bc:	6103      	str	r3, [r0, #16]
  4097be:	60c3      	str	r3, [r0, #12]
  4097c0:	bd70      	pop	{r4, r5, r6, pc}
  4097c2:	2221      	movs	r2, #33	; 0x21
  4097c4:	2104      	movs	r1, #4
  4097c6:	f000 fd8d 	bl	40a2e4 <_calloc_r>
  4097ca:	64e8      	str	r0, [r5, #76]	; 0x4c
  4097cc:	4603      	mov	r3, r0
  4097ce:	2800      	cmp	r0, #0
  4097d0:	d1ed      	bne.n	4097ae <_Balloc+0xa>
  4097d2:	2000      	movs	r0, #0
  4097d4:	bd70      	pop	{r4, r5, r6, pc}
  4097d6:	2101      	movs	r1, #1
  4097d8:	fa01 f604 	lsl.w	r6, r1, r4
  4097dc:	1d72      	adds	r2, r6, #5
  4097de:	4628      	mov	r0, r5
  4097e0:	0092      	lsls	r2, r2, #2
  4097e2:	f000 fd7f 	bl	40a2e4 <_calloc_r>
  4097e6:	2800      	cmp	r0, #0
  4097e8:	d0f3      	beq.n	4097d2 <_Balloc+0x2e>
  4097ea:	6044      	str	r4, [r0, #4]
  4097ec:	6086      	str	r6, [r0, #8]
  4097ee:	e7e4      	b.n	4097ba <_Balloc+0x16>

004097f0 <_Bfree>:
  4097f0:	b131      	cbz	r1, 409800 <_Bfree+0x10>
  4097f2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4097f4:	684a      	ldr	r2, [r1, #4]
  4097f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4097fa:	6008      	str	r0, [r1, #0]
  4097fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  409800:	4770      	bx	lr
  409802:	bf00      	nop

00409804 <__multadd>:
  409804:	b5f0      	push	{r4, r5, r6, r7, lr}
  409806:	690c      	ldr	r4, [r1, #16]
  409808:	b083      	sub	sp, #12
  40980a:	460d      	mov	r5, r1
  40980c:	4606      	mov	r6, r0
  40980e:	f101 0e14 	add.w	lr, r1, #20
  409812:	2700      	movs	r7, #0
  409814:	f8de 0000 	ldr.w	r0, [lr]
  409818:	b281      	uxth	r1, r0
  40981a:	fb02 3301 	mla	r3, r2, r1, r3
  40981e:	0c01      	lsrs	r1, r0, #16
  409820:	0c18      	lsrs	r0, r3, #16
  409822:	fb02 0101 	mla	r1, r2, r1, r0
  409826:	b29b      	uxth	r3, r3
  409828:	3701      	adds	r7, #1
  40982a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40982e:	42bc      	cmp	r4, r7
  409830:	f84e 3b04 	str.w	r3, [lr], #4
  409834:	ea4f 4311 	mov.w	r3, r1, lsr #16
  409838:	dcec      	bgt.n	409814 <__multadd+0x10>
  40983a:	b13b      	cbz	r3, 40984c <__multadd+0x48>
  40983c:	68aa      	ldr	r2, [r5, #8]
  40983e:	4294      	cmp	r4, r2
  409840:	da07      	bge.n	409852 <__multadd+0x4e>
  409842:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  409846:	3401      	adds	r4, #1
  409848:	6153      	str	r3, [r2, #20]
  40984a:	612c      	str	r4, [r5, #16]
  40984c:	4628      	mov	r0, r5
  40984e:	b003      	add	sp, #12
  409850:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409852:	6869      	ldr	r1, [r5, #4]
  409854:	9301      	str	r3, [sp, #4]
  409856:	3101      	adds	r1, #1
  409858:	4630      	mov	r0, r6
  40985a:	f7ff ffa3 	bl	4097a4 <_Balloc>
  40985e:	692a      	ldr	r2, [r5, #16]
  409860:	3202      	adds	r2, #2
  409862:	f105 010c 	add.w	r1, r5, #12
  409866:	4607      	mov	r7, r0
  409868:	0092      	lsls	r2, r2, #2
  40986a:	300c      	adds	r0, #12
  40986c:	f7ff fe90 	bl	409590 <memcpy>
  409870:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  409872:	6869      	ldr	r1, [r5, #4]
  409874:	9b01      	ldr	r3, [sp, #4]
  409876:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40987a:	6028      	str	r0, [r5, #0]
  40987c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409880:	463d      	mov	r5, r7
  409882:	e7de      	b.n	409842 <__multadd+0x3e>

00409884 <__hi0bits>:
  409884:	0c02      	lsrs	r2, r0, #16
  409886:	0412      	lsls	r2, r2, #16
  409888:	4603      	mov	r3, r0
  40988a:	b9b2      	cbnz	r2, 4098ba <__hi0bits+0x36>
  40988c:	0403      	lsls	r3, r0, #16
  40988e:	2010      	movs	r0, #16
  409890:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409894:	bf04      	itt	eq
  409896:	021b      	lsleq	r3, r3, #8
  409898:	3008      	addeq	r0, #8
  40989a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40989e:	bf04      	itt	eq
  4098a0:	011b      	lsleq	r3, r3, #4
  4098a2:	3004      	addeq	r0, #4
  4098a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4098a8:	bf04      	itt	eq
  4098aa:	009b      	lsleq	r3, r3, #2
  4098ac:	3002      	addeq	r0, #2
  4098ae:	2b00      	cmp	r3, #0
  4098b0:	db02      	blt.n	4098b8 <__hi0bits+0x34>
  4098b2:	005b      	lsls	r3, r3, #1
  4098b4:	d403      	bmi.n	4098be <__hi0bits+0x3a>
  4098b6:	2020      	movs	r0, #32
  4098b8:	4770      	bx	lr
  4098ba:	2000      	movs	r0, #0
  4098bc:	e7e8      	b.n	409890 <__hi0bits+0xc>
  4098be:	3001      	adds	r0, #1
  4098c0:	4770      	bx	lr
  4098c2:	bf00      	nop

004098c4 <__lo0bits>:
  4098c4:	6803      	ldr	r3, [r0, #0]
  4098c6:	f013 0207 	ands.w	r2, r3, #7
  4098ca:	4601      	mov	r1, r0
  4098cc:	d007      	beq.n	4098de <__lo0bits+0x1a>
  4098ce:	07da      	lsls	r2, r3, #31
  4098d0:	d421      	bmi.n	409916 <__lo0bits+0x52>
  4098d2:	0798      	lsls	r0, r3, #30
  4098d4:	d421      	bmi.n	40991a <__lo0bits+0x56>
  4098d6:	089b      	lsrs	r3, r3, #2
  4098d8:	600b      	str	r3, [r1, #0]
  4098da:	2002      	movs	r0, #2
  4098dc:	4770      	bx	lr
  4098de:	b298      	uxth	r0, r3
  4098e0:	b198      	cbz	r0, 40990a <__lo0bits+0x46>
  4098e2:	4610      	mov	r0, r2
  4098e4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4098e8:	bf04      	itt	eq
  4098ea:	0a1b      	lsreq	r3, r3, #8
  4098ec:	3008      	addeq	r0, #8
  4098ee:	071a      	lsls	r2, r3, #28
  4098f0:	bf04      	itt	eq
  4098f2:	091b      	lsreq	r3, r3, #4
  4098f4:	3004      	addeq	r0, #4
  4098f6:	079a      	lsls	r2, r3, #30
  4098f8:	bf04      	itt	eq
  4098fa:	089b      	lsreq	r3, r3, #2
  4098fc:	3002      	addeq	r0, #2
  4098fe:	07da      	lsls	r2, r3, #31
  409900:	d407      	bmi.n	409912 <__lo0bits+0x4e>
  409902:	085b      	lsrs	r3, r3, #1
  409904:	d104      	bne.n	409910 <__lo0bits+0x4c>
  409906:	2020      	movs	r0, #32
  409908:	4770      	bx	lr
  40990a:	0c1b      	lsrs	r3, r3, #16
  40990c:	2010      	movs	r0, #16
  40990e:	e7e9      	b.n	4098e4 <__lo0bits+0x20>
  409910:	3001      	adds	r0, #1
  409912:	600b      	str	r3, [r1, #0]
  409914:	4770      	bx	lr
  409916:	2000      	movs	r0, #0
  409918:	4770      	bx	lr
  40991a:	085b      	lsrs	r3, r3, #1
  40991c:	600b      	str	r3, [r1, #0]
  40991e:	2001      	movs	r0, #1
  409920:	4770      	bx	lr
  409922:	bf00      	nop

00409924 <__i2b>:
  409924:	b510      	push	{r4, lr}
  409926:	460c      	mov	r4, r1
  409928:	2101      	movs	r1, #1
  40992a:	f7ff ff3b 	bl	4097a4 <_Balloc>
  40992e:	2201      	movs	r2, #1
  409930:	6144      	str	r4, [r0, #20]
  409932:	6102      	str	r2, [r0, #16]
  409934:	bd10      	pop	{r4, pc}
  409936:	bf00      	nop

00409938 <__multiply>:
  409938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40993c:	690c      	ldr	r4, [r1, #16]
  40993e:	6915      	ldr	r5, [r2, #16]
  409940:	42ac      	cmp	r4, r5
  409942:	b083      	sub	sp, #12
  409944:	468b      	mov	fp, r1
  409946:	4616      	mov	r6, r2
  409948:	da04      	bge.n	409954 <__multiply+0x1c>
  40994a:	4622      	mov	r2, r4
  40994c:	46b3      	mov	fp, r6
  40994e:	462c      	mov	r4, r5
  409950:	460e      	mov	r6, r1
  409952:	4615      	mov	r5, r2
  409954:	f8db 3008 	ldr.w	r3, [fp, #8]
  409958:	f8db 1004 	ldr.w	r1, [fp, #4]
  40995c:	eb04 0805 	add.w	r8, r4, r5
  409960:	4598      	cmp	r8, r3
  409962:	bfc8      	it	gt
  409964:	3101      	addgt	r1, #1
  409966:	f7ff ff1d 	bl	4097a4 <_Balloc>
  40996a:	f100 0914 	add.w	r9, r0, #20
  40996e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  409972:	45d1      	cmp	r9, sl
  409974:	9000      	str	r0, [sp, #0]
  409976:	d205      	bcs.n	409984 <__multiply+0x4c>
  409978:	464b      	mov	r3, r9
  40997a:	2100      	movs	r1, #0
  40997c:	f843 1b04 	str.w	r1, [r3], #4
  409980:	459a      	cmp	sl, r3
  409982:	d8fb      	bhi.n	40997c <__multiply+0x44>
  409984:	f106 0c14 	add.w	ip, r6, #20
  409988:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40998c:	f10b 0b14 	add.w	fp, fp, #20
  409990:	459c      	cmp	ip, r3
  409992:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  409996:	d24c      	bcs.n	409a32 <__multiply+0xfa>
  409998:	f8cd a004 	str.w	sl, [sp, #4]
  40999c:	469a      	mov	sl, r3
  40999e:	f8dc 5000 	ldr.w	r5, [ip]
  4099a2:	b2af      	uxth	r7, r5
  4099a4:	b1ef      	cbz	r7, 4099e2 <__multiply+0xaa>
  4099a6:	2100      	movs	r1, #0
  4099a8:	464d      	mov	r5, r9
  4099aa:	465e      	mov	r6, fp
  4099ac:	460c      	mov	r4, r1
  4099ae:	f856 2b04 	ldr.w	r2, [r6], #4
  4099b2:	6828      	ldr	r0, [r5, #0]
  4099b4:	b293      	uxth	r3, r2
  4099b6:	b281      	uxth	r1, r0
  4099b8:	fb07 1303 	mla	r3, r7, r3, r1
  4099bc:	0c12      	lsrs	r2, r2, #16
  4099be:	0c01      	lsrs	r1, r0, #16
  4099c0:	4423      	add	r3, r4
  4099c2:	fb07 1102 	mla	r1, r7, r2, r1
  4099c6:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4099ca:	b29b      	uxth	r3, r3
  4099cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4099d0:	45b6      	cmp	lr, r6
  4099d2:	f845 3b04 	str.w	r3, [r5], #4
  4099d6:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4099da:	d8e8      	bhi.n	4099ae <__multiply+0x76>
  4099dc:	602c      	str	r4, [r5, #0]
  4099de:	f8dc 5000 	ldr.w	r5, [ip]
  4099e2:	0c2d      	lsrs	r5, r5, #16
  4099e4:	d01d      	beq.n	409a22 <__multiply+0xea>
  4099e6:	f8d9 3000 	ldr.w	r3, [r9]
  4099ea:	4648      	mov	r0, r9
  4099ec:	461c      	mov	r4, r3
  4099ee:	4659      	mov	r1, fp
  4099f0:	2200      	movs	r2, #0
  4099f2:	880e      	ldrh	r6, [r1, #0]
  4099f4:	0c24      	lsrs	r4, r4, #16
  4099f6:	fb05 4406 	mla	r4, r5, r6, r4
  4099fa:	4422      	add	r2, r4
  4099fc:	b29b      	uxth	r3, r3
  4099fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  409a02:	f840 3b04 	str.w	r3, [r0], #4
  409a06:	f851 3b04 	ldr.w	r3, [r1], #4
  409a0a:	6804      	ldr	r4, [r0, #0]
  409a0c:	0c1b      	lsrs	r3, r3, #16
  409a0e:	b2a6      	uxth	r6, r4
  409a10:	fb05 6303 	mla	r3, r5, r3, r6
  409a14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  409a18:	458e      	cmp	lr, r1
  409a1a:	ea4f 4213 	mov.w	r2, r3, lsr #16
  409a1e:	d8e8      	bhi.n	4099f2 <__multiply+0xba>
  409a20:	6003      	str	r3, [r0, #0]
  409a22:	f10c 0c04 	add.w	ip, ip, #4
  409a26:	45e2      	cmp	sl, ip
  409a28:	f109 0904 	add.w	r9, r9, #4
  409a2c:	d8b7      	bhi.n	40999e <__multiply+0x66>
  409a2e:	f8dd a004 	ldr.w	sl, [sp, #4]
  409a32:	f1b8 0f00 	cmp.w	r8, #0
  409a36:	dd0b      	ble.n	409a50 <__multiply+0x118>
  409a38:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  409a3c:	f1aa 0a04 	sub.w	sl, sl, #4
  409a40:	b11b      	cbz	r3, 409a4a <__multiply+0x112>
  409a42:	e005      	b.n	409a50 <__multiply+0x118>
  409a44:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  409a48:	b913      	cbnz	r3, 409a50 <__multiply+0x118>
  409a4a:	f1b8 0801 	subs.w	r8, r8, #1
  409a4e:	d1f9      	bne.n	409a44 <__multiply+0x10c>
  409a50:	9800      	ldr	r0, [sp, #0]
  409a52:	f8c0 8010 	str.w	r8, [r0, #16]
  409a56:	b003      	add	sp, #12
  409a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409a5c <__pow5mult>:
  409a5c:	f012 0303 	ands.w	r3, r2, #3
  409a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409a64:	4614      	mov	r4, r2
  409a66:	4607      	mov	r7, r0
  409a68:	d12e      	bne.n	409ac8 <__pow5mult+0x6c>
  409a6a:	460d      	mov	r5, r1
  409a6c:	10a4      	asrs	r4, r4, #2
  409a6e:	d01c      	beq.n	409aaa <__pow5mult+0x4e>
  409a70:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  409a72:	b396      	cbz	r6, 409ada <__pow5mult+0x7e>
  409a74:	07e3      	lsls	r3, r4, #31
  409a76:	f04f 0800 	mov.w	r8, #0
  409a7a:	d406      	bmi.n	409a8a <__pow5mult+0x2e>
  409a7c:	1064      	asrs	r4, r4, #1
  409a7e:	d014      	beq.n	409aaa <__pow5mult+0x4e>
  409a80:	6830      	ldr	r0, [r6, #0]
  409a82:	b1a8      	cbz	r0, 409ab0 <__pow5mult+0x54>
  409a84:	4606      	mov	r6, r0
  409a86:	07e3      	lsls	r3, r4, #31
  409a88:	d5f8      	bpl.n	409a7c <__pow5mult+0x20>
  409a8a:	4632      	mov	r2, r6
  409a8c:	4629      	mov	r1, r5
  409a8e:	4638      	mov	r0, r7
  409a90:	f7ff ff52 	bl	409938 <__multiply>
  409a94:	b1b5      	cbz	r5, 409ac4 <__pow5mult+0x68>
  409a96:	686a      	ldr	r2, [r5, #4]
  409a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409a9a:	1064      	asrs	r4, r4, #1
  409a9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409aa0:	6029      	str	r1, [r5, #0]
  409aa2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  409aa6:	4605      	mov	r5, r0
  409aa8:	d1ea      	bne.n	409a80 <__pow5mult+0x24>
  409aaa:	4628      	mov	r0, r5
  409aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409ab0:	4632      	mov	r2, r6
  409ab2:	4631      	mov	r1, r6
  409ab4:	4638      	mov	r0, r7
  409ab6:	f7ff ff3f 	bl	409938 <__multiply>
  409aba:	6030      	str	r0, [r6, #0]
  409abc:	f8c0 8000 	str.w	r8, [r0]
  409ac0:	4606      	mov	r6, r0
  409ac2:	e7e0      	b.n	409a86 <__pow5mult+0x2a>
  409ac4:	4605      	mov	r5, r0
  409ac6:	e7d9      	b.n	409a7c <__pow5mult+0x20>
  409ac8:	1e5a      	subs	r2, r3, #1
  409aca:	4d0b      	ldr	r5, [pc, #44]	; (409af8 <__pow5mult+0x9c>)
  409acc:	2300      	movs	r3, #0
  409ace:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  409ad2:	f7ff fe97 	bl	409804 <__multadd>
  409ad6:	4605      	mov	r5, r0
  409ad8:	e7c8      	b.n	409a6c <__pow5mult+0x10>
  409ada:	2101      	movs	r1, #1
  409adc:	4638      	mov	r0, r7
  409ade:	f7ff fe61 	bl	4097a4 <_Balloc>
  409ae2:	f240 2171 	movw	r1, #625	; 0x271
  409ae6:	2201      	movs	r2, #1
  409ae8:	2300      	movs	r3, #0
  409aea:	6141      	str	r1, [r0, #20]
  409aec:	6102      	str	r2, [r0, #16]
  409aee:	4606      	mov	r6, r0
  409af0:	64b8      	str	r0, [r7, #72]	; 0x48
  409af2:	6003      	str	r3, [r0, #0]
  409af4:	e7be      	b.n	409a74 <__pow5mult+0x18>
  409af6:	bf00      	nop
  409af8:	0040b128 	.word	0x0040b128

00409afc <__lshift>:
  409afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409b00:	4691      	mov	r9, r2
  409b02:	690a      	ldr	r2, [r1, #16]
  409b04:	688b      	ldr	r3, [r1, #8]
  409b06:	ea4f 1469 	mov.w	r4, r9, asr #5
  409b0a:	eb04 0802 	add.w	r8, r4, r2
  409b0e:	f108 0501 	add.w	r5, r8, #1
  409b12:	429d      	cmp	r5, r3
  409b14:	460e      	mov	r6, r1
  409b16:	4607      	mov	r7, r0
  409b18:	6849      	ldr	r1, [r1, #4]
  409b1a:	dd04      	ble.n	409b26 <__lshift+0x2a>
  409b1c:	005b      	lsls	r3, r3, #1
  409b1e:	429d      	cmp	r5, r3
  409b20:	f101 0101 	add.w	r1, r1, #1
  409b24:	dcfa      	bgt.n	409b1c <__lshift+0x20>
  409b26:	4638      	mov	r0, r7
  409b28:	f7ff fe3c 	bl	4097a4 <_Balloc>
  409b2c:	2c00      	cmp	r4, #0
  409b2e:	f100 0314 	add.w	r3, r0, #20
  409b32:	dd06      	ble.n	409b42 <__lshift+0x46>
  409b34:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  409b38:	2100      	movs	r1, #0
  409b3a:	f843 1b04 	str.w	r1, [r3], #4
  409b3e:	429a      	cmp	r2, r3
  409b40:	d1fb      	bne.n	409b3a <__lshift+0x3e>
  409b42:	6934      	ldr	r4, [r6, #16]
  409b44:	f106 0114 	add.w	r1, r6, #20
  409b48:	f019 091f 	ands.w	r9, r9, #31
  409b4c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  409b50:	d01d      	beq.n	409b8e <__lshift+0x92>
  409b52:	f1c9 0c20 	rsb	ip, r9, #32
  409b56:	2200      	movs	r2, #0
  409b58:	680c      	ldr	r4, [r1, #0]
  409b5a:	fa04 f409 	lsl.w	r4, r4, r9
  409b5e:	4314      	orrs	r4, r2
  409b60:	f843 4b04 	str.w	r4, [r3], #4
  409b64:	f851 2b04 	ldr.w	r2, [r1], #4
  409b68:	458e      	cmp	lr, r1
  409b6a:	fa22 f20c 	lsr.w	r2, r2, ip
  409b6e:	d8f3      	bhi.n	409b58 <__lshift+0x5c>
  409b70:	601a      	str	r2, [r3, #0]
  409b72:	b10a      	cbz	r2, 409b78 <__lshift+0x7c>
  409b74:	f108 0502 	add.w	r5, r8, #2
  409b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409b7a:	6872      	ldr	r2, [r6, #4]
  409b7c:	3d01      	subs	r5, #1
  409b7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409b82:	6105      	str	r5, [r0, #16]
  409b84:	6031      	str	r1, [r6, #0]
  409b86:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  409b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409b8e:	3b04      	subs	r3, #4
  409b90:	f851 2b04 	ldr.w	r2, [r1], #4
  409b94:	f843 2f04 	str.w	r2, [r3, #4]!
  409b98:	458e      	cmp	lr, r1
  409b9a:	d8f9      	bhi.n	409b90 <__lshift+0x94>
  409b9c:	e7ec      	b.n	409b78 <__lshift+0x7c>
  409b9e:	bf00      	nop

00409ba0 <__mcmp>:
  409ba0:	b430      	push	{r4, r5}
  409ba2:	690b      	ldr	r3, [r1, #16]
  409ba4:	4605      	mov	r5, r0
  409ba6:	6900      	ldr	r0, [r0, #16]
  409ba8:	1ac0      	subs	r0, r0, r3
  409baa:	d10f      	bne.n	409bcc <__mcmp+0x2c>
  409bac:	009b      	lsls	r3, r3, #2
  409bae:	3514      	adds	r5, #20
  409bb0:	3114      	adds	r1, #20
  409bb2:	4419      	add	r1, r3
  409bb4:	442b      	add	r3, r5
  409bb6:	e001      	b.n	409bbc <__mcmp+0x1c>
  409bb8:	429d      	cmp	r5, r3
  409bba:	d207      	bcs.n	409bcc <__mcmp+0x2c>
  409bbc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  409bc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  409bc4:	4294      	cmp	r4, r2
  409bc6:	d0f7      	beq.n	409bb8 <__mcmp+0x18>
  409bc8:	d302      	bcc.n	409bd0 <__mcmp+0x30>
  409bca:	2001      	movs	r0, #1
  409bcc:	bc30      	pop	{r4, r5}
  409bce:	4770      	bx	lr
  409bd0:	f04f 30ff 	mov.w	r0, #4294967295
  409bd4:	e7fa      	b.n	409bcc <__mcmp+0x2c>
  409bd6:	bf00      	nop

00409bd8 <__mdiff>:
  409bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409bdc:	690f      	ldr	r7, [r1, #16]
  409bde:	460e      	mov	r6, r1
  409be0:	6911      	ldr	r1, [r2, #16]
  409be2:	1a7f      	subs	r7, r7, r1
  409be4:	2f00      	cmp	r7, #0
  409be6:	4690      	mov	r8, r2
  409be8:	d117      	bne.n	409c1a <__mdiff+0x42>
  409bea:	0089      	lsls	r1, r1, #2
  409bec:	f106 0514 	add.w	r5, r6, #20
  409bf0:	f102 0e14 	add.w	lr, r2, #20
  409bf4:	186b      	adds	r3, r5, r1
  409bf6:	4471      	add	r1, lr
  409bf8:	e001      	b.n	409bfe <__mdiff+0x26>
  409bfa:	429d      	cmp	r5, r3
  409bfc:	d25c      	bcs.n	409cb8 <__mdiff+0xe0>
  409bfe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  409c02:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  409c06:	42a2      	cmp	r2, r4
  409c08:	d0f7      	beq.n	409bfa <__mdiff+0x22>
  409c0a:	d25e      	bcs.n	409cca <__mdiff+0xf2>
  409c0c:	4633      	mov	r3, r6
  409c0e:	462c      	mov	r4, r5
  409c10:	4646      	mov	r6, r8
  409c12:	4675      	mov	r5, lr
  409c14:	4698      	mov	r8, r3
  409c16:	2701      	movs	r7, #1
  409c18:	e005      	b.n	409c26 <__mdiff+0x4e>
  409c1a:	db58      	blt.n	409cce <__mdiff+0xf6>
  409c1c:	f106 0514 	add.w	r5, r6, #20
  409c20:	f108 0414 	add.w	r4, r8, #20
  409c24:	2700      	movs	r7, #0
  409c26:	6871      	ldr	r1, [r6, #4]
  409c28:	f7ff fdbc 	bl	4097a4 <_Balloc>
  409c2c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409c30:	6936      	ldr	r6, [r6, #16]
  409c32:	60c7      	str	r7, [r0, #12]
  409c34:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  409c38:	46a6      	mov	lr, r4
  409c3a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  409c3e:	f100 0414 	add.w	r4, r0, #20
  409c42:	2300      	movs	r3, #0
  409c44:	f85e 1b04 	ldr.w	r1, [lr], #4
  409c48:	f855 8b04 	ldr.w	r8, [r5], #4
  409c4c:	b28a      	uxth	r2, r1
  409c4e:	fa13 f388 	uxtah	r3, r3, r8
  409c52:	0c09      	lsrs	r1, r1, #16
  409c54:	1a9a      	subs	r2, r3, r2
  409c56:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  409c5a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409c5e:	b292      	uxth	r2, r2
  409c60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409c64:	45f4      	cmp	ip, lr
  409c66:	f844 2b04 	str.w	r2, [r4], #4
  409c6a:	ea4f 4323 	mov.w	r3, r3, asr #16
  409c6e:	d8e9      	bhi.n	409c44 <__mdiff+0x6c>
  409c70:	42af      	cmp	r7, r5
  409c72:	d917      	bls.n	409ca4 <__mdiff+0xcc>
  409c74:	46a4      	mov	ip, r4
  409c76:	46ae      	mov	lr, r5
  409c78:	f85e 2b04 	ldr.w	r2, [lr], #4
  409c7c:	fa13 f382 	uxtah	r3, r3, r2
  409c80:	1419      	asrs	r1, r3, #16
  409c82:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  409c86:	b29b      	uxth	r3, r3
  409c88:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409c8c:	4577      	cmp	r7, lr
  409c8e:	f84c 2b04 	str.w	r2, [ip], #4
  409c92:	ea4f 4321 	mov.w	r3, r1, asr #16
  409c96:	d8ef      	bhi.n	409c78 <__mdiff+0xa0>
  409c98:	43ed      	mvns	r5, r5
  409c9a:	442f      	add	r7, r5
  409c9c:	f027 0703 	bic.w	r7, r7, #3
  409ca0:	3704      	adds	r7, #4
  409ca2:	443c      	add	r4, r7
  409ca4:	3c04      	subs	r4, #4
  409ca6:	b922      	cbnz	r2, 409cb2 <__mdiff+0xda>
  409ca8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409cac:	3e01      	subs	r6, #1
  409cae:	2b00      	cmp	r3, #0
  409cb0:	d0fa      	beq.n	409ca8 <__mdiff+0xd0>
  409cb2:	6106      	str	r6, [r0, #16]
  409cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409cb8:	2100      	movs	r1, #0
  409cba:	f7ff fd73 	bl	4097a4 <_Balloc>
  409cbe:	2201      	movs	r2, #1
  409cc0:	2300      	movs	r3, #0
  409cc2:	6102      	str	r2, [r0, #16]
  409cc4:	6143      	str	r3, [r0, #20]
  409cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409cca:	4674      	mov	r4, lr
  409ccc:	e7ab      	b.n	409c26 <__mdiff+0x4e>
  409cce:	4633      	mov	r3, r6
  409cd0:	f106 0414 	add.w	r4, r6, #20
  409cd4:	f102 0514 	add.w	r5, r2, #20
  409cd8:	4616      	mov	r6, r2
  409cda:	2701      	movs	r7, #1
  409cdc:	4698      	mov	r8, r3
  409cde:	e7a2      	b.n	409c26 <__mdiff+0x4e>

00409ce0 <__d2b>:
  409ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409ce4:	b082      	sub	sp, #8
  409ce6:	2101      	movs	r1, #1
  409ce8:	461c      	mov	r4, r3
  409cea:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409cee:	4615      	mov	r5, r2
  409cf0:	9e08      	ldr	r6, [sp, #32]
  409cf2:	f7ff fd57 	bl	4097a4 <_Balloc>
  409cf6:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409cfa:	4680      	mov	r8, r0
  409cfc:	b10f      	cbz	r7, 409d02 <__d2b+0x22>
  409cfe:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409d02:	9401      	str	r4, [sp, #4]
  409d04:	b31d      	cbz	r5, 409d4e <__d2b+0x6e>
  409d06:	a802      	add	r0, sp, #8
  409d08:	f840 5d08 	str.w	r5, [r0, #-8]!
  409d0c:	f7ff fdda 	bl	4098c4 <__lo0bits>
  409d10:	2800      	cmp	r0, #0
  409d12:	d134      	bne.n	409d7e <__d2b+0x9e>
  409d14:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409d18:	f8c8 2014 	str.w	r2, [r8, #20]
  409d1c:	2b00      	cmp	r3, #0
  409d1e:	bf0c      	ite	eq
  409d20:	2101      	moveq	r1, #1
  409d22:	2102      	movne	r1, #2
  409d24:	f8c8 3018 	str.w	r3, [r8, #24]
  409d28:	f8c8 1010 	str.w	r1, [r8, #16]
  409d2c:	b9df      	cbnz	r7, 409d66 <__d2b+0x86>
  409d2e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409d32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409d36:	6030      	str	r0, [r6, #0]
  409d38:	6918      	ldr	r0, [r3, #16]
  409d3a:	f7ff fda3 	bl	409884 <__hi0bits>
  409d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409d40:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409d44:	6018      	str	r0, [r3, #0]
  409d46:	4640      	mov	r0, r8
  409d48:	b002      	add	sp, #8
  409d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409d4e:	a801      	add	r0, sp, #4
  409d50:	f7ff fdb8 	bl	4098c4 <__lo0bits>
  409d54:	9b01      	ldr	r3, [sp, #4]
  409d56:	f8c8 3014 	str.w	r3, [r8, #20]
  409d5a:	2101      	movs	r1, #1
  409d5c:	3020      	adds	r0, #32
  409d5e:	f8c8 1010 	str.w	r1, [r8, #16]
  409d62:	2f00      	cmp	r7, #0
  409d64:	d0e3      	beq.n	409d2e <__d2b+0x4e>
  409d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409d68:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409d6c:	4407      	add	r7, r0
  409d6e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409d72:	6037      	str	r7, [r6, #0]
  409d74:	6018      	str	r0, [r3, #0]
  409d76:	4640      	mov	r0, r8
  409d78:	b002      	add	sp, #8
  409d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409d7e:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409d82:	f1c0 0220 	rsb	r2, r0, #32
  409d86:	fa03 f202 	lsl.w	r2, r3, r2
  409d8a:	430a      	orrs	r2, r1
  409d8c:	40c3      	lsrs	r3, r0
  409d8e:	9301      	str	r3, [sp, #4]
  409d90:	f8c8 2014 	str.w	r2, [r8, #20]
  409d94:	e7c2      	b.n	409d1c <__d2b+0x3c>
  409d96:	bf00      	nop

00409d98 <_realloc_r>:
  409d98:	2900      	cmp	r1, #0
  409d9a:	f000 8095 	beq.w	409ec8 <_realloc_r+0x130>
  409d9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409da2:	460d      	mov	r5, r1
  409da4:	4616      	mov	r6, r2
  409da6:	b083      	sub	sp, #12
  409da8:	4680      	mov	r8, r0
  409daa:	f106 070b 	add.w	r7, r6, #11
  409dae:	f7ff fced 	bl	40978c <__malloc_lock>
  409db2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  409db6:	2f16      	cmp	r7, #22
  409db8:	f02e 0403 	bic.w	r4, lr, #3
  409dbc:	f1a5 0908 	sub.w	r9, r5, #8
  409dc0:	d83c      	bhi.n	409e3c <_realloc_r+0xa4>
  409dc2:	2210      	movs	r2, #16
  409dc4:	4617      	mov	r7, r2
  409dc6:	42be      	cmp	r6, r7
  409dc8:	d83d      	bhi.n	409e46 <_realloc_r+0xae>
  409dca:	4294      	cmp	r4, r2
  409dcc:	da43      	bge.n	409e56 <_realloc_r+0xbe>
  409dce:	4bc4      	ldr	r3, [pc, #784]	; (40a0e0 <_realloc_r+0x348>)
  409dd0:	6899      	ldr	r1, [r3, #8]
  409dd2:	eb09 0004 	add.w	r0, r9, r4
  409dd6:	4288      	cmp	r0, r1
  409dd8:	f000 80b4 	beq.w	409f44 <_realloc_r+0x1ac>
  409ddc:	6843      	ldr	r3, [r0, #4]
  409dde:	f023 0101 	bic.w	r1, r3, #1
  409de2:	4401      	add	r1, r0
  409de4:	6849      	ldr	r1, [r1, #4]
  409de6:	07c9      	lsls	r1, r1, #31
  409de8:	d54c      	bpl.n	409e84 <_realloc_r+0xec>
  409dea:	f01e 0f01 	tst.w	lr, #1
  409dee:	f000 809b 	beq.w	409f28 <_realloc_r+0x190>
  409df2:	4631      	mov	r1, r6
  409df4:	4640      	mov	r0, r8
  409df6:	f7ff f8af 	bl	408f58 <_malloc_r>
  409dfa:	4606      	mov	r6, r0
  409dfc:	2800      	cmp	r0, #0
  409dfe:	d03a      	beq.n	409e76 <_realloc_r+0xde>
  409e00:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409e04:	f023 0301 	bic.w	r3, r3, #1
  409e08:	444b      	add	r3, r9
  409e0a:	f1a0 0208 	sub.w	r2, r0, #8
  409e0e:	429a      	cmp	r2, r3
  409e10:	f000 8121 	beq.w	40a056 <_realloc_r+0x2be>
  409e14:	1f22      	subs	r2, r4, #4
  409e16:	2a24      	cmp	r2, #36	; 0x24
  409e18:	f200 8107 	bhi.w	40a02a <_realloc_r+0x292>
  409e1c:	2a13      	cmp	r2, #19
  409e1e:	f200 80db 	bhi.w	409fd8 <_realloc_r+0x240>
  409e22:	4603      	mov	r3, r0
  409e24:	462a      	mov	r2, r5
  409e26:	6811      	ldr	r1, [r2, #0]
  409e28:	6019      	str	r1, [r3, #0]
  409e2a:	6851      	ldr	r1, [r2, #4]
  409e2c:	6059      	str	r1, [r3, #4]
  409e2e:	6892      	ldr	r2, [r2, #8]
  409e30:	609a      	str	r2, [r3, #8]
  409e32:	4629      	mov	r1, r5
  409e34:	4640      	mov	r0, r8
  409e36:	f7fe ff97 	bl	408d68 <_free_r>
  409e3a:	e01c      	b.n	409e76 <_realloc_r+0xde>
  409e3c:	f027 0707 	bic.w	r7, r7, #7
  409e40:	2f00      	cmp	r7, #0
  409e42:	463a      	mov	r2, r7
  409e44:	dabf      	bge.n	409dc6 <_realloc_r+0x2e>
  409e46:	2600      	movs	r6, #0
  409e48:	230c      	movs	r3, #12
  409e4a:	4630      	mov	r0, r6
  409e4c:	f8c8 3000 	str.w	r3, [r8]
  409e50:	b003      	add	sp, #12
  409e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e56:	462e      	mov	r6, r5
  409e58:	1be3      	subs	r3, r4, r7
  409e5a:	2b0f      	cmp	r3, #15
  409e5c:	d81e      	bhi.n	409e9c <_realloc_r+0x104>
  409e5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409e62:	f003 0301 	and.w	r3, r3, #1
  409e66:	4323      	orrs	r3, r4
  409e68:	444c      	add	r4, r9
  409e6a:	f8c9 3004 	str.w	r3, [r9, #4]
  409e6e:	6863      	ldr	r3, [r4, #4]
  409e70:	f043 0301 	orr.w	r3, r3, #1
  409e74:	6063      	str	r3, [r4, #4]
  409e76:	4640      	mov	r0, r8
  409e78:	f7ff fc8e 	bl	409798 <__malloc_unlock>
  409e7c:	4630      	mov	r0, r6
  409e7e:	b003      	add	sp, #12
  409e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e84:	f023 0303 	bic.w	r3, r3, #3
  409e88:	18e1      	adds	r1, r4, r3
  409e8a:	4291      	cmp	r1, r2
  409e8c:	db1f      	blt.n	409ece <_realloc_r+0x136>
  409e8e:	68c3      	ldr	r3, [r0, #12]
  409e90:	6882      	ldr	r2, [r0, #8]
  409e92:	462e      	mov	r6, r5
  409e94:	60d3      	str	r3, [r2, #12]
  409e96:	460c      	mov	r4, r1
  409e98:	609a      	str	r2, [r3, #8]
  409e9a:	e7dd      	b.n	409e58 <_realloc_r+0xc0>
  409e9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409ea0:	eb09 0107 	add.w	r1, r9, r7
  409ea4:	f002 0201 	and.w	r2, r2, #1
  409ea8:	444c      	add	r4, r9
  409eaa:	f043 0301 	orr.w	r3, r3, #1
  409eae:	4317      	orrs	r7, r2
  409eb0:	f8c9 7004 	str.w	r7, [r9, #4]
  409eb4:	604b      	str	r3, [r1, #4]
  409eb6:	6863      	ldr	r3, [r4, #4]
  409eb8:	f043 0301 	orr.w	r3, r3, #1
  409ebc:	3108      	adds	r1, #8
  409ebe:	6063      	str	r3, [r4, #4]
  409ec0:	4640      	mov	r0, r8
  409ec2:	f7fe ff51 	bl	408d68 <_free_r>
  409ec6:	e7d6      	b.n	409e76 <_realloc_r+0xde>
  409ec8:	4611      	mov	r1, r2
  409eca:	f7ff b845 	b.w	408f58 <_malloc_r>
  409ece:	f01e 0f01 	tst.w	lr, #1
  409ed2:	d18e      	bne.n	409df2 <_realloc_r+0x5a>
  409ed4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409ed8:	eba9 0a01 	sub.w	sl, r9, r1
  409edc:	f8da 1004 	ldr.w	r1, [sl, #4]
  409ee0:	f021 0103 	bic.w	r1, r1, #3
  409ee4:	440b      	add	r3, r1
  409ee6:	4423      	add	r3, r4
  409ee8:	4293      	cmp	r3, r2
  409eea:	db25      	blt.n	409f38 <_realloc_r+0x1a0>
  409eec:	68c2      	ldr	r2, [r0, #12]
  409eee:	6881      	ldr	r1, [r0, #8]
  409ef0:	4656      	mov	r6, sl
  409ef2:	60ca      	str	r2, [r1, #12]
  409ef4:	6091      	str	r1, [r2, #8]
  409ef6:	f8da 100c 	ldr.w	r1, [sl, #12]
  409efa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409efe:	1f22      	subs	r2, r4, #4
  409f00:	2a24      	cmp	r2, #36	; 0x24
  409f02:	60c1      	str	r1, [r0, #12]
  409f04:	6088      	str	r0, [r1, #8]
  409f06:	f200 8094 	bhi.w	40a032 <_realloc_r+0x29a>
  409f0a:	2a13      	cmp	r2, #19
  409f0c:	d96f      	bls.n	409fee <_realloc_r+0x256>
  409f0e:	6829      	ldr	r1, [r5, #0]
  409f10:	f8ca 1008 	str.w	r1, [sl, #8]
  409f14:	6869      	ldr	r1, [r5, #4]
  409f16:	f8ca 100c 	str.w	r1, [sl, #12]
  409f1a:	2a1b      	cmp	r2, #27
  409f1c:	f200 80a2 	bhi.w	40a064 <_realloc_r+0x2cc>
  409f20:	3508      	adds	r5, #8
  409f22:	f10a 0210 	add.w	r2, sl, #16
  409f26:	e063      	b.n	409ff0 <_realloc_r+0x258>
  409f28:	f855 3c08 	ldr.w	r3, [r5, #-8]
  409f2c:	eba9 0a03 	sub.w	sl, r9, r3
  409f30:	f8da 1004 	ldr.w	r1, [sl, #4]
  409f34:	f021 0103 	bic.w	r1, r1, #3
  409f38:	1863      	adds	r3, r4, r1
  409f3a:	4293      	cmp	r3, r2
  409f3c:	f6ff af59 	blt.w	409df2 <_realloc_r+0x5a>
  409f40:	4656      	mov	r6, sl
  409f42:	e7d8      	b.n	409ef6 <_realloc_r+0x15e>
  409f44:	6841      	ldr	r1, [r0, #4]
  409f46:	f021 0b03 	bic.w	fp, r1, #3
  409f4a:	44a3      	add	fp, r4
  409f4c:	f107 0010 	add.w	r0, r7, #16
  409f50:	4583      	cmp	fp, r0
  409f52:	da56      	bge.n	40a002 <_realloc_r+0x26a>
  409f54:	f01e 0f01 	tst.w	lr, #1
  409f58:	f47f af4b 	bne.w	409df2 <_realloc_r+0x5a>
  409f5c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409f60:	eba9 0a01 	sub.w	sl, r9, r1
  409f64:	f8da 1004 	ldr.w	r1, [sl, #4]
  409f68:	f021 0103 	bic.w	r1, r1, #3
  409f6c:	448b      	add	fp, r1
  409f6e:	4558      	cmp	r0, fp
  409f70:	dce2      	bgt.n	409f38 <_realloc_r+0x1a0>
  409f72:	4656      	mov	r6, sl
  409f74:	f8da 100c 	ldr.w	r1, [sl, #12]
  409f78:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409f7c:	1f22      	subs	r2, r4, #4
  409f7e:	2a24      	cmp	r2, #36	; 0x24
  409f80:	60c1      	str	r1, [r0, #12]
  409f82:	6088      	str	r0, [r1, #8]
  409f84:	f200 808f 	bhi.w	40a0a6 <_realloc_r+0x30e>
  409f88:	2a13      	cmp	r2, #19
  409f8a:	f240 808a 	bls.w	40a0a2 <_realloc_r+0x30a>
  409f8e:	6829      	ldr	r1, [r5, #0]
  409f90:	f8ca 1008 	str.w	r1, [sl, #8]
  409f94:	6869      	ldr	r1, [r5, #4]
  409f96:	f8ca 100c 	str.w	r1, [sl, #12]
  409f9a:	2a1b      	cmp	r2, #27
  409f9c:	f200 808a 	bhi.w	40a0b4 <_realloc_r+0x31c>
  409fa0:	3508      	adds	r5, #8
  409fa2:	f10a 0210 	add.w	r2, sl, #16
  409fa6:	6829      	ldr	r1, [r5, #0]
  409fa8:	6011      	str	r1, [r2, #0]
  409faa:	6869      	ldr	r1, [r5, #4]
  409fac:	6051      	str	r1, [r2, #4]
  409fae:	68a9      	ldr	r1, [r5, #8]
  409fb0:	6091      	str	r1, [r2, #8]
  409fb2:	eb0a 0107 	add.w	r1, sl, r7
  409fb6:	ebab 0207 	sub.w	r2, fp, r7
  409fba:	f042 0201 	orr.w	r2, r2, #1
  409fbe:	6099      	str	r1, [r3, #8]
  409fc0:	604a      	str	r2, [r1, #4]
  409fc2:	f8da 3004 	ldr.w	r3, [sl, #4]
  409fc6:	f003 0301 	and.w	r3, r3, #1
  409fca:	431f      	orrs	r7, r3
  409fcc:	4640      	mov	r0, r8
  409fce:	f8ca 7004 	str.w	r7, [sl, #4]
  409fd2:	f7ff fbe1 	bl	409798 <__malloc_unlock>
  409fd6:	e751      	b.n	409e7c <_realloc_r+0xe4>
  409fd8:	682b      	ldr	r3, [r5, #0]
  409fda:	6003      	str	r3, [r0, #0]
  409fdc:	686b      	ldr	r3, [r5, #4]
  409fde:	6043      	str	r3, [r0, #4]
  409fe0:	2a1b      	cmp	r2, #27
  409fe2:	d82d      	bhi.n	40a040 <_realloc_r+0x2a8>
  409fe4:	f100 0308 	add.w	r3, r0, #8
  409fe8:	f105 0208 	add.w	r2, r5, #8
  409fec:	e71b      	b.n	409e26 <_realloc_r+0x8e>
  409fee:	4632      	mov	r2, r6
  409ff0:	6829      	ldr	r1, [r5, #0]
  409ff2:	6011      	str	r1, [r2, #0]
  409ff4:	6869      	ldr	r1, [r5, #4]
  409ff6:	6051      	str	r1, [r2, #4]
  409ff8:	68a9      	ldr	r1, [r5, #8]
  409ffa:	6091      	str	r1, [r2, #8]
  409ffc:	461c      	mov	r4, r3
  409ffe:	46d1      	mov	r9, sl
  40a000:	e72a      	b.n	409e58 <_realloc_r+0xc0>
  40a002:	eb09 0107 	add.w	r1, r9, r7
  40a006:	ebab 0b07 	sub.w	fp, fp, r7
  40a00a:	f04b 0201 	orr.w	r2, fp, #1
  40a00e:	6099      	str	r1, [r3, #8]
  40a010:	604a      	str	r2, [r1, #4]
  40a012:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40a016:	f003 0301 	and.w	r3, r3, #1
  40a01a:	431f      	orrs	r7, r3
  40a01c:	4640      	mov	r0, r8
  40a01e:	f845 7c04 	str.w	r7, [r5, #-4]
  40a022:	f7ff fbb9 	bl	409798 <__malloc_unlock>
  40a026:	462e      	mov	r6, r5
  40a028:	e728      	b.n	409e7c <_realloc_r+0xe4>
  40a02a:	4629      	mov	r1, r5
  40a02c:	f7ff fb4a 	bl	4096c4 <memmove>
  40a030:	e6ff      	b.n	409e32 <_realloc_r+0x9a>
  40a032:	4629      	mov	r1, r5
  40a034:	4630      	mov	r0, r6
  40a036:	461c      	mov	r4, r3
  40a038:	46d1      	mov	r9, sl
  40a03a:	f7ff fb43 	bl	4096c4 <memmove>
  40a03e:	e70b      	b.n	409e58 <_realloc_r+0xc0>
  40a040:	68ab      	ldr	r3, [r5, #8]
  40a042:	6083      	str	r3, [r0, #8]
  40a044:	68eb      	ldr	r3, [r5, #12]
  40a046:	60c3      	str	r3, [r0, #12]
  40a048:	2a24      	cmp	r2, #36	; 0x24
  40a04a:	d017      	beq.n	40a07c <_realloc_r+0x2e4>
  40a04c:	f100 0310 	add.w	r3, r0, #16
  40a050:	f105 0210 	add.w	r2, r5, #16
  40a054:	e6e7      	b.n	409e26 <_realloc_r+0x8e>
  40a056:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40a05a:	f023 0303 	bic.w	r3, r3, #3
  40a05e:	441c      	add	r4, r3
  40a060:	462e      	mov	r6, r5
  40a062:	e6f9      	b.n	409e58 <_realloc_r+0xc0>
  40a064:	68a9      	ldr	r1, [r5, #8]
  40a066:	f8ca 1010 	str.w	r1, [sl, #16]
  40a06a:	68e9      	ldr	r1, [r5, #12]
  40a06c:	f8ca 1014 	str.w	r1, [sl, #20]
  40a070:	2a24      	cmp	r2, #36	; 0x24
  40a072:	d00c      	beq.n	40a08e <_realloc_r+0x2f6>
  40a074:	3510      	adds	r5, #16
  40a076:	f10a 0218 	add.w	r2, sl, #24
  40a07a:	e7b9      	b.n	409ff0 <_realloc_r+0x258>
  40a07c:	692b      	ldr	r3, [r5, #16]
  40a07e:	6103      	str	r3, [r0, #16]
  40a080:	696b      	ldr	r3, [r5, #20]
  40a082:	6143      	str	r3, [r0, #20]
  40a084:	f105 0218 	add.w	r2, r5, #24
  40a088:	f100 0318 	add.w	r3, r0, #24
  40a08c:	e6cb      	b.n	409e26 <_realloc_r+0x8e>
  40a08e:	692a      	ldr	r2, [r5, #16]
  40a090:	f8ca 2018 	str.w	r2, [sl, #24]
  40a094:	696a      	ldr	r2, [r5, #20]
  40a096:	f8ca 201c 	str.w	r2, [sl, #28]
  40a09a:	3518      	adds	r5, #24
  40a09c:	f10a 0220 	add.w	r2, sl, #32
  40a0a0:	e7a6      	b.n	409ff0 <_realloc_r+0x258>
  40a0a2:	4632      	mov	r2, r6
  40a0a4:	e77f      	b.n	409fa6 <_realloc_r+0x20e>
  40a0a6:	4629      	mov	r1, r5
  40a0a8:	4630      	mov	r0, r6
  40a0aa:	9301      	str	r3, [sp, #4]
  40a0ac:	f7ff fb0a 	bl	4096c4 <memmove>
  40a0b0:	9b01      	ldr	r3, [sp, #4]
  40a0b2:	e77e      	b.n	409fb2 <_realloc_r+0x21a>
  40a0b4:	68a9      	ldr	r1, [r5, #8]
  40a0b6:	f8ca 1010 	str.w	r1, [sl, #16]
  40a0ba:	68e9      	ldr	r1, [r5, #12]
  40a0bc:	f8ca 1014 	str.w	r1, [sl, #20]
  40a0c0:	2a24      	cmp	r2, #36	; 0x24
  40a0c2:	d003      	beq.n	40a0cc <_realloc_r+0x334>
  40a0c4:	3510      	adds	r5, #16
  40a0c6:	f10a 0218 	add.w	r2, sl, #24
  40a0ca:	e76c      	b.n	409fa6 <_realloc_r+0x20e>
  40a0cc:	692a      	ldr	r2, [r5, #16]
  40a0ce:	f8ca 2018 	str.w	r2, [sl, #24]
  40a0d2:	696a      	ldr	r2, [r5, #20]
  40a0d4:	f8ca 201c 	str.w	r2, [sl, #28]
  40a0d8:	3518      	adds	r5, #24
  40a0da:	f10a 0220 	add.w	r2, sl, #32
  40a0de:	e762      	b.n	409fa6 <_realloc_r+0x20e>
  40a0e0:	20000a20 	.word	0x20000a20

0040a0e4 <_sbrk_r>:
  40a0e4:	b538      	push	{r3, r4, r5, lr}
  40a0e6:	4c07      	ldr	r4, [pc, #28]	; (40a104 <_sbrk_r+0x20>)
  40a0e8:	2300      	movs	r3, #0
  40a0ea:	4605      	mov	r5, r0
  40a0ec:	4608      	mov	r0, r1
  40a0ee:	6023      	str	r3, [r4, #0]
  40a0f0:	f7f9 fcdc 	bl	403aac <_sbrk>
  40a0f4:	1c43      	adds	r3, r0, #1
  40a0f6:	d000      	beq.n	40a0fa <_sbrk_r+0x16>
  40a0f8:	bd38      	pop	{r3, r4, r5, pc}
  40a0fa:	6823      	ldr	r3, [r4, #0]
  40a0fc:	2b00      	cmp	r3, #0
  40a0fe:	d0fb      	beq.n	40a0f8 <_sbrk_r+0x14>
  40a100:	602b      	str	r3, [r5, #0]
  40a102:	bd38      	pop	{r3, r4, r5, pc}
  40a104:	20006258 	.word	0x20006258

0040a108 <__ssprint_r>:
  40a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a10c:	6893      	ldr	r3, [r2, #8]
  40a10e:	b083      	sub	sp, #12
  40a110:	4690      	mov	r8, r2
  40a112:	2b00      	cmp	r3, #0
  40a114:	d070      	beq.n	40a1f8 <__ssprint_r+0xf0>
  40a116:	4682      	mov	sl, r0
  40a118:	460c      	mov	r4, r1
  40a11a:	6817      	ldr	r7, [r2, #0]
  40a11c:	688d      	ldr	r5, [r1, #8]
  40a11e:	6808      	ldr	r0, [r1, #0]
  40a120:	e042      	b.n	40a1a8 <__ssprint_r+0xa0>
  40a122:	89a3      	ldrh	r3, [r4, #12]
  40a124:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40a128:	d02e      	beq.n	40a188 <__ssprint_r+0x80>
  40a12a:	6965      	ldr	r5, [r4, #20]
  40a12c:	6921      	ldr	r1, [r4, #16]
  40a12e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40a132:	eba0 0b01 	sub.w	fp, r0, r1
  40a136:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40a13a:	f10b 0001 	add.w	r0, fp, #1
  40a13e:	106d      	asrs	r5, r5, #1
  40a140:	4430      	add	r0, r6
  40a142:	42a8      	cmp	r0, r5
  40a144:	462a      	mov	r2, r5
  40a146:	bf84      	itt	hi
  40a148:	4605      	movhi	r5, r0
  40a14a:	462a      	movhi	r2, r5
  40a14c:	055b      	lsls	r3, r3, #21
  40a14e:	d538      	bpl.n	40a1c2 <__ssprint_r+0xba>
  40a150:	4611      	mov	r1, r2
  40a152:	4650      	mov	r0, sl
  40a154:	f7fe ff00 	bl	408f58 <_malloc_r>
  40a158:	2800      	cmp	r0, #0
  40a15a:	d03c      	beq.n	40a1d6 <__ssprint_r+0xce>
  40a15c:	465a      	mov	r2, fp
  40a15e:	6921      	ldr	r1, [r4, #16]
  40a160:	9001      	str	r0, [sp, #4]
  40a162:	f7ff fa15 	bl	409590 <memcpy>
  40a166:	89a2      	ldrh	r2, [r4, #12]
  40a168:	9b01      	ldr	r3, [sp, #4]
  40a16a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40a16e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40a172:	81a2      	strh	r2, [r4, #12]
  40a174:	eba5 020b 	sub.w	r2, r5, fp
  40a178:	eb03 000b 	add.w	r0, r3, fp
  40a17c:	6165      	str	r5, [r4, #20]
  40a17e:	6123      	str	r3, [r4, #16]
  40a180:	6020      	str	r0, [r4, #0]
  40a182:	60a2      	str	r2, [r4, #8]
  40a184:	4635      	mov	r5, r6
  40a186:	46b3      	mov	fp, r6
  40a188:	465a      	mov	r2, fp
  40a18a:	4649      	mov	r1, r9
  40a18c:	f7ff fa9a 	bl	4096c4 <memmove>
  40a190:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40a194:	68a2      	ldr	r2, [r4, #8]
  40a196:	6820      	ldr	r0, [r4, #0]
  40a198:	1b55      	subs	r5, r2, r5
  40a19a:	4458      	add	r0, fp
  40a19c:	1b9e      	subs	r6, r3, r6
  40a19e:	60a5      	str	r5, [r4, #8]
  40a1a0:	6020      	str	r0, [r4, #0]
  40a1a2:	f8c8 6008 	str.w	r6, [r8, #8]
  40a1a6:	b33e      	cbz	r6, 40a1f8 <__ssprint_r+0xf0>
  40a1a8:	687e      	ldr	r6, [r7, #4]
  40a1aa:	463b      	mov	r3, r7
  40a1ac:	3708      	adds	r7, #8
  40a1ae:	2e00      	cmp	r6, #0
  40a1b0:	d0fa      	beq.n	40a1a8 <__ssprint_r+0xa0>
  40a1b2:	42ae      	cmp	r6, r5
  40a1b4:	f8d3 9000 	ldr.w	r9, [r3]
  40a1b8:	46ab      	mov	fp, r5
  40a1ba:	d2b2      	bcs.n	40a122 <__ssprint_r+0x1a>
  40a1bc:	4635      	mov	r5, r6
  40a1be:	46b3      	mov	fp, r6
  40a1c0:	e7e2      	b.n	40a188 <__ssprint_r+0x80>
  40a1c2:	4650      	mov	r0, sl
  40a1c4:	f7ff fde8 	bl	409d98 <_realloc_r>
  40a1c8:	4603      	mov	r3, r0
  40a1ca:	2800      	cmp	r0, #0
  40a1cc:	d1d2      	bne.n	40a174 <__ssprint_r+0x6c>
  40a1ce:	6921      	ldr	r1, [r4, #16]
  40a1d0:	4650      	mov	r0, sl
  40a1d2:	f7fe fdc9 	bl	408d68 <_free_r>
  40a1d6:	230c      	movs	r3, #12
  40a1d8:	f8ca 3000 	str.w	r3, [sl]
  40a1dc:	89a3      	ldrh	r3, [r4, #12]
  40a1de:	2200      	movs	r2, #0
  40a1e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a1e4:	f04f 30ff 	mov.w	r0, #4294967295
  40a1e8:	81a3      	strh	r3, [r4, #12]
  40a1ea:	f8c8 2008 	str.w	r2, [r8, #8]
  40a1ee:	f8c8 2004 	str.w	r2, [r8, #4]
  40a1f2:	b003      	add	sp, #12
  40a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a1f8:	2000      	movs	r0, #0
  40a1fa:	f8c8 0004 	str.w	r0, [r8, #4]
  40a1fe:	b003      	add	sp, #12
  40a200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a204 <__ascii_wctomb>:
  40a204:	b121      	cbz	r1, 40a210 <__ascii_wctomb+0xc>
  40a206:	2aff      	cmp	r2, #255	; 0xff
  40a208:	d804      	bhi.n	40a214 <__ascii_wctomb+0x10>
  40a20a:	700a      	strb	r2, [r1, #0]
  40a20c:	2001      	movs	r0, #1
  40a20e:	4770      	bx	lr
  40a210:	4608      	mov	r0, r1
  40a212:	4770      	bx	lr
  40a214:	238a      	movs	r3, #138	; 0x8a
  40a216:	6003      	str	r3, [r0, #0]
  40a218:	f04f 30ff 	mov.w	r0, #4294967295
  40a21c:	4770      	bx	lr
  40a21e:	bf00      	nop

0040a220 <__register_exitproc>:
  40a220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a224:	4d2c      	ldr	r5, [pc, #176]	; (40a2d8 <__register_exitproc+0xb8>)
  40a226:	4606      	mov	r6, r0
  40a228:	6828      	ldr	r0, [r5, #0]
  40a22a:	4698      	mov	r8, r3
  40a22c:	460f      	mov	r7, r1
  40a22e:	4691      	mov	r9, r2
  40a230:	f7fe fe8e 	bl	408f50 <__retarget_lock_acquire_recursive>
  40a234:	4b29      	ldr	r3, [pc, #164]	; (40a2dc <__register_exitproc+0xbc>)
  40a236:	681c      	ldr	r4, [r3, #0]
  40a238:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40a23c:	2b00      	cmp	r3, #0
  40a23e:	d03e      	beq.n	40a2be <__register_exitproc+0x9e>
  40a240:	685a      	ldr	r2, [r3, #4]
  40a242:	2a1f      	cmp	r2, #31
  40a244:	dc1c      	bgt.n	40a280 <__register_exitproc+0x60>
  40a246:	f102 0e01 	add.w	lr, r2, #1
  40a24a:	b176      	cbz	r6, 40a26a <__register_exitproc+0x4a>
  40a24c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40a250:	2401      	movs	r4, #1
  40a252:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40a256:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40a25a:	4094      	lsls	r4, r2
  40a25c:	4320      	orrs	r0, r4
  40a25e:	2e02      	cmp	r6, #2
  40a260:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40a264:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40a268:	d023      	beq.n	40a2b2 <__register_exitproc+0x92>
  40a26a:	3202      	adds	r2, #2
  40a26c:	f8c3 e004 	str.w	lr, [r3, #4]
  40a270:	6828      	ldr	r0, [r5, #0]
  40a272:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40a276:	f7fe fe6d 	bl	408f54 <__retarget_lock_release_recursive>
  40a27a:	2000      	movs	r0, #0
  40a27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a280:	4b17      	ldr	r3, [pc, #92]	; (40a2e0 <__register_exitproc+0xc0>)
  40a282:	b30b      	cbz	r3, 40a2c8 <__register_exitproc+0xa8>
  40a284:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40a288:	f3af 8000 	nop.w
  40a28c:	4603      	mov	r3, r0
  40a28e:	b1d8      	cbz	r0, 40a2c8 <__register_exitproc+0xa8>
  40a290:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40a294:	6002      	str	r2, [r0, #0]
  40a296:	2100      	movs	r1, #0
  40a298:	6041      	str	r1, [r0, #4]
  40a29a:	460a      	mov	r2, r1
  40a29c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40a2a0:	f04f 0e01 	mov.w	lr, #1
  40a2a4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40a2a8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40a2ac:	2e00      	cmp	r6, #0
  40a2ae:	d0dc      	beq.n	40a26a <__register_exitproc+0x4a>
  40a2b0:	e7cc      	b.n	40a24c <__register_exitproc+0x2c>
  40a2b2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40a2b6:	430c      	orrs	r4, r1
  40a2b8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40a2bc:	e7d5      	b.n	40a26a <__register_exitproc+0x4a>
  40a2be:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40a2c2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40a2c6:	e7bb      	b.n	40a240 <__register_exitproc+0x20>
  40a2c8:	6828      	ldr	r0, [r5, #0]
  40a2ca:	f7fe fe43 	bl	408f54 <__retarget_lock_release_recursive>
  40a2ce:	f04f 30ff 	mov.w	r0, #4294967295
  40a2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a2d6:	bf00      	nop
  40a2d8:	200008b0 	.word	0x200008b0
  40a2dc:	0040afac 	.word	0x0040afac
  40a2e0:	00000000 	.word	0x00000000

0040a2e4 <_calloc_r>:
  40a2e4:	b510      	push	{r4, lr}
  40a2e6:	fb02 f101 	mul.w	r1, r2, r1
  40a2ea:	f7fe fe35 	bl	408f58 <_malloc_r>
  40a2ee:	4604      	mov	r4, r0
  40a2f0:	b1d8      	cbz	r0, 40a32a <_calloc_r+0x46>
  40a2f2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a2f6:	f022 0203 	bic.w	r2, r2, #3
  40a2fa:	3a04      	subs	r2, #4
  40a2fc:	2a24      	cmp	r2, #36	; 0x24
  40a2fe:	d818      	bhi.n	40a332 <_calloc_r+0x4e>
  40a300:	2a13      	cmp	r2, #19
  40a302:	d914      	bls.n	40a32e <_calloc_r+0x4a>
  40a304:	2300      	movs	r3, #0
  40a306:	2a1b      	cmp	r2, #27
  40a308:	6003      	str	r3, [r0, #0]
  40a30a:	6043      	str	r3, [r0, #4]
  40a30c:	d916      	bls.n	40a33c <_calloc_r+0x58>
  40a30e:	2a24      	cmp	r2, #36	; 0x24
  40a310:	6083      	str	r3, [r0, #8]
  40a312:	60c3      	str	r3, [r0, #12]
  40a314:	bf11      	iteee	ne
  40a316:	f100 0210 	addne.w	r2, r0, #16
  40a31a:	6103      	streq	r3, [r0, #16]
  40a31c:	6143      	streq	r3, [r0, #20]
  40a31e:	f100 0218 	addeq.w	r2, r0, #24
  40a322:	2300      	movs	r3, #0
  40a324:	6013      	str	r3, [r2, #0]
  40a326:	6053      	str	r3, [r2, #4]
  40a328:	6093      	str	r3, [r2, #8]
  40a32a:	4620      	mov	r0, r4
  40a32c:	bd10      	pop	{r4, pc}
  40a32e:	4602      	mov	r2, r0
  40a330:	e7f7      	b.n	40a322 <_calloc_r+0x3e>
  40a332:	2100      	movs	r1, #0
  40a334:	f7fb fff2 	bl	40631c <memset>
  40a338:	4620      	mov	r0, r4
  40a33a:	bd10      	pop	{r4, pc}
  40a33c:	f100 0208 	add.w	r2, r0, #8
  40a340:	e7ef      	b.n	40a322 <_calloc_r+0x3e>
  40a342:	bf00      	nop

0040a344 <__gedf2>:
  40a344:	f04f 3cff 	mov.w	ip, #4294967295
  40a348:	e006      	b.n	40a358 <__cmpdf2+0x4>
  40a34a:	bf00      	nop

0040a34c <__ledf2>:
  40a34c:	f04f 0c01 	mov.w	ip, #1
  40a350:	e002      	b.n	40a358 <__cmpdf2+0x4>
  40a352:	bf00      	nop

0040a354 <__cmpdf2>:
  40a354:	f04f 0c01 	mov.w	ip, #1
  40a358:	f84d cd04 	str.w	ip, [sp, #-4]!
  40a35c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a360:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a364:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a368:	bf18      	it	ne
  40a36a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40a36e:	d01b      	beq.n	40a3a8 <__cmpdf2+0x54>
  40a370:	b001      	add	sp, #4
  40a372:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40a376:	bf0c      	ite	eq
  40a378:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40a37c:	ea91 0f03 	teqne	r1, r3
  40a380:	bf02      	ittt	eq
  40a382:	ea90 0f02 	teqeq	r0, r2
  40a386:	2000      	moveq	r0, #0
  40a388:	4770      	bxeq	lr
  40a38a:	f110 0f00 	cmn.w	r0, #0
  40a38e:	ea91 0f03 	teq	r1, r3
  40a392:	bf58      	it	pl
  40a394:	4299      	cmppl	r1, r3
  40a396:	bf08      	it	eq
  40a398:	4290      	cmpeq	r0, r2
  40a39a:	bf2c      	ite	cs
  40a39c:	17d8      	asrcs	r0, r3, #31
  40a39e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40a3a2:	f040 0001 	orr.w	r0, r0, #1
  40a3a6:	4770      	bx	lr
  40a3a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a3ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a3b0:	d102      	bne.n	40a3b8 <__cmpdf2+0x64>
  40a3b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a3b6:	d107      	bne.n	40a3c8 <__cmpdf2+0x74>
  40a3b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a3bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a3c0:	d1d6      	bne.n	40a370 <__cmpdf2+0x1c>
  40a3c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a3c6:	d0d3      	beq.n	40a370 <__cmpdf2+0x1c>
  40a3c8:	f85d 0b04 	ldr.w	r0, [sp], #4
  40a3cc:	4770      	bx	lr
  40a3ce:	bf00      	nop

0040a3d0 <__aeabi_cdrcmple>:
  40a3d0:	4684      	mov	ip, r0
  40a3d2:	4610      	mov	r0, r2
  40a3d4:	4662      	mov	r2, ip
  40a3d6:	468c      	mov	ip, r1
  40a3d8:	4619      	mov	r1, r3
  40a3da:	4663      	mov	r3, ip
  40a3dc:	e000      	b.n	40a3e0 <__aeabi_cdcmpeq>
  40a3de:	bf00      	nop

0040a3e0 <__aeabi_cdcmpeq>:
  40a3e0:	b501      	push	{r0, lr}
  40a3e2:	f7ff ffb7 	bl	40a354 <__cmpdf2>
  40a3e6:	2800      	cmp	r0, #0
  40a3e8:	bf48      	it	mi
  40a3ea:	f110 0f00 	cmnmi.w	r0, #0
  40a3ee:	bd01      	pop	{r0, pc}

0040a3f0 <__aeabi_dcmpeq>:
  40a3f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a3f4:	f7ff fff4 	bl	40a3e0 <__aeabi_cdcmpeq>
  40a3f8:	bf0c      	ite	eq
  40a3fa:	2001      	moveq	r0, #1
  40a3fc:	2000      	movne	r0, #0
  40a3fe:	f85d fb08 	ldr.w	pc, [sp], #8
  40a402:	bf00      	nop

0040a404 <__aeabi_dcmplt>:
  40a404:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a408:	f7ff ffea 	bl	40a3e0 <__aeabi_cdcmpeq>
  40a40c:	bf34      	ite	cc
  40a40e:	2001      	movcc	r0, #1
  40a410:	2000      	movcs	r0, #0
  40a412:	f85d fb08 	ldr.w	pc, [sp], #8
  40a416:	bf00      	nop

0040a418 <__aeabi_dcmple>:
  40a418:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a41c:	f7ff ffe0 	bl	40a3e0 <__aeabi_cdcmpeq>
  40a420:	bf94      	ite	ls
  40a422:	2001      	movls	r0, #1
  40a424:	2000      	movhi	r0, #0
  40a426:	f85d fb08 	ldr.w	pc, [sp], #8
  40a42a:	bf00      	nop

0040a42c <__aeabi_dcmpge>:
  40a42c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a430:	f7ff ffce 	bl	40a3d0 <__aeabi_cdrcmple>
  40a434:	bf94      	ite	ls
  40a436:	2001      	movls	r0, #1
  40a438:	2000      	movhi	r0, #0
  40a43a:	f85d fb08 	ldr.w	pc, [sp], #8
  40a43e:	bf00      	nop

0040a440 <__aeabi_dcmpgt>:
  40a440:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a444:	f7ff ffc4 	bl	40a3d0 <__aeabi_cdrcmple>
  40a448:	bf34      	ite	cc
  40a44a:	2001      	movcc	r0, #1
  40a44c:	2000      	movcs	r0, #0
  40a44e:	f85d fb08 	ldr.w	pc, [sp], #8
  40a452:	bf00      	nop

0040a454 <__aeabi_dcmpun>:
  40a454:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a458:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a45c:	d102      	bne.n	40a464 <__aeabi_dcmpun+0x10>
  40a45e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a462:	d10a      	bne.n	40a47a <__aeabi_dcmpun+0x26>
  40a464:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a468:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a46c:	d102      	bne.n	40a474 <__aeabi_dcmpun+0x20>
  40a46e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a472:	d102      	bne.n	40a47a <__aeabi_dcmpun+0x26>
  40a474:	f04f 0000 	mov.w	r0, #0
  40a478:	4770      	bx	lr
  40a47a:	f04f 0001 	mov.w	r0, #1
  40a47e:	4770      	bx	lr

0040a480 <__aeabi_d2iz>:
  40a480:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a484:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40a488:	d215      	bcs.n	40a4b6 <__aeabi_d2iz+0x36>
  40a48a:	d511      	bpl.n	40a4b0 <__aeabi_d2iz+0x30>
  40a48c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40a490:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40a494:	d912      	bls.n	40a4bc <__aeabi_d2iz+0x3c>
  40a496:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a49a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a49e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40a4a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a4a6:	fa23 f002 	lsr.w	r0, r3, r2
  40a4aa:	bf18      	it	ne
  40a4ac:	4240      	negne	r0, r0
  40a4ae:	4770      	bx	lr
  40a4b0:	f04f 0000 	mov.w	r0, #0
  40a4b4:	4770      	bx	lr
  40a4b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40a4ba:	d105      	bne.n	40a4c8 <__aeabi_d2iz+0x48>
  40a4bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40a4c0:	bf08      	it	eq
  40a4c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40a4c6:	4770      	bx	lr
  40a4c8:	f04f 0000 	mov.w	r0, #0
  40a4cc:	4770      	bx	lr
  40a4ce:	bf00      	nop
  40a4d0:	0040a564 	.word	0x0040a564
  40a4d4:	0040a56c 	.word	0x0040a56c
  40a4d8:	0040a578 	.word	0x0040a578
  40a4dc:	0040a580 	.word	0x0040a580
  40a4e0:	0040a588 	.word	0x0040a588
  40a4e4:	0040a58c 	.word	0x0040a58c
  40a4e8:	0040a594 	.word	0x0040a594
  40a4ec:	0040a59c 	.word	0x0040a59c
  40a4f0:	0040a5a4 	.word	0x0040a5a4
  40a4f4:	0040a5b0 	.word	0x0040a5b0
  40a4f8:	0040a5b8 	.word	0x0040a5b8
  40a4fc:	0040a5c4 	.word	0x0040a5c4
  40a500:	63657053 	.word	0x63657053
  40a504:	20796669 	.word	0x20796669
  40a508:	656c6966 	.word	0x656c6966
  40a50c:	00000000 	.word	0x00000000
  40a510:	25207325 	.word	0x25207325
  40a514:	25202c64 	.word	0x25202c64
  40a518:	30252064 	.word	0x30252064
  40a51c:	253a6432 	.word	0x253a6432
  40a520:	3a643230 	.word	0x3a643230
  40a524:	64323025 	.word	0x64323025
  40a528:	00000000 	.word	0x00000000
  40a52c:	20207325 	.word	0x20207325
  40a530:	20202020 	.word	0x20202020
  40a534:	2e322520 	.word	0x2e322520
  40a538:	4b206631 	.word	0x4b206631
  40a53c:	00000042 	.word	0x00000042
  40a540:	66206f4e 	.word	0x66206f4e
  40a544:	73656c69 	.word	0x73656c69
  40a548:	756f6620 	.word	0x756f6620
  40a54c:	0000646e 	.word	0x0000646e
  40a550:	00000033 	.word	0x00000033
  40a554:	696e694d 	.word	0x696e694d
  40a558:	0000534f 	.word	0x0000534f
  40a55c:	25767325 	.word	0x25767325
  40a560:	00000073 	.word	0x00000073
  40a564:	756e614a 	.word	0x756e614a
  40a568:	00797261 	.word	0x00797261
  40a56c:	72626546 	.word	0x72626546
  40a570:	79726175 	.word	0x79726175
  40a574:	00000000 	.word	0x00000000
  40a578:	6372614d 	.word	0x6372614d
  40a57c:	00000068 	.word	0x00000068
  40a580:	69727041 	.word	0x69727041
  40a584:	0000006c 	.word	0x0000006c
  40a588:	0079614d 	.word	0x0079614d
  40a58c:	656e754a 	.word	0x656e754a
  40a590:	00000000 	.word	0x00000000
  40a594:	796c754a 	.word	0x796c754a
  40a598:	00000000 	.word	0x00000000
  40a59c:	75677541 	.word	0x75677541
  40a5a0:	00007473 	.word	0x00007473
  40a5a4:	74706553 	.word	0x74706553
  40a5a8:	65626d65 	.word	0x65626d65
  40a5ac:	00000072 	.word	0x00000072
  40a5b0:	6f74634f 	.word	0x6f74634f
  40a5b4:	00726562 	.word	0x00726562
  40a5b8:	65766f4e 	.word	0x65766f4e
  40a5bc:	7265626d 	.word	0x7265626d
  40a5c0:	00000000 	.word	0x00000000
  40a5c4:	65636544 	.word	0x65636544
  40a5c8:	7265626d 	.word	0x7265626d
  40a5cc:	00000000 	.word	0x00000000

0040a5d0 <cmd_ptrs>:
  40a5d0:	004001a5 00400229 00400265 004002c9     ..@.).@.e.@...@.
  40a5e0:	636c6557 20656d6f 25206f74 73257673     Welcome to %sv%s
  40a5f0:	00000000 25207325 64252064 2520202c     ....%s %d %d,  %
  40a600:	72682064 64252073 6e696d20 00000073     d hrs %d mins...
  40a610:	752d6f6e 00726573 25407325 73253a73     no-user.%s@%s:%s
  40a620:	00207325 00000024 0000007e 5d5d5b5b     %s .$...~...[[]]
  40a630:	00000000 6d6d6f43 20646e61 20746f6e     ....Command not 
  40a640:	6f636572 7a696e67 00006465 6c707041     recognized..Appl
  40a650:	74616369 206e6f69 74207369 6c206f6f     ication is too l
  40a660:	65677261 00000000 00000d0a 006e614a     arge........Jan.
  40a670:	00626546 0072614d 00727041 006e754a     Feb.Mar.Apr.Jun.
  40a680:	006c754a 00677541 00706553 0074634f     Jul.Aug.Sep.Oct.
  40a690:	00766f4e 00636544 0000736c 00746163     Nov.Dec.ls..cat.
  40a6a0:	65746164 00000000 69737973 006f666e     date....sysinfo.
  40a6b0:	74736e49 74637572 206e6f69 65636341     Instruction Acce
  40a6c0:	00007373 61746144 63634120 00737365     ss..Data Access.
  40a6d0:	206d654d 2072676d 55206e6f 6174736e     Mem mgr on Unsta
  40a6e0:	6e696b63 00000067 206d654d 2072676d     cking...Mem mgr 
  40a6f0:	53206e6f 6b636174 00676e69 206d654d     on Stacking.Mem 
  40a700:	2072676d 20524146 696c6156 41462064     mgr FAR Valid FA
  40a710:	67655220 65747369 61562072 0064696c      Register Valid.
  40a720:	74736e49 74637572 206e6f69 00737542     Instruction Bus.
  40a730:	63657250 20657369 61746144 73754220     Precise Data Bus
  40a740:	00000000 72706d49 73696365 61442065     ....Imprecise Da
  40a750:	42206174 00007375 20737542 6c756146     ta Bus..Bus Faul
  40a760:	6e4f2074 736e5520 6b636174 00676e69     t On Unstacking.
  40a770:	20737542 6c756146 6e4f2074 61745320     Bus Fault On Sta
  40a780:	6e696b63 00000067 20737542 6c756146     cking...Bus Faul
  40a790:	52412074 6c615620 00006469 65646e55     t AR Valid..Unde
  40a7a0:	656e6966 6e492064 75727473 6f697463     fined Instructio
  40a7b0:	0000006e 61766e49 2064696c 74617453     n...Invalid Stat
  40a7c0:	00000065 766e4920 64696c61 20435020     e... Invalid PC 
  40a7d0:	64616f4c 00000000 43206f4e 6f72706f     Load....No Copro
  40a7e0:	73736563 0000726f 6c616e55 656e6769     cessor..Unaligne
  40a7f0:	63412064 73736563 00000000 69766944     d Access....Divi
  40a800:	62206564 655a2079 00006f72 6e6f7257     de by Zero..Wron
  40a810:	72452067 20726f72 65646f43 00000000     g Error Code....
  40a820:	65646f43 20642520 29732528 00000000     Code %d (%s)....
  40a830:	656c6966 6d616e20 6f742065 616c206f     file name too la
  40a840:	00656772 00003a30 6c6c756e 00000000     rge.0:..null....
  40a850:	00000000 0000000d 00000000 0000000e     ................
  40a860:	00000007 000007c7 72617453 676e6974     ........Starting
  40a870:	73694420 79616c70 00000000 72617453      Display....Star
  40a880:	676e6974 72655320 426c6169 00000000     ting SerialB....
  40a890:	72617453 676e6974 67694c20 53207468     Starting Light S
  40a8a0:	6f736e65 00000072 72617453 676e6974     ensor...Starting
  40a8b0:	6d655420 65532070 726f736e 00000000      Temp Sensor....
  40a8c0:	72617453 676e6974 6f6c4320 00006b63     Starting Clock..
  40a8d0:	72617453 676e6974 6e6f4e20 6c6f762d     Starting Non-vol
  40a8e0:	6c697461 654d2065 79726f6d 00000000     atile Memory....
  40a8f0:	66205346 656c6961 6f742064 756f6d20     FS failed to mou
  40a900:	0000746e 74696e49 696c6169 676e697a     nt..Initializing
  40a910:	75614620 0073746c 74696e49 696c6169      Faults.Initiali
  40a920:	676e697a 73795320 6c6c6163 00000073     zing Syscalls...
  40a930:	74696e49 696c6169 676e697a 616f4c20     Initializing Loa
  40a940:	00726564 74696e49 696c6169 676e697a     der.Initializing
  40a950:	68635320 6c756465 00007265 5320283a      Scheduler..:( S
  40a960:	74656d6f 676e6968 6e657720 72772074     omething went wr
  40a970:	2e676e6f 00002e2e 6f6c6c41 69746163     ong.....Allocati
  40a980:	6f206e6f 6e75206e 74696e69 61747320     on on uninit sta
  40a990:	00006b63 64616552 20676e69 6e696e75     ck..Reading unin
  40a9a0:	73207469 6b636174 00000000              it stack....

0040a9ac <mmc_trans_multipliers>:
  40a9ac:	00000000 0000000a 0000000c 0000000d     ................
  40a9bc:	0000000f 00000014 0000001a 0000001e     ................
  40a9cc:	00000023 00000028 0000002d 00000034     #...(...-...4...
  40a9dc:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040a9ec <sd_mmc_trans_units>:
  40a9ec:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0040aa08 <sd_trans_multipliers>:
  40aa08:	00000000 0000000a 0000000c 0000000d     ................
  40aa18:	0000000f 00000014 00000019 0000001e     ................
  40aa28:	00000023 00000028 0000002d 00000032     #...(...-...2...
  40aa38:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040aa48 <LfnOfs>:
  40aa48:	07050301 12100e09 1c181614 0000001e     ................

0040aa58 <excvt.4558>:
  40aa58:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
  40aa68:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
  40aa78:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
  40aa88:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  40aa98:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
  40aaa8:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  40aab8:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
  40aac8:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
  40aad8:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  40aae8:	00005d5b                                []..

0040aaec <Tbl>:
  40aaec:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  40aafc:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  40ab0c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  40ab1c:	00d600ff 00f800dc 00d800a3 019200d7     ................
  40ab2c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  40ab3c:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
  40ab4c:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
  40ab5c:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
  40ab6c:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
  40ab7c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
  40ab8c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
  40ab9c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
  40abac:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
  40abbc:	00da00de 00d900db 00dd00fd 00b400af     ................
  40abcc:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
  40abdc:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0040abec <tbl_lower.4308>:
  40abec:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
  40abfc:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
  40ac0c:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
  40ac1c:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
  40ac2c:	00e100e0 00e300e2 00e500e4 00e700e6     ................
  40ac3c:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
  40ac4c:	00f100f0 00f300f2 00f500f4 00f800f6     ................
  40ac5c:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
  40ac6c:	01050103 01090107 010d010b 0111010f     ................
  40ac7c:	01150113 01190117 011d011b 0121011f     ..............!.
  40ac8c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
  40ac9c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
  40acac:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
  40acbc:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
  40accc:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
  40acdc:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
  40acec:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
  40acfc:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
  40ad0c:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
  40ad1c:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
  40ad2c:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
  40ad3c:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
  40ad4c:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
  40ad5c:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
  40ad6c:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
  40ad7c:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
  40ad8c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
  40ad9c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
  40adac:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
  40adbc:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0040adcc <tbl_upper.4309>:
  40adcc:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
  40addc:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
  40adec:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
  40adfc:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
  40ae0c:	00c100c0 00c300c2 00c500c4 00c700c6     ................
  40ae1c:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
  40ae2c:	00d100d0 00d300d2 00d500d4 00d800d6     ................
  40ae3c:	00da00d9 00dc00db 00de00dd 01000178     ............x...
  40ae4c:	01040102 01080106 010c010a 0110010e     ................
  40ae5c:	01140112 01180116 011c011a 0120011e     .............. .
  40ae6c:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
  40ae7c:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
  40ae8c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
  40ae9c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
  40aeac:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
  40aebc:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
  40aecc:	03940393 03960395 03980397 039a0399     ................
  40aedc:	039c039b 039e039d 03a0039f 03a303a1     ................
  40aeec:	03a503a4 03a703a6 03a903a8 041003aa     ................
  40aefc:	04120411 04140413 04160415 04180417     ................
  40af0c:	041a0419 041c041b 041e041d 0420041f     .............. .
  40af1c:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
  40af2c:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
  40af3c:	04030402 04050404 04070406 04090408     ................
  40af4c:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
  40af5c:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
  40af6c:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
  40af7c:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
  40af8c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
  40af9c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...

0040afac <_global_impure_ptr>:
  40afac:	20000488 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  40afbc:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40afcc:	46454443 00000000 33323130 37363534     CDEF....01234567
  40afdc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40afec:	0000296c 00000030                       l)..0...

0040aff4 <blanks.7223>:
  40aff4:	20202020 20202020 20202020 20202020                     

0040b004 <zeroes.7224>:
  40b004:	30303030 30303030 30303030 30303030     0000000000000000
  40b014:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40b024:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  40b034:	00000000                                ....

0040b038 <__mprec_bigtens>:
  40b038:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40b048:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40b058:	7f73bf3c 75154fdd                       <.s..O.u

0040b060 <__mprec_tens>:
  40b060:	00000000 3ff00000 00000000 40240000     .......?......$@
  40b070:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40b080:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40b090:	00000000 412e8480 00000000 416312d0     .......A......cA
  40b0a0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40b0b0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40b0c0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40b0d0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40b0e0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40b0f0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40b100:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40b110:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40b120:	79d99db4 44ea7843                       ...yCx.D

0040b128 <p05.6055>:
  40b128:	00000005 00000019 0000007d              ........}...

0040b134 <_ctype_>:
  40b134:	20202000 20202020 28282020 20282828     .         ((((( 
  40b144:	20202020 20202020 20202020 20202020                     
  40b154:	10108820 10101010 10101010 10101010      ...............
  40b164:	04040410 04040404 10040404 10101010     ................
  40b174:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40b184:	01010101 01010101 01010101 10101010     ................
  40b194:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40b1a4:	02020202 02020202 02020202 10101010     ................
  40b1b4:	00000020 00000000 00000000 00000000      ...............
	...

0040b238 <_init>:
  40b238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b23a:	bf00      	nop
  40b23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b23e:	bc08      	pop	{r3}
  40b240:	469e      	mov	lr, r3
  40b242:	4770      	bx	lr

0040b244 <__init_array_start>:
  40b244:	00407cf9 	.word	0x00407cf9

0040b248 <__frame_dummy_init_array_entry>:
  40b248:	004000f1                                ..@.

0040b24c <_fini>:
  40b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b24e:	bf00      	nop
  40b250:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b252:	bc08      	pop	{r3}
  40b254:	469e      	mov	lr, r3
  40b256:	4770      	bx	lr

0040b258 <__fini_array_start>:
  40b258:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <cmd_names>:
2000000c:	a698 0040 a69c 0040 a6a0 0040 a6a8 0040     ..@...@...@...@.
2000001c:	a62c 0040                                   ,.@.

20000020 <day_to_month>:
20000020:	a66c 0040 a670 0040 a674 0040 a678 0040     l.@.p.@.t.@.x.@.
20000030:	a588 0040 a67c 0040 a680 0040 a684 0040     ..@.|.@...@...@.
20000040:	a688 0040 a68c 0040 a690 0040 a694 0040     ..@...@...@...@.

20000050 <null_proc>:
20000050:	a848 0040 0000 0000 0002 0000               H.@.........

2000005c <Font08px_123>:
2000005c:	1003 826c                                   ..l.

20000060 <Font08px_124>:
20000060:	fe01 0000                                   ....

20000064 <Font08px_125>:
20000064:	8203 106c                                   ..l.

20000068 <Font08px_126>:
20000068:	1005 1008 1020 0000                         .... ...

20000070 <Font08px_32>:
20000070:	0002 0000                                   ....

20000074 <Font08px_33>:
20000074:	be01 0000                                   ....

20000078 <Font08px_34>:
20000078:	0603 0600                                   ....

2000007c <Font08px_35>:
2000007c:	2805 28fe 28fe 0000                         .(.(.(..

20000084 <Font08px_36>:
20000084:	4805 fe54 2454 0000                         .HT.T$..

2000008c <Font08px_37>:
2000008c:	4605 1026 c4c8 0000                         .F&.....

20000094 <Font08px_38>:
20000094:	6c05 ac92 a040 0000                         .l..@...

2000009c <Font08px_39>:
2000009c:	0601 0000                                   ....

200000a0 <Font08px_40>:
200000a0:	3803 8244                                   .8D.

200000a4 <Font08px_41>:
200000a4:	8203 3844                                   ..D8

200000a8 <Font08px_42>:
200000a8:	2803 2810                                   .(.(

200000ac <Font08px_43>:
200000ac:	1003 1038                                   ..8.

200000b0 <Font08px_44>:
200000b0:	c001 0000                                   ....

200000b4 <Font08px_45>:
200000b4:	1003 1010                                   ....

200000b8 <Font08px_46>:
200000b8:	8001 0000                                   ....

200000bc <Font08px_47>:
200000bc:	c003 0638                                   ..8.

200000c0 <Font08px_58>:
200000c0:	4401 0000                                   .D..

200000c4 <Font08px_59>:
200000c4:	c401 0000                                   ....

200000c8 <Font08px_60>:
200000c8:	1004 4428 0082 0000                         ..(D....

200000d0 <Font08px_61>:
200000d0:	2804 2828 0028 0000                         .((((...

200000d8 <Font08px_62>:
200000d8:	8204 2844 0010 0000                         ..D(....

200000e0 <Font08px_63>:
200000e0:	0405 a202 0c12 0000                         ........

200000e8 <Font08px_64>:
200000e8:	3808 9244 aaaa 24ba 0018 0000               .8D....$....

200000f4 <Font08px_91>:
200000f4:	fe03 8282                                   ....

200000f8 <Font08px_92>:
200000f8:	0603 c038                                   ..8.

200000fc <Font08px_93>:
200000fc:	8203 fe82                                   ....

20000100 <Font08px_94>:
20000100:	0403 0402                                   ....

20000104 <Font08px_95>:
20000104:	8003 8080                                   ....

20000108 <Font08px_96>:
20000108:	0202 0004                                   ....

2000010c <Font08px_N0>:
2000010c:	7c05 92a2 7c8a 0000                         .|...|..

20000114 <Font08px_N1>:
20000114:	0005 fe84 0080 0000                         ........

2000011c <Font08px_N2>:
2000011c:	8405 a2c2 8c92 0000                         ........

20000124 <Font08px_N3>:
20000124:	4405 9282 6c92 0000                         .D...l..

2000012c <Font08px_N4>:
2000012c:	3005 2428 20fe 0000                         .0($. ..

20000134 <Font08px_N5>:
20000134:	5e05 8a8a 728a 0000                         .^...r..

2000013c <Font08px_N6>:
2000013c:	7c05 9292 6492 0000                         .|...d..

20000144 <Font08px_N7>:
20000144:	0205 f202 060a 0000                         ........

2000014c <Font08px_N8>:
2000014c:	6c05 9292 6c92 0000                         .l...l..

20000154 <Font08px_N9>:
20000154:	4c05 9292 7c92 0000                         .L...|..

2000015c <Font08px_UA>:
2000015c:	f805 1214 f814 0000                         ........

20000164 <Font08px_UB>:
20000164:	fe04 9292 006c 0000                         ....l...

2000016c <Font08px_UC>:
2000016c:	7c04 8282 0044 0000                         .|..D...

20000174 <Font08px_UD>:
20000174:	fe04 8282 007c 0000                         ....|...

2000017c <Font08px_UE>:
2000017c:	fe04 9292 0082 0000                         ........

20000184 <Font08px_UF>:
20000184:	fe04 1212 0002 0000                         ........

2000018c <Font08px_UG>:
2000018c:	7c05 9282 f492 0000                         .|......

20000194 <Font08px_UH>:
20000194:	fe04 1010 00fe 0000                         ........

2000019c <Font08px_UI>:
2000019c:	8203 82fe                                   ....

200001a0 <Font08px_UJ>:
200001a0:	4004 8080 007e 0000                         .@..~...

200001a8 <Font08px_UK>:
200001a8:	fe05 2810 8244 0000                         ...(D...

200001b0 <Font08px_UL>:
200001b0:	fe04 8080 0080 0000                         ........

200001b8 <Font08px_UM>:
200001b8:	fe05 0804 fe04 0000                         ........

200001c0 <Font08px_UN>:
200001c0:	fe05 1804 fe60 0000                         ....`...

200001c8 <Font08px_UO>:
200001c8:	7c04 8282 007c 0000                         .|..|...

200001d0 <Font08px_UP>:
200001d0:	fe04 1212 000c 0000                         ........

200001d8 <Font08px_UQ>:
200001d8:	7c05 a282 bc42 0000                         .|..B...

200001e0 <Font08px_UR>:
200001e0:	fe04 3212 00cc 0000                         ...2....

200001e8 <Font08px_US>:
200001e8:	4c04 9292 0064 0000                         .L..d...

200001f0 <Font08px_UT>:
200001f0:	0205 fe02 0202 0000                         ........

200001f8 <Font08px_UU>:
200001f8:	7e04 8080 007e 0000                         .~..~...

20000200 <Font08px_UV>:
20000200:	0e05 c030 0e30 0000                         ..0.0...

20000208 <Font08px_UW>:
20000208:	3e05 38c0 3ec0 0000                         .>.8.>..

20000210 <Font08px_UX>:
20000210:	c605 1028 c628 0000                         ..(.(...

20000218 <Font08px_UY>:
20000218:	0605 f008 0608 0000                         ........

20000220 <Font08px_UZ>:
20000220:	c205 92a2 868a 0000                         ........

20000228 <Font08px_la>:
20000228:	7004 8888 00f8 0000                         .p......

20000230 <Font08px_lb>:
20000230:	fe04 8888 0070 0000                         ....p...

20000238 <Font08px_lc>:
20000238:	7004 8888 0088 0000                         .p......

20000240 <Font08px_ld>:
20000240:	7004 8888 00fe 0000                         .p......

20000248 <Font08px_le>:
20000248:	7004 a8a8 0030 0000                         .p..0...

20000250 <Font08px_lf>:
20000250:	fc03 0212                                   ....

20000254 <Font08px_lg>:
20000254:	1004 a8a8 0078 0000                         ....x...

2000025c <Font08px_lh>:
2000025c:	fe04 0810 00f0 0000                         ........

20000264 <Font08px_li>:
20000264:	fa01 0000                                   ....

20000268 <Font08px_lj>:
20000268:	8002 007a                                   ..z.

2000026c <Font08px_lk>:
2000026c:	fe04 5020 0088 0000                         .. P....

20000274 <Font08px_ll>:
20000274:	fe01 0000                                   ....

20000278 <Font08px_lm>:
20000278:	f805 f008 f008 0000                         ........

20000280 <Font08px_ln>:
20000280:	f804 0810 00f0 0000                         ........

20000288 <Font08px_lo>:
20000288:	7004 8888 0070 0000                         .p..p...

20000290 <Font08px_lp>:
20000290:	f804 2828 0010 0000                         ..((....

20000298 <Font08px_lq>:
20000298:	1004 2828 00f8 0000                         ..((....

200002a0 <Font08px_lr>:
200002a0:	f803 0810                                   ....

200002a4 <Font08px_ls>:
200002a4:	9004 a8a8 0048 0000                         ....H...

200002ac <Font08px_lt>:
200002ac:	0803 887c                                   ..|.

200002b0 <Font08px_lu>:
200002b0:	7804 8080 00f8 0000                         .x......

200002b8 <Font08px_lv>:
200002b8:	1805 8060 1860 0000                         ..`.`...

200002c0 <Font08px_lw>:
200002c0:	3805 30c0 38c0 0000                         .8.0.8..

200002c8 <Font08px_lx>:
200002c8:	8805 2050 8850 0000                         ..P P...

200002d0 <Font08px_ly>:
200002d0:	1804 a0a0 0078 0000                         ....x...

200002d8 <Font08px_lz>:
200002d8:	c803 98a8                                   ....

200002dc <font_table>:
200002dc:	0070 2000 0074 2000 0078 2000 007c 2000     p.. t.. x.. |.. 
200002ec:	0084 2000 008c 2000 0094 2000 009c 2000     ... ... ... ... 
200002fc:	00a0 2000 00a4 2000 00a8 2000 00ac 2000     ... ... ... ... 
2000030c:	00b0 2000 00b4 2000 00b8 2000 00bc 2000     ... ... ... ... 
2000031c:	010c 2000 0114 2000 011c 2000 0124 2000     ... ... ... $.. 
2000032c:	012c 2000 0134 2000 013c 2000 0144 2000     ,.. 4.. <.. D.. 
2000033c:	014c 2000 0154 2000 00c0 2000 00c4 2000     L.. T.. ... ... 
2000034c:	00c8 2000 00d0 2000 00d8 2000 00e0 2000     ... ... ... ... 
2000035c:	00e8 2000 015c 2000 0164 2000 016c 2000     ... \.. d.. l.. 
2000036c:	0174 2000 017c 2000 0184 2000 018c 2000     t.. |.. ... ... 
2000037c:	0194 2000 019c 2000 01a0 2000 01a8 2000     ... ... ... ... 
2000038c:	01b0 2000 01b8 2000 01c0 2000 01c8 2000     ... ... ... ... 
2000039c:	01d0 2000 01d8 2000 01e0 2000 01e8 2000     ... ... ... ... 
200003ac:	01f0 2000 01f8 2000 0200 2000 0208 2000     ... ... ... ... 
200003bc:	0210 2000 0218 2000 0220 2000 00f4 2000     ... ...  .. ... 
200003cc:	00f8 2000 00fc 2000 0100 2000 0104 2000     ... ... ... ... 
200003dc:	0108 2000 0228 2000 0230 2000 0238 2000     ... (.. 0.. 8.. 
200003ec:	0240 2000 0248 2000 0250 2000 0254 2000     @.. H.. P.. T.. 
200003fc:	025c 2000 0264 2000 0268 2000 026c 2000     \.. d.. h.. l.. 
2000040c:	0274 2000 0278 2000 0280 2000 0288 2000     t.. x.. ... ... 
2000041c:	0290 2000 0298 2000 02a0 2000 02a4 2000     ... ... ... ... 
2000042c:	02ac 2000 02b0 2000 02b8 2000 02c0 2000     ... ... ... ... 
2000043c:	02c8 2000 02d0 2000 02d8 2000 005c 2000     ... ... ... \.. 
2000044c:	0060 2000 0064 2000 0068 2000               `.. d.. h.. 

20000458 <sd_mmc_cards>:
	...
20000460:	004c 0000 0000 0000 0000 0000 0000 0000     L...............
	...

2000047c <sd_mmc_spi_devices>:
2000047c:	0001 0000                                   ....

20000480 <SystemCoreClock>:
20000480:	0900 003d                                   ..=.

20000484 <_impure_ptr>:
20000484:	0488 2000                                   ... 

20000488 <impure_data>:
20000488:	0000 0000 0774 2000 07dc 2000 0844 2000     ....t.. ... D.. 
	...
20000530:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000540:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200008b0 <__atexit_recursive_mutex>:
200008b0:	6234 2000                                   4b. 

200008b4 <__global_locale>:
200008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000934:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000954:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000974:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000994:	a205 0040 94b9 0040 0000 0000 b134 0040     ..@...@.....4.@.
200009a4:	b030 0040 a82c 0040 a82c 0040 a82c 0040     0.@.,.@.,.@.,.@.
200009b4:	a82c 0040 a82c 0040 a82c 0040 a82c 0040     ,.@.,.@.,.@.,.@.
200009c4:	a82c 0040 a82c 0040 ffff ffff ffff ffff     ,.@.,.@.........
200009d4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200009fc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20000a20 <__malloc_av_>:
	...
20000a28:	0a20 2000 0a20 2000 0a28 2000 0a28 2000      ..  .. (.. (.. 
20000a38:	0a30 2000 0a30 2000 0a38 2000 0a38 2000     0.. 0.. 8.. 8.. 
20000a48:	0a40 2000 0a40 2000 0a48 2000 0a48 2000     @.. @.. H.. H.. 
20000a58:	0a50 2000 0a50 2000 0a58 2000 0a58 2000     P.. P.. X.. X.. 
20000a68:	0a60 2000 0a60 2000 0a68 2000 0a68 2000     `.. `.. h.. h.. 
20000a78:	0a70 2000 0a70 2000 0a78 2000 0a78 2000     p.. p.. x.. x.. 
20000a88:	0a80 2000 0a80 2000 0a88 2000 0a88 2000     ... ... ... ... 
20000a98:	0a90 2000 0a90 2000 0a98 2000 0a98 2000     ... ... ... ... 
20000aa8:	0aa0 2000 0aa0 2000 0aa8 2000 0aa8 2000     ... ... ... ... 
20000ab8:	0ab0 2000 0ab0 2000 0ab8 2000 0ab8 2000     ... ... ... ... 
20000ac8:	0ac0 2000 0ac0 2000 0ac8 2000 0ac8 2000     ... ... ... ... 
20000ad8:	0ad0 2000 0ad0 2000 0ad8 2000 0ad8 2000     ... ... ... ... 
20000ae8:	0ae0 2000 0ae0 2000 0ae8 2000 0ae8 2000     ... ... ... ... 
20000af8:	0af0 2000 0af0 2000 0af8 2000 0af8 2000     ... ... ... ... 
20000b08:	0b00 2000 0b00 2000 0b08 2000 0b08 2000     ... ... ... ... 
20000b18:	0b10 2000 0b10 2000 0b18 2000 0b18 2000     ... ... ... ... 
20000b28:	0b20 2000 0b20 2000 0b28 2000 0b28 2000      ..  .. (.. (.. 
20000b38:	0b30 2000 0b30 2000 0b38 2000 0b38 2000     0.. 0.. 8.. 8.. 
20000b48:	0b40 2000 0b40 2000 0b48 2000 0b48 2000     @.. @.. H.. H.. 
20000b58:	0b50 2000 0b50 2000 0b58 2000 0b58 2000     P.. P.. X.. X.. 
20000b68:	0b60 2000 0b60 2000 0b68 2000 0b68 2000     `.. `.. h.. h.. 
20000b78:	0b70 2000 0b70 2000 0b78 2000 0b78 2000     p.. p.. x.. x.. 
20000b88:	0b80 2000 0b80 2000 0b88 2000 0b88 2000     ... ... ... ... 
20000b98:	0b90 2000 0b90 2000 0b98 2000 0b98 2000     ... ... ... ... 
20000ba8:	0ba0 2000 0ba0 2000 0ba8 2000 0ba8 2000     ... ... ... ... 
20000bb8:	0bb0 2000 0bb0 2000 0bb8 2000 0bb8 2000     ... ... ... ... 
20000bc8:	0bc0 2000 0bc0 2000 0bc8 2000 0bc8 2000     ... ... ... ... 
20000bd8:	0bd0 2000 0bd0 2000 0bd8 2000 0bd8 2000     ... ... ... ... 
20000be8:	0be0 2000 0be0 2000 0be8 2000 0be8 2000     ... ... ... ... 
20000bf8:	0bf0 2000 0bf0 2000 0bf8 2000 0bf8 2000     ... ... ... ... 
20000c08:	0c00 2000 0c00 2000 0c08 2000 0c08 2000     ... ... ... ... 
20000c18:	0c10 2000 0c10 2000 0c18 2000 0c18 2000     ... ... ... ... 
20000c28:	0c20 2000 0c20 2000 0c28 2000 0c28 2000      ..  .. (.. (.. 
20000c38:	0c30 2000 0c30 2000 0c38 2000 0c38 2000     0.. 0.. 8.. 8.. 
20000c48:	0c40 2000 0c40 2000 0c48 2000 0c48 2000     @.. @.. H.. H.. 
20000c58:	0c50 2000 0c50 2000 0c58 2000 0c58 2000     P.. P.. X.. X.. 
20000c68:	0c60 2000 0c60 2000 0c68 2000 0c68 2000     `.. `.. h.. h.. 
20000c78:	0c70 2000 0c70 2000 0c78 2000 0c78 2000     p.. p.. x.. x.. 
20000c88:	0c80 2000 0c80 2000 0c88 2000 0c88 2000     ... ... ... ... 
20000c98:	0c90 2000 0c90 2000 0c98 2000 0c98 2000     ... ... ... ... 
20000ca8:	0ca0 2000 0ca0 2000 0ca8 2000 0ca8 2000     ... ... ... ... 
20000cb8:	0cb0 2000 0cb0 2000 0cb8 2000 0cb8 2000     ... ... ... ... 
20000cc8:	0cc0 2000 0cc0 2000 0cc8 2000 0cc8 2000     ... ... ... ... 
20000cd8:	0cd0 2000 0cd0 2000 0cd8 2000 0cd8 2000     ... ... ... ... 
20000ce8:	0ce0 2000 0ce0 2000 0ce8 2000 0ce8 2000     ... ... ... ... 
20000cf8:	0cf0 2000 0cf0 2000 0cf8 2000 0cf8 2000     ... ... ... ... 
20000d08:	0d00 2000 0d00 2000 0d08 2000 0d08 2000     ... ... ... ... 
20000d18:	0d10 2000 0d10 2000 0d18 2000 0d18 2000     ... ... ... ... 
20000d28:	0d20 2000 0d20 2000 0d28 2000 0d28 2000      ..  .. (.. (.. 
20000d38:	0d30 2000 0d30 2000 0d38 2000 0d38 2000     0.. 0.. 8.. 8.. 
20000d48:	0d40 2000 0d40 2000 0d48 2000 0d48 2000     @.. @.. H.. H.. 
20000d58:	0d50 2000 0d50 2000 0d58 2000 0d58 2000     P.. P.. X.. X.. 
20000d68:	0d60 2000 0d60 2000 0d68 2000 0d68 2000     `.. `.. h.. h.. 
20000d78:	0d70 2000 0d70 2000 0d78 2000 0d78 2000     p.. p.. x.. x.. 
20000d88:	0d80 2000 0d80 2000 0d88 2000 0d88 2000     ... ... ... ... 
20000d98:	0d90 2000 0d90 2000 0d98 2000 0d98 2000     ... ... ... ... 
20000da8:	0da0 2000 0da0 2000 0da8 2000 0da8 2000     ... ... ... ... 
20000db8:	0db0 2000 0db0 2000 0db8 2000 0db8 2000     ... ... ... ... 
20000dc8:	0dc0 2000 0dc0 2000 0dc8 2000 0dc8 2000     ... ... ... ... 
20000dd8:	0dd0 2000 0dd0 2000 0dd8 2000 0dd8 2000     ... ... ... ... 
20000de8:	0de0 2000 0de0 2000 0de8 2000 0de8 2000     ... ... ... ... 
20000df8:	0df0 2000 0df0 2000 0df8 2000 0df8 2000     ... ... ... ... 
20000e08:	0e00 2000 0e00 2000 0e08 2000 0e08 2000     ... ... ... ... 
20000e18:	0e10 2000 0e10 2000 0e18 2000 0e18 2000     ... ... ... ... 

20000e28 <__malloc_sbrk_base>:
20000e28:	ffff ffff                                   ....

20000e2c <__malloc_trim_threshold>:
20000e2c:	0000 0002                                   ....
